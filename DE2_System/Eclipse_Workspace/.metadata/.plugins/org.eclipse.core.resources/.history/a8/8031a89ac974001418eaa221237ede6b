/*************************************************************************
* file: uart_interrupts.c
* Name: Matthew Handley
* 		David Keltgen
* Date: 2014-11-25
*
*************************************************************************/

#include "uart_interrupt.h"

/* A variable to hold the value of the uart rxdata register. */
volatile int rxdata;

static void handle_uart_interrupts(void* context, alt_u32 id)
{
	char c;

	/* read rxdata register for incoming byte */
	c = IORD_ALTERA_AVALON_UART_RXDATA(UART_RS232_BASE);

	printf("%c", c);

	/* if we are not about to write to the next location that needs to be read from (buffer not full) */
	if( !ring_buffer_full() )
	{
		/* write incoming byte to the buffer and increment wr_idx */
		ring_buffer[ring_buffer_wr_idx++] = c;

		/* wrap wr_idx to within the bounds of the buffer size */
		ring_buffer_wr_idx = ring_buffer_wr_idx % BUFFER_SIZE;
	}
	else
	{
		/* buffer is full, so the incoming byte is discarded */
	}

	/* Reset the UART's status register. */
	IOWR_ALTERA_AVALON_UART_STATUS(UART_RS232_BASE, 0);
	IOWR_ALTERA_AVALON_UART_STATUS(UART_RS232_BASE, 0);
}

static void init_uart()
{
	void* rxdata_ptr = (void*) &rxdata;

	/* Enable UART RRDY interrupt */
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_RS232_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);

	/* Reset the UART's status register. */
	IOWR_ALTERA_AVALON_UART_STATUS(UART_RS232_BASE, 0);

	/* Register the interrupt handler. */
	alt_irq_register( UART_RS232_IRQ, rxdata_ptr, handle_uart_interrupts);

	/* reset the ring buffer */
	ring_buffer_wr_idx = 1;
	ring_buffer_rd_idx = 0;
}

static void clear_led()
{
	/* turn LEDs off */
    *LEDs = 0x00000000;
}



void WriteLCD( char* string1, char* string2)
{
	FILE *lcd;
	lcd = fopen("/dev/lcd_display", "w");

	/* Write strings to the LCD. */
	if (lcd != NULL )
	{
		fprintf(lcd, "\n%s\n", string1);
		fprintf(lcd, "%s\n",string2);
	}
	else
	{
		printf("Could not open LCD file!\n");
	}

	fclose( lcd );
}

    
/*******************************************************************************
 * int main()                                                                  *
 ******************************************************************************/

int uart_interrupts(void)
{ 
	char c;

	/* turn LEDs off */
	clear_led();
    
    /* Initialize the UART. */
    init_uart();

    /* Initialize GPS state machine */
    gps_state_machine_reset();

    while( 1 ) 
    {
        /* ensure buffer isn't empty */
        if(!ring_buffer_empty())
        {
        	/*increment and check if the index is past buffer size */
        	ring_buffer_rd_idx++;
        	ring_buffer_rd_idx = ring_buffer_rd_idx % BUFFER_SIZE;

        	/* pull data off of buffer */
        	c = ring_buffer[ring_buffer_rd_idx];
        	//printf("%c", c);
        	gps_state_machine(c);

        }
    }

    return 0;
}
