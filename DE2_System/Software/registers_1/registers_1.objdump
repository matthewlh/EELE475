
registers_1.elf:     file format elf32-littlenios2
registers_1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000f4fc memsz 0x0000f4fc flags r-x
    LOAD off    0x0001051c vaddr 0x0080f51c paddr 0x00811164 align 2**12
         filesz 0x00001c48 memsz 0x00001c48 flags rw-
    LOAD off    0x00012dac vaddr 0x00812dac paddr 0x00812dac align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ebe8  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000780  0080ed9c  0080ed9c  0000fd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c48  0080f51c  00811164  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00812dac  00812dac  00012dac  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00012164  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  00012190  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001608  00000000  00000000  00012fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029b6f  00000000  00000000  000145b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008be8  00000000  00000000  0003e11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016608  00000000  00000000  00046d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001cac  00000000  00000000  0005d310  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025ba  00000000  00000000  0005efbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c989  00000000  00000000  00061576  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006df00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0006df40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071da1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00071da4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071dac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071dad  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00071dae  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00071db7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00071dc0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00071dc9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00071dd2  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004a9d3  00000000  00000000  00071e06  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080ed9c l    d  .rodata	00000000 .rodata
0080f51c l    d  .rwdata	00000000 .rwdata
00812dac l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00800948 l     F .text	00000058 std
00800a54 l     F .text	00000008 __fp_lock
00800a5c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080f51c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00802514 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00802760 l     F .text	00000058 __sprint_r
0080efae l     O .rodata	00000010 blanks.3452
0080ef9e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
008048c4 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00811130 l     O .rwdata	00000004 charset
0080efe0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0080f128 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00808fc0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080a0ec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080aa28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080aa88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ab8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080acb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ad90 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080aef0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080affc l     F .text	000000f8 alt_file_locked
0080b280 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0080b404 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081114c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080b6bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080fed8 l     O .rwdata	00001060 jtag_uart
00810f38 l     O .rwdata	00000120 lcd_display
00811058 l     O .rwdata	000000c4 uart_RS232
0080b7cc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ba0c l     F .text	00000228 altera_avalon_jtag_uart_irq
0080bc34 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00811150 l     O .rwdata	00000004 colstart
0080c2b0 l     F .text	000000b8 lcd_write_command
0080c368 l     F .text	000000d4 lcd_write_data
0080c43c l     F .text	000000d8 lcd_clear_screen
0080c514 l     F .text	00000214 lcd_repaint_screen
0080c728 l     F .text	000000e0 lcd_scroll_up
0080c808 l     F .text	000002e4 lcd_handle_escape
0080d028 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080d448 l     F .text	0000009c altera_avalon_uart_irq
0080d4e4 l     F .text	000000e0 altera_avalon_uart_rxirq
0080d5c4 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080d9b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080dbd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080de5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080e4f0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080f399 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080eb84 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080ed38 l     F .text	00000040 alt_sim_halt
00806e14 g     F .text	00000094 _mprec_log10
00806f00 g     F .text	00000088 __any_on
008065f8 g     F .text	00000070 _isatty_r
0080f100 g     O .rodata	00000028 __mprec_tinytens
0080af50 g     F .text	0000006c alt_main
0080229c g     F .text	000000a0 _puts_r
00812e08 g     O .bss	00000100 alt_irq
0080672c g     F .text	00000078 _lseek_r
00811164 g       *ABS*	00000000 __flash_rwdata_start
008060bc g     F .text	000000a0 __sflags
00809ae0 g     F .text	00000088 __eqdf2
00813098 g       *ABS*	00000000 __alt_heap_start
00802224 g     F .text	00000044 printf
008025a8 g     F .text	00000068 __sseek
008009b0 g     F .text	000000a4 __sinit
0080668c g     F .text	00000084 _setlocale_r
00800ab0 g     F .text	0000009c __sfmoreglue
0080afdc g     F .text	00000020 __malloc_unlock
00806928 g     F .text	000000e0 memmove
00800aa0 g     F .text	00000010 _cleanup
00806f88 g     F .text	000000bc _Balloc
00809bf0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080164c g     F .text	00000074 _fstat_r
00812dac g     O .bss	00000004 errno
00812dcc g     O .bss	00000004 alt_argv
0081911c g       *ABS*	00000000 _gp
0080e7e4 g     F .text	00000030 usleep
0080fd58 g     O .rwdata	00000180 alt_fd_list
0080df84 g     F .text	00000094 alt_find_dev
00806888 g     F .text	000000a0 memcpy
00800a94 g     F .text	0000000c _cleanup_r
00809d88 g     F .text	000000f8 __floatsidf
0080e5c8 g     F .text	00000078 alt_io_redirect
00809d00 g     F .text	00000088 __ltdf2
0080ed9c g       *ABS*	00000000 __DTOR_END__
0080233c g     F .text	00000014 puts
00806d64 g     F .text	000000b0 __ratio
0080be4c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00802268 g     F .text	00000034 _printf_r
0080a228 g     F .text	00000008 __udivsi3
0080abec g     F .text	000000c4 isatty
0080f010 g     O .rodata	000000c8 __mprec_tens
00806668 g     F .text	00000008 __locale_charset
00812db0 g     O .bss	00000004 __malloc_top_pad
0081112c g     O .rwdata	00000004 __mb_cur_max
00806670 g     F .text	0000000c _localeconv_r
008076ec g     F .text	0000003c __i2b
0080615c g     F .text	0000049c __sfvwrite_r
00802530 g     F .text	00000070 _sbrk_r
00807a94 g     F .text	00000078 _read_r
0080fd24 g     O .rwdata	0000000c __lc_ctype
00811144 g     O .rwdata	00000004 alt_max_fd
0080a728 g     F .text	00000138 __unpack_d
008005f4 g     F .text	00000110 _fclose_r
00800914 g     F .text	00000034 fflush
00812db4 g     O .bss	00000004 __malloc_max_sbrked_mem
00809450 g     F .text	00000074 __adddf3
00806c44 g     F .text	00000120 __b2d
00808960 g     F .text	00000660 __umoddi3
0080adfc g     F .text	000000f4 lseek
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
00811120 g     O .rwdata	00000004 _global_impure_ptr
00807b0c g     F .text	000005f4 _realloc_r
00813098 g       *ABS*	00000000 __bss_end
0080e3f8 g     F .text	000000f8 alt_iic_isr_register
0080e6d8 g     F .text	0000010c alt_tick
008082f4 g     F .text	0000066c __udivdi3
0080f0d8 g     O .rodata	00000028 __mprec_bigtens
00807974 g     F .text	00000120 __s2b
00809f58 g     F .text	00000194 __floatunsidf
00806b64 g     F .text	00000060 __mcmp
0080d380 g     F .text	000000c8 altera_avalon_uart_init
00811160 g     O .rwdata	00000004 __ctype_ptr
00800a7c g     F .text	00000018 __fp_lock_all
0080e3b0 g     F .text	00000048 alt_ic_irq_enabled
0080e640 g     F .text	00000098 alt_alarm_stop
00812dd4 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080fd30 g     O .rwdata	00000028 alt_dev_null
0080dd8c g     F .text	0000001c alt_dcache_flush_all
00806a30 g     F .text	00000070 __hi0bits
00809e80 g     F .text	000000d8 __fixdfsi
00811164 g       *ABS*	00000000 __ram_rwdata_end
00800280 g     F .text	000000a4 GetActiveSwitch
0081113c g     O .rwdata	00000008 alt_dev_list
0080b598 g     F .text	00000124 write
0080f51c g       *ABS*	00000000 __ram_rodata_end
0080aab4 g     F .text	000000d8 fstat
00800d4c g     F .text	0000002c fprintf
008001f0 g     F .text	00000090 WriteLCD
00807854 g     F .text	00000120 __pow5mult
00812dbc g     O .bss	00000004 __nlocale_changed
0080a230 g     F .text	00000008 __umodsi3
00813098 g       *ABS*	00000000 end
0080caec g     F .text	0000053c altera_avalon_lcd_16207_write
0080da10 g     F .text	000001c8 altera_avalon_uart_write
00801628 g     F .text	00000024 fseek
0080b94c g     F .text	000000c0 altera_avalon_jtag_uart_init
0080ed98 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080d2e0 g     F .text	00000058 altera_avalon_uart_write_fd
0080a394 g     F .text	00000080 __clzsi2
0080d338 g     F .text	00000048 altera_avalon_uart_close_fd
0080c070 g     F .text	00000240 altera_avalon_jtag_uart_write
008009a0 g     F .text	00000004 __sfp_lock_acquire
008067a4 g     F .text	000000e4 memchr
008027b8 g     F .text	00001ec4 ___vfprintf_internal_r
00800ed8 g     F .text	00000314 _free_r
0080eb88 g     F .text	000001b0 __call_exitprocs
00812dc0 g     O .bss	00000004 __mlocale_changed
00811128 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00812dd8 g     O .bss	00000004 _alt_tick_rate
0080734c g     F .text	0000014c __lshift
00812ddc g     O .bss	00000004 _alt_nticks
0080b2e0 g     F .text	00000124 read
0080b750 g     F .text	0000007c alt_sys_init
008021ac g     F .text	00000078 _open_r
0080ea50 g     F .text	00000134 __register_exitproc
00807498 g     F .text	00000254 __multiply
0080bce4 g     F .text	00000074 altera_avalon_jtag_uart_close
0080a238 g     F .text	00000038 __mulsi3
0080f51c g       *ABS*	00000000 __ram_rwdata_start
0080ed9c g       *ABS*	00000000 __ram_rodata_start
00812de0 g     O .bss	00000028 __malloc_current_mallinfo
00807044 g     F .text	0000017c __d2b
0080b804 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080e138 g     F .text	000000d0 alt_get_fd
0080e834 g     F .text	0000015c alt_busy_sleep
0080a860 g     F .text	000000c8 __fpcmp_parts_d
00804854 g     F .text	00000070 _close_r
0080e9dc g     F .text	00000074 memcmp
0080b8b4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00813098 g       *ABS*	00000000 __alt_stack_base
0080b8fc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804718 g     F .text	0000013c __swsetup_r
00809888 g     F .text	00000258 __divdf3
00800b4c g     F .text	000000f0 __sfp
00806ea8 g     F .text	00000058 __copybits
0080f91c g     O .rwdata	00000408 __malloc_av_
008009ac g     F .text	00000004 __sinit_lock_release
008094c4 g     F .text	000003c4 __muldf3
0080268c g     F .text	00000060 __sread
0080e018 g     F .text	00000120 alt_find_file
0080dda8 g     F .text	000000b4 alt_dev_llist_insert
0080afbc g     F .text	00000020 __malloc_lock
00800d78 g     F .text	00000034 _fprintf_r
0080b4dc g     F .text	000000bc sbrk
00800718 g     F .text	000001fc _fflush_r
0080822c g     F .text	000000c8 _calloc_r
00800d30 g     F .text	0000001c fopen
00812dac g       *ABS*	00000000 __bss_start
00802114 g     F .text	00000098 memset
00800324 g     F .text	000002d0 main
00812dd0 g     O .bss	00000004 alt_envp
00812db8 g     O .bss	00000004 __malloc_max_total_mem
0080b85c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080d0f4 g     F .text	0000013c altera_avalon_lcd_16207_init
008025a0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00800704 g     F .text	00000014 fclose
00812f08 g     O .bss	00000190 _atexit0
00804b08 g     F .text	000015b4 _dtoa_r
008019d4 g     F .text	00000740 _malloc_r
00811148 g     O .rwdata	00000004 alt_errno
00801788 g     F .text	000000b8 _fwalk
0080a168 g     F .text	00000060 __divsi3
0080f134 g     O .rodata	00000014 __thenan_df
00800dac g     F .text	0000012c _malloc_trim_r
0080ed9c g       *ABS*	00000000 __CTOR_END__
00808170 g     F .text	000000bc strcmp
0080ed9c g       *ABS*	00000000 __flash_rodata_start
0080ed9c g       *ABS*	00000000 __DTOR_LIST__
00809b68 g     F .text	00000088 __nedf2
0080b71c g     F .text	00000034 alt_irq_init
0080b464 g     F .text	00000078 alt_release_fd
0080f148 g     O .rodata	00000100 __clz_tab
00812dc4 g     O .bss	00000004 _PathLocale
0080e990 g     F .text	00000014 atexit
008046a0 g     F .text	00000078 _write_r
00806710 g     F .text	0000001c setlocale
0081111c g     O .rwdata	00000004 _impure_ptr
00812dc8 g     O .bss	00000004 alt_argc
0080df20 g     F .text	00000064 _do_dtors
008011ec g     F .text	0000043c _fseek_r
00802350 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00806bc4 g     F .text	00000080 __ulp
00808100 g     F .text	00000040 __isinfd
00800a64 g     F .text	00000018 __fp_unlock_all
0080d230 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00811134 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080667c g     F .text	00000010 localeconv
0080e224 g     F .text	00000050 alt_ic_isr_register
00811164 g       *ABS*	00000000 _edata
0080d288 g     F .text	00000058 altera_avalon_uart_read_fd
00813098 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080bd58 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080e310 g     F .text	000000a0 alt_ic_irq_disable
00802610 g     F .text	0000007c __swrite
00811124 g     O .rwdata	00000004 __malloc_trim_threshold
0080e814 g     F .text	00000020 altera_nios2_qsys_irq_init
0080e9a4 g     F .text	00000038 exit
008016c0 g     F .text	000000c8 _fwalk_reent
008071c0 g     F .text	0000018c __mdiff
0080a1c8 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008009a4 g     F .text	00000004 __sfp_lock_release
0080f298 g     O .rodata	00000101 _ctype_
0080d720 g     F .text	00000060 altera_avalon_uart_close
00800c3c g     F .text	000000f4 _fopen_r
0080ed78 g     F .text	00000020 _exit
00808140 g     F .text	00000030 __isnand
0080dc38 g     F .text	00000154 alt_alarm_start
0080a270 g     F .text	00000124 __muldi3
00801840 g     F .text	00000194 __smakebuf_r
008026ec g     F .text	00000074 strlen
0080b0f4 g     F .text	0000018c open
00809c78 g     F .text	00000088 __gedf2
0080e208 g     F .text	0000001c alt_icache_flush_all
00811154 g     O .rwdata	00000004 alt_priority_mask
0080e274 g     F .text	0000009c alt_ic_irq_enable
0080467c g     F .text	00000024 __vfprintf_internal
0080d780 g     F .text	00000230 altera_avalon_uart_read
008093d0 g     F .text	00000080 __subdf3
00806aa0 g     F .text	000000c4 __lo0bits
00811158 g     O .rwdata	00000008 alt_alarm_list
0080debc g     F .text	00000064 _do_ctors
0080a928 g     F .text	00000100 close
0080ad10 g     F .text	00000080 alt_load
0080a414 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
008009a8 g     F .text	00000004 __sinit_lock_acquire
00807728 g     F .text	0000012c __multadd
00806a08 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406d14 	ori	at,at,436
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18cb8204 	addi	r3,r3,11784
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18cb8204 	addi	r3,r3,11784
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6a44714 	ori	gp,gp,37148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	108b6b14 	ori	r2,r2,11692

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18cc2614 	ori	r3,r3,12440

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080ad100 	call	80ad10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080af500 	call	80af50 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <WriteLCD>:
#include <stdio.h>
#include "main.h"


void WriteLCD( char* string1, char* string2)
{
  8001f0:	defffb04 	addi	sp,sp,-20
  8001f4:	dfc00415 	stw	ra,16(sp)
  8001f8:	df000315 	stw	fp,12(sp)
  8001fc:	df000304 	addi	fp,sp,12
  800200:	e13ffe15 	stw	r4,-8(fp)
  800204:	e17fff15 	stw	r5,-4(fp)
	FILE *lcd;
	lcd = fopen("/dev/lcd_display", "w");
  800208:	01002074 	movhi	r4,129
  80020c:	213b6704 	addi	r4,r4,-4708
  800210:	01402074 	movhi	r5,129
  800214:	297b6c04 	addi	r5,r5,-4688
  800218:	0800d300 	call	800d30 <fopen>
  80021c:	e0bffd15 	stw	r2,-12(fp)

	/* Write strings to the LCD. */
	if (lcd != NULL )
  800220:	e0bffd17 	ldw	r2,-12(fp)
  800224:	1005003a 	cmpeq	r2,r2,zero
  800228:	10000b1e 	bne	r2,zero,800258 <WriteLCD+0x68>
	{
		fprintf(lcd, "\n%s\n", string1);
  80022c:	e13ffd17 	ldw	r4,-12(fp)
  800230:	01402074 	movhi	r5,129
  800234:	297b6d04 	addi	r5,r5,-4684
  800238:	e1bffe17 	ldw	r6,-8(fp)
  80023c:	0800d4c0 	call	800d4c <fprintf>
		fprintf(lcd, "%s\n",string2);
  800240:	e13ffd17 	ldw	r4,-12(fp)
  800244:	01402074 	movhi	r5,129
  800248:	297b6f04 	addi	r5,r5,-4676
  80024c:	e1bfff17 	ldw	r6,-4(fp)
  800250:	0800d4c0 	call	800d4c <fprintf>
  800254:	00000306 	br	800264 <WriteLCD+0x74>
	}
	else
	{
		printf("Could not open LCD file!\n");
  800258:	01002074 	movhi	r4,129
  80025c:	213b7004 	addi	r4,r4,-4672
  800260:	080233c0 	call	80233c <puts>
	}

	fclose( lcd );
  800264:	e13ffd17 	ldw	r4,-12(fp)
  800268:	08007040 	call	800704 <fclose>
}
  80026c:	e037883a 	mov	sp,fp
  800270:	dfc00117 	ldw	ra,4(sp)
  800274:	df000017 	ldw	fp,0(sp)
  800278:	dec00204 	addi	sp,sp,8
  80027c:	f800283a 	ret

00800280 <GetActiveSwitch>:

int GetActiveSwitch()
{
  800280:	defffb04 	addi	sp,sp,-20
  800284:	df000415 	stw	fp,16(sp)
  800288:	df000404 	addi	fp,sp,16
	int switchValues, i;
	int result = -1;
  80028c:	00bfffc4 	movi	r2,-1
  800290:	e0bffc15 	stw	r2,-16(fp)

	switchValues = *Switches;
  800294:	00804034 	movhi	r2,256
  800298:	10845404 	addi	r2,r2,4432
  80029c:	10800017 	ldw	r2,0(r2)
  8002a0:	e0bffe15 	stw	r2,-8(fp)
	for(i = 0; i < (sizeof(int) * 8);i++)
  8002a4:	e03ffd15 	stw	zero,-12(fp)
  8002a8:	00001406 	br	8002fc <GetActiveSwitch+0x7c>
	{

		/* Mask the lower bit */
		if((switchValues & 1) == 1)
  8002ac:	e0bffe17 	ldw	r2,-8(fp)
  8002b0:	1080004c 	andi	r2,r2,1
  8002b4:	10803fcc 	andi	r2,r2,255
  8002b8:	1005003a 	cmpeq	r2,r2,zero
  8002bc:	1000091e 	bne	r2,zero,8002e4 <GetActiveSwitch+0x64>
		{
			/* switch at Ith position is on */
			if(result == -1)
  8002c0:	e0bffc17 	ldw	r2,-16(fp)
  8002c4:	10bfffd8 	cmpnei	r2,r2,-1
  8002c8:	1000031e 	bne	r2,zero,8002d8 <GetActiveSwitch+0x58>
			{
				result = i;
  8002cc:	e0bffd17 	ldw	r2,-12(fp)
  8002d0:	e0bffc15 	stw	r2,-16(fp)
  8002d4:	00000306 	br	8002e4 <GetActiveSwitch+0x64>
			}
			else
			{
			   /* multiple switches are turned on */
			   return -1;
  8002d8:	00bfffc4 	movi	r2,-1
  8002dc:	e0bfff15 	stw	r2,-4(fp)
  8002e0:	00000b06 	br	800310 <GetActiveSwitch+0x90>
			}
		}

		/* Right shift switchValues 1 */
		switchValues >>= 1;
  8002e4:	e0bffe17 	ldw	r2,-8(fp)
  8002e8:	1005d07a 	srai	r2,r2,1
  8002ec:	e0bffe15 	stw	r2,-8(fp)
{
	int switchValues, i;
	int result = -1;

	switchValues = *Switches;
	for(i = 0; i < (sizeof(int) * 8);i++)
  8002f0:	e0bffd17 	ldw	r2,-12(fp)
  8002f4:	10800044 	addi	r2,r2,1
  8002f8:	e0bffd15 	stw	r2,-12(fp)
  8002fc:	e0bffd17 	ldw	r2,-12(fp)
  800300:	10800830 	cmpltui	r2,r2,32
  800304:	103fe91e 	bne	r2,zero,8002ac <GetActiveSwitch+0x2c>
		}

		/* Right shift switchValues 1 */
		switchValues >>= 1;
	 }
	return result;
  800308:	e0bffc17 	ldw	r2,-16(fp)
  80030c:	e0bfff15 	stw	r2,-4(fp)
  800310:	e0bfff17 	ldw	r2,-4(fp)
}
  800314:	e037883a 	mov	sp,fp
  800318:	df000017 	ldw	fp,0(sp)
  80031c:	dec00104 	addi	sp,sp,4
  800320:	f800283a 	ret

00800324 <main>:

int main()
{
  800324:	defffb04 	addi	sp,sp,-20
  800328:	dfc00415 	stw	ra,16(sp)
  80032c:	df000315 	stw	fp,12(sp)
  800330:	df000304 	addi	fp,sp,12
	int switch_num;
	int last_switch_num;

	/* init */
	*LEDs = 0x00000000;
  800334:	00804034 	movhi	r2,256
  800338:	10845004 	addi	r2,r2,4416
  80033c:	10000015 	stw	zero,0(r2)


	*PWM1_CTRL 		= -5;
  800340:	00c30004 	movi	r3,3072
  800344:	00bffec4 	movi	r2,-5
  800348:	18800015 	stw	r2,0(r3)
	*PWM1_PERIOD 	= 0x000f4240;
  80034c:	00c30104 	movi	r3,3076
  800350:	008003f4 	movhi	r2,15
  800354:	10909004 	addi	r2,r2,16960
  800358:	18800015 	stw	r2,0(r3)
	*PWM1_NEUTRAL 	= 0x000124f8;
  80035c:	00c30204 	movi	r3,3080
  800360:	00800074 	movhi	r2,1
  800364:	10893e04 	addi	r2,r2,9464
  800368:	18800015 	stw	r2,0(r3)
	*PWM1_LARGEST 	= 0x000186a0;
  80036c:	00c30304 	movi	r3,3084
  800370:	008000b4 	movhi	r2,2
  800374:	10a1a804 	addi	r2,r2,-31072
  800378:	18800015 	stw	r2,0(r3)
	*PWM1_SMALLEST 	= 0x0000c350;
  80037c:	00c30404 	movi	r3,3088
  800380:	00b0d414 	movui	r2,50000
  800384:	18800015 	stw	r2,0(r3)
	*PWM1_ENABLE 	= 0x00000001;
  800388:	00c30504 	movi	r3,3092
  80038c:	00800044 	movi	r2,1
  800390:	18800015 	stw	r2,0(r3)

	printf("PWM1_CTRL\n");
  800394:	01002074 	movhi	r4,129
  800398:	213b7704 	addi	r4,r4,-4644
  80039c:	080233c0 	call	80233c <puts>
	printf("\twrote:          -5\n");
  8003a0:	01002074 	movhi	r4,129
  8003a4:	213b7a04 	addi	r4,r4,-4632
  8003a8:	080233c0 	call	80233c <puts>
	printf("\treadback:       0x%d\n", *PWM1_CTRL);
  8003ac:	00830004 	movi	r2,3072
  8003b0:	11400017 	ldw	r5,0(r2)
  8003b4:	01002074 	movhi	r4,129
  8003b8:	213b7f04 	addi	r4,r4,-4612
  8003bc:	08022240 	call	802224 <printf>
	printf("\treadback alias: 0x%d\n", *PWM1_CTRL_R);
  8003c0:	00832004 	movi	r2,3200
  8003c4:	11400017 	ldw	r5,0(r2)
  8003c8:	01002074 	movhi	r4,129
  8003cc:	213b8504 	addi	r4,r4,-4588
  8003d0:	08022240 	call	802224 <printf>

	printf("PWM1_PERIOD\n");
  8003d4:	01002074 	movhi	r4,129
  8003d8:	213b8b04 	addi	r4,r4,-4564
  8003dc:	080233c0 	call	80233c <puts>
	printf("\twrote:          0x000F4240\n");
  8003e0:	01002074 	movhi	r4,129
  8003e4:	213b8e04 	addi	r4,r4,-4552
  8003e8:	080233c0 	call	80233c <puts>
	printf("\treadback:       0x%08X\n", *PWM1_PERIOD);
  8003ec:	00830104 	movi	r2,3076
  8003f0:	11400017 	ldw	r5,0(r2)
  8003f4:	01002074 	movhi	r4,129
  8003f8:	213b9504 	addi	r4,r4,-4524
  8003fc:	08022240 	call	802224 <printf>
	printf("\treadback alias: 0x%08X\n", *PWM1_PERIOD_R);
  800400:	00832104 	movi	r2,3204
  800404:	11400017 	ldw	r5,0(r2)
  800408:	01002074 	movhi	r4,129
  80040c:	213b9c04 	addi	r4,r4,-4496
  800410:	08022240 	call	802224 <printf>

	printf("PWM1_NEUTRAL\n");
  800414:	01002074 	movhi	r4,129
  800418:	213ba304 	addi	r4,r4,-4468
  80041c:	080233c0 	call	80233c <puts>
	printf("\twrote:          0x000124F8\n");
  800420:	01002074 	movhi	r4,129
  800424:	213ba704 	addi	r4,r4,-4452
  800428:	080233c0 	call	80233c <puts>
	printf("\treadback:       0x%08X\n", *PWM1_NEUTRAL);
  80042c:	00830204 	movi	r2,3080
  800430:	11400017 	ldw	r5,0(r2)
  800434:	01002074 	movhi	r4,129
  800438:	213b9504 	addi	r4,r4,-4524
  80043c:	08022240 	call	802224 <printf>
	printf("\treadback alias: 0x%08X\n", *PWM1_NEUTRAL_R);
  800440:	00832204 	movi	r2,3208
  800444:	11400017 	ldw	r5,0(r2)
  800448:	01002074 	movhi	r4,129
  80044c:	213b9c04 	addi	r4,r4,-4496
  800450:	08022240 	call	802224 <printf>

	printf("PWM1_LARGEST\n");
  800454:	01002074 	movhi	r4,129
  800458:	213bae04 	addi	r4,r4,-4424
  80045c:	080233c0 	call	80233c <puts>
	printf("\twrote:          0x000186A0\n");
  800460:	01002074 	movhi	r4,129
  800464:	213bb204 	addi	r4,r4,-4408
  800468:	080233c0 	call	80233c <puts>
	printf("\treadback:       0x%08X\n", *PWM1_LARGEST);
  80046c:	00830304 	movi	r2,3084
  800470:	11400017 	ldw	r5,0(r2)
  800474:	01002074 	movhi	r4,129
  800478:	213b9504 	addi	r4,r4,-4524
  80047c:	08022240 	call	802224 <printf>
	printf("\treadback alias: 0x%08X\n", *PWM1_LARGEST_R);
  800480:	00832304 	movi	r2,3212
  800484:	11400017 	ldw	r5,0(r2)
  800488:	01002074 	movhi	r4,129
  80048c:	213b9c04 	addi	r4,r4,-4496
  800490:	08022240 	call	802224 <printf>

	printf("PWM1_SMALLEST\n");
  800494:	01002074 	movhi	r4,129
  800498:	213bb904 	addi	r4,r4,-4380
  80049c:	080233c0 	call	80233c <puts>
	printf("\twrote:          0x0000C350\n");
  8004a0:	01002074 	movhi	r4,129
  8004a4:	213bbd04 	addi	r4,r4,-4364
  8004a8:	080233c0 	call	80233c <puts>
	printf("\treadback:       0x%08X\n", *PWM1_SMALLEST);
  8004ac:	00830404 	movi	r2,3088
  8004b0:	11400017 	ldw	r5,0(r2)
  8004b4:	01002074 	movhi	r4,129
  8004b8:	213b9504 	addi	r4,r4,-4524
  8004bc:	08022240 	call	802224 <printf>
	printf("\treadback alias: 0x%08X\n", *PWM1_SMALLEST_R);
  8004c0:	00832404 	movi	r2,3216
  8004c4:	11400017 	ldw	r5,0(r2)
  8004c8:	01002074 	movhi	r4,129
  8004cc:	213b9c04 	addi	r4,r4,-4496
  8004d0:	08022240 	call	802224 <printf>

	printf("PWM1_ENABLE\n");
  8004d4:	01002074 	movhi	r4,129
  8004d8:	213bc404 	addi	r4,r4,-4336
  8004dc:	080233c0 	call	80233c <puts>
	printf("\twrote:          0x00000001\n");
  8004e0:	01002074 	movhi	r4,129
  8004e4:	213bc704 	addi	r4,r4,-4324
  8004e8:	080233c0 	call	80233c <puts>
	printf("\treadback:       0x%08X\n", *PWM1_ENABLE);
  8004ec:	00830504 	movi	r2,3092
  8004f0:	11400017 	ldw	r5,0(r2)
  8004f4:	01002074 	movhi	r4,129
  8004f8:	213b9504 	addi	r4,r4,-4524
  8004fc:	08022240 	call	802224 <printf>
	printf("\treadback alias: 0x%08X\n", *PWM1_ENABLE_R);
  800500:	00832504 	movi	r2,3220
  800504:	11400017 	ldw	r5,0(r2)
  800508:	01002074 	movhi	r4,129
  80050c:	213b9c04 	addi	r4,r4,-4496
  800510:	08022240 	call	802224 <printf>
  800514:	00000006 	br	800518 <main+0x1f4>


	while(1)
	{

		switch_num = GetActiveSwitch();
  800518:	08002800 	call	800280 <GetActiveSwitch>
  80051c:	e0bffe15 	stw	r2,-8(fp)

			switch(switch_num){
  800520:	e0bffe17 	ldw	r2,-8(fp)
  800524:	e0bfff15 	stw	r2,-4(fp)
  800528:	e0ffff17 	ldw	r3,-4(fp)
  80052c:	18800060 	cmpeqi	r2,r3,1
  800530:	1000121e 	bne	r2,zero,80057c <main+0x258>
  800534:	e0ffff17 	ldw	r3,-4(fp)
  800538:	188000a0 	cmpeqi	r2,r3,2
  80053c:	1000191e 	bne	r2,zero,8005a4 <main+0x280>
  800540:	e0ffff17 	ldw	r3,-4(fp)
  800544:	1805003a 	cmpeq	r2,r3,zero
  800548:	1000011e 	bne	r2,zero,800550 <main+0x22c>
  80054c:	00002006 	br	8005d0 <main+0x2ac>
			case 0:
				*LEDs = 0x00000001;
  800550:	00c04034 	movhi	r3,256
  800554:	18c45004 	addi	r3,r3,4416
  800558:	00800044 	movi	r2,1
  80055c:	18800015 	stw	r2,0(r3)
				*PWM1_ENABLE = 0x00000001;
  800560:	00c30504 	movi	r3,3092
  800564:	00800044 	movi	r2,1
  800568:	18800015 	stw	r2,0(r3)
				*PWM1_CTRL = -128;
  80056c:	00c30004 	movi	r3,3072
  800570:	00bfe004 	movi	r2,-128
  800574:	18800015 	stw	r2,0(r3)
				break;
  800578:	003fe706 	br	800518 <main+0x1f4>
			case 1:
				*LEDs = 0x00000002;
  80057c:	00c04034 	movhi	r3,256
  800580:	18c45004 	addi	r3,r3,4416
  800584:	00800084 	movi	r2,2
  800588:	18800015 	stw	r2,0(r3)
				*PWM1_ENABLE = 0x00000001;
  80058c:	00c30504 	movi	r3,3092
  800590:	00800044 	movi	r2,1
  800594:	18800015 	stw	r2,0(r3)
				*PWM1_CTRL = 0;
  800598:	00830004 	movi	r2,3072
  80059c:	10000015 	stw	zero,0(r2)
				break;
  8005a0:	003fdd06 	br	800518 <main+0x1f4>
			case 2:
				*LEDs = 0x00000004;
  8005a4:	00c04034 	movhi	r3,256
  8005a8:	18c45004 	addi	r3,r3,4416
  8005ac:	00800104 	movi	r2,4
  8005b0:	18800015 	stw	r2,0(r3)
				*PWM1_ENABLE = 0x00000001;
  8005b4:	00c30504 	movi	r3,3092
  8005b8:	00800044 	movi	r2,1
  8005bc:	18800015 	stw	r2,0(r3)
				*PWM1_CTRL = 127;
  8005c0:	00c30004 	movi	r3,3072
  8005c4:	00801fc4 	movi	r2,127
  8005c8:	18800015 	stw	r2,0(r3)
				break;
  8005cc:	003fd206 	br	800518 <main+0x1f4>
			default:
				*LEDs = 0x00000000;
  8005d0:	00804034 	movhi	r2,256
  8005d4:	10845004 	addi	r2,r2,4416
  8005d8:	10000015 	stw	zero,0(r2)
				*PWM1_CTRL = *PWM1_CTRL +1;
  8005dc:	00c30004 	movi	r3,3072
  8005e0:	00830004 	movi	r2,3072
  8005e4:	10800017 	ldw	r2,0(r2)
  8005e8:	10800044 	addi	r2,r2,1
  8005ec:	18800015 	stw	r2,0(r3)
			}
		}
  8005f0:	003fc906 	br	800518 <main+0x1f4>

008005f4 <_fclose_r>:
  8005f4:	defffc04 	addi	sp,sp,-16
  8005f8:	dc400115 	stw	r17,4(sp)
  8005fc:	dc000015 	stw	r16,0(sp)
  800600:	dfc00315 	stw	ra,12(sp)
  800604:	dc800215 	stw	r18,8(sp)
  800608:	2821883a 	mov	r16,r5
  80060c:	2023883a 	mov	r17,r4
  800610:	28002926 	beq	r5,zero,8006b8 <_fclose_r+0xc4>
  800614:	08009a00 	call	8009a0 <__sfp_lock_acquire>
  800618:	88000226 	beq	r17,zero,800624 <_fclose_r+0x30>
  80061c:	88800e17 	ldw	r2,56(r17)
  800620:	10002d26 	beq	r2,zero,8006d8 <_fclose_r+0xe4>
  800624:	8080030f 	ldh	r2,12(r16)
  800628:	10002226 	beq	r2,zero,8006b4 <_fclose_r+0xc0>
  80062c:	8809883a 	mov	r4,r17
  800630:	800b883a 	mov	r5,r16
  800634:	08007180 	call	800718 <_fflush_r>
  800638:	1025883a 	mov	r18,r2
  80063c:	80800b17 	ldw	r2,44(r16)
  800640:	10000426 	beq	r2,zero,800654 <_fclose_r+0x60>
  800644:	81400717 	ldw	r5,28(r16)
  800648:	8809883a 	mov	r4,r17
  80064c:	103ee83a 	callr	r2
  800650:	10002a16 	blt	r2,zero,8006fc <_fclose_r+0x108>
  800654:	8080030b 	ldhu	r2,12(r16)
  800658:	1080200c 	andi	r2,r2,128
  80065c:	1000231e 	bne	r2,zero,8006ec <_fclose_r+0xf8>
  800660:	81400c17 	ldw	r5,48(r16)
  800664:	28000526 	beq	r5,zero,80067c <_fclose_r+0x88>
  800668:	80801004 	addi	r2,r16,64
  80066c:	28800226 	beq	r5,r2,800678 <_fclose_r+0x84>
  800670:	8809883a 	mov	r4,r17
  800674:	0800ed80 	call	800ed8 <_free_r>
  800678:	80000c15 	stw	zero,48(r16)
  80067c:	81401117 	ldw	r5,68(r16)
  800680:	28000326 	beq	r5,zero,800690 <_fclose_r+0x9c>
  800684:	8809883a 	mov	r4,r17
  800688:	0800ed80 	call	800ed8 <_free_r>
  80068c:	80001115 	stw	zero,68(r16)
  800690:	8000030d 	sth	zero,12(r16)
  800694:	08009a40 	call	8009a4 <__sfp_lock_release>
  800698:	9005883a 	mov	r2,r18
  80069c:	dfc00317 	ldw	ra,12(sp)
  8006a0:	dc800217 	ldw	r18,8(sp)
  8006a4:	dc400117 	ldw	r17,4(sp)
  8006a8:	dc000017 	ldw	r16,0(sp)
  8006ac:	dec00404 	addi	sp,sp,16
  8006b0:	f800283a 	ret
  8006b4:	08009a40 	call	8009a4 <__sfp_lock_release>
  8006b8:	0025883a 	mov	r18,zero
  8006bc:	9005883a 	mov	r2,r18
  8006c0:	dfc00317 	ldw	ra,12(sp)
  8006c4:	dc800217 	ldw	r18,8(sp)
  8006c8:	dc400117 	ldw	r17,4(sp)
  8006cc:	dc000017 	ldw	r16,0(sp)
  8006d0:	dec00404 	addi	sp,sp,16
  8006d4:	f800283a 	ret
  8006d8:	8809883a 	mov	r4,r17
  8006dc:	08009b00 	call	8009b0 <__sinit>
  8006e0:	8080030f 	ldh	r2,12(r16)
  8006e4:	103fd11e 	bne	r2,zero,80062c <_fclose_r+0x38>
  8006e8:	003ff206 	br	8006b4 <_fclose_r+0xc0>
  8006ec:	81400417 	ldw	r5,16(r16)
  8006f0:	8809883a 	mov	r4,r17
  8006f4:	0800ed80 	call	800ed8 <_free_r>
  8006f8:	003fd906 	br	800660 <_fclose_r+0x6c>
  8006fc:	04bfffc4 	movi	r18,-1
  800700:	003fd406 	br	800654 <_fclose_r+0x60>

00800704 <fclose>:
  800704:	00802074 	movhi	r2,129
  800708:	10844704 	addi	r2,r2,4380
  80070c:	200b883a 	mov	r5,r4
  800710:	11000017 	ldw	r4,0(r2)
  800714:	08005f41 	jmpi	8005f4 <_fclose_r>

00800718 <_fflush_r>:
  800718:	defffb04 	addi	sp,sp,-20
  80071c:	dcc00315 	stw	r19,12(sp)
  800720:	dc800215 	stw	r18,8(sp)
  800724:	dfc00415 	stw	ra,16(sp)
  800728:	dc400115 	stw	r17,4(sp)
  80072c:	dc000015 	stw	r16,0(sp)
  800730:	2027883a 	mov	r19,r4
  800734:	2825883a 	mov	r18,r5
  800738:	20000226 	beq	r4,zero,800744 <_fflush_r+0x2c>
  80073c:	20800e17 	ldw	r2,56(r4)
  800740:	10005626 	beq	r2,zero,80089c <_fflush_r+0x184>
  800744:	9100030b 	ldhu	r4,12(r18)
  800748:	20ffffcc 	andi	r3,r4,65535
  80074c:	18e0001c 	xori	r3,r3,32768
  800750:	18e00004 	addi	r3,r3,-32768
  800754:	1880020c 	andi	r2,r3,8
  800758:	1000261e 	bne	r2,zero,8007f4 <_fflush_r+0xdc>
  80075c:	90c00117 	ldw	r3,4(r18)
  800760:	20820014 	ori	r2,r4,2048
  800764:	9080030d 	sth	r2,12(r18)
  800768:	1009883a 	mov	r4,r2
  80076c:	00c0400e 	bge	zero,r3,800870 <_fflush_r+0x158>
  800770:	92000a17 	ldw	r8,40(r18)
  800774:	40004026 	beq	r8,zero,800878 <_fflush_r+0x160>
  800778:	2084000c 	andi	r2,r4,4096
  80077c:	10005326 	beq	r2,zero,8008cc <_fflush_r+0x1b4>
  800780:	94001417 	ldw	r16,80(r18)
  800784:	9080030b 	ldhu	r2,12(r18)
  800788:	1080010c 	andi	r2,r2,4
  80078c:	1000481e 	bne	r2,zero,8008b0 <_fflush_r+0x198>
  800790:	91400717 	ldw	r5,28(r18)
  800794:	9809883a 	mov	r4,r19
  800798:	800d883a 	mov	r6,r16
  80079c:	000f883a 	mov	r7,zero
  8007a0:	403ee83a 	callr	r8
  8007a4:	8080261e 	bne	r16,r2,800840 <_fflush_r+0x128>
  8007a8:	9080030b 	ldhu	r2,12(r18)
  8007ac:	91000417 	ldw	r4,16(r18)
  8007b0:	90000115 	stw	zero,4(r18)
  8007b4:	10bdffcc 	andi	r2,r2,63487
  8007b8:	10ffffcc 	andi	r3,r2,65535
  8007bc:	18c4000c 	andi	r3,r3,4096
  8007c0:	9080030d 	sth	r2,12(r18)
  8007c4:	91000015 	stw	r4,0(r18)
  8007c8:	18002b26 	beq	r3,zero,800878 <_fflush_r+0x160>
  8007cc:	0007883a 	mov	r3,zero
  8007d0:	1805883a 	mov	r2,r3
  8007d4:	94001415 	stw	r16,80(r18)
  8007d8:	dfc00417 	ldw	ra,16(sp)
  8007dc:	dcc00317 	ldw	r19,12(sp)
  8007e0:	dc800217 	ldw	r18,8(sp)
  8007e4:	dc400117 	ldw	r17,4(sp)
  8007e8:	dc000017 	ldw	r16,0(sp)
  8007ec:	dec00504 	addi	sp,sp,20
  8007f0:	f800283a 	ret
  8007f4:	94400417 	ldw	r17,16(r18)
  8007f8:	88001f26 	beq	r17,zero,800878 <_fflush_r+0x160>
  8007fc:	90800017 	ldw	r2,0(r18)
  800800:	18c000cc 	andi	r3,r3,3
  800804:	94400015 	stw	r17,0(r18)
  800808:	1461c83a 	sub	r16,r2,r17
  80080c:	18002526 	beq	r3,zero,8008a4 <_fflush_r+0x18c>
  800810:	0005883a 	mov	r2,zero
  800814:	90800215 	stw	r2,8(r18)
  800818:	0400170e 	bge	zero,r16,800878 <_fflush_r+0x160>
  80081c:	90c00917 	ldw	r3,36(r18)
  800820:	91400717 	ldw	r5,28(r18)
  800824:	880d883a 	mov	r6,r17
  800828:	800f883a 	mov	r7,r16
  80082c:	9809883a 	mov	r4,r19
  800830:	183ee83a 	callr	r3
  800834:	88a3883a 	add	r17,r17,r2
  800838:	80a1c83a 	sub	r16,r16,r2
  80083c:	00bff616 	blt	zero,r2,800818 <_fflush_r+0x100>
  800840:	9080030b 	ldhu	r2,12(r18)
  800844:	00ffffc4 	movi	r3,-1
  800848:	10801014 	ori	r2,r2,64
  80084c:	9080030d 	sth	r2,12(r18)
  800850:	1805883a 	mov	r2,r3
  800854:	dfc00417 	ldw	ra,16(sp)
  800858:	dcc00317 	ldw	r19,12(sp)
  80085c:	dc800217 	ldw	r18,8(sp)
  800860:	dc400117 	ldw	r17,4(sp)
  800864:	dc000017 	ldw	r16,0(sp)
  800868:	dec00504 	addi	sp,sp,20
  80086c:	f800283a 	ret
  800870:	90800f17 	ldw	r2,60(r18)
  800874:	00bfbe16 	blt	zero,r2,800770 <_fflush_r+0x58>
  800878:	0007883a 	mov	r3,zero
  80087c:	1805883a 	mov	r2,r3
  800880:	dfc00417 	ldw	ra,16(sp)
  800884:	dcc00317 	ldw	r19,12(sp)
  800888:	dc800217 	ldw	r18,8(sp)
  80088c:	dc400117 	ldw	r17,4(sp)
  800890:	dc000017 	ldw	r16,0(sp)
  800894:	dec00504 	addi	sp,sp,20
  800898:	f800283a 	ret
  80089c:	08009b00 	call	8009b0 <__sinit>
  8008a0:	003fa806 	br	800744 <_fflush_r+0x2c>
  8008a4:	90800517 	ldw	r2,20(r18)
  8008a8:	90800215 	stw	r2,8(r18)
  8008ac:	003fda06 	br	800818 <_fflush_r+0x100>
  8008b0:	90800117 	ldw	r2,4(r18)
  8008b4:	90c00c17 	ldw	r3,48(r18)
  8008b8:	80a1c83a 	sub	r16,r16,r2
  8008bc:	183fb426 	beq	r3,zero,800790 <_fflush_r+0x78>
  8008c0:	90800f17 	ldw	r2,60(r18)
  8008c4:	80a1c83a 	sub	r16,r16,r2
  8008c8:	003fb106 	br	800790 <_fflush_r+0x78>
  8008cc:	91400717 	ldw	r5,28(r18)
  8008d0:	9809883a 	mov	r4,r19
  8008d4:	000d883a 	mov	r6,zero
  8008d8:	01c00044 	movi	r7,1
  8008dc:	403ee83a 	callr	r8
  8008e0:	1021883a 	mov	r16,r2
  8008e4:	00bfffc4 	movi	r2,-1
  8008e8:	80800226 	beq	r16,r2,8008f4 <_fflush_r+0x1dc>
  8008ec:	92000a17 	ldw	r8,40(r18)
  8008f0:	003fa406 	br	800784 <_fflush_r+0x6c>
  8008f4:	98c00017 	ldw	r3,0(r19)
  8008f8:	00800744 	movi	r2,29
  8008fc:	18bfde26 	beq	r3,r2,800878 <_fflush_r+0x160>
  800900:	9080030b 	ldhu	r2,12(r18)
  800904:	8007883a 	mov	r3,r16
  800908:	10801014 	ori	r2,r2,64
  80090c:	9080030d 	sth	r2,12(r18)
  800910:	003fcf06 	br	800850 <_fflush_r+0x138>

00800914 <fflush>:
  800914:	01402034 	movhi	r5,128
  800918:	2941c604 	addi	r5,r5,1816
  80091c:	2007883a 	mov	r3,r4
  800920:	20000526 	beq	r4,zero,800938 <fflush+0x24>
  800924:	00802074 	movhi	r2,129
  800928:	10844704 	addi	r2,r2,4380
  80092c:	11000017 	ldw	r4,0(r2)
  800930:	180b883a 	mov	r5,r3
  800934:	08007181 	jmpi	800718 <_fflush_r>
  800938:	00802074 	movhi	r2,129
  80093c:	10844804 	addi	r2,r2,4384
  800940:	11000017 	ldw	r4,0(r2)
  800944:	08016c01 	jmpi	8016c0 <_fwalk_reent>

00800948 <std>:
  800948:	00802034 	movhi	r2,128
  80094c:	10896804 	addi	r2,r2,9632
  800950:	20800b15 	stw	r2,44(r4)
  800954:	00802034 	movhi	r2,128
  800958:	1089a304 	addi	r2,r2,9868
  80095c:	20800815 	stw	r2,32(r4)
  800960:	00c02034 	movhi	r3,128
  800964:	18c98404 	addi	r3,r3,9744
  800968:	00802034 	movhi	r2,128
  80096c:	10896a04 	addi	r2,r2,9640
  800970:	2140030d 	sth	r5,12(r4)
  800974:	2180038d 	sth	r6,14(r4)
  800978:	20c00915 	stw	r3,36(r4)
  80097c:	20800a15 	stw	r2,40(r4)
  800980:	20000015 	stw	zero,0(r4)
  800984:	20000115 	stw	zero,4(r4)
  800988:	20000215 	stw	zero,8(r4)
  80098c:	20000415 	stw	zero,16(r4)
  800990:	20000515 	stw	zero,20(r4)
  800994:	20000615 	stw	zero,24(r4)
  800998:	21000715 	stw	r4,28(r4)
  80099c:	f800283a 	ret

008009a0 <__sfp_lock_acquire>:
  8009a0:	f800283a 	ret

008009a4 <__sfp_lock_release>:
  8009a4:	f800283a 	ret

008009a8 <__sinit_lock_acquire>:
  8009a8:	f800283a 	ret

008009ac <__sinit_lock_release>:
  8009ac:	f800283a 	ret

008009b0 <__sinit>:
  8009b0:	20800e17 	ldw	r2,56(r4)
  8009b4:	defffd04 	addi	sp,sp,-12
  8009b8:	dc400115 	stw	r17,4(sp)
  8009bc:	dc000015 	stw	r16,0(sp)
  8009c0:	dfc00215 	stw	ra,8(sp)
  8009c4:	04400044 	movi	r17,1
  8009c8:	01400104 	movi	r5,4
  8009cc:	000d883a 	mov	r6,zero
  8009d0:	2021883a 	mov	r16,r4
  8009d4:	2200bb04 	addi	r8,r4,748
  8009d8:	200f883a 	mov	r7,r4
  8009dc:	10000526 	beq	r2,zero,8009f4 <__sinit+0x44>
  8009e0:	dfc00217 	ldw	ra,8(sp)
  8009e4:	dc400117 	ldw	r17,4(sp)
  8009e8:	dc000017 	ldw	r16,0(sp)
  8009ec:	dec00304 	addi	sp,sp,12
  8009f0:	f800283a 	ret
  8009f4:	21000117 	ldw	r4,4(r4)
  8009f8:	00802034 	movhi	r2,128
  8009fc:	1082a504 	addi	r2,r2,2708
  800a00:	00c000c4 	movi	r3,3
  800a04:	80800f15 	stw	r2,60(r16)
  800a08:	80c0b915 	stw	r3,740(r16)
  800a0c:	8200ba15 	stw	r8,744(r16)
  800a10:	84400e15 	stw	r17,56(r16)
  800a14:	8000b815 	stw	zero,736(r16)
  800a18:	08009480 	call	800948 <std>
  800a1c:	81000217 	ldw	r4,8(r16)
  800a20:	880d883a 	mov	r6,r17
  800a24:	800f883a 	mov	r7,r16
  800a28:	01400284 	movi	r5,10
  800a2c:	08009480 	call	800948 <std>
  800a30:	81000317 	ldw	r4,12(r16)
  800a34:	800f883a 	mov	r7,r16
  800a38:	01400484 	movi	r5,18
  800a3c:	01800084 	movi	r6,2
  800a40:	dfc00217 	ldw	ra,8(sp)
  800a44:	dc400117 	ldw	r17,4(sp)
  800a48:	dc000017 	ldw	r16,0(sp)
  800a4c:	dec00304 	addi	sp,sp,12
  800a50:	08009481 	jmpi	800948 <std>

00800a54 <__fp_lock>:
  800a54:	0005883a 	mov	r2,zero
  800a58:	f800283a 	ret

00800a5c <__fp_unlock>:
  800a5c:	0005883a 	mov	r2,zero
  800a60:	f800283a 	ret

00800a64 <__fp_unlock_all>:
  800a64:	00802074 	movhi	r2,129
  800a68:	10844704 	addi	r2,r2,4380
  800a6c:	11000017 	ldw	r4,0(r2)
  800a70:	01402034 	movhi	r5,128
  800a74:	29429704 	addi	r5,r5,2652
  800a78:	08017881 	jmpi	801788 <_fwalk>

00800a7c <__fp_lock_all>:
  800a7c:	00802074 	movhi	r2,129
  800a80:	10844704 	addi	r2,r2,4380
  800a84:	11000017 	ldw	r4,0(r2)
  800a88:	01402034 	movhi	r5,128
  800a8c:	29429504 	addi	r5,r5,2644
  800a90:	08017881 	jmpi	801788 <_fwalk>

00800a94 <_cleanup_r>:
  800a94:	01402034 	movhi	r5,128
  800a98:	2941c104 	addi	r5,r5,1796
  800a9c:	08017881 	jmpi	801788 <_fwalk>

00800aa0 <_cleanup>:
  800aa0:	00802074 	movhi	r2,129
  800aa4:	10844804 	addi	r2,r2,4384
  800aa8:	11000017 	ldw	r4,0(r2)
  800aac:	0800a941 	jmpi	800a94 <_cleanup_r>

00800ab0 <__sfmoreglue>:
  800ab0:	defffc04 	addi	sp,sp,-16
  800ab4:	dc000015 	stw	r16,0(sp)
  800ab8:	2821883a 	mov	r16,r5
  800abc:	dc400115 	stw	r17,4(sp)
  800ac0:	01401704 	movi	r5,92
  800ac4:	2023883a 	mov	r17,r4
  800ac8:	8009883a 	mov	r4,r16
  800acc:	dfc00315 	stw	ra,12(sp)
  800ad0:	dcc00215 	stw	r19,8(sp)
  800ad4:	080a2380 	call	80a238 <__mulsi3>
  800ad8:	11400304 	addi	r5,r2,12
  800adc:	8809883a 	mov	r4,r17
  800ae0:	1027883a 	mov	r19,r2
  800ae4:	08019d40 	call	8019d4 <_malloc_r>
  800ae8:	10c00304 	addi	r3,r2,12
  800aec:	1023883a 	mov	r17,r2
  800af0:	1809883a 	mov	r4,r3
  800af4:	980d883a 	mov	r6,r19
  800af8:	000b883a 	mov	r5,zero
  800afc:	10000b26 	beq	r2,zero,800b2c <__sfmoreglue+0x7c>
  800b00:	14000115 	stw	r16,4(r2)
  800b04:	10c00215 	stw	r3,8(r2)
  800b08:	10000015 	stw	zero,0(r2)
  800b0c:	08021140 	call	802114 <memset>
  800b10:	8805883a 	mov	r2,r17
  800b14:	dfc00317 	ldw	ra,12(sp)
  800b18:	dcc00217 	ldw	r19,8(sp)
  800b1c:	dc400117 	ldw	r17,4(sp)
  800b20:	dc000017 	ldw	r16,0(sp)
  800b24:	dec00404 	addi	sp,sp,16
  800b28:	f800283a 	ret
  800b2c:	0023883a 	mov	r17,zero
  800b30:	8805883a 	mov	r2,r17
  800b34:	dfc00317 	ldw	ra,12(sp)
  800b38:	dcc00217 	ldw	r19,8(sp)
  800b3c:	dc400117 	ldw	r17,4(sp)
  800b40:	dc000017 	ldw	r16,0(sp)
  800b44:	dec00404 	addi	sp,sp,16
  800b48:	f800283a 	ret

00800b4c <__sfp>:
  800b4c:	defffd04 	addi	sp,sp,-12
  800b50:	00802074 	movhi	r2,129
  800b54:	10844804 	addi	r2,r2,4384
  800b58:	dc000015 	stw	r16,0(sp)
  800b5c:	14000017 	ldw	r16,0(r2)
  800b60:	dc400115 	stw	r17,4(sp)
  800b64:	dfc00215 	stw	ra,8(sp)
  800b68:	80800e17 	ldw	r2,56(r16)
  800b6c:	2023883a 	mov	r17,r4
  800b70:	10002626 	beq	r2,zero,800c0c <__sfp+0xc0>
  800b74:	8400b804 	addi	r16,r16,736
  800b78:	80800117 	ldw	r2,4(r16)
  800b7c:	81000217 	ldw	r4,8(r16)
  800b80:	10ffffc4 	addi	r3,r2,-1
  800b84:	18000916 	blt	r3,zero,800bac <__sfp+0x60>
  800b88:	2080030f 	ldh	r2,12(r4)
  800b8c:	10000b26 	beq	r2,zero,800bbc <__sfp+0x70>
  800b90:	017fffc4 	movi	r5,-1
  800b94:	00000206 	br	800ba0 <__sfp+0x54>
  800b98:	2080030f 	ldh	r2,12(r4)
  800b9c:	10000726 	beq	r2,zero,800bbc <__sfp+0x70>
  800ba0:	18ffffc4 	addi	r3,r3,-1
  800ba4:	21001704 	addi	r4,r4,92
  800ba8:	197ffb1e 	bne	r3,r5,800b98 <__sfp+0x4c>
  800bac:	80800017 	ldw	r2,0(r16)
  800bb0:	10001926 	beq	r2,zero,800c18 <__sfp+0xcc>
  800bb4:	1021883a 	mov	r16,r2
  800bb8:	003fef06 	br	800b78 <__sfp+0x2c>
  800bbc:	00bfffc4 	movi	r2,-1
  800bc0:	00c00044 	movi	r3,1
  800bc4:	2080038d 	sth	r2,14(r4)
  800bc8:	20c0030d 	sth	r3,12(r4)
  800bcc:	20000015 	stw	zero,0(r4)
  800bd0:	20000215 	stw	zero,8(r4)
  800bd4:	20000115 	stw	zero,4(r4)
  800bd8:	20000415 	stw	zero,16(r4)
  800bdc:	20000515 	stw	zero,20(r4)
  800be0:	20000615 	stw	zero,24(r4)
  800be4:	20000c15 	stw	zero,48(r4)
  800be8:	20000d15 	stw	zero,52(r4)
  800bec:	20001115 	stw	zero,68(r4)
  800bf0:	20001215 	stw	zero,72(r4)
  800bf4:	2005883a 	mov	r2,r4
  800bf8:	dfc00217 	ldw	ra,8(sp)
  800bfc:	dc400117 	ldw	r17,4(sp)
  800c00:	dc000017 	ldw	r16,0(sp)
  800c04:	dec00304 	addi	sp,sp,12
  800c08:	f800283a 	ret
  800c0c:	8009883a 	mov	r4,r16
  800c10:	08009b00 	call	8009b0 <__sinit>
  800c14:	003fd706 	br	800b74 <__sfp+0x28>
  800c18:	8809883a 	mov	r4,r17
  800c1c:	01400104 	movi	r5,4
  800c20:	0800ab00 	call	800ab0 <__sfmoreglue>
  800c24:	80800015 	stw	r2,0(r16)
  800c28:	103fe21e 	bne	r2,zero,800bb4 <__sfp+0x68>
  800c2c:	00800304 	movi	r2,12
  800c30:	0009883a 	mov	r4,zero
  800c34:	88800015 	stw	r2,0(r17)
  800c38:	003fee06 	br	800bf4 <__sfp+0xa8>

00800c3c <_fopen_r>:
  800c3c:	defffa04 	addi	sp,sp,-24
  800c40:	dcc00415 	stw	r19,16(sp)
  800c44:	2827883a 	mov	r19,r5
  800c48:	300b883a 	mov	r5,r6
  800c4c:	d80d883a 	mov	r6,sp
  800c50:	dc800315 	stw	r18,12(sp)
  800c54:	dc400215 	stw	r17,8(sp)
  800c58:	dc000115 	stw	r16,4(sp)
  800c5c:	dfc00515 	stw	ra,20(sp)
  800c60:	2021883a 	mov	r16,r4
  800c64:	08060bc0 	call	8060bc <__sflags>
  800c68:	1025883a 	mov	r18,r2
  800c6c:	8009883a 	mov	r4,r16
  800c70:	0023883a 	mov	r17,zero
  800c74:	1000081e 	bne	r2,zero,800c98 <_fopen_r+0x5c>
  800c78:	8805883a 	mov	r2,r17
  800c7c:	dfc00517 	ldw	ra,20(sp)
  800c80:	dcc00417 	ldw	r19,16(sp)
  800c84:	dc800317 	ldw	r18,12(sp)
  800c88:	dc400217 	ldw	r17,8(sp)
  800c8c:	dc000117 	ldw	r16,4(sp)
  800c90:	dec00604 	addi	sp,sp,24
  800c94:	f800283a 	ret
  800c98:	0800b4c0 	call	800b4c <__sfp>
  800c9c:	1023883a 	mov	r17,r2
  800ca0:	980b883a 	mov	r5,r19
  800ca4:	8009883a 	mov	r4,r16
  800ca8:	01c06d84 	movi	r7,438
  800cac:	103ff226 	beq	r2,zero,800c78 <_fopen_r+0x3c>
  800cb0:	d9800017 	ldw	r6,0(sp)
  800cb4:	08021ac0 	call	8021ac <_open_r>
  800cb8:	10001816 	blt	r2,zero,800d1c <_fopen_r+0xe0>
  800cbc:	00c02034 	movhi	r3,128
  800cc0:	18c98404 	addi	r3,r3,9744
  800cc4:	923fffcc 	andi	r8,r18,65535
  800cc8:	8880038d 	sth	r2,14(r17)
  800ccc:	00802034 	movhi	r2,128
  800cd0:	1089a304 	addi	r2,r2,9868
  800cd4:	88800815 	stw	r2,32(r17)
  800cd8:	88c00915 	stw	r3,36(r17)
  800cdc:	00802034 	movhi	r2,128
  800ce0:	10896a04 	addi	r2,r2,9640
  800ce4:	00c02034 	movhi	r3,128
  800ce8:	18c96804 	addi	r3,r3,9632
  800cec:	4200400c 	andi	r8,r8,256
  800cf0:	8c80030d 	sth	r18,12(r17)
  800cf4:	8009883a 	mov	r4,r16
  800cf8:	880b883a 	mov	r5,r17
  800cfc:	000d883a 	mov	r6,zero
  800d00:	01c00084 	movi	r7,2
  800d04:	88800a15 	stw	r2,40(r17)
  800d08:	88c00b15 	stw	r3,44(r17)
  800d0c:	8c400715 	stw	r17,28(r17)
  800d10:	403fd926 	beq	r8,zero,800c78 <_fopen_r+0x3c>
  800d14:	08011ec0 	call	8011ec <_fseek_r>
  800d18:	003fd706 	br	800c78 <_fopen_r+0x3c>
  800d1c:	08009a00 	call	8009a0 <__sfp_lock_acquire>
  800d20:	8800030d 	sth	zero,12(r17)
  800d24:	08009a40 	call	8009a4 <__sfp_lock_release>
  800d28:	0023883a 	mov	r17,zero
  800d2c:	003fd206 	br	800c78 <_fopen_r+0x3c>

00800d30 <fopen>:
  800d30:	01802074 	movhi	r6,129
  800d34:	31844704 	addi	r6,r6,4380
  800d38:	2007883a 	mov	r3,r4
  800d3c:	31000017 	ldw	r4,0(r6)
  800d40:	280d883a 	mov	r6,r5
  800d44:	180b883a 	mov	r5,r3
  800d48:	0800c3c1 	jmpi	800c3c <_fopen_r>

00800d4c <fprintf>:
  800d4c:	defffc04 	addi	sp,sp,-16
  800d50:	dfc00115 	stw	ra,4(sp)
  800d54:	d9800215 	stw	r6,8(sp)
  800d58:	d9c00315 	stw	r7,12(sp)
  800d5c:	d8800204 	addi	r2,sp,8
  800d60:	100d883a 	mov	r6,r2
  800d64:	d8800015 	stw	r2,0(sp)
  800d68:	080467c0 	call	80467c <__vfprintf_internal>
  800d6c:	dfc00117 	ldw	ra,4(sp)
  800d70:	dec00404 	addi	sp,sp,16
  800d74:	f800283a 	ret

00800d78 <_fprintf_r>:
  800d78:	defffd04 	addi	sp,sp,-12
  800d7c:	2807883a 	mov	r3,r5
  800d80:	dfc00115 	stw	ra,4(sp)
  800d84:	d9c00215 	stw	r7,8(sp)
  800d88:	d8800204 	addi	r2,sp,8
  800d8c:	300b883a 	mov	r5,r6
  800d90:	1809883a 	mov	r4,r3
  800d94:	100d883a 	mov	r6,r2
  800d98:	d8800015 	stw	r2,0(sp)
  800d9c:	080467c0 	call	80467c <__vfprintf_internal>
  800da0:	dfc00117 	ldw	ra,4(sp)
  800da4:	dec00304 	addi	sp,sp,12
  800da8:	f800283a 	ret

00800dac <_malloc_trim_r>:
  800dac:	defffb04 	addi	sp,sp,-20
  800db0:	dcc00315 	stw	r19,12(sp)
  800db4:	04c02074 	movhi	r19,129
  800db8:	9cfe4704 	addi	r19,r19,-1764
  800dbc:	dc800215 	stw	r18,8(sp)
  800dc0:	dc400115 	stw	r17,4(sp)
  800dc4:	dc000015 	stw	r16,0(sp)
  800dc8:	2823883a 	mov	r17,r5
  800dcc:	2025883a 	mov	r18,r4
  800dd0:	dfc00415 	stw	ra,16(sp)
  800dd4:	080afbc0 	call	80afbc <__malloc_lock>
  800dd8:	98800217 	ldw	r2,8(r19)
  800ddc:	9009883a 	mov	r4,r18
  800de0:	000b883a 	mov	r5,zero
  800de4:	10c00117 	ldw	r3,4(r2)
  800de8:	00bfff04 	movi	r2,-4
  800dec:	18a0703a 	and	r16,r3,r2
  800df0:	8463c83a 	sub	r17,r16,r17
  800df4:	8c43fbc4 	addi	r17,r17,4079
  800df8:	8822d33a 	srli	r17,r17,12
  800dfc:	0083ffc4 	movi	r2,4095
  800e00:	8c7fffc4 	addi	r17,r17,-1
  800e04:	8822933a 	slli	r17,r17,12
  800e08:	1440060e 	bge	r2,r17,800e24 <_malloc_trim_r+0x78>
  800e0c:	08025300 	call	802530 <_sbrk_r>
  800e10:	98c00217 	ldw	r3,8(r19)
  800e14:	9009883a 	mov	r4,r18
  800e18:	044bc83a 	sub	r5,zero,r17
  800e1c:	80c7883a 	add	r3,r16,r3
  800e20:	10c00926 	beq	r2,r3,800e48 <_malloc_trim_r+0x9c>
  800e24:	080afdc0 	call	80afdc <__malloc_unlock>
  800e28:	0005883a 	mov	r2,zero
  800e2c:	dfc00417 	ldw	ra,16(sp)
  800e30:	dcc00317 	ldw	r19,12(sp)
  800e34:	dc800217 	ldw	r18,8(sp)
  800e38:	dc400117 	ldw	r17,4(sp)
  800e3c:	dc000017 	ldw	r16,0(sp)
  800e40:	dec00504 	addi	sp,sp,20
  800e44:	f800283a 	ret
  800e48:	9009883a 	mov	r4,r18
  800e4c:	08025300 	call	802530 <_sbrk_r>
  800e50:	844dc83a 	sub	r6,r16,r17
  800e54:	00ffffc4 	movi	r3,-1
  800e58:	9009883a 	mov	r4,r18
  800e5c:	000b883a 	mov	r5,zero
  800e60:	01c02074 	movhi	r7,129
  800e64:	39cb7804 	addi	r7,r7,11744
  800e68:	31800054 	ori	r6,r6,1
  800e6c:	10c00926 	beq	r2,r3,800e94 <_malloc_trim_r+0xe8>
  800e70:	38800017 	ldw	r2,0(r7)
  800e74:	98c00217 	ldw	r3,8(r19)
  800e78:	9009883a 	mov	r4,r18
  800e7c:	1445c83a 	sub	r2,r2,r17
  800e80:	38800015 	stw	r2,0(r7)
  800e84:	19800115 	stw	r6,4(r3)
  800e88:	080afdc0 	call	80afdc <__malloc_unlock>
  800e8c:	00800044 	movi	r2,1
  800e90:	003fe606 	br	800e2c <_malloc_trim_r+0x80>
  800e94:	08025300 	call	802530 <_sbrk_r>
  800e98:	99800217 	ldw	r6,8(r19)
  800e9c:	100f883a 	mov	r7,r2
  800ea0:	9009883a 	mov	r4,r18
  800ea4:	1187c83a 	sub	r3,r2,r6
  800ea8:	008003c4 	movi	r2,15
  800eac:	19400054 	ori	r5,r3,1
  800eb0:	10ffdc0e 	bge	r2,r3,800e24 <_malloc_trim_r+0x78>
  800eb4:	00802074 	movhi	r2,129
  800eb8:	10844a04 	addi	r2,r2,4392
  800ebc:	10c00017 	ldw	r3,0(r2)
  800ec0:	00802074 	movhi	r2,129
  800ec4:	108b7804 	addi	r2,r2,11744
  800ec8:	31400115 	stw	r5,4(r6)
  800ecc:	38c7c83a 	sub	r3,r7,r3
  800ed0:	10c00015 	stw	r3,0(r2)
  800ed4:	003fd306 	br	800e24 <_malloc_trim_r+0x78>

00800ed8 <_free_r>:
  800ed8:	defffd04 	addi	sp,sp,-12
  800edc:	dc400115 	stw	r17,4(sp)
  800ee0:	dc000015 	stw	r16,0(sp)
  800ee4:	dfc00215 	stw	ra,8(sp)
  800ee8:	2821883a 	mov	r16,r5
  800eec:	2023883a 	mov	r17,r4
  800ef0:	28005a26 	beq	r5,zero,80105c <_free_r+0x184>
  800ef4:	080afbc0 	call	80afbc <__malloc_lock>
  800ef8:	823ffe04 	addi	r8,r16,-8
  800efc:	41400117 	ldw	r5,4(r8)
  800f00:	00bfff84 	movi	r2,-2
  800f04:	02802074 	movhi	r10,129
  800f08:	52be4704 	addi	r10,r10,-1764
  800f0c:	288e703a 	and	r7,r5,r2
  800f10:	41cd883a 	add	r6,r8,r7
  800f14:	30c00117 	ldw	r3,4(r6)
  800f18:	51000217 	ldw	r4,8(r10)
  800f1c:	00bfff04 	movi	r2,-4
  800f20:	1892703a 	and	r9,r3,r2
  800f24:	5017883a 	mov	r11,r10
  800f28:	31006726 	beq	r6,r4,8010c8 <_free_r+0x1f0>
  800f2c:	2880004c 	andi	r2,r5,1
  800f30:	1005003a 	cmpeq	r2,r2,zero
  800f34:	32400115 	stw	r9,4(r6)
  800f38:	10001a1e 	bne	r2,zero,800fa4 <_free_r+0xcc>
  800f3c:	000b883a 	mov	r5,zero
  800f40:	3247883a 	add	r3,r6,r9
  800f44:	18800117 	ldw	r2,4(r3)
  800f48:	1080004c 	andi	r2,r2,1
  800f4c:	1000231e 	bne	r2,zero,800fdc <_free_r+0x104>
  800f50:	280ac03a 	cmpne	r5,r5,zero
  800f54:	3a4f883a 	add	r7,r7,r9
  800f58:	2800451e 	bne	r5,zero,801070 <_free_r+0x198>
  800f5c:	31000217 	ldw	r4,8(r6)
  800f60:	00802074 	movhi	r2,129
  800f64:	10be4904 	addi	r2,r2,-1756
  800f68:	20807b26 	beq	r4,r2,801158 <_free_r+0x280>
  800f6c:	30800317 	ldw	r2,12(r6)
  800f70:	3a07883a 	add	r3,r7,r8
  800f74:	19c00015 	stw	r7,0(r3)
  800f78:	11000215 	stw	r4,8(r2)
  800f7c:	20800315 	stw	r2,12(r4)
  800f80:	38800054 	ori	r2,r7,1
  800f84:	40800115 	stw	r2,4(r8)
  800f88:	28001a26 	beq	r5,zero,800ff4 <_free_r+0x11c>
  800f8c:	8809883a 	mov	r4,r17
  800f90:	dfc00217 	ldw	ra,8(sp)
  800f94:	dc400117 	ldw	r17,4(sp)
  800f98:	dc000017 	ldw	r16,0(sp)
  800f9c:	dec00304 	addi	sp,sp,12
  800fa0:	080afdc1 	jmpi	80afdc <__malloc_unlock>
  800fa4:	80bffe17 	ldw	r2,-8(r16)
  800fa8:	50c00204 	addi	r3,r10,8
  800fac:	4091c83a 	sub	r8,r8,r2
  800fb0:	41000217 	ldw	r4,8(r8)
  800fb4:	388f883a 	add	r7,r7,r2
  800fb8:	20c06126 	beq	r4,r3,801140 <_free_r+0x268>
  800fbc:	40800317 	ldw	r2,12(r8)
  800fc0:	3247883a 	add	r3,r6,r9
  800fc4:	000b883a 	mov	r5,zero
  800fc8:	11000215 	stw	r4,8(r2)
  800fcc:	20800315 	stw	r2,12(r4)
  800fd0:	18800117 	ldw	r2,4(r3)
  800fd4:	1080004c 	andi	r2,r2,1
  800fd8:	103fdd26 	beq	r2,zero,800f50 <_free_r+0x78>
  800fdc:	38800054 	ori	r2,r7,1
  800fe0:	3a07883a 	add	r3,r7,r8
  800fe4:	280ac03a 	cmpne	r5,r5,zero
  800fe8:	40800115 	stw	r2,4(r8)
  800fec:	19c00015 	stw	r7,0(r3)
  800ff0:	283fe61e 	bne	r5,zero,800f8c <_free_r+0xb4>
  800ff4:	00807fc4 	movi	r2,511
  800ff8:	11c01f2e 	bgeu	r2,r7,801078 <_free_r+0x1a0>
  800ffc:	3806d27a 	srli	r3,r7,9
  801000:	1800481e 	bne	r3,zero,801124 <_free_r+0x24c>
  801004:	3804d0fa 	srli	r2,r7,3
  801008:	100690fa 	slli	r3,r2,3
  80100c:	1acd883a 	add	r6,r3,r11
  801010:	31400217 	ldw	r5,8(r6)
  801014:	31405926 	beq	r6,r5,80117c <_free_r+0x2a4>
  801018:	28800117 	ldw	r2,4(r5)
  80101c:	00ffff04 	movi	r3,-4
  801020:	10c4703a 	and	r2,r2,r3
  801024:	3880022e 	bgeu	r7,r2,801030 <_free_r+0x158>
  801028:	29400217 	ldw	r5,8(r5)
  80102c:	317ffa1e 	bne	r6,r5,801018 <_free_r+0x140>
  801030:	29800317 	ldw	r6,12(r5)
  801034:	41800315 	stw	r6,12(r8)
  801038:	41400215 	stw	r5,8(r8)
  80103c:	8809883a 	mov	r4,r17
  801040:	2a000315 	stw	r8,12(r5)
  801044:	32000215 	stw	r8,8(r6)
  801048:	dfc00217 	ldw	ra,8(sp)
  80104c:	dc400117 	ldw	r17,4(sp)
  801050:	dc000017 	ldw	r16,0(sp)
  801054:	dec00304 	addi	sp,sp,12
  801058:	080afdc1 	jmpi	80afdc <__malloc_unlock>
  80105c:	dfc00217 	ldw	ra,8(sp)
  801060:	dc400117 	ldw	r17,4(sp)
  801064:	dc000017 	ldw	r16,0(sp)
  801068:	dec00304 	addi	sp,sp,12
  80106c:	f800283a 	ret
  801070:	31000217 	ldw	r4,8(r6)
  801074:	003fbd06 	br	800f6c <_free_r+0x94>
  801078:	3806d0fa 	srli	r3,r7,3
  80107c:	00800044 	movi	r2,1
  801080:	51400117 	ldw	r5,4(r10)
  801084:	180890fa 	slli	r4,r3,3
  801088:	1807d0ba 	srai	r3,r3,2
  80108c:	22c9883a 	add	r4,r4,r11
  801090:	21800217 	ldw	r6,8(r4)
  801094:	10c4983a 	sll	r2,r2,r3
  801098:	41000315 	stw	r4,12(r8)
  80109c:	41800215 	stw	r6,8(r8)
  8010a0:	288ab03a 	or	r5,r5,r2
  8010a4:	22000215 	stw	r8,8(r4)
  8010a8:	8809883a 	mov	r4,r17
  8010ac:	51400115 	stw	r5,4(r10)
  8010b0:	32000315 	stw	r8,12(r6)
  8010b4:	dfc00217 	ldw	ra,8(sp)
  8010b8:	dc400117 	ldw	r17,4(sp)
  8010bc:	dc000017 	ldw	r16,0(sp)
  8010c0:	dec00304 	addi	sp,sp,12
  8010c4:	080afdc1 	jmpi	80afdc <__malloc_unlock>
  8010c8:	2880004c 	andi	r2,r5,1
  8010cc:	3a4d883a 	add	r6,r7,r9
  8010d0:	1000071e 	bne	r2,zero,8010f0 <_free_r+0x218>
  8010d4:	80bffe17 	ldw	r2,-8(r16)
  8010d8:	4091c83a 	sub	r8,r8,r2
  8010dc:	41000317 	ldw	r4,12(r8)
  8010e0:	40c00217 	ldw	r3,8(r8)
  8010e4:	308d883a 	add	r6,r6,r2
  8010e8:	20c00215 	stw	r3,8(r4)
  8010ec:	19000315 	stw	r4,12(r3)
  8010f0:	00802074 	movhi	r2,129
  8010f4:	10844904 	addi	r2,r2,4388
  8010f8:	11000017 	ldw	r4,0(r2)
  8010fc:	30c00054 	ori	r3,r6,1
  801100:	52000215 	stw	r8,8(r10)
  801104:	40c00115 	stw	r3,4(r8)
  801108:	313fa036 	bltu	r6,r4,800f8c <_free_r+0xb4>
  80110c:	00802074 	movhi	r2,129
  801110:	108b6c04 	addi	r2,r2,11696
  801114:	11400017 	ldw	r5,0(r2)
  801118:	8809883a 	mov	r4,r17
  80111c:	0800dac0 	call	800dac <_malloc_trim_r>
  801120:	003f9a06 	br	800f8c <_free_r+0xb4>
  801124:	00800104 	movi	r2,4
  801128:	10c0072e 	bgeu	r2,r3,801148 <_free_r+0x270>
  80112c:	00800504 	movi	r2,20
  801130:	10c01936 	bltu	r2,r3,801198 <_free_r+0x2c0>
  801134:	188016c4 	addi	r2,r3,91
  801138:	100690fa 	slli	r3,r2,3
  80113c:	003fb306 	br	80100c <_free_r+0x134>
  801140:	01400044 	movi	r5,1
  801144:	003f7e06 	br	800f40 <_free_r+0x68>
  801148:	3804d1ba 	srli	r2,r7,6
  80114c:	10800e04 	addi	r2,r2,56
  801150:	100690fa 	slli	r3,r2,3
  801154:	003fad06 	br	80100c <_free_r+0x134>
  801158:	22000315 	stw	r8,12(r4)
  80115c:	22000215 	stw	r8,8(r4)
  801160:	3a05883a 	add	r2,r7,r8
  801164:	38c00054 	ori	r3,r7,1
  801168:	11c00015 	stw	r7,0(r2)
  80116c:	41000215 	stw	r4,8(r8)
  801170:	40c00115 	stw	r3,4(r8)
  801174:	41000315 	stw	r4,12(r8)
  801178:	003f8406 	br	800f8c <_free_r+0xb4>
  80117c:	1005d0ba 	srai	r2,r2,2
  801180:	00c00044 	movi	r3,1
  801184:	51000117 	ldw	r4,4(r10)
  801188:	1886983a 	sll	r3,r3,r2
  80118c:	20c8b03a 	or	r4,r4,r3
  801190:	51000115 	stw	r4,4(r10)
  801194:	003fa706 	br	801034 <_free_r+0x15c>
  801198:	00801504 	movi	r2,84
  80119c:	10c00436 	bltu	r2,r3,8011b0 <_free_r+0x2d8>
  8011a0:	3804d33a 	srli	r2,r7,12
  8011a4:	10801b84 	addi	r2,r2,110
  8011a8:	100690fa 	slli	r3,r2,3
  8011ac:	003f9706 	br	80100c <_free_r+0x134>
  8011b0:	00805504 	movi	r2,340
  8011b4:	10c00436 	bltu	r2,r3,8011c8 <_free_r+0x2f0>
  8011b8:	3804d3fa 	srli	r2,r7,15
  8011bc:	10801dc4 	addi	r2,r2,119
  8011c0:	100690fa 	slli	r3,r2,3
  8011c4:	003f9106 	br	80100c <_free_r+0x134>
  8011c8:	00815504 	movi	r2,1364
  8011cc:	10c0032e 	bgeu	r2,r3,8011dc <_free_r+0x304>
  8011d0:	00801f84 	movi	r2,126
  8011d4:	00c0fc04 	movi	r3,1008
  8011d8:	003f8c06 	br	80100c <_free_r+0x134>
  8011dc:	3804d4ba 	srli	r2,r7,18
  8011e0:	10801f04 	addi	r2,r2,124
  8011e4:	100690fa 	slli	r3,r2,3
  8011e8:	003f8806 	br	80100c <_free_r+0x134>

008011ec <_fseek_r>:
  8011ec:	deffe804 	addi	sp,sp,-96
  8011f0:	dd801515 	stw	r22,84(sp)
  8011f4:	dcc01215 	stw	r19,72(sp)
  8011f8:	dc801115 	stw	r18,68(sp)
  8011fc:	dc000f15 	stw	r16,60(sp)
  801200:	dfc01715 	stw	ra,92(sp)
  801204:	ddc01615 	stw	r23,88(sp)
  801208:	dd401415 	stw	r21,80(sp)
  80120c:	dd001315 	stw	r20,76(sp)
  801210:	dc401015 	stw	r17,64(sp)
  801214:	2025883a 	mov	r18,r4
  801218:	2821883a 	mov	r16,r5
  80121c:	302d883a 	mov	r22,r6
  801220:	3827883a 	mov	r19,r7
  801224:	20000226 	beq	r4,zero,801230 <_fseek_r+0x44>
  801228:	20800e17 	ldw	r2,56(r4)
  80122c:	10007826 	beq	r2,zero,801410 <_fseek_r+0x224>
  801230:	8080030b 	ldhu	r2,12(r16)
  801234:	00c04204 	movi	r3,264
  801238:	1080420c 	andi	r2,r2,264
  80123c:	10c07926 	beq	r2,r3,801424 <_fseek_r+0x238>
  801240:	85400a17 	ldw	r21,40(r16)
  801244:	a800ea26 	beq	r21,zero,8015f0 <_fseek_r+0x404>
  801248:	00800044 	movi	r2,1
  80124c:	98805f26 	beq	r19,r2,8013cc <_fseek_r+0x1e0>
  801250:	00800084 	movi	r2,2
  801254:	98801026 	beq	r19,r2,801298 <_fseek_r+0xac>
  801258:	98000f26 	beq	r19,zero,801298 <_fseek_r+0xac>
  80125c:	00800584 	movi	r2,22
  801260:	013fffc4 	movi	r4,-1
  801264:	90800015 	stw	r2,0(r18)
  801268:	2005883a 	mov	r2,r4
  80126c:	dfc01717 	ldw	ra,92(sp)
  801270:	ddc01617 	ldw	r23,88(sp)
  801274:	dd801517 	ldw	r22,84(sp)
  801278:	dd401417 	ldw	r21,80(sp)
  80127c:	dd001317 	ldw	r20,76(sp)
  801280:	dcc01217 	ldw	r19,72(sp)
  801284:	dc801117 	ldw	r18,68(sp)
  801288:	dc401017 	ldw	r17,64(sp)
  80128c:	dc000f17 	ldw	r16,60(sp)
  801290:	dec01804 	addi	sp,sp,96
  801294:	f800283a 	ret
  801298:	81800417 	ldw	r6,16(r16)
  80129c:	0023883a 	mov	r17,zero
  8012a0:	002f883a 	mov	r23,zero
  8012a4:	3000a626 	beq	r6,zero,801540 <_fseek_r+0x354>
  8012a8:	8100030b 	ldhu	r4,12(r16)
  8012ac:	2082068c 	andi	r2,r4,2074
  8012b0:	1000081e 	bne	r2,zero,8012d4 <_fseek_r+0xe8>
  8012b4:	2081000c 	andi	r2,r4,1024
  8012b8:	10001b1e 	bne	r2,zero,801328 <_fseek_r+0x13c>
  8012bc:	00802034 	movhi	r2,128
  8012c0:	10896a04 	addi	r2,r2,9640
  8012c4:	a8800926 	beq	r21,r2,8012ec <_fseek_r+0x100>
  8012c8:	8080030b 	ldhu	r2,12(r16)
  8012cc:	10820014 	ori	r2,r2,2048
  8012d0:	8080030d 	sth	r2,12(r16)
  8012d4:	9009883a 	mov	r4,r18
  8012d8:	800b883a 	mov	r5,r16
  8012dc:	08007180 	call	800718 <_fflush_r>
  8012e0:	1000a326 	beq	r2,zero,801570 <_fseek_r+0x384>
  8012e4:	013fffc4 	movi	r4,-1
  8012e8:	003fdf06 	br	801268 <_fseek_r+0x7c>
  8012ec:	8140038f 	ldh	r5,14(r16)
  8012f0:	283ff516 	blt	r5,zero,8012c8 <_fseek_r+0xdc>
  8012f4:	9009883a 	mov	r4,r18
  8012f8:	d80d883a 	mov	r6,sp
  8012fc:	080164c0 	call	80164c <_fstat_r>
  801300:	103ff11e 	bne	r2,zero,8012c8 <_fseek_r+0xdc>
  801304:	d8800117 	ldw	r2,4(sp)
  801308:	00e00014 	movui	r3,32768
  80130c:	10bc000c 	andi	r2,r2,61440
  801310:	10ffed1e 	bne	r2,r3,8012c8 <_fseek_r+0xdc>
  801314:	80c0030b 	ldhu	r3,12(r16)
  801318:	00810004 	movi	r2,1024
  80131c:	80801315 	stw	r2,76(r16)
  801320:	1886b03a 	or	r3,r3,r2
  801324:	80c0030d 	sth	r3,12(r16)
  801328:	9800701e 	bne	r19,zero,8014ec <_fseek_r+0x300>
  80132c:	b029883a 	mov	r20,r22
  801330:	b804c03a 	cmpne	r2,r23,zero
  801334:	10003f1e 	bne	r2,zero,801434 <_fseek_r+0x248>
  801338:	8100030b 	ldhu	r4,12(r16)
  80133c:	2084000c 	andi	r2,r4,4096
  801340:	1000a126 	beq	r2,zero,8015c8 <_fseek_r+0x3dc>
  801344:	81801417 	ldw	r6,80(r16)
  801348:	80c00117 	ldw	r3,4(r16)
  80134c:	81400c17 	ldw	r5,48(r16)
  801350:	30e3c83a 	sub	r17,r6,r3
  801354:	28008026 	beq	r5,zero,801558 <_fseek_r+0x36c>
  801358:	81c00f17 	ldw	r7,60(r16)
  80135c:	89e3c83a 	sub	r17,r17,r7
  801360:	80800e17 	ldw	r2,56(r16)
  801364:	81800417 	ldw	r6,16(r16)
  801368:	88c7883a 	add	r3,r17,r3
  80136c:	1185c83a 	sub	r2,r2,r6
  801370:	11cf883a 	add	r7,r2,r7
  801374:	1887c83a 	sub	r3,r3,r2
  801378:	2088000c 	andi	r2,r4,8192
  80137c:	10003e1e 	bne	r2,zero,801478 <_fseek_r+0x28c>
  801380:	a0c03d16 	blt	r20,r3,801478 <_fseek_r+0x28c>
  801384:	38c5883a 	add	r2,r7,r3
  801388:	a0803b2e 	bgeu	r20,r2,801478 <_fseek_r+0x28c>
  80138c:	a0c5c83a 	sub	r2,r20,r3
  801390:	3887c83a 	sub	r3,r7,r2
  801394:	3085883a 	add	r2,r6,r2
  801398:	80800015 	stw	r2,0(r16)
  80139c:	80c00115 	stw	r3,4(r16)
  8013a0:	28000526 	beq	r5,zero,8013b8 <_fseek_r+0x1cc>
  8013a4:	80801004 	addi	r2,r16,64
  8013a8:	28800226 	beq	r5,r2,8013b4 <_fseek_r+0x1c8>
  8013ac:	9009883a 	mov	r4,r18
  8013b0:	0800ed80 	call	800ed8 <_free_r>
  8013b4:	80000c15 	stw	zero,48(r16)
  8013b8:	8080030b 	ldhu	r2,12(r16)
  8013bc:	0009883a 	mov	r4,zero
  8013c0:	10bff7cc 	andi	r2,r2,65503
  8013c4:	8080030d 	sth	r2,12(r16)
  8013c8:	003fa706 	br	801268 <_fseek_r+0x7c>
  8013cc:	9009883a 	mov	r4,r18
  8013d0:	800b883a 	mov	r5,r16
  8013d4:	08007180 	call	800718 <_fflush_r>
  8013d8:	8100030b 	ldhu	r4,12(r16)
  8013dc:	2084000c 	andi	r2,r4,4096
  8013e0:	10008726 	beq	r2,zero,801600 <_fseek_r+0x414>
  8013e4:	84401417 	ldw	r17,80(r16)
  8013e8:	2080010c 	andi	r2,r4,4
  8013ec:	1000171e 	bne	r2,zero,80144c <_fseek_r+0x260>
  8013f0:	2080020c 	andi	r2,r4,8
  8013f4:	10003b26 	beq	r2,zero,8014e4 <_fseek_r+0x2f8>
  8013f8:	80800017 	ldw	r2,0(r16)
  8013fc:	10003926 	beq	r2,zero,8014e4 <_fseek_r+0x2f8>
  801400:	81800417 	ldw	r6,16(r16)
  801404:	1185c83a 	sub	r2,r2,r6
  801408:	88a3883a 	add	r17,r17,r2
  80140c:	00001606 	br	801468 <_fseek_r+0x27c>
  801410:	08009b00 	call	8009b0 <__sinit>
  801414:	8080030b 	ldhu	r2,12(r16)
  801418:	00c04204 	movi	r3,264
  80141c:	1080420c 	andi	r2,r2,264
  801420:	10ff871e 	bne	r2,r3,801240 <_fseek_r+0x54>
  801424:	9009883a 	mov	r4,r18
  801428:	800b883a 	mov	r5,r16
  80142c:	08007180 	call	800718 <_fflush_r>
  801430:	003f8306 	br	801240 <_fseek_r+0x54>
  801434:	81400c17 	ldw	r5,48(r16)
  801438:	28004526 	beq	r5,zero,801550 <_fseek_r+0x364>
  80143c:	8100030b 	ldhu	r4,12(r16)
  801440:	80c00117 	ldw	r3,4(r16)
  801444:	81c00f17 	ldw	r7,60(r16)
  801448:	003fc506 	br	801360 <_fseek_r+0x174>
  80144c:	80c00117 	ldw	r3,4(r16)
  801450:	80800c17 	ldw	r2,48(r16)
  801454:	88e3c83a 	sub	r17,r17,r3
  801458:	10002226 	beq	r2,zero,8014e4 <_fseek_r+0x2f8>
  80145c:	81c00f17 	ldw	r7,60(r16)
  801460:	81800417 	ldw	r6,16(r16)
  801464:	89e3c83a 	sub	r17,r17,r7
  801468:	b46d883a 	add	r22,r22,r17
  80146c:	0027883a 	mov	r19,zero
  801470:	05c00044 	movi	r23,1
  801474:	003f8b06 	br	8012a4 <_fseek_r+0xb8>
  801478:	80801317 	ldw	r2,76(r16)
  80147c:	81400717 	ldw	r5,28(r16)
  801480:	9009883a 	mov	r4,r18
  801484:	0085c83a 	sub	r2,zero,r2
  801488:	a0a2703a 	and	r17,r20,r2
  80148c:	880d883a 	mov	r6,r17
  801490:	000f883a 	mov	r7,zero
  801494:	a83ee83a 	callr	r21
  801498:	00ffffc4 	movi	r3,-1
  80149c:	10ff8d26 	beq	r2,r3,8012d4 <_fseek_r+0xe8>
  8014a0:	80800417 	ldw	r2,16(r16)
  8014a4:	81400c17 	ldw	r5,48(r16)
  8014a8:	80000115 	stw	zero,4(r16)
  8014ac:	80800015 	stw	r2,0(r16)
  8014b0:	28000526 	beq	r5,zero,8014c8 <_fseek_r+0x2dc>
  8014b4:	80801004 	addi	r2,r16,64
  8014b8:	28800226 	beq	r5,r2,8014c4 <_fseek_r+0x2d8>
  8014bc:	9009883a 	mov	r4,r18
  8014c0:	0800ed80 	call	800ed8 <_free_r>
  8014c4:	80000c15 	stw	zero,48(r16)
  8014c8:	8080030b 	ldhu	r2,12(r16)
  8014cc:	a463c83a 	sub	r17,r20,r17
  8014d0:	10bff7cc 	andi	r2,r2,65503
  8014d4:	8080030d 	sth	r2,12(r16)
  8014d8:	88000c1e 	bne	r17,zero,80150c <_fseek_r+0x320>
  8014dc:	0009883a 	mov	r4,zero
  8014e0:	003f6106 	br	801268 <_fseek_r+0x7c>
  8014e4:	81800417 	ldw	r6,16(r16)
  8014e8:	003fdf06 	br	801468 <_fseek_r+0x27c>
  8014ec:	8140038f 	ldh	r5,14(r16)
  8014f0:	9009883a 	mov	r4,r18
  8014f4:	d80d883a 	mov	r6,sp
  8014f8:	080164c0 	call	80164c <_fstat_r>
  8014fc:	103f751e 	bne	r2,zero,8012d4 <_fseek_r+0xe8>
  801500:	d8800417 	ldw	r2,16(sp)
  801504:	b0a9883a 	add	r20,r22,r2
  801508:	003f8906 	br	801330 <_fseek_r+0x144>
  80150c:	9009883a 	mov	r4,r18
  801510:	800b883a 	mov	r5,r16
  801514:	08023500 	call	802350 <__srefill_r>
  801518:	103f6e1e 	bne	r2,zero,8012d4 <_fseek_r+0xe8>
  80151c:	80c00117 	ldw	r3,4(r16)
  801520:	1c7f6c36 	bltu	r3,r17,8012d4 <_fseek_r+0xe8>
  801524:	80800017 	ldw	r2,0(r16)
  801528:	1c47c83a 	sub	r3,r3,r17
  80152c:	0009883a 	mov	r4,zero
  801530:	1445883a 	add	r2,r2,r17
  801534:	80c00115 	stw	r3,4(r16)
  801538:	80800015 	stw	r2,0(r16)
  80153c:	003f4a06 	br	801268 <_fseek_r+0x7c>
  801540:	9009883a 	mov	r4,r18
  801544:	800b883a 	mov	r5,r16
  801548:	08018400 	call	801840 <__smakebuf_r>
  80154c:	003f5606 	br	8012a8 <_fseek_r+0xbc>
  801550:	8100030b 	ldhu	r4,12(r16)
  801554:	80c00117 	ldw	r3,4(r16)
  801558:	80800017 	ldw	r2,0(r16)
  80155c:	81800417 	ldw	r6,16(r16)
  801560:	1185c83a 	sub	r2,r2,r6
  801564:	10cf883a 	add	r7,r2,r3
  801568:	8887c83a 	sub	r3,r17,r2
  80156c:	003f8206 	br	801378 <_fseek_r+0x18c>
  801570:	81400717 	ldw	r5,28(r16)
  801574:	b00d883a 	mov	r6,r22
  801578:	980f883a 	mov	r7,r19
  80157c:	9009883a 	mov	r4,r18
  801580:	a83ee83a 	callr	r21
  801584:	00ffffc4 	movi	r3,-1
  801588:	10ff5626 	beq	r2,r3,8012e4 <_fseek_r+0xf8>
  80158c:	81400c17 	ldw	r5,48(r16)
  801590:	28000526 	beq	r5,zero,8015a8 <_fseek_r+0x3bc>
  801594:	80801004 	addi	r2,r16,64
  801598:	28800226 	beq	r5,r2,8015a4 <_fseek_r+0x3b8>
  80159c:	9009883a 	mov	r4,r18
  8015a0:	0800ed80 	call	800ed8 <_free_r>
  8015a4:	80000c15 	stw	zero,48(r16)
  8015a8:	8080030b 	ldhu	r2,12(r16)
  8015ac:	80c00417 	ldw	r3,16(r16)
  8015b0:	0009883a 	mov	r4,zero
  8015b4:	10bdf7cc 	andi	r2,r2,63455
  8015b8:	8080030d 	sth	r2,12(r16)
  8015bc:	80c00015 	stw	r3,0(r16)
  8015c0:	80000115 	stw	zero,4(r16)
  8015c4:	003f2806 	br	801268 <_fseek_r+0x7c>
  8015c8:	81400717 	ldw	r5,28(r16)
  8015cc:	000d883a 	mov	r6,zero
  8015d0:	9009883a 	mov	r4,r18
  8015d4:	01c00044 	movi	r7,1
  8015d8:	a83ee83a 	callr	r21
  8015dc:	100d883a 	mov	r6,r2
  8015e0:	00bfffc4 	movi	r2,-1
  8015e4:	30bf3b26 	beq	r6,r2,8012d4 <_fseek_r+0xe8>
  8015e8:	8100030b 	ldhu	r4,12(r16)
  8015ec:	003f5606 	br	801348 <_fseek_r+0x15c>
  8015f0:	00800744 	movi	r2,29
  8015f4:	013fffc4 	movi	r4,-1
  8015f8:	90800015 	stw	r2,0(r18)
  8015fc:	003f1a06 	br	801268 <_fseek_r+0x7c>
  801600:	81400717 	ldw	r5,28(r16)
  801604:	980f883a 	mov	r7,r19
  801608:	9009883a 	mov	r4,r18
  80160c:	000d883a 	mov	r6,zero
  801610:	a83ee83a 	callr	r21
  801614:	1023883a 	mov	r17,r2
  801618:	00bfffc4 	movi	r2,-1
  80161c:	88bf3126 	beq	r17,r2,8012e4 <_fseek_r+0xf8>
  801620:	8100030b 	ldhu	r4,12(r16)
  801624:	003f7006 	br	8013e8 <_fseek_r+0x1fc>

00801628 <fseek>:
  801628:	00802074 	movhi	r2,129
  80162c:	10844704 	addi	r2,r2,4380
  801630:	2013883a 	mov	r9,r4
  801634:	11000017 	ldw	r4,0(r2)
  801638:	2805883a 	mov	r2,r5
  80163c:	300f883a 	mov	r7,r6
  801640:	480b883a 	mov	r5,r9
  801644:	100d883a 	mov	r6,r2
  801648:	08011ec1 	jmpi	8011ec <_fseek_r>

0080164c <_fstat_r>:
  80164c:	defffd04 	addi	sp,sp,-12
  801650:	dc000015 	stw	r16,0(sp)
  801654:	04002074 	movhi	r16,129
  801658:	840b6b04 	addi	r16,r16,11692
  80165c:	dc400115 	stw	r17,4(sp)
  801660:	80000015 	stw	zero,0(r16)
  801664:	2023883a 	mov	r17,r4
  801668:	2809883a 	mov	r4,r5
  80166c:	300b883a 	mov	r5,r6
  801670:	dfc00215 	stw	ra,8(sp)
  801674:	080aab40 	call	80aab4 <fstat>
  801678:	1007883a 	mov	r3,r2
  80167c:	00bfffc4 	movi	r2,-1
  801680:	18800626 	beq	r3,r2,80169c <_fstat_r+0x50>
  801684:	1805883a 	mov	r2,r3
  801688:	dfc00217 	ldw	ra,8(sp)
  80168c:	dc400117 	ldw	r17,4(sp)
  801690:	dc000017 	ldw	r16,0(sp)
  801694:	dec00304 	addi	sp,sp,12
  801698:	f800283a 	ret
  80169c:	80800017 	ldw	r2,0(r16)
  8016a0:	103ff826 	beq	r2,zero,801684 <_fstat_r+0x38>
  8016a4:	88800015 	stw	r2,0(r17)
  8016a8:	1805883a 	mov	r2,r3
  8016ac:	dfc00217 	ldw	ra,8(sp)
  8016b0:	dc400117 	ldw	r17,4(sp)
  8016b4:	dc000017 	ldw	r16,0(sp)
  8016b8:	dec00304 	addi	sp,sp,12
  8016bc:	f800283a 	ret

008016c0 <_fwalk_reent>:
  8016c0:	defff704 	addi	sp,sp,-36
  8016c4:	dcc00315 	stw	r19,12(sp)
  8016c8:	24c0b804 	addi	r19,r4,736
  8016cc:	dd800615 	stw	r22,24(sp)
  8016d0:	dd400515 	stw	r21,20(sp)
  8016d4:	dfc00815 	stw	ra,32(sp)
  8016d8:	ddc00715 	stw	r23,28(sp)
  8016dc:	dd000415 	stw	r20,16(sp)
  8016e0:	dc800215 	stw	r18,8(sp)
  8016e4:	dc400115 	stw	r17,4(sp)
  8016e8:	dc000015 	stw	r16,0(sp)
  8016ec:	202b883a 	mov	r21,r4
  8016f0:	282d883a 	mov	r22,r5
  8016f4:	08009a00 	call	8009a0 <__sfp_lock_acquire>
  8016f8:	98002126 	beq	r19,zero,801780 <_fwalk_reent+0xc0>
  8016fc:	002f883a 	mov	r23,zero
  801700:	9c800117 	ldw	r18,4(r19)
  801704:	9c000217 	ldw	r16,8(r19)
  801708:	90bfffc4 	addi	r2,r18,-1
  80170c:	10000d16 	blt	r2,zero,801744 <_fwalk_reent+0x84>
  801710:	0023883a 	mov	r17,zero
  801714:	053fffc4 	movi	r20,-1
  801718:	8080030f 	ldh	r2,12(r16)
  80171c:	8c400044 	addi	r17,r17,1
  801720:	10000626 	beq	r2,zero,80173c <_fwalk_reent+0x7c>
  801724:	8080038f 	ldh	r2,14(r16)
  801728:	800b883a 	mov	r5,r16
  80172c:	a809883a 	mov	r4,r21
  801730:	15000226 	beq	r2,r20,80173c <_fwalk_reent+0x7c>
  801734:	b03ee83a 	callr	r22
  801738:	b8aeb03a 	or	r23,r23,r2
  80173c:	84001704 	addi	r16,r16,92
  801740:	947ff51e 	bne	r18,r17,801718 <_fwalk_reent+0x58>
  801744:	9cc00017 	ldw	r19,0(r19)
  801748:	983fed1e 	bne	r19,zero,801700 <_fwalk_reent+0x40>
  80174c:	08009a40 	call	8009a4 <__sfp_lock_release>
  801750:	b805883a 	mov	r2,r23
  801754:	dfc00817 	ldw	ra,32(sp)
  801758:	ddc00717 	ldw	r23,28(sp)
  80175c:	dd800617 	ldw	r22,24(sp)
  801760:	dd400517 	ldw	r21,20(sp)
  801764:	dd000417 	ldw	r20,16(sp)
  801768:	dcc00317 	ldw	r19,12(sp)
  80176c:	dc800217 	ldw	r18,8(sp)
  801770:	dc400117 	ldw	r17,4(sp)
  801774:	dc000017 	ldw	r16,0(sp)
  801778:	dec00904 	addi	sp,sp,36
  80177c:	f800283a 	ret
  801780:	002f883a 	mov	r23,zero
  801784:	003ff106 	br	80174c <_fwalk_reent+0x8c>

00801788 <_fwalk>:
  801788:	defff804 	addi	sp,sp,-32
  80178c:	dcc00315 	stw	r19,12(sp)
  801790:	24c0b804 	addi	r19,r4,736
  801794:	dd400515 	stw	r21,20(sp)
  801798:	dfc00715 	stw	ra,28(sp)
  80179c:	dd800615 	stw	r22,24(sp)
  8017a0:	dd000415 	stw	r20,16(sp)
  8017a4:	dc800215 	stw	r18,8(sp)
  8017a8:	dc400115 	stw	r17,4(sp)
  8017ac:	dc000015 	stw	r16,0(sp)
  8017b0:	282b883a 	mov	r21,r5
  8017b4:	08009a00 	call	8009a0 <__sfp_lock_acquire>
  8017b8:	98001f26 	beq	r19,zero,801838 <_fwalk+0xb0>
  8017bc:	002d883a 	mov	r22,zero
  8017c0:	9c800117 	ldw	r18,4(r19)
  8017c4:	9c000217 	ldw	r16,8(r19)
  8017c8:	90bfffc4 	addi	r2,r18,-1
  8017cc:	10000c16 	blt	r2,zero,801800 <_fwalk+0x78>
  8017d0:	0023883a 	mov	r17,zero
  8017d4:	053fffc4 	movi	r20,-1
  8017d8:	8080030f 	ldh	r2,12(r16)
  8017dc:	8c400044 	addi	r17,r17,1
  8017e0:	10000526 	beq	r2,zero,8017f8 <_fwalk+0x70>
  8017e4:	8080038f 	ldh	r2,14(r16)
  8017e8:	8009883a 	mov	r4,r16
  8017ec:	15000226 	beq	r2,r20,8017f8 <_fwalk+0x70>
  8017f0:	a83ee83a 	callr	r21
  8017f4:	b0acb03a 	or	r22,r22,r2
  8017f8:	84001704 	addi	r16,r16,92
  8017fc:	947ff61e 	bne	r18,r17,8017d8 <_fwalk+0x50>
  801800:	9cc00017 	ldw	r19,0(r19)
  801804:	983fee1e 	bne	r19,zero,8017c0 <_fwalk+0x38>
  801808:	08009a40 	call	8009a4 <__sfp_lock_release>
  80180c:	b005883a 	mov	r2,r22
  801810:	dfc00717 	ldw	ra,28(sp)
  801814:	dd800617 	ldw	r22,24(sp)
  801818:	dd400517 	ldw	r21,20(sp)
  80181c:	dd000417 	ldw	r20,16(sp)
  801820:	dcc00317 	ldw	r19,12(sp)
  801824:	dc800217 	ldw	r18,8(sp)
  801828:	dc400117 	ldw	r17,4(sp)
  80182c:	dc000017 	ldw	r16,0(sp)
  801830:	dec00804 	addi	sp,sp,32
  801834:	f800283a 	ret
  801838:	002d883a 	mov	r22,zero
  80183c:	003ff206 	br	801808 <_fwalk+0x80>

00801840 <__smakebuf_r>:
  801840:	2880030b 	ldhu	r2,12(r5)
  801844:	deffed04 	addi	sp,sp,-76
  801848:	dc401015 	stw	r17,64(sp)
  80184c:	1080008c 	andi	r2,r2,2
  801850:	dc000f15 	stw	r16,60(sp)
  801854:	dfc01215 	stw	ra,72(sp)
  801858:	dc801115 	stw	r18,68(sp)
  80185c:	2821883a 	mov	r16,r5
  801860:	2023883a 	mov	r17,r4
  801864:	10000b26 	beq	r2,zero,801894 <__smakebuf_r+0x54>
  801868:	28c010c4 	addi	r3,r5,67
  80186c:	00800044 	movi	r2,1
  801870:	28800515 	stw	r2,20(r5)
  801874:	28c00415 	stw	r3,16(r5)
  801878:	28c00015 	stw	r3,0(r5)
  80187c:	dfc01217 	ldw	ra,72(sp)
  801880:	dc801117 	ldw	r18,68(sp)
  801884:	dc401017 	ldw	r17,64(sp)
  801888:	dc000f17 	ldw	r16,60(sp)
  80188c:	dec01304 	addi	sp,sp,76
  801890:	f800283a 	ret
  801894:	2940038f 	ldh	r5,14(r5)
  801898:	28002116 	blt	r5,zero,801920 <__smakebuf_r+0xe0>
  80189c:	d80d883a 	mov	r6,sp
  8018a0:	080164c0 	call	80164c <_fstat_r>
  8018a4:	10001e16 	blt	r2,zero,801920 <__smakebuf_r+0xe0>
  8018a8:	d8800117 	ldw	r2,4(sp)
  8018ac:	00e00014 	movui	r3,32768
  8018b0:	113c000c 	andi	r4,r2,61440
  8018b4:	20c03126 	beq	r4,r3,80197c <__smakebuf_r+0x13c>
  8018b8:	8080030b 	ldhu	r2,12(r16)
  8018bc:	00c80004 	movi	r3,8192
  8018c0:	10820014 	ori	r2,r2,2048
  8018c4:	8080030d 	sth	r2,12(r16)
  8018c8:	20c01e26 	beq	r4,r3,801944 <__smakebuf_r+0x104>
  8018cc:	04810004 	movi	r18,1024
  8018d0:	8809883a 	mov	r4,r17
  8018d4:	900b883a 	mov	r5,r18
  8018d8:	08019d40 	call	8019d4 <_malloc_r>
  8018dc:	1009883a 	mov	r4,r2
  8018e0:	10003126 	beq	r2,zero,8019a8 <__smakebuf_r+0x168>
  8018e4:	80c0030b 	ldhu	r3,12(r16)
  8018e8:	00802034 	movhi	r2,128
  8018ec:	1082a504 	addi	r2,r2,2708
  8018f0:	88800f15 	stw	r2,60(r17)
  8018f4:	18c02014 	ori	r3,r3,128
  8018f8:	84800515 	stw	r18,20(r16)
  8018fc:	80c0030d 	sth	r3,12(r16)
  801900:	81000415 	stw	r4,16(r16)
  801904:	81000015 	stw	r4,0(r16)
  801908:	dfc01217 	ldw	ra,72(sp)
  80190c:	dc801117 	ldw	r18,68(sp)
  801910:	dc401017 	ldw	r17,64(sp)
  801914:	dc000f17 	ldw	r16,60(sp)
  801918:	dec01304 	addi	sp,sp,76
  80191c:	f800283a 	ret
  801920:	80c0030b 	ldhu	r3,12(r16)
  801924:	1880200c 	andi	r2,r3,128
  801928:	10000426 	beq	r2,zero,80193c <__smakebuf_r+0xfc>
  80192c:	04801004 	movi	r18,64
  801930:	18820014 	ori	r2,r3,2048
  801934:	8080030d 	sth	r2,12(r16)
  801938:	003fe506 	br	8018d0 <__smakebuf_r+0x90>
  80193c:	04810004 	movi	r18,1024
  801940:	003ffb06 	br	801930 <__smakebuf_r+0xf0>
  801944:	8140038f 	ldh	r5,14(r16)
  801948:	8809883a 	mov	r4,r17
  80194c:	08065f80 	call	8065f8 <_isatty_r>
  801950:	103fde26 	beq	r2,zero,8018cc <__smakebuf_r+0x8c>
  801954:	8080030b 	ldhu	r2,12(r16)
  801958:	80c010c4 	addi	r3,r16,67
  80195c:	04810004 	movi	r18,1024
  801960:	10800054 	ori	r2,r2,1
  801964:	8080030d 	sth	r2,12(r16)
  801968:	00800044 	movi	r2,1
  80196c:	80c00415 	stw	r3,16(r16)
  801970:	80800515 	stw	r2,20(r16)
  801974:	80c00015 	stw	r3,0(r16)
  801978:	003fd506 	br	8018d0 <__smakebuf_r+0x90>
  80197c:	80c00a17 	ldw	r3,40(r16)
  801980:	00802034 	movhi	r2,128
  801984:	10896a04 	addi	r2,r2,9640
  801988:	18bfcb1e 	bne	r3,r2,8018b8 <__smakebuf_r+0x78>
  80198c:	8080030b 	ldhu	r2,12(r16)
  801990:	00c10004 	movi	r3,1024
  801994:	1825883a 	mov	r18,r3
  801998:	10c4b03a 	or	r2,r2,r3
  80199c:	8080030d 	sth	r2,12(r16)
  8019a0:	80c01315 	stw	r3,76(r16)
  8019a4:	003fca06 	br	8018d0 <__smakebuf_r+0x90>
  8019a8:	8100030b 	ldhu	r4,12(r16)
  8019ac:	2080800c 	andi	r2,r4,512
  8019b0:	103fb21e 	bne	r2,zero,80187c <__smakebuf_r+0x3c>
  8019b4:	80c010c4 	addi	r3,r16,67
  8019b8:	21000094 	ori	r4,r4,2
  8019bc:	00800044 	movi	r2,1
  8019c0:	80800515 	stw	r2,20(r16)
  8019c4:	8100030d 	sth	r4,12(r16)
  8019c8:	80c00415 	stw	r3,16(r16)
  8019cc:	80c00015 	stw	r3,0(r16)
  8019d0:	003faa06 	br	80187c <__smakebuf_r+0x3c>

008019d4 <_malloc_r>:
  8019d4:	defff604 	addi	sp,sp,-40
  8019d8:	28c002c4 	addi	r3,r5,11
  8019dc:	00800584 	movi	r2,22
  8019e0:	dc800215 	stw	r18,8(sp)
  8019e4:	dfc00915 	stw	ra,36(sp)
  8019e8:	df000815 	stw	fp,32(sp)
  8019ec:	ddc00715 	stw	r23,28(sp)
  8019f0:	dd800615 	stw	r22,24(sp)
  8019f4:	dd400515 	stw	r21,20(sp)
  8019f8:	dd000415 	stw	r20,16(sp)
  8019fc:	dcc00315 	stw	r19,12(sp)
  801a00:	dc400115 	stw	r17,4(sp)
  801a04:	dc000015 	stw	r16,0(sp)
  801a08:	2025883a 	mov	r18,r4
  801a0c:	10c01236 	bltu	r2,r3,801a58 <_malloc_r+0x84>
  801a10:	04400404 	movi	r17,16
  801a14:	8940142e 	bgeu	r17,r5,801a68 <_malloc_r+0x94>
  801a18:	00800304 	movi	r2,12
  801a1c:	0007883a 	mov	r3,zero
  801a20:	90800015 	stw	r2,0(r18)
  801a24:	1805883a 	mov	r2,r3
  801a28:	dfc00917 	ldw	ra,36(sp)
  801a2c:	df000817 	ldw	fp,32(sp)
  801a30:	ddc00717 	ldw	r23,28(sp)
  801a34:	dd800617 	ldw	r22,24(sp)
  801a38:	dd400517 	ldw	r21,20(sp)
  801a3c:	dd000417 	ldw	r20,16(sp)
  801a40:	dcc00317 	ldw	r19,12(sp)
  801a44:	dc800217 	ldw	r18,8(sp)
  801a48:	dc400117 	ldw	r17,4(sp)
  801a4c:	dc000017 	ldw	r16,0(sp)
  801a50:	dec00a04 	addi	sp,sp,40
  801a54:	f800283a 	ret
  801a58:	00bffe04 	movi	r2,-8
  801a5c:	18a2703a 	and	r17,r3,r2
  801a60:	883fed16 	blt	r17,zero,801a18 <_malloc_r+0x44>
  801a64:	897fec36 	bltu	r17,r5,801a18 <_malloc_r+0x44>
  801a68:	9009883a 	mov	r4,r18
  801a6c:	080afbc0 	call	80afbc <__malloc_lock>
  801a70:	00807dc4 	movi	r2,503
  801a74:	14402b2e 	bgeu	r2,r17,801b24 <_malloc_r+0x150>
  801a78:	8806d27a 	srli	r3,r17,9
  801a7c:	18003f1e 	bne	r3,zero,801b7c <_malloc_r+0x1a8>
  801a80:	880cd0fa 	srli	r6,r17,3
  801a84:	300490fa 	slli	r2,r6,3
  801a88:	02c02074 	movhi	r11,129
  801a8c:	5afe4704 	addi	r11,r11,-1764
  801a90:	12cb883a 	add	r5,r2,r11
  801a94:	2c000317 	ldw	r16,12(r5)
  801a98:	580f883a 	mov	r7,r11
  801a9c:	2c00041e 	bne	r5,r16,801ab0 <_malloc_r+0xdc>
  801aa0:	00000a06 	br	801acc <_malloc_r+0xf8>
  801aa4:	1800860e 	bge	r3,zero,801cc0 <_malloc_r+0x2ec>
  801aa8:	84000317 	ldw	r16,12(r16)
  801aac:	2c000726 	beq	r5,r16,801acc <_malloc_r+0xf8>
  801ab0:	80800117 	ldw	r2,4(r16)
  801ab4:	00ffff04 	movi	r3,-4
  801ab8:	10c8703a 	and	r4,r2,r3
  801abc:	2447c83a 	sub	r3,r4,r17
  801ac0:	008003c4 	movi	r2,15
  801ac4:	10fff70e 	bge	r2,r3,801aa4 <_malloc_r+0xd0>
  801ac8:	31bfffc4 	addi	r6,r6,-1
  801acc:	32400044 	addi	r9,r6,1
  801ad0:	02802074 	movhi	r10,129
  801ad4:	52be4904 	addi	r10,r10,-1756
  801ad8:	54000217 	ldw	r16,8(r10)
  801adc:	8280a026 	beq	r16,r10,801d60 <_malloc_r+0x38c>
  801ae0:	80800117 	ldw	r2,4(r16)
  801ae4:	00ffff04 	movi	r3,-4
  801ae8:	10ca703a 	and	r5,r2,r3
  801aec:	2c4dc83a 	sub	r6,r5,r17
  801af0:	008003c4 	movi	r2,15
  801af4:	11808316 	blt	r2,r6,801d04 <_malloc_r+0x330>
  801af8:	52800315 	stw	r10,12(r10)
  801afc:	52800215 	stw	r10,8(r10)
  801b00:	30002916 	blt	r6,zero,801ba8 <_malloc_r+0x1d4>
  801b04:	8147883a 	add	r3,r16,r5
  801b08:	18800117 	ldw	r2,4(r3)
  801b0c:	9009883a 	mov	r4,r18
  801b10:	10800054 	ori	r2,r2,1
  801b14:	18800115 	stw	r2,4(r3)
  801b18:	080afdc0 	call	80afdc <__malloc_unlock>
  801b1c:	80c00204 	addi	r3,r16,8
  801b20:	003fc006 	br	801a24 <_malloc_r+0x50>
  801b24:	02c02074 	movhi	r11,129
  801b28:	5afe4704 	addi	r11,r11,-1764
  801b2c:	8ac5883a 	add	r2,r17,r11
  801b30:	14000317 	ldw	r16,12(r2)
  801b34:	580f883a 	mov	r7,r11
  801b38:	8806d0fa 	srli	r3,r17,3
  801b3c:	14006c26 	beq	r2,r16,801cf0 <_malloc_r+0x31c>
  801b40:	80c00117 	ldw	r3,4(r16)
  801b44:	00bfff04 	movi	r2,-4
  801b48:	81800317 	ldw	r6,12(r16)
  801b4c:	1886703a 	and	r3,r3,r2
  801b50:	80c7883a 	add	r3,r16,r3
  801b54:	18800117 	ldw	r2,4(r3)
  801b58:	81400217 	ldw	r5,8(r16)
  801b5c:	9009883a 	mov	r4,r18
  801b60:	10800054 	ori	r2,r2,1
  801b64:	18800115 	stw	r2,4(r3)
  801b68:	31400215 	stw	r5,8(r6)
  801b6c:	29800315 	stw	r6,12(r5)
  801b70:	080afdc0 	call	80afdc <__malloc_unlock>
  801b74:	80c00204 	addi	r3,r16,8
  801b78:	003faa06 	br	801a24 <_malloc_r+0x50>
  801b7c:	00800104 	movi	r2,4
  801b80:	10c0052e 	bgeu	r2,r3,801b98 <_malloc_r+0x1c4>
  801b84:	00800504 	movi	r2,20
  801b88:	10c07836 	bltu	r2,r3,801d6c <_malloc_r+0x398>
  801b8c:	198016c4 	addi	r6,r3,91
  801b90:	300490fa 	slli	r2,r6,3
  801b94:	003fbc06 	br	801a88 <_malloc_r+0xb4>
  801b98:	8804d1ba 	srli	r2,r17,6
  801b9c:	11800e04 	addi	r6,r2,56
  801ba0:	300490fa 	slli	r2,r6,3
  801ba4:	003fb806 	br	801a88 <_malloc_r+0xb4>
  801ba8:	00807fc4 	movi	r2,511
  801bac:	1140bb36 	bltu	r2,r5,801e9c <_malloc_r+0x4c8>
  801bb0:	2806d0fa 	srli	r3,r5,3
  801bb4:	573ffe04 	addi	fp,r10,-8
  801bb8:	00800044 	movi	r2,1
  801bbc:	180890fa 	slli	r4,r3,3
  801bc0:	1807d0ba 	srai	r3,r3,2
  801bc4:	e1c00117 	ldw	r7,4(fp)
  801bc8:	5909883a 	add	r4,r11,r4
  801bcc:	21400217 	ldw	r5,8(r4)
  801bd0:	10c4983a 	sll	r2,r2,r3
  801bd4:	81000315 	stw	r4,12(r16)
  801bd8:	81400215 	stw	r5,8(r16)
  801bdc:	388eb03a 	or	r7,r7,r2
  801be0:	2c000315 	stw	r16,12(r5)
  801be4:	24000215 	stw	r16,8(r4)
  801be8:	e1c00115 	stw	r7,4(fp)
  801bec:	4807883a 	mov	r3,r9
  801bf0:	4800cd16 	blt	r9,zero,801f28 <_malloc_r+0x554>
  801bf4:	1807d0ba 	srai	r3,r3,2
  801bf8:	00800044 	movi	r2,1
  801bfc:	10c8983a 	sll	r4,r2,r3
  801c00:	39004436 	bltu	r7,r4,801d14 <_malloc_r+0x340>
  801c04:	21c4703a 	and	r2,r4,r7
  801c08:	10000a1e 	bne	r2,zero,801c34 <_malloc_r+0x260>
  801c0c:	2109883a 	add	r4,r4,r4
  801c10:	00bfff04 	movi	r2,-4
  801c14:	4884703a 	and	r2,r9,r2
  801c18:	3906703a 	and	r3,r7,r4
  801c1c:	12400104 	addi	r9,r2,4
  801c20:	1800041e 	bne	r3,zero,801c34 <_malloc_r+0x260>
  801c24:	2109883a 	add	r4,r4,r4
  801c28:	3904703a 	and	r2,r7,r4
  801c2c:	4a400104 	addi	r9,r9,4
  801c30:	103ffc26 	beq	r2,zero,801c24 <_malloc_r+0x250>
  801c34:	480490fa 	slli	r2,r9,3
  801c38:	4819883a 	mov	r12,r9
  801c3c:	023fff04 	movi	r8,-4
  801c40:	589b883a 	add	r13,r11,r2
  801c44:	6807883a 	mov	r3,r13
  801c48:	014003c4 	movi	r5,15
  801c4c:	1c000317 	ldw	r16,12(r3)
  801c50:	1c00041e 	bne	r3,r16,801c64 <_malloc_r+0x290>
  801c54:	0000a706 	br	801ef4 <_malloc_r+0x520>
  801c58:	3000ab0e 	bge	r6,zero,801f08 <_malloc_r+0x534>
  801c5c:	84000317 	ldw	r16,12(r16)
  801c60:	1c00a426 	beq	r3,r16,801ef4 <_malloc_r+0x520>
  801c64:	80800117 	ldw	r2,4(r16)
  801c68:	1204703a 	and	r2,r2,r8
  801c6c:	144dc83a 	sub	r6,r2,r17
  801c70:	29bff90e 	bge	r5,r6,801c58 <_malloc_r+0x284>
  801c74:	81000317 	ldw	r4,12(r16)
  801c78:	80c00217 	ldw	r3,8(r16)
  801c7c:	89400054 	ori	r5,r17,1
  801c80:	8445883a 	add	r2,r16,r17
  801c84:	20c00215 	stw	r3,8(r4)
  801c88:	19000315 	stw	r4,12(r3)
  801c8c:	81400115 	stw	r5,4(r16)
  801c90:	1187883a 	add	r3,r2,r6
  801c94:	31000054 	ori	r4,r6,1
  801c98:	50800315 	stw	r2,12(r10)
  801c9c:	50800215 	stw	r2,8(r10)
  801ca0:	19800015 	stw	r6,0(r3)
  801ca4:	11000115 	stw	r4,4(r2)
  801ca8:	12800215 	stw	r10,8(r2)
  801cac:	12800315 	stw	r10,12(r2)
  801cb0:	9009883a 	mov	r4,r18
  801cb4:	080afdc0 	call	80afdc <__malloc_unlock>
  801cb8:	80c00204 	addi	r3,r16,8
  801cbc:	003f5906 	br	801a24 <_malloc_r+0x50>
  801cc0:	8109883a 	add	r4,r16,r4
  801cc4:	20800117 	ldw	r2,4(r4)
  801cc8:	80c00217 	ldw	r3,8(r16)
  801ccc:	81400317 	ldw	r5,12(r16)
  801cd0:	10800054 	ori	r2,r2,1
  801cd4:	20800115 	stw	r2,4(r4)
  801cd8:	28c00215 	stw	r3,8(r5)
  801cdc:	19400315 	stw	r5,12(r3)
  801ce0:	9009883a 	mov	r4,r18
  801ce4:	080afdc0 	call	80afdc <__malloc_unlock>
  801ce8:	80c00204 	addi	r3,r16,8
  801cec:	003f4d06 	br	801a24 <_malloc_r+0x50>
  801cf0:	80800204 	addi	r2,r16,8
  801cf4:	14000317 	ldw	r16,12(r2)
  801cf8:	143f911e 	bne	r2,r16,801b40 <_malloc_r+0x16c>
  801cfc:	1a400084 	addi	r9,r3,2
  801d00:	003f7306 	br	801ad0 <_malloc_r+0xfc>
  801d04:	88c00054 	ori	r3,r17,1
  801d08:	8445883a 	add	r2,r16,r17
  801d0c:	80c00115 	stw	r3,4(r16)
  801d10:	003fdf06 	br	801c90 <_malloc_r+0x2bc>
  801d14:	e4000217 	ldw	r16,8(fp)
  801d18:	00bfff04 	movi	r2,-4
  801d1c:	80c00117 	ldw	r3,4(r16)
  801d20:	802d883a 	mov	r22,r16
  801d24:	18aa703a 	and	r21,r3,r2
  801d28:	ac401636 	bltu	r21,r17,801d84 <_malloc_r+0x3b0>
  801d2c:	ac49c83a 	sub	r4,r21,r17
  801d30:	008003c4 	movi	r2,15
  801d34:	1100130e 	bge	r2,r4,801d84 <_malloc_r+0x3b0>
  801d38:	88800054 	ori	r2,r17,1
  801d3c:	8447883a 	add	r3,r16,r17
  801d40:	80800115 	stw	r2,4(r16)
  801d44:	20800054 	ori	r2,r4,1
  801d48:	18800115 	stw	r2,4(r3)
  801d4c:	e0c00215 	stw	r3,8(fp)
  801d50:	9009883a 	mov	r4,r18
  801d54:	080afdc0 	call	80afdc <__malloc_unlock>
  801d58:	80c00204 	addi	r3,r16,8
  801d5c:	003f3106 	br	801a24 <_malloc_r+0x50>
  801d60:	39c00117 	ldw	r7,4(r7)
  801d64:	573ffe04 	addi	fp,r10,-8
  801d68:	003fa006 	br	801bec <_malloc_r+0x218>
  801d6c:	00801504 	movi	r2,84
  801d70:	10c06736 	bltu	r2,r3,801f10 <_malloc_r+0x53c>
  801d74:	8804d33a 	srli	r2,r17,12
  801d78:	11801b84 	addi	r6,r2,110
  801d7c:	300490fa 	slli	r2,r6,3
  801d80:	003f4106 	br	801a88 <_malloc_r+0xb4>
  801d84:	d0a72517 	ldw	r2,-25452(gp)
  801d88:	d0e00317 	ldw	r3,-32756(gp)
  801d8c:	053fffc4 	movi	r20,-1
  801d90:	10800404 	addi	r2,r2,16
  801d94:	88a7883a 	add	r19,r17,r2
  801d98:	1d000326 	beq	r3,r20,801da8 <_malloc_r+0x3d4>
  801d9c:	98c3ffc4 	addi	r3,r19,4095
  801da0:	00bc0004 	movi	r2,-4096
  801da4:	18a6703a 	and	r19,r3,r2
  801da8:	9009883a 	mov	r4,r18
  801dac:	980b883a 	mov	r5,r19
  801db0:	08025300 	call	802530 <_sbrk_r>
  801db4:	1009883a 	mov	r4,r2
  801db8:	15000426 	beq	r2,r20,801dcc <_malloc_r+0x3f8>
  801dbc:	854b883a 	add	r5,r16,r21
  801dc0:	1029883a 	mov	r20,r2
  801dc4:	11405a2e 	bgeu	r2,r5,801f30 <_malloc_r+0x55c>
  801dc8:	87000c26 	beq	r16,fp,801dfc <_malloc_r+0x428>
  801dcc:	e4000217 	ldw	r16,8(fp)
  801dd0:	80c00117 	ldw	r3,4(r16)
  801dd4:	00bfff04 	movi	r2,-4
  801dd8:	1884703a 	and	r2,r3,r2
  801ddc:	14400336 	bltu	r2,r17,801dec <_malloc_r+0x418>
  801de0:	1449c83a 	sub	r4,r2,r17
  801de4:	008003c4 	movi	r2,15
  801de8:	113fd316 	blt	r2,r4,801d38 <_malloc_r+0x364>
  801dec:	9009883a 	mov	r4,r18
  801df0:	080afdc0 	call	80afdc <__malloc_unlock>
  801df4:	0007883a 	mov	r3,zero
  801df8:	003f0a06 	br	801a24 <_malloc_r+0x50>
  801dfc:	05c02074 	movhi	r23,129
  801e00:	bdcb7804 	addi	r23,r23,11744
  801e04:	b8800017 	ldw	r2,0(r23)
  801e08:	988d883a 	add	r6,r19,r2
  801e0c:	b9800015 	stw	r6,0(r23)
  801e10:	d0e00317 	ldw	r3,-32756(gp)
  801e14:	00bfffc4 	movi	r2,-1
  801e18:	18808e26 	beq	r3,r2,802054 <_malloc_r+0x680>
  801e1c:	2145c83a 	sub	r2,r4,r5
  801e20:	3085883a 	add	r2,r6,r2
  801e24:	b8800015 	stw	r2,0(r23)
  801e28:	20c001cc 	andi	r3,r4,7
  801e2c:	18005f1e 	bne	r3,zero,801fac <_malloc_r+0x5d8>
  801e30:	000b883a 	mov	r5,zero
  801e34:	a4c5883a 	add	r2,r20,r19
  801e38:	1083ffcc 	andi	r2,r2,4095
  801e3c:	00c40004 	movi	r3,4096
  801e40:	1887c83a 	sub	r3,r3,r2
  801e44:	28e7883a 	add	r19,r5,r3
  801e48:	9009883a 	mov	r4,r18
  801e4c:	980b883a 	mov	r5,r19
  801e50:	08025300 	call	802530 <_sbrk_r>
  801e54:	1007883a 	mov	r3,r2
  801e58:	00bfffc4 	movi	r2,-1
  801e5c:	18807a26 	beq	r3,r2,802048 <_malloc_r+0x674>
  801e60:	1d05c83a 	sub	r2,r3,r20
  801e64:	9885883a 	add	r2,r19,r2
  801e68:	10c00054 	ori	r3,r2,1
  801e6c:	b8800017 	ldw	r2,0(r23)
  801e70:	a021883a 	mov	r16,r20
  801e74:	a0c00115 	stw	r3,4(r20)
  801e78:	9885883a 	add	r2,r19,r2
  801e7c:	b8800015 	stw	r2,0(r23)
  801e80:	e5000215 	stw	r20,8(fp)
  801e84:	b7003626 	beq	r22,fp,801f60 <_malloc_r+0x58c>
  801e88:	018003c4 	movi	r6,15
  801e8c:	35404b36 	bltu	r6,r21,801fbc <_malloc_r+0x5e8>
  801e90:	00800044 	movi	r2,1
  801e94:	a0800115 	stw	r2,4(r20)
  801e98:	003fcd06 	br	801dd0 <_malloc_r+0x3fc>
  801e9c:	2808d27a 	srli	r4,r5,9
  801ea0:	2000371e 	bne	r4,zero,801f80 <_malloc_r+0x5ac>
  801ea4:	2808d0fa 	srli	r4,r5,3
  801ea8:	200690fa 	slli	r3,r4,3
  801eac:	1ad1883a 	add	r8,r3,r11
  801eb0:	41800217 	ldw	r6,8(r8)
  801eb4:	41805b26 	beq	r8,r6,802024 <_malloc_r+0x650>
  801eb8:	30800117 	ldw	r2,4(r6)
  801ebc:	00ffff04 	movi	r3,-4
  801ec0:	10c4703a 	and	r2,r2,r3
  801ec4:	2880022e 	bgeu	r5,r2,801ed0 <_malloc_r+0x4fc>
  801ec8:	31800217 	ldw	r6,8(r6)
  801ecc:	41bffa1e 	bne	r8,r6,801eb8 <_malloc_r+0x4e4>
  801ed0:	32000317 	ldw	r8,12(r6)
  801ed4:	39c00117 	ldw	r7,4(r7)
  801ed8:	82000315 	stw	r8,12(r16)
  801edc:	81800215 	stw	r6,8(r16)
  801ee0:	07002074 	movhi	fp,129
  801ee4:	e73e4704 	addi	fp,fp,-1764
  801ee8:	34000315 	stw	r16,12(r6)
  801eec:	44000215 	stw	r16,8(r8)
  801ef0:	003f3e06 	br	801bec <_malloc_r+0x218>
  801ef4:	63000044 	addi	r12,r12,1
  801ef8:	608000cc 	andi	r2,r12,3
  801efc:	10005d26 	beq	r2,zero,802074 <_malloc_r+0x6a0>
  801f00:	18c00204 	addi	r3,r3,8
  801f04:	003f5106 	br	801c4c <_malloc_r+0x278>
  801f08:	8089883a 	add	r4,r16,r2
  801f0c:	003f6d06 	br	801cc4 <_malloc_r+0x2f0>
  801f10:	00805504 	movi	r2,340
  801f14:	10c02036 	bltu	r2,r3,801f98 <_malloc_r+0x5c4>
  801f18:	8804d3fa 	srli	r2,r17,15
  801f1c:	11801dc4 	addi	r6,r2,119
  801f20:	300490fa 	slli	r2,r6,3
  801f24:	003ed806 	br	801a88 <_malloc_r+0xb4>
  801f28:	48c000c4 	addi	r3,r9,3
  801f2c:	003f3106 	br	801bf4 <_malloc_r+0x220>
  801f30:	05c02074 	movhi	r23,129
  801f34:	bdcb7804 	addi	r23,r23,11744
  801f38:	b8800017 	ldw	r2,0(r23)
  801f3c:	988d883a 	add	r6,r19,r2
  801f40:	b9800015 	stw	r6,0(r23)
  801f44:	293fb21e 	bne	r5,r4,801e10 <_malloc_r+0x43c>
  801f48:	2083ffcc 	andi	r2,r4,4095
  801f4c:	103fb01e 	bne	r2,zero,801e10 <_malloc_r+0x43c>
  801f50:	e4000217 	ldw	r16,8(fp)
  801f54:	9d45883a 	add	r2,r19,r21
  801f58:	10800054 	ori	r2,r2,1
  801f5c:	80800115 	stw	r2,4(r16)
  801f60:	b8c00017 	ldw	r3,0(r23)
  801f64:	d0a72617 	ldw	r2,-25448(gp)
  801f68:	10c0012e 	bgeu	r2,r3,801f70 <_malloc_r+0x59c>
  801f6c:	d0e72615 	stw	r3,-25448(gp)
  801f70:	d0a72717 	ldw	r2,-25444(gp)
  801f74:	10ff962e 	bgeu	r2,r3,801dd0 <_malloc_r+0x3fc>
  801f78:	d0e72715 	stw	r3,-25444(gp)
  801f7c:	003f9406 	br	801dd0 <_malloc_r+0x3fc>
  801f80:	00800104 	movi	r2,4
  801f84:	11001e36 	bltu	r2,r4,802000 <_malloc_r+0x62c>
  801f88:	2804d1ba 	srli	r2,r5,6
  801f8c:	11000e04 	addi	r4,r2,56
  801f90:	200690fa 	slli	r3,r4,3
  801f94:	003fc506 	br	801eac <_malloc_r+0x4d8>
  801f98:	00815504 	movi	r2,1364
  801f9c:	10c01d2e 	bgeu	r2,r3,802014 <_malloc_r+0x640>
  801fa0:	01801f84 	movi	r6,126
  801fa4:	0080fc04 	movi	r2,1008
  801fa8:	003eb706 	br	801a88 <_malloc_r+0xb4>
  801fac:	00800204 	movi	r2,8
  801fb0:	10cbc83a 	sub	r5,r2,r3
  801fb4:	2169883a 	add	r20,r4,r5
  801fb8:	003f9e06 	br	801e34 <_malloc_r+0x460>
  801fbc:	00bffe04 	movi	r2,-8
  801fc0:	a93ffd04 	addi	r4,r21,-12
  801fc4:	2088703a 	and	r4,r4,r2
  801fc8:	b10b883a 	add	r5,r22,r4
  801fcc:	00c00144 	movi	r3,5
  801fd0:	28c00215 	stw	r3,8(r5)
  801fd4:	28c00115 	stw	r3,4(r5)
  801fd8:	b0800117 	ldw	r2,4(r22)
  801fdc:	1080004c 	andi	r2,r2,1
  801fe0:	2084b03a 	or	r2,r4,r2
  801fe4:	b0800115 	stw	r2,4(r22)
  801fe8:	313fdd2e 	bgeu	r6,r4,801f60 <_malloc_r+0x58c>
  801fec:	b1400204 	addi	r5,r22,8
  801ff0:	9009883a 	mov	r4,r18
  801ff4:	0800ed80 	call	800ed8 <_free_r>
  801ff8:	e4000217 	ldw	r16,8(fp)
  801ffc:	003fd806 	br	801f60 <_malloc_r+0x58c>
  802000:	00800504 	movi	r2,20
  802004:	11001536 	bltu	r2,r4,80205c <_malloc_r+0x688>
  802008:	210016c4 	addi	r4,r4,91
  80200c:	200690fa 	slli	r3,r4,3
  802010:	003fa606 	br	801eac <_malloc_r+0x4d8>
  802014:	8804d4ba 	srli	r2,r17,18
  802018:	11801f04 	addi	r6,r2,124
  80201c:	300490fa 	slli	r2,r6,3
  802020:	003e9906 	br	801a88 <_malloc_r+0xb4>
  802024:	2009d0ba 	srai	r4,r4,2
  802028:	01402074 	movhi	r5,129
  80202c:	297e4704 	addi	r5,r5,-1764
  802030:	00c00044 	movi	r3,1
  802034:	28800117 	ldw	r2,4(r5)
  802038:	1906983a 	sll	r3,r3,r4
  80203c:	10c4b03a 	or	r2,r2,r3
  802040:	28800115 	stw	r2,4(r5)
  802044:	003fa306 	br	801ed4 <_malloc_r+0x500>
  802048:	0027883a 	mov	r19,zero
  80204c:	00c00044 	movi	r3,1
  802050:	003f8606 	br	801e6c <_malloc_r+0x498>
  802054:	d1200315 	stw	r4,-32756(gp)
  802058:	003f7306 	br	801e28 <_malloc_r+0x454>
  80205c:	00801504 	movi	r2,84
  802060:	11001936 	bltu	r2,r4,8020c8 <_malloc_r+0x6f4>
  802064:	2804d33a 	srli	r2,r5,12
  802068:	11001b84 	addi	r4,r2,110
  80206c:	200690fa 	slli	r3,r4,3
  802070:	003f8e06 	br	801eac <_malloc_r+0x4d8>
  802074:	480b883a 	mov	r5,r9
  802078:	6807883a 	mov	r3,r13
  80207c:	288000cc 	andi	r2,r5,3
  802080:	18fffe04 	addi	r3,r3,-8
  802084:	297fffc4 	addi	r5,r5,-1
  802088:	10001526 	beq	r2,zero,8020e0 <_malloc_r+0x70c>
  80208c:	18800217 	ldw	r2,8(r3)
  802090:	10fffa26 	beq	r2,r3,80207c <_malloc_r+0x6a8>
  802094:	2109883a 	add	r4,r4,r4
  802098:	393f1e36 	bltu	r7,r4,801d14 <_malloc_r+0x340>
  80209c:	203f1d26 	beq	r4,zero,801d14 <_malloc_r+0x340>
  8020a0:	21c4703a 	and	r2,r4,r7
  8020a4:	10000226 	beq	r2,zero,8020b0 <_malloc_r+0x6dc>
  8020a8:	6013883a 	mov	r9,r12
  8020ac:	003ee106 	br	801c34 <_malloc_r+0x260>
  8020b0:	2109883a 	add	r4,r4,r4
  8020b4:	3904703a 	and	r2,r7,r4
  8020b8:	63000104 	addi	r12,r12,4
  8020bc:	103ffc26 	beq	r2,zero,8020b0 <_malloc_r+0x6dc>
  8020c0:	6013883a 	mov	r9,r12
  8020c4:	003edb06 	br	801c34 <_malloc_r+0x260>
  8020c8:	00805504 	movi	r2,340
  8020cc:	11000836 	bltu	r2,r4,8020f0 <_malloc_r+0x71c>
  8020d0:	2804d3fa 	srli	r2,r5,15
  8020d4:	11001dc4 	addi	r4,r2,119
  8020d8:	200690fa 	slli	r3,r4,3
  8020dc:	003f7306 	br	801eac <_malloc_r+0x4d8>
  8020e0:	0104303a 	nor	r2,zero,r4
  8020e4:	388e703a 	and	r7,r7,r2
  8020e8:	e1c00115 	stw	r7,4(fp)
  8020ec:	003fe906 	br	802094 <_malloc_r+0x6c0>
  8020f0:	00815504 	movi	r2,1364
  8020f4:	1100032e 	bgeu	r2,r4,802104 <_malloc_r+0x730>
  8020f8:	01001f84 	movi	r4,126
  8020fc:	00c0fc04 	movi	r3,1008
  802100:	003f6a06 	br	801eac <_malloc_r+0x4d8>
  802104:	2804d4ba 	srli	r2,r5,18
  802108:	11001f04 	addi	r4,r2,124
  80210c:	200690fa 	slli	r3,r4,3
  802110:	003f6606 	br	801eac <_malloc_r+0x4d8>

00802114 <memset>:
  802114:	008000c4 	movi	r2,3
  802118:	29403fcc 	andi	r5,r5,255
  80211c:	2007883a 	mov	r3,r4
  802120:	1180022e 	bgeu	r2,r6,80212c <memset+0x18>
  802124:	2084703a 	and	r2,r4,r2
  802128:	10000826 	beq	r2,zero,80214c <memset+0x38>
  80212c:	30000526 	beq	r6,zero,802144 <memset+0x30>
  802130:	2805883a 	mov	r2,r5
  802134:	30cd883a 	add	r6,r6,r3
  802138:	18800005 	stb	r2,0(r3)
  80213c:	18c00044 	addi	r3,r3,1
  802140:	19bffd1e 	bne	r3,r6,802138 <memset+0x24>
  802144:	2005883a 	mov	r2,r4
  802148:	f800283a 	ret
  80214c:	2804923a 	slli	r2,r5,8
  802150:	020003c4 	movi	r8,15
  802154:	200f883a 	mov	r7,r4
  802158:	2884b03a 	or	r2,r5,r2
  80215c:	1006943a 	slli	r3,r2,16
  802160:	10c6b03a 	or	r3,r2,r3
  802164:	41800a2e 	bgeu	r8,r6,802190 <memset+0x7c>
  802168:	4005883a 	mov	r2,r8
  80216c:	31bffc04 	addi	r6,r6,-16
  802170:	38c00015 	stw	r3,0(r7)
  802174:	38c00115 	stw	r3,4(r7)
  802178:	38c00215 	stw	r3,8(r7)
  80217c:	38c00315 	stw	r3,12(r7)
  802180:	39c00404 	addi	r7,r7,16
  802184:	11bff936 	bltu	r2,r6,80216c <memset+0x58>
  802188:	008000c4 	movi	r2,3
  80218c:	1180052e 	bgeu	r2,r6,8021a4 <memset+0x90>
  802190:	31bfff04 	addi	r6,r6,-4
  802194:	008000c4 	movi	r2,3
  802198:	38c00015 	stw	r3,0(r7)
  80219c:	39c00104 	addi	r7,r7,4
  8021a0:	11bffb36 	bltu	r2,r6,802190 <memset+0x7c>
  8021a4:	3807883a 	mov	r3,r7
  8021a8:	003fe006 	br	80212c <memset+0x18>

008021ac <_open_r>:
  8021ac:	defffd04 	addi	sp,sp,-12
  8021b0:	dc000015 	stw	r16,0(sp)
  8021b4:	04002074 	movhi	r16,129
  8021b8:	840b6b04 	addi	r16,r16,11692
  8021bc:	dc400115 	stw	r17,4(sp)
  8021c0:	80000015 	stw	zero,0(r16)
  8021c4:	2023883a 	mov	r17,r4
  8021c8:	2809883a 	mov	r4,r5
  8021cc:	300b883a 	mov	r5,r6
  8021d0:	380d883a 	mov	r6,r7
  8021d4:	dfc00215 	stw	ra,8(sp)
  8021d8:	080b0f40 	call	80b0f4 <open>
  8021dc:	1007883a 	mov	r3,r2
  8021e0:	00bfffc4 	movi	r2,-1
  8021e4:	18800626 	beq	r3,r2,802200 <_open_r+0x54>
  8021e8:	1805883a 	mov	r2,r3
  8021ec:	dfc00217 	ldw	ra,8(sp)
  8021f0:	dc400117 	ldw	r17,4(sp)
  8021f4:	dc000017 	ldw	r16,0(sp)
  8021f8:	dec00304 	addi	sp,sp,12
  8021fc:	f800283a 	ret
  802200:	80800017 	ldw	r2,0(r16)
  802204:	103ff826 	beq	r2,zero,8021e8 <_open_r+0x3c>
  802208:	88800015 	stw	r2,0(r17)
  80220c:	1805883a 	mov	r2,r3
  802210:	dfc00217 	ldw	ra,8(sp)
  802214:	dc400117 	ldw	r17,4(sp)
  802218:	dc000017 	ldw	r16,0(sp)
  80221c:	dec00304 	addi	sp,sp,12
  802220:	f800283a 	ret

00802224 <printf>:
  802224:	defffb04 	addi	sp,sp,-20
  802228:	dfc00115 	stw	ra,4(sp)
  80222c:	d9400215 	stw	r5,8(sp)
  802230:	d9800315 	stw	r6,12(sp)
  802234:	d9c00415 	stw	r7,16(sp)
  802238:	00802074 	movhi	r2,129
  80223c:	10844704 	addi	r2,r2,4380
  802240:	10c00017 	ldw	r3,0(r2)
  802244:	200b883a 	mov	r5,r4
  802248:	d8800204 	addi	r2,sp,8
  80224c:	19000217 	ldw	r4,8(r3)
  802250:	100d883a 	mov	r6,r2
  802254:	d8800015 	stw	r2,0(sp)
  802258:	080467c0 	call	80467c <__vfprintf_internal>
  80225c:	dfc00117 	ldw	ra,4(sp)
  802260:	dec00504 	addi	sp,sp,20
  802264:	f800283a 	ret

00802268 <_printf_r>:
  802268:	defffc04 	addi	sp,sp,-16
  80226c:	dfc00115 	stw	ra,4(sp)
  802270:	d9800215 	stw	r6,8(sp)
  802274:	d9c00315 	stw	r7,12(sp)
  802278:	280d883a 	mov	r6,r5
  80227c:	21400217 	ldw	r5,8(r4)
  802280:	d8c00204 	addi	r3,sp,8
  802284:	180f883a 	mov	r7,r3
  802288:	d8c00015 	stw	r3,0(sp)
  80228c:	08027b80 	call	8027b8 <___vfprintf_internal_r>
  802290:	dfc00117 	ldw	ra,4(sp)
  802294:	dec00404 	addi	sp,sp,16
  802298:	f800283a 	ret

0080229c <_puts_r>:
  80229c:	defff604 	addi	sp,sp,-40
  8022a0:	dc400715 	stw	r17,28(sp)
  8022a4:	2023883a 	mov	r17,r4
  8022a8:	2809883a 	mov	r4,r5
  8022ac:	dfc00915 	stw	ra,36(sp)
  8022b0:	dcc00815 	stw	r19,32(sp)
  8022b4:	2827883a 	mov	r19,r5
  8022b8:	08026ec0 	call	8026ec <strlen>
  8022bc:	89400217 	ldw	r5,8(r17)
  8022c0:	00c02074 	movhi	r3,129
  8022c4:	18fbcf04 	addi	r3,r3,-4292
  8022c8:	01c00044 	movi	r7,1
  8022cc:	12000044 	addi	r8,r2,1
  8022d0:	d8c00515 	stw	r3,20(sp)
  8022d4:	d9c00615 	stw	r7,24(sp)
  8022d8:	d8c00304 	addi	r3,sp,12
  8022dc:	01c00084 	movi	r7,2
  8022e0:	8809883a 	mov	r4,r17
  8022e4:	d80d883a 	mov	r6,sp
  8022e8:	d8c00015 	stw	r3,0(sp)
  8022ec:	dcc00315 	stw	r19,12(sp)
  8022f0:	da000215 	stw	r8,8(sp)
  8022f4:	d9c00115 	stw	r7,4(sp)
  8022f8:	d8800415 	stw	r2,16(sp)
  8022fc:	080615c0 	call	80615c <__sfvwrite_r>
  802300:	00ffffc4 	movi	r3,-1
  802304:	10000626 	beq	r2,zero,802320 <_puts_r+0x84>
  802308:	1805883a 	mov	r2,r3
  80230c:	dfc00917 	ldw	ra,36(sp)
  802310:	dcc00817 	ldw	r19,32(sp)
  802314:	dc400717 	ldw	r17,28(sp)
  802318:	dec00a04 	addi	sp,sp,40
  80231c:	f800283a 	ret
  802320:	00c00284 	movi	r3,10
  802324:	1805883a 	mov	r2,r3
  802328:	dfc00917 	ldw	ra,36(sp)
  80232c:	dcc00817 	ldw	r19,32(sp)
  802330:	dc400717 	ldw	r17,28(sp)
  802334:	dec00a04 	addi	sp,sp,40
  802338:	f800283a 	ret

0080233c <puts>:
  80233c:	00802074 	movhi	r2,129
  802340:	10844704 	addi	r2,r2,4380
  802344:	200b883a 	mov	r5,r4
  802348:	11000017 	ldw	r4,0(r2)
  80234c:	080229c1 	jmpi	80229c <_puts_r>

00802350 <__srefill_r>:
  802350:	defffd04 	addi	sp,sp,-12
  802354:	dc400115 	stw	r17,4(sp)
  802358:	dc000015 	stw	r16,0(sp)
  80235c:	dfc00215 	stw	ra,8(sp)
  802360:	2023883a 	mov	r17,r4
  802364:	2821883a 	mov	r16,r5
  802368:	20000226 	beq	r4,zero,802374 <__srefill_r+0x24>
  80236c:	20800e17 	ldw	r2,56(r4)
  802370:	10004126 	beq	r2,zero,802478 <__srefill_r+0x128>
  802374:	80c0030b 	ldhu	r3,12(r16)
  802378:	80000115 	stw	zero,4(r16)
  80237c:	1880080c 	andi	r2,r3,32
  802380:	1000361e 	bne	r2,zero,80245c <__srefill_r+0x10c>
  802384:	1880010c 	andi	r2,r3,4
  802388:	1000211e 	bne	r2,zero,802410 <__srefill_r+0xc0>
  80238c:	1880040c 	andi	r2,r3,16
  802390:	10005026 	beq	r2,zero,8024d4 <__srefill_r+0x184>
  802394:	1880020c 	andi	r2,r3,8
  802398:	1000541e 	bne	r2,zero,8024ec <__srefill_r+0x19c>
  80239c:	8080030b 	ldhu	r2,12(r16)
  8023a0:	10800114 	ori	r2,r2,4
  8023a4:	8080030d 	sth	r2,12(r16)
  8023a8:	80800417 	ldw	r2,16(r16)
  8023ac:	10004526 	beq	r2,zero,8024c4 <__srefill_r+0x174>
  8023b0:	8080030b 	ldhu	r2,12(r16)
  8023b4:	108000cc 	andi	r2,r2,3
  8023b8:	1000361e 	bne	r2,zero,802494 <__srefill_r+0x144>
  8023bc:	81800417 	ldw	r6,16(r16)
  8023c0:	80c00817 	ldw	r3,32(r16)
  8023c4:	81400717 	ldw	r5,28(r16)
  8023c8:	81c00517 	ldw	r7,20(r16)
  8023cc:	8809883a 	mov	r4,r17
  8023d0:	81800015 	stw	r6,0(r16)
  8023d4:	183ee83a 	callr	r3
  8023d8:	80c0030b 	ldhu	r3,12(r16)
  8023dc:	1009883a 	mov	r4,r2
  8023e0:	80800115 	stw	r2,4(r16)
  8023e4:	00b7ffc4 	movi	r2,-8193
  8023e8:	1884703a 	and	r2,r3,r2
  8023ec:	8080030d 	sth	r2,12(r16)
  8023f0:	0100230e 	bge	zero,r4,802480 <__srefill_r+0x130>
  8023f4:	0009883a 	mov	r4,zero
  8023f8:	2005883a 	mov	r2,r4
  8023fc:	dfc00217 	ldw	ra,8(sp)
  802400:	dc400117 	ldw	r17,4(sp)
  802404:	dc000017 	ldw	r16,0(sp)
  802408:	dec00304 	addi	sp,sp,12
  80240c:	f800283a 	ret
  802410:	81400c17 	ldw	r5,48(r16)
  802414:	283fe426 	beq	r5,zero,8023a8 <__srefill_r+0x58>
  802418:	80801004 	addi	r2,r16,64
  80241c:	28800226 	beq	r5,r2,802428 <__srefill_r+0xd8>
  802420:	8809883a 	mov	r4,r17
  802424:	0800ed80 	call	800ed8 <_free_r>
  802428:	80800f17 	ldw	r2,60(r16)
  80242c:	80000c15 	stw	zero,48(r16)
  802430:	80800115 	stw	r2,4(r16)
  802434:	103fdc26 	beq	r2,zero,8023a8 <__srefill_r+0x58>
  802438:	80800e17 	ldw	r2,56(r16)
  80243c:	0009883a 	mov	r4,zero
  802440:	80800015 	stw	r2,0(r16)
  802444:	2005883a 	mov	r2,r4
  802448:	dfc00217 	ldw	ra,8(sp)
  80244c:	dc400117 	ldw	r17,4(sp)
  802450:	dc000017 	ldw	r16,0(sp)
  802454:	dec00304 	addi	sp,sp,12
  802458:	f800283a 	ret
  80245c:	013fffc4 	movi	r4,-1
  802460:	2005883a 	mov	r2,r4
  802464:	dfc00217 	ldw	ra,8(sp)
  802468:	dc400117 	ldw	r17,4(sp)
  80246c:	dc000017 	ldw	r16,0(sp)
  802470:	dec00304 	addi	sp,sp,12
  802474:	f800283a 	ret
  802478:	08009b00 	call	8009b0 <__sinit>
  80247c:	003fbd06 	br	802374 <__srefill_r+0x24>
  802480:	20000b1e 	bne	r4,zero,8024b0 <__srefill_r+0x160>
  802484:	10800814 	ori	r2,r2,32
  802488:	013fffc4 	movi	r4,-1
  80248c:	8080030d 	sth	r2,12(r16)
  802490:	003fd906 	br	8023f8 <__srefill_r+0xa8>
  802494:	00802074 	movhi	r2,129
  802498:	10844804 	addi	r2,r2,4384
  80249c:	11000017 	ldw	r4,0(r2)
  8024a0:	01402034 	movhi	r5,128
  8024a4:	29494504 	addi	r5,r5,9492
  8024a8:	08017880 	call	801788 <_fwalk>
  8024ac:	003fc306 	br	8023bc <__srefill_r+0x6c>
  8024b0:	10801014 	ori	r2,r2,64
  8024b4:	013fffc4 	movi	r4,-1
  8024b8:	8080030d 	sth	r2,12(r16)
  8024bc:	80000115 	stw	zero,4(r16)
  8024c0:	003fcd06 	br	8023f8 <__srefill_r+0xa8>
  8024c4:	8809883a 	mov	r4,r17
  8024c8:	800b883a 	mov	r5,r16
  8024cc:	08018400 	call	801840 <__smakebuf_r>
  8024d0:	003fb706 	br	8023b0 <__srefill_r+0x60>
  8024d4:	18c01014 	ori	r3,r3,64
  8024d8:	00800244 	movi	r2,9
  8024dc:	013fffc4 	movi	r4,-1
  8024e0:	88800015 	stw	r2,0(r17)
  8024e4:	80c0030d 	sth	r3,12(r16)
  8024e8:	003fc306 	br	8023f8 <__srefill_r+0xa8>
  8024ec:	8809883a 	mov	r4,r17
  8024f0:	800b883a 	mov	r5,r16
  8024f4:	08007180 	call	800718 <_fflush_r>
  8024f8:	103fd81e 	bne	r2,zero,80245c <__srefill_r+0x10c>
  8024fc:	8080030b 	ldhu	r2,12(r16)
  802500:	80000215 	stw	zero,8(r16)
  802504:	80000615 	stw	zero,24(r16)
  802508:	10bffdcc 	andi	r2,r2,65527
  80250c:	8080030d 	sth	r2,12(r16)
  802510:	003fa206 	br	80239c <__srefill_r+0x4c>

00802514 <lflush>:
  802514:	20c0030b 	ldhu	r3,12(r4)
  802518:	01400244 	movi	r5,9
  80251c:	0005883a 	mov	r2,zero
  802520:	18c0024c 	andi	r3,r3,9
  802524:	19400126 	beq	r3,r5,80252c <lflush+0x18>
  802528:	f800283a 	ret
  80252c:	08009141 	jmpi	800914 <fflush>

00802530 <_sbrk_r>:
  802530:	defffd04 	addi	sp,sp,-12
  802534:	dc000015 	stw	r16,0(sp)
  802538:	04002074 	movhi	r16,129
  80253c:	840b6b04 	addi	r16,r16,11692
  802540:	dc400115 	stw	r17,4(sp)
  802544:	80000015 	stw	zero,0(r16)
  802548:	2023883a 	mov	r17,r4
  80254c:	2809883a 	mov	r4,r5
  802550:	dfc00215 	stw	ra,8(sp)
  802554:	080b4dc0 	call	80b4dc <sbrk>
  802558:	1007883a 	mov	r3,r2
  80255c:	00bfffc4 	movi	r2,-1
  802560:	18800626 	beq	r3,r2,80257c <_sbrk_r+0x4c>
  802564:	1805883a 	mov	r2,r3
  802568:	dfc00217 	ldw	ra,8(sp)
  80256c:	dc400117 	ldw	r17,4(sp)
  802570:	dc000017 	ldw	r16,0(sp)
  802574:	dec00304 	addi	sp,sp,12
  802578:	f800283a 	ret
  80257c:	80800017 	ldw	r2,0(r16)
  802580:	103ff826 	beq	r2,zero,802564 <_sbrk_r+0x34>
  802584:	88800015 	stw	r2,0(r17)
  802588:	1805883a 	mov	r2,r3
  80258c:	dfc00217 	ldw	ra,8(sp)
  802590:	dc400117 	ldw	r17,4(sp)
  802594:	dc000017 	ldw	r16,0(sp)
  802598:	dec00304 	addi	sp,sp,12
  80259c:	f800283a 	ret

008025a0 <__sclose>:
  8025a0:	2940038f 	ldh	r5,14(r5)
  8025a4:	08048541 	jmpi	804854 <_close_r>

008025a8 <__sseek>:
  8025a8:	defffe04 	addi	sp,sp,-8
  8025ac:	dc000015 	stw	r16,0(sp)
  8025b0:	2821883a 	mov	r16,r5
  8025b4:	2940038f 	ldh	r5,14(r5)
  8025b8:	dfc00115 	stw	ra,4(sp)
  8025bc:	080672c0 	call	80672c <_lseek_r>
  8025c0:	1007883a 	mov	r3,r2
  8025c4:	00bfffc4 	movi	r2,-1
  8025c8:	18800926 	beq	r3,r2,8025f0 <__sseek+0x48>
  8025cc:	8080030b 	ldhu	r2,12(r16)
  8025d0:	80c01415 	stw	r3,80(r16)
  8025d4:	10840014 	ori	r2,r2,4096
  8025d8:	8080030d 	sth	r2,12(r16)
  8025dc:	1805883a 	mov	r2,r3
  8025e0:	dfc00117 	ldw	ra,4(sp)
  8025e4:	dc000017 	ldw	r16,0(sp)
  8025e8:	dec00204 	addi	sp,sp,8
  8025ec:	f800283a 	ret
  8025f0:	8080030b 	ldhu	r2,12(r16)
  8025f4:	10bbffcc 	andi	r2,r2,61439
  8025f8:	8080030d 	sth	r2,12(r16)
  8025fc:	1805883a 	mov	r2,r3
  802600:	dfc00117 	ldw	ra,4(sp)
  802604:	dc000017 	ldw	r16,0(sp)
  802608:	dec00204 	addi	sp,sp,8
  80260c:	f800283a 	ret

00802610 <__swrite>:
  802610:	2880030b 	ldhu	r2,12(r5)
  802614:	defffb04 	addi	sp,sp,-20
  802618:	dcc00315 	stw	r19,12(sp)
  80261c:	1080400c 	andi	r2,r2,256
  802620:	dc800215 	stw	r18,8(sp)
  802624:	dc400115 	stw	r17,4(sp)
  802628:	dc000015 	stw	r16,0(sp)
  80262c:	3027883a 	mov	r19,r6
  802630:	3825883a 	mov	r18,r7
  802634:	dfc00415 	stw	ra,16(sp)
  802638:	2821883a 	mov	r16,r5
  80263c:	000d883a 	mov	r6,zero
  802640:	01c00084 	movi	r7,2
  802644:	2023883a 	mov	r17,r4
  802648:	10000226 	beq	r2,zero,802654 <__swrite+0x44>
  80264c:	2940038f 	ldh	r5,14(r5)
  802650:	080672c0 	call	80672c <_lseek_r>
  802654:	8080030b 	ldhu	r2,12(r16)
  802658:	8140038f 	ldh	r5,14(r16)
  80265c:	8809883a 	mov	r4,r17
  802660:	10bbffcc 	andi	r2,r2,61439
  802664:	980d883a 	mov	r6,r19
  802668:	900f883a 	mov	r7,r18
  80266c:	8080030d 	sth	r2,12(r16)
  802670:	dfc00417 	ldw	ra,16(sp)
  802674:	dcc00317 	ldw	r19,12(sp)
  802678:	dc800217 	ldw	r18,8(sp)
  80267c:	dc400117 	ldw	r17,4(sp)
  802680:	dc000017 	ldw	r16,0(sp)
  802684:	dec00504 	addi	sp,sp,20
  802688:	08046a01 	jmpi	8046a0 <_write_r>

0080268c <__sread>:
  80268c:	defffe04 	addi	sp,sp,-8
  802690:	dc000015 	stw	r16,0(sp)
  802694:	2821883a 	mov	r16,r5
  802698:	2940038f 	ldh	r5,14(r5)
  80269c:	dfc00115 	stw	ra,4(sp)
  8026a0:	0807a940 	call	807a94 <_read_r>
  8026a4:	1007883a 	mov	r3,r2
  8026a8:	10000816 	blt	r2,zero,8026cc <__sread+0x40>
  8026ac:	80801417 	ldw	r2,80(r16)
  8026b0:	10c5883a 	add	r2,r2,r3
  8026b4:	80801415 	stw	r2,80(r16)
  8026b8:	1805883a 	mov	r2,r3
  8026bc:	dfc00117 	ldw	ra,4(sp)
  8026c0:	dc000017 	ldw	r16,0(sp)
  8026c4:	dec00204 	addi	sp,sp,8
  8026c8:	f800283a 	ret
  8026cc:	8080030b 	ldhu	r2,12(r16)
  8026d0:	10bbffcc 	andi	r2,r2,61439
  8026d4:	8080030d 	sth	r2,12(r16)
  8026d8:	1805883a 	mov	r2,r3
  8026dc:	dfc00117 	ldw	ra,4(sp)
  8026e0:	dc000017 	ldw	r16,0(sp)
  8026e4:	dec00204 	addi	sp,sp,8
  8026e8:	f800283a 	ret

008026ec <strlen>:
  8026ec:	208000cc 	andi	r2,r4,3
  8026f0:	2011883a 	mov	r8,r4
  8026f4:	1000161e 	bne	r2,zero,802750 <strlen+0x64>
  8026f8:	20c00017 	ldw	r3,0(r4)
  8026fc:	017fbff4 	movhi	r5,65279
  802700:	297fbfc4 	addi	r5,r5,-257
  802704:	01e02074 	movhi	r7,32897
  802708:	39e02004 	addi	r7,r7,-32640
  80270c:	1945883a 	add	r2,r3,r5
  802710:	11c4703a 	and	r2,r2,r7
  802714:	00c6303a 	nor	r3,zero,r3
  802718:	1886703a 	and	r3,r3,r2
  80271c:	18000c1e 	bne	r3,zero,802750 <strlen+0x64>
  802720:	280d883a 	mov	r6,r5
  802724:	380b883a 	mov	r5,r7
  802728:	21000104 	addi	r4,r4,4
  80272c:	20800017 	ldw	r2,0(r4)
  802730:	1187883a 	add	r3,r2,r6
  802734:	1946703a 	and	r3,r3,r5
  802738:	0084303a 	nor	r2,zero,r2
  80273c:	10c4703a 	and	r2,r2,r3
  802740:	103ff926 	beq	r2,zero,802728 <strlen+0x3c>
  802744:	20800007 	ldb	r2,0(r4)
  802748:	10000326 	beq	r2,zero,802758 <strlen+0x6c>
  80274c:	21000044 	addi	r4,r4,1
  802750:	20800007 	ldb	r2,0(r4)
  802754:	103ffd1e 	bne	r2,zero,80274c <strlen+0x60>
  802758:	2205c83a 	sub	r2,r4,r8
  80275c:	f800283a 	ret

00802760 <__sprint_r>:
  802760:	30800217 	ldw	r2,8(r6)
  802764:	defffe04 	addi	sp,sp,-8
  802768:	dc000015 	stw	r16,0(sp)
  80276c:	dfc00115 	stw	ra,4(sp)
  802770:	3021883a 	mov	r16,r6
  802774:	0007883a 	mov	r3,zero
  802778:	1000061e 	bne	r2,zero,802794 <__sprint_r+0x34>
  80277c:	1805883a 	mov	r2,r3
  802780:	30000115 	stw	zero,4(r6)
  802784:	dfc00117 	ldw	ra,4(sp)
  802788:	dc000017 	ldw	r16,0(sp)
  80278c:	dec00204 	addi	sp,sp,8
  802790:	f800283a 	ret
  802794:	080615c0 	call	80615c <__sfvwrite_r>
  802798:	1007883a 	mov	r3,r2
  80279c:	1805883a 	mov	r2,r3
  8027a0:	80000115 	stw	zero,4(r16)
  8027a4:	80000215 	stw	zero,8(r16)
  8027a8:	dfc00117 	ldw	ra,4(sp)
  8027ac:	dc000017 	ldw	r16,0(sp)
  8027b0:	dec00204 	addi	sp,sp,8
  8027b4:	f800283a 	ret

008027b8 <___vfprintf_internal_r>:
  8027b8:	defea404 	addi	sp,sp,-1392
  8027bc:	dd815815 	stw	r22,1376(sp)
  8027c0:	dc015215 	stw	r16,1352(sp)
  8027c4:	d9c15115 	stw	r7,1348(sp)
  8027c8:	dfc15b15 	stw	ra,1388(sp)
  8027cc:	df015a15 	stw	fp,1384(sp)
  8027d0:	ddc15915 	stw	r23,1380(sp)
  8027d4:	dd415715 	stw	r21,1372(sp)
  8027d8:	dd015615 	stw	r20,1368(sp)
  8027dc:	dcc15515 	stw	r19,1364(sp)
  8027e0:	dc815415 	stw	r18,1360(sp)
  8027e4:	dc415315 	stw	r17,1356(sp)
  8027e8:	282d883a 	mov	r22,r5
  8027ec:	3021883a 	mov	r16,r6
  8027f0:	d9014f15 	stw	r4,1340(sp)
  8027f4:	08066700 	call	806670 <_localeconv_r>
  8027f8:	10800017 	ldw	r2,0(r2)
  8027fc:	d9c15117 	ldw	r7,1348(sp)
  802800:	d8814915 	stw	r2,1316(sp)
  802804:	d8814f17 	ldw	r2,1340(sp)
  802808:	10000226 	beq	r2,zero,802814 <___vfprintf_internal_r+0x5c>
  80280c:	10800e17 	ldw	r2,56(r2)
  802810:	10020d26 	beq	r2,zero,803048 <___vfprintf_internal_r+0x890>
  802814:	b080030b 	ldhu	r2,12(r22)
  802818:	1080020c 	andi	r2,r2,8
  80281c:	10020e26 	beq	r2,zero,803058 <___vfprintf_internal_r+0x8a0>
  802820:	b0800417 	ldw	r2,16(r22)
  802824:	10020c26 	beq	r2,zero,803058 <___vfprintf_internal_r+0x8a0>
  802828:	b200030b 	ldhu	r8,12(r22)
  80282c:	00800284 	movi	r2,10
  802830:	40c0068c 	andi	r3,r8,26
  802834:	18802f1e 	bne	r3,r2,8028f4 <___vfprintf_internal_r+0x13c>
  802838:	b080038f 	ldh	r2,14(r22)
  80283c:	10002d16 	blt	r2,zero,8028f4 <___vfprintf_internal_r+0x13c>
  802840:	b240038b 	ldhu	r9,14(r22)
  802844:	b2800717 	ldw	r10,28(r22)
  802848:	b2c00917 	ldw	r11,36(r22)
  80284c:	d9014f17 	ldw	r4,1340(sp)
  802850:	dc402904 	addi	r17,sp,164
  802854:	d8804004 	addi	r2,sp,256
  802858:	00c10004 	movi	r3,1024
  80285c:	423fff4c 	andi	r8,r8,65533
  802860:	800d883a 	mov	r6,r16
  802864:	880b883a 	mov	r5,r17
  802868:	da002c0d 	sth	r8,176(sp)
  80286c:	da402c8d 	sth	r9,178(sp)
  802870:	da803015 	stw	r10,192(sp)
  802874:	dac03215 	stw	r11,200(sp)
  802878:	d8802d15 	stw	r2,180(sp)
  80287c:	d8c02e15 	stw	r3,184(sp)
  802880:	d8802915 	stw	r2,164(sp)
  802884:	d8c02b15 	stw	r3,172(sp)
  802888:	d8002f15 	stw	zero,188(sp)
  80288c:	08027b80 	call	8027b8 <___vfprintf_internal_r>
  802890:	d8814b15 	stw	r2,1324(sp)
  802894:	10000416 	blt	r2,zero,8028a8 <___vfprintf_internal_r+0xf0>
  802898:	d9014f17 	ldw	r4,1340(sp)
  80289c:	880b883a 	mov	r5,r17
  8028a0:	08007180 	call	800718 <_fflush_r>
  8028a4:	1002321e 	bne	r2,zero,803170 <___vfprintf_internal_r+0x9b8>
  8028a8:	d8802c0b 	ldhu	r2,176(sp)
  8028ac:	1080100c 	andi	r2,r2,64
  8028b0:	10000326 	beq	r2,zero,8028c0 <___vfprintf_internal_r+0x108>
  8028b4:	b080030b 	ldhu	r2,12(r22)
  8028b8:	10801014 	ori	r2,r2,64
  8028bc:	b080030d 	sth	r2,12(r22)
  8028c0:	d8814b17 	ldw	r2,1324(sp)
  8028c4:	dfc15b17 	ldw	ra,1388(sp)
  8028c8:	df015a17 	ldw	fp,1384(sp)
  8028cc:	ddc15917 	ldw	r23,1380(sp)
  8028d0:	dd815817 	ldw	r22,1376(sp)
  8028d4:	dd415717 	ldw	r21,1372(sp)
  8028d8:	dd015617 	ldw	r20,1368(sp)
  8028dc:	dcc15517 	ldw	r19,1364(sp)
  8028e0:	dc815417 	ldw	r18,1360(sp)
  8028e4:	dc415317 	ldw	r17,1356(sp)
  8028e8:	dc015217 	ldw	r16,1352(sp)
  8028ec:	dec15c04 	addi	sp,sp,1392
  8028f0:	f800283a 	ret
  8028f4:	0005883a 	mov	r2,zero
  8028f8:	0007883a 	mov	r3,zero
  8028fc:	dd401904 	addi	r21,sp,100
  802900:	d8814215 	stw	r2,1288(sp)
  802904:	802f883a 	mov	r23,r16
  802908:	d8c14315 	stw	r3,1292(sp)
  80290c:	d8014b15 	stw	zero,1324(sp)
  802910:	d8014815 	stw	zero,1312(sp)
  802914:	d8014415 	stw	zero,1296(sp)
  802918:	d8014715 	stw	zero,1308(sp)
  80291c:	dd400c15 	stw	r21,48(sp)
  802920:	d8000e15 	stw	zero,56(sp)
  802924:	d8000d15 	stw	zero,52(sp)
  802928:	b8800007 	ldb	r2,0(r23)
  80292c:	10001926 	beq	r2,zero,802994 <___vfprintf_internal_r+0x1dc>
  802930:	00c00944 	movi	r3,37
  802934:	10c01726 	beq	r2,r3,802994 <___vfprintf_internal_r+0x1dc>
  802938:	b821883a 	mov	r16,r23
  80293c:	00000106 	br	802944 <___vfprintf_internal_r+0x18c>
  802940:	10c00326 	beq	r2,r3,802950 <___vfprintf_internal_r+0x198>
  802944:	84000044 	addi	r16,r16,1
  802948:	80800007 	ldb	r2,0(r16)
  80294c:	103ffc1e 	bne	r2,zero,802940 <___vfprintf_internal_r+0x188>
  802950:	85e7c83a 	sub	r19,r16,r23
  802954:	98000e26 	beq	r19,zero,802990 <___vfprintf_internal_r+0x1d8>
  802958:	dc800e17 	ldw	r18,56(sp)
  80295c:	dc400d17 	ldw	r17,52(sp)
  802960:	008001c4 	movi	r2,7
  802964:	94e5883a 	add	r18,r18,r19
  802968:	8c400044 	addi	r17,r17,1
  80296c:	adc00015 	stw	r23,0(r21)
  802970:	dc800e15 	stw	r18,56(sp)
  802974:	acc00115 	stw	r19,4(r21)
  802978:	dc400d15 	stw	r17,52(sp)
  80297c:	14428b16 	blt	r2,r17,8033ac <___vfprintf_internal_r+0xbf4>
  802980:	ad400204 	addi	r21,r21,8
  802984:	d9014b17 	ldw	r4,1324(sp)
  802988:	24c9883a 	add	r4,r4,r19
  80298c:	d9014b15 	stw	r4,1324(sp)
  802990:	802f883a 	mov	r23,r16
  802994:	b8800007 	ldb	r2,0(r23)
  802998:	10013c26 	beq	r2,zero,802e8c <___vfprintf_internal_r+0x6d4>
  80299c:	bdc00044 	addi	r23,r23,1
  8029a0:	d8000405 	stb	zero,16(sp)
  8029a4:	b8c00007 	ldb	r3,0(r23)
  8029a8:	04ffffc4 	movi	r19,-1
  8029ac:	d8014c15 	stw	zero,1328(sp)
  8029b0:	d8014a15 	stw	zero,1320(sp)
  8029b4:	d8c14d15 	stw	r3,1332(sp)
  8029b8:	bdc00044 	addi	r23,r23,1
  8029bc:	d9414d17 	ldw	r5,1332(sp)
  8029c0:	00801604 	movi	r2,88
  8029c4:	28fff804 	addi	r3,r5,-32
  8029c8:	10c06036 	bltu	r2,r3,802b4c <___vfprintf_internal_r+0x394>
  8029cc:	18c5883a 	add	r2,r3,r3
  8029d0:	1085883a 	add	r2,r2,r2
  8029d4:	00c02034 	movhi	r3,128
  8029d8:	18ca7a04 	addi	r3,r3,10728
  8029dc:	10c5883a 	add	r2,r2,r3
  8029e0:	11000017 	ldw	r4,0(r2)
  8029e4:	2000683a 	jmp	r4
  8029e8:	0080395c 	xori	r2,zero,229
  8029ec:	00802b4c 	andi	r2,zero,173
  8029f0:	00802b4c 	andi	r2,zero,173
  8029f4:	00803948 	cmpgei	r2,zero,229
  8029f8:	00802b4c 	andi	r2,zero,173
  8029fc:	00802b4c 	andi	r2,zero,173
  802a00:	00802b4c 	andi	r2,zero,173
  802a04:	00802b4c 	andi	r2,zero,173
  802a08:	00802b4c 	andi	r2,zero,173
  802a0c:	00802b4c 	andi	r2,zero,173
  802a10:	00803728 	cmpgeui	r2,zero,220
  802a14:	00803938 	rdprs	r2,zero,228
  802a18:	00802b4c 	andi	r2,zero,173
  802a1c:	00803740 	call	80374 <__reset-0x77fc8c>
  802a20:	008039e0 	cmpeqi	r2,zero,231
  802a24:	00802b4c 	andi	r2,zero,173
  802a28:	008039cc 	andi	r2,zero,231
  802a2c:	00803988 	cmpgei	r2,zero,230
  802a30:	00803988 	cmpgei	r2,zero,230
  802a34:	00803988 	cmpgei	r2,zero,230
  802a38:	00803988 	cmpgei	r2,zero,230
  802a3c:	00803988 	cmpgei	r2,zero,230
  802a40:	00803988 	cmpgei	r2,zero,230
  802a44:	00803988 	cmpgei	r2,zero,230
  802a48:	00803988 	cmpgei	r2,zero,230
  802a4c:	00803988 	cmpgei	r2,zero,230
  802a50:	00802b4c 	andi	r2,zero,173
  802a54:	00802b4c 	andi	r2,zero,173
  802a58:	00802b4c 	andi	r2,zero,173
  802a5c:	00802b4c 	andi	r2,zero,173
  802a60:	00802b4c 	andi	r2,zero,173
  802a64:	00802b4c 	andi	r2,zero,173
  802a68:	00802b4c 	andi	r2,zero,173
  802a6c:	00802b4c 	andi	r2,zero,173
  802a70:	00802b4c 	andi	r2,zero,173
  802a74:	00802b4c 	andi	r2,zero,173
  802a78:	008031a4 	muli	r2,zero,198
  802a7c:	00803810 	cmplti	r2,zero,224
  802a80:	00802b4c 	andi	r2,zero,173
  802a84:	00803810 	cmplti	r2,zero,224
  802a88:	00802b4c 	andi	r2,zero,173
  802a8c:	00802b4c 	andi	r2,zero,173
  802a90:	00802b4c 	andi	r2,zero,173
  802a94:	00802b4c 	andi	r2,zero,173
  802a98:	00803974 	movhi	r2,229
  802a9c:	00802b4c 	andi	r2,zero,173
  802aa0:	00802b4c 	andi	r2,zero,173
  802aa4:	00803258 	cmpnei	r2,zero,201
  802aa8:	00802b4c 	andi	r2,zero,173
  802aac:	00802b4c 	andi	r2,zero,173
  802ab0:	00802b4c 	andi	r2,zero,173
  802ab4:	00802b4c 	andi	r2,zero,173
  802ab8:	00802b4c 	andi	r2,zero,173
  802abc:	008032a4 	muli	r2,zero,202
  802ac0:	00802b4c 	andi	r2,zero,173
  802ac4:	00802b4c 	andi	r2,zero,173
  802ac8:	008038c4 	movi	r2,227
  802acc:	00802b4c 	andi	r2,zero,173
  802ad0:	00802b4c 	andi	r2,zero,173
  802ad4:	00802b4c 	andi	r2,zero,173
  802ad8:	00802b4c 	andi	r2,zero,173
  802adc:	00802b4c 	andi	r2,zero,173
  802ae0:	00802b4c 	andi	r2,zero,173
  802ae4:	00802b4c 	andi	r2,zero,173
  802ae8:	00802b4c 	andi	r2,zero,173
  802aec:	00802b4c 	andi	r2,zero,173
  802af0:	00802b4c 	andi	r2,zero,173
  802af4:	00803898 	cmpnei	r2,zero,226
  802af8:	008031b0 	cmpltui	r2,zero,198
  802afc:	00803810 	cmplti	r2,zero,224
  802b00:	00803810 	cmplti	r2,zero,224
  802b04:	00803810 	cmplti	r2,zero,224
  802b08:	008037fc 	xorhi	r2,zero,223
  802b0c:	008031b0 	cmpltui	r2,zero,198
  802b10:	00802b4c 	andi	r2,zero,173
  802b14:	00802b4c 	andi	r2,zero,173
  802b18:	00803784 	movi	r2,222
  802b1c:	00802b4c 	andi	r2,zero,173
  802b20:	00803754 	movui	r2,221
  802b24:	00803264 	muli	r2,zero,201
  802b28:	008037b4 	movhi	r2,222
  802b2c:	008037a0 	cmpeqi	r2,zero,222
  802b30:	00802b4c 	andi	r2,zero,173
  802b34:	00803a48 	cmpgei	r2,zero,233
  802b38:	00802b4c 	andi	r2,zero,173
  802b3c:	008032b0 	cmpltui	r2,zero,202
  802b40:	00802b4c 	andi	r2,zero,173
  802b44:	00802b4c 	andi	r2,zero,173
  802b48:	00803928 	cmpgeui	r2,zero,228
  802b4c:	d9014d17 	ldw	r4,1332(sp)
  802b50:	2000ce26 	beq	r4,zero,802e8c <___vfprintf_internal_r+0x6d4>
  802b54:	01400044 	movi	r5,1
  802b58:	d9800f04 	addi	r6,sp,60
  802b5c:	d9c14015 	stw	r7,1280(sp)
  802b60:	d9414515 	stw	r5,1300(sp)
  802b64:	d9814115 	stw	r6,1284(sp)
  802b68:	280f883a 	mov	r7,r5
  802b6c:	d9000f05 	stb	r4,60(sp)
  802b70:	d8000405 	stb	zero,16(sp)
  802b74:	d8014615 	stw	zero,1304(sp)
  802b78:	d8c14c17 	ldw	r3,1328(sp)
  802b7c:	1880008c 	andi	r2,r3,2
  802b80:	1005003a 	cmpeq	r2,r2,zero
  802b84:	d8815015 	stw	r2,1344(sp)
  802b88:	1000031e 	bne	r2,zero,802b98 <___vfprintf_internal_r+0x3e0>
  802b8c:	d9014517 	ldw	r4,1300(sp)
  802b90:	21000084 	addi	r4,r4,2
  802b94:	d9014515 	stw	r4,1300(sp)
  802b98:	d9414c17 	ldw	r5,1328(sp)
  802b9c:	2940210c 	andi	r5,r5,132
  802ba0:	d9414e15 	stw	r5,1336(sp)
  802ba4:	28002d1e 	bne	r5,zero,802c5c <___vfprintf_internal_r+0x4a4>
  802ba8:	d9814a17 	ldw	r6,1320(sp)
  802bac:	d8814517 	ldw	r2,1300(sp)
  802bb0:	30a1c83a 	sub	r16,r6,r2
  802bb4:	0400290e 	bge	zero,r16,802c5c <___vfprintf_internal_r+0x4a4>
  802bb8:	00800404 	movi	r2,16
  802bbc:	14045e0e 	bge	r2,r16,803d38 <___vfprintf_internal_r+0x1580>
  802bc0:	dc800e17 	ldw	r18,56(sp)
  802bc4:	dc400d17 	ldw	r17,52(sp)
  802bc8:	1027883a 	mov	r19,r2
  802bcc:	07002074 	movhi	fp,129
  802bd0:	e73beb84 	addi	fp,fp,-4178
  802bd4:	050001c4 	movi	r20,7
  802bd8:	00000306 	br	802be8 <___vfprintf_internal_r+0x430>
  802bdc:	843ffc04 	addi	r16,r16,-16
  802be0:	ad400204 	addi	r21,r21,8
  802be4:	9c00130e 	bge	r19,r16,802c34 <___vfprintf_internal_r+0x47c>
  802be8:	94800404 	addi	r18,r18,16
  802bec:	8c400044 	addi	r17,r17,1
  802bf0:	af000015 	stw	fp,0(r21)
  802bf4:	acc00115 	stw	r19,4(r21)
  802bf8:	dc800e15 	stw	r18,56(sp)
  802bfc:	dc400d15 	stw	r17,52(sp)
  802c00:	a47ff60e 	bge	r20,r17,802bdc <___vfprintf_internal_r+0x424>
  802c04:	d9014f17 	ldw	r4,1340(sp)
  802c08:	b00b883a 	mov	r5,r22
  802c0c:	d9800c04 	addi	r6,sp,48
  802c10:	d9c15115 	stw	r7,1348(sp)
  802c14:	08027600 	call	802760 <__sprint_r>
  802c18:	d9c15117 	ldw	r7,1348(sp)
  802c1c:	10009e1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  802c20:	843ffc04 	addi	r16,r16,-16
  802c24:	dc800e17 	ldw	r18,56(sp)
  802c28:	dc400d17 	ldw	r17,52(sp)
  802c2c:	dd401904 	addi	r21,sp,100
  802c30:	9c3fed16 	blt	r19,r16,802be8 <___vfprintf_internal_r+0x430>
  802c34:	9425883a 	add	r18,r18,r16
  802c38:	8c400044 	addi	r17,r17,1
  802c3c:	008001c4 	movi	r2,7
  802c40:	af000015 	stw	fp,0(r21)
  802c44:	ac000115 	stw	r16,4(r21)
  802c48:	dc800e15 	stw	r18,56(sp)
  802c4c:	dc400d15 	stw	r17,52(sp)
  802c50:	1441f516 	blt	r2,r17,803428 <___vfprintf_internal_r+0xc70>
  802c54:	ad400204 	addi	r21,r21,8
  802c58:	00000206 	br	802c64 <___vfprintf_internal_r+0x4ac>
  802c5c:	dc800e17 	ldw	r18,56(sp)
  802c60:	dc400d17 	ldw	r17,52(sp)
  802c64:	d8800407 	ldb	r2,16(sp)
  802c68:	10000b26 	beq	r2,zero,802c98 <___vfprintf_internal_r+0x4e0>
  802c6c:	00800044 	movi	r2,1
  802c70:	94800044 	addi	r18,r18,1
  802c74:	8c400044 	addi	r17,r17,1
  802c78:	a8800115 	stw	r2,4(r21)
  802c7c:	d8c00404 	addi	r3,sp,16
  802c80:	008001c4 	movi	r2,7
  802c84:	a8c00015 	stw	r3,0(r21)
  802c88:	dc800e15 	stw	r18,56(sp)
  802c8c:	dc400d15 	stw	r17,52(sp)
  802c90:	1441da16 	blt	r2,r17,8033fc <___vfprintf_internal_r+0xc44>
  802c94:	ad400204 	addi	r21,r21,8
  802c98:	d9015017 	ldw	r4,1344(sp)
  802c9c:	20000b1e 	bne	r4,zero,802ccc <___vfprintf_internal_r+0x514>
  802ca0:	d8800444 	addi	r2,sp,17
  802ca4:	94800084 	addi	r18,r18,2
  802ca8:	8c400044 	addi	r17,r17,1
  802cac:	a8800015 	stw	r2,0(r21)
  802cb0:	00c00084 	movi	r3,2
  802cb4:	008001c4 	movi	r2,7
  802cb8:	a8c00115 	stw	r3,4(r21)
  802cbc:	dc800e15 	stw	r18,56(sp)
  802cc0:	dc400d15 	stw	r17,52(sp)
  802cc4:	1441c216 	blt	r2,r17,8033d0 <___vfprintf_internal_r+0xc18>
  802cc8:	ad400204 	addi	r21,r21,8
  802ccc:	d9414e17 	ldw	r5,1336(sp)
  802cd0:	00802004 	movi	r2,128
  802cd4:	2880b126 	beq	r5,r2,802f9c <___vfprintf_internal_r+0x7e4>
  802cd8:	d8c14617 	ldw	r3,1304(sp)
  802cdc:	19e1c83a 	sub	r16,r3,r7
  802ce0:	0400260e 	bge	zero,r16,802d7c <___vfprintf_internal_r+0x5c4>
  802ce4:	00800404 	movi	r2,16
  802ce8:	1403cf0e 	bge	r2,r16,803c28 <___vfprintf_internal_r+0x1470>
  802cec:	1027883a 	mov	r19,r2
  802cf0:	07002074 	movhi	fp,129
  802cf4:	e73be784 	addi	fp,fp,-4194
  802cf8:	050001c4 	movi	r20,7
  802cfc:	00000306 	br	802d0c <___vfprintf_internal_r+0x554>
  802d00:	843ffc04 	addi	r16,r16,-16
  802d04:	ad400204 	addi	r21,r21,8
  802d08:	9c00130e 	bge	r19,r16,802d58 <___vfprintf_internal_r+0x5a0>
  802d0c:	94800404 	addi	r18,r18,16
  802d10:	8c400044 	addi	r17,r17,1
  802d14:	af000015 	stw	fp,0(r21)
  802d18:	acc00115 	stw	r19,4(r21)
  802d1c:	dc800e15 	stw	r18,56(sp)
  802d20:	dc400d15 	stw	r17,52(sp)
  802d24:	a47ff60e 	bge	r20,r17,802d00 <___vfprintf_internal_r+0x548>
  802d28:	d9014f17 	ldw	r4,1340(sp)
  802d2c:	b00b883a 	mov	r5,r22
  802d30:	d9800c04 	addi	r6,sp,48
  802d34:	d9c15115 	stw	r7,1348(sp)
  802d38:	08027600 	call	802760 <__sprint_r>
  802d3c:	d9c15117 	ldw	r7,1348(sp)
  802d40:	1000551e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  802d44:	843ffc04 	addi	r16,r16,-16
  802d48:	dc800e17 	ldw	r18,56(sp)
  802d4c:	dc400d17 	ldw	r17,52(sp)
  802d50:	dd401904 	addi	r21,sp,100
  802d54:	9c3fed16 	blt	r19,r16,802d0c <___vfprintf_internal_r+0x554>
  802d58:	9425883a 	add	r18,r18,r16
  802d5c:	8c400044 	addi	r17,r17,1
  802d60:	008001c4 	movi	r2,7
  802d64:	af000015 	stw	fp,0(r21)
  802d68:	ac000115 	stw	r16,4(r21)
  802d6c:	dc800e15 	stw	r18,56(sp)
  802d70:	dc400d15 	stw	r17,52(sp)
  802d74:	14418216 	blt	r2,r17,803380 <___vfprintf_internal_r+0xbc8>
  802d78:	ad400204 	addi	r21,r21,8
  802d7c:	d9014c17 	ldw	r4,1328(sp)
  802d80:	2080400c 	andi	r2,r4,256
  802d84:	10004a1e 	bne	r2,zero,802eb0 <___vfprintf_internal_r+0x6f8>
  802d88:	d9414117 	ldw	r5,1284(sp)
  802d8c:	91e5883a 	add	r18,r18,r7
  802d90:	8c400044 	addi	r17,r17,1
  802d94:	008001c4 	movi	r2,7
  802d98:	a9400015 	stw	r5,0(r21)
  802d9c:	a9c00115 	stw	r7,4(r21)
  802da0:	dc800e15 	stw	r18,56(sp)
  802da4:	dc400d15 	stw	r17,52(sp)
  802da8:	14416716 	blt	r2,r17,803348 <___vfprintf_internal_r+0xb90>
  802dac:	a8c00204 	addi	r3,r21,8
  802db0:	d9814c17 	ldw	r6,1328(sp)
  802db4:	3080010c 	andi	r2,r6,4
  802db8:	10002826 	beq	r2,zero,802e5c <___vfprintf_internal_r+0x6a4>
  802dbc:	d8814a17 	ldw	r2,1320(sp)
  802dc0:	d9014517 	ldw	r4,1300(sp)
  802dc4:	1121c83a 	sub	r16,r2,r4
  802dc8:	0400240e 	bge	zero,r16,802e5c <___vfprintf_internal_r+0x6a4>
  802dcc:	00800404 	movi	r2,16
  802dd0:	1404550e 	bge	r2,r16,803f28 <___vfprintf_internal_r+0x1770>
  802dd4:	dc400d17 	ldw	r17,52(sp)
  802dd8:	1027883a 	mov	r19,r2
  802ddc:	07002074 	movhi	fp,129
  802de0:	e73beb84 	addi	fp,fp,-4178
  802de4:	050001c4 	movi	r20,7
  802de8:	00000306 	br	802df8 <___vfprintf_internal_r+0x640>
  802dec:	843ffc04 	addi	r16,r16,-16
  802df0:	18c00204 	addi	r3,r3,8
  802df4:	9c00110e 	bge	r19,r16,802e3c <___vfprintf_internal_r+0x684>
  802df8:	94800404 	addi	r18,r18,16
  802dfc:	8c400044 	addi	r17,r17,1
  802e00:	1f000015 	stw	fp,0(r3)
  802e04:	1cc00115 	stw	r19,4(r3)
  802e08:	dc800e15 	stw	r18,56(sp)
  802e0c:	dc400d15 	stw	r17,52(sp)
  802e10:	a47ff60e 	bge	r20,r17,802dec <___vfprintf_internal_r+0x634>
  802e14:	d9014f17 	ldw	r4,1340(sp)
  802e18:	b00b883a 	mov	r5,r22
  802e1c:	d9800c04 	addi	r6,sp,48
  802e20:	08027600 	call	802760 <__sprint_r>
  802e24:	10001c1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  802e28:	843ffc04 	addi	r16,r16,-16
  802e2c:	dc800e17 	ldw	r18,56(sp)
  802e30:	dc400d17 	ldw	r17,52(sp)
  802e34:	d8c01904 	addi	r3,sp,100
  802e38:	9c3fef16 	blt	r19,r16,802df8 <___vfprintf_internal_r+0x640>
  802e3c:	9425883a 	add	r18,r18,r16
  802e40:	8c400044 	addi	r17,r17,1
  802e44:	008001c4 	movi	r2,7
  802e48:	1f000015 	stw	fp,0(r3)
  802e4c:	1c000115 	stw	r16,4(r3)
  802e50:	dc800e15 	stw	r18,56(sp)
  802e54:	dc400d15 	stw	r17,52(sp)
  802e58:	1440cb16 	blt	r2,r17,803188 <___vfprintf_internal_r+0x9d0>
  802e5c:	d8814a17 	ldw	r2,1320(sp)
  802e60:	d9414517 	ldw	r5,1300(sp)
  802e64:	1140010e 	bge	r2,r5,802e6c <___vfprintf_internal_r+0x6b4>
  802e68:	2805883a 	mov	r2,r5
  802e6c:	d9814b17 	ldw	r6,1324(sp)
  802e70:	308d883a 	add	r6,r6,r2
  802e74:	d9814b15 	stw	r6,1324(sp)
  802e78:	90013b1e 	bne	r18,zero,803368 <___vfprintf_internal_r+0xbb0>
  802e7c:	d9c14017 	ldw	r7,1280(sp)
  802e80:	dd401904 	addi	r21,sp,100
  802e84:	d8000d15 	stw	zero,52(sp)
  802e88:	003ea706 	br	802928 <___vfprintf_internal_r+0x170>
  802e8c:	d8800e17 	ldw	r2,56(sp)
  802e90:	1005451e 	bne	r2,zero,8043a8 <___vfprintf_internal_r+0x1bf0>
  802e94:	d8000d15 	stw	zero,52(sp)
  802e98:	b080030b 	ldhu	r2,12(r22)
  802e9c:	1080100c 	andi	r2,r2,64
  802ea0:	103e8726 	beq	r2,zero,8028c0 <___vfprintf_internal_r+0x108>
  802ea4:	00bfffc4 	movi	r2,-1
  802ea8:	d8814b15 	stw	r2,1324(sp)
  802eac:	003e8406 	br	8028c0 <___vfprintf_internal_r+0x108>
  802eb0:	d9814d17 	ldw	r6,1332(sp)
  802eb4:	00801944 	movi	r2,101
  802eb8:	11806e16 	blt	r2,r6,803074 <___vfprintf_internal_r+0x8bc>
  802ebc:	d9414717 	ldw	r5,1308(sp)
  802ec0:	00c00044 	movi	r3,1
  802ec4:	1943490e 	bge	r3,r5,803bec <___vfprintf_internal_r+0x1434>
  802ec8:	d8814117 	ldw	r2,1284(sp)
  802ecc:	94800044 	addi	r18,r18,1
  802ed0:	8c400044 	addi	r17,r17,1
  802ed4:	a8800015 	stw	r2,0(r21)
  802ed8:	008001c4 	movi	r2,7
  802edc:	a8c00115 	stw	r3,4(r21)
  802ee0:	dc800e15 	stw	r18,56(sp)
  802ee4:	dc400d15 	stw	r17,52(sp)
  802ee8:	1441ca16 	blt	r2,r17,803614 <___vfprintf_internal_r+0xe5c>
  802eec:	a8c00204 	addi	r3,r21,8
  802ef0:	d9014917 	ldw	r4,1316(sp)
  802ef4:	00800044 	movi	r2,1
  802ef8:	94800044 	addi	r18,r18,1
  802efc:	8c400044 	addi	r17,r17,1
  802f00:	18800115 	stw	r2,4(r3)
  802f04:	008001c4 	movi	r2,7
  802f08:	19000015 	stw	r4,0(r3)
  802f0c:	dc800e15 	stw	r18,56(sp)
  802f10:	dc400d15 	stw	r17,52(sp)
  802f14:	1441b616 	blt	r2,r17,8035f0 <___vfprintf_internal_r+0xe38>
  802f18:	1cc00204 	addi	r19,r3,8
  802f1c:	d9014217 	ldw	r4,1288(sp)
  802f20:	d9414317 	ldw	r5,1292(sp)
  802f24:	000d883a 	mov	r6,zero
  802f28:	000f883a 	mov	r7,zero
  802f2c:	0809b680 	call	809b68 <__nedf2>
  802f30:	10017426 	beq	r2,zero,803504 <___vfprintf_internal_r+0xd4c>
  802f34:	d9414717 	ldw	r5,1308(sp)
  802f38:	d9814117 	ldw	r6,1284(sp)
  802f3c:	8c400044 	addi	r17,r17,1
  802f40:	2c85883a 	add	r2,r5,r18
  802f44:	14bfffc4 	addi	r18,r2,-1
  802f48:	28bfffc4 	addi	r2,r5,-1
  802f4c:	30c00044 	addi	r3,r6,1
  802f50:	98800115 	stw	r2,4(r19)
  802f54:	008001c4 	movi	r2,7
  802f58:	98c00015 	stw	r3,0(r19)
  802f5c:	dc800e15 	stw	r18,56(sp)
  802f60:	dc400d15 	stw	r17,52(sp)
  802f64:	14418e16 	blt	r2,r17,8035a0 <___vfprintf_internal_r+0xde8>
  802f68:	9cc00204 	addi	r19,r19,8
  802f6c:	d9414817 	ldw	r5,1312(sp)
  802f70:	d8800804 	addi	r2,sp,32
  802f74:	8c400044 	addi	r17,r17,1
  802f78:	9165883a 	add	r18,r18,r5
  802f7c:	98800015 	stw	r2,0(r19)
  802f80:	008001c4 	movi	r2,7
  802f84:	99400115 	stw	r5,4(r19)
  802f88:	dc800e15 	stw	r18,56(sp)
  802f8c:	dc400d15 	stw	r17,52(sp)
  802f90:	1440ed16 	blt	r2,r17,803348 <___vfprintf_internal_r+0xb90>
  802f94:	98c00204 	addi	r3,r19,8
  802f98:	003f8506 	br	802db0 <___vfprintf_internal_r+0x5f8>
  802f9c:	d9814a17 	ldw	r6,1320(sp)
  802fa0:	d8814517 	ldw	r2,1300(sp)
  802fa4:	30a1c83a 	sub	r16,r6,r2
  802fa8:	043f4b0e 	bge	zero,r16,802cd8 <___vfprintf_internal_r+0x520>
  802fac:	00800404 	movi	r2,16
  802fb0:	14043a0e 	bge	r2,r16,80409c <___vfprintf_internal_r+0x18e4>
  802fb4:	1027883a 	mov	r19,r2
  802fb8:	07002074 	movhi	fp,129
  802fbc:	e73be784 	addi	fp,fp,-4194
  802fc0:	050001c4 	movi	r20,7
  802fc4:	00000306 	br	802fd4 <___vfprintf_internal_r+0x81c>
  802fc8:	843ffc04 	addi	r16,r16,-16
  802fcc:	ad400204 	addi	r21,r21,8
  802fd0:	9c00130e 	bge	r19,r16,803020 <___vfprintf_internal_r+0x868>
  802fd4:	94800404 	addi	r18,r18,16
  802fd8:	8c400044 	addi	r17,r17,1
  802fdc:	af000015 	stw	fp,0(r21)
  802fe0:	acc00115 	stw	r19,4(r21)
  802fe4:	dc800e15 	stw	r18,56(sp)
  802fe8:	dc400d15 	stw	r17,52(sp)
  802fec:	a47ff60e 	bge	r20,r17,802fc8 <___vfprintf_internal_r+0x810>
  802ff0:	d9014f17 	ldw	r4,1340(sp)
  802ff4:	b00b883a 	mov	r5,r22
  802ff8:	d9800c04 	addi	r6,sp,48
  802ffc:	d9c15115 	stw	r7,1348(sp)
  803000:	08027600 	call	802760 <__sprint_r>
  803004:	d9c15117 	ldw	r7,1348(sp)
  803008:	103fa31e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  80300c:	843ffc04 	addi	r16,r16,-16
  803010:	dc800e17 	ldw	r18,56(sp)
  803014:	dc400d17 	ldw	r17,52(sp)
  803018:	dd401904 	addi	r21,sp,100
  80301c:	9c3fed16 	blt	r19,r16,802fd4 <___vfprintf_internal_r+0x81c>
  803020:	9425883a 	add	r18,r18,r16
  803024:	8c400044 	addi	r17,r17,1
  803028:	008001c4 	movi	r2,7
  80302c:	af000015 	stw	fp,0(r21)
  803030:	ac000115 	stw	r16,4(r21)
  803034:	dc800e15 	stw	r18,56(sp)
  803038:	dc400d15 	stw	r17,52(sp)
  80303c:	14416116 	blt	r2,r17,8035c4 <___vfprintf_internal_r+0xe0c>
  803040:	ad400204 	addi	r21,r21,8
  803044:	003f2406 	br	802cd8 <___vfprintf_internal_r+0x520>
  803048:	d9014f17 	ldw	r4,1340(sp)
  80304c:	08009b00 	call	8009b0 <__sinit>
  803050:	d9c15117 	ldw	r7,1348(sp)
  803054:	003def06 	br	802814 <___vfprintf_internal_r+0x5c>
  803058:	d9014f17 	ldw	r4,1340(sp)
  80305c:	b00b883a 	mov	r5,r22
  803060:	d9c15115 	stw	r7,1348(sp)
  803064:	08047180 	call	804718 <__swsetup_r>
  803068:	d9c15117 	ldw	r7,1348(sp)
  80306c:	103dee26 	beq	r2,zero,802828 <___vfprintf_internal_r+0x70>
  803070:	003f8c06 	br	802ea4 <___vfprintf_internal_r+0x6ec>
  803074:	d9014217 	ldw	r4,1288(sp)
  803078:	d9414317 	ldw	r5,1292(sp)
  80307c:	000d883a 	mov	r6,zero
  803080:	000f883a 	mov	r7,zero
  803084:	0809ae00 	call	809ae0 <__eqdf2>
  803088:	1000f21e 	bne	r2,zero,803454 <___vfprintf_internal_r+0xc9c>
  80308c:	00802074 	movhi	r2,129
  803090:	10bbe704 	addi	r2,r2,-4196
  803094:	94800044 	addi	r18,r18,1
  803098:	8c400044 	addi	r17,r17,1
  80309c:	a8800015 	stw	r2,0(r21)
  8030a0:	00c00044 	movi	r3,1
  8030a4:	008001c4 	movi	r2,7
  8030a8:	a8c00115 	stw	r3,4(r21)
  8030ac:	dc800e15 	stw	r18,56(sp)
  8030b0:	dc400d15 	stw	r17,52(sp)
  8030b4:	14430016 	blt	r2,r17,803cb8 <___vfprintf_internal_r+0x1500>
  8030b8:	a8c00204 	addi	r3,r21,8
  8030bc:	d8800517 	ldw	r2,20(sp)
  8030c0:	d9014717 	ldw	r4,1308(sp)
  8030c4:	11015c0e 	bge	r2,r4,803638 <___vfprintf_internal_r+0xe80>
  8030c8:	dc400d17 	ldw	r17,52(sp)
  8030cc:	d9814917 	ldw	r6,1316(sp)
  8030d0:	00800044 	movi	r2,1
  8030d4:	94800044 	addi	r18,r18,1
  8030d8:	8c400044 	addi	r17,r17,1
  8030dc:	18800115 	stw	r2,4(r3)
  8030e0:	008001c4 	movi	r2,7
  8030e4:	19800015 	stw	r6,0(r3)
  8030e8:	dc800e15 	stw	r18,56(sp)
  8030ec:	dc400d15 	stw	r17,52(sp)
  8030f0:	14431616 	blt	r2,r17,803d4c <___vfprintf_internal_r+0x1594>
  8030f4:	18c00204 	addi	r3,r3,8
  8030f8:	d8814717 	ldw	r2,1308(sp)
  8030fc:	143fffc4 	addi	r16,r2,-1
  803100:	043f2b0e 	bge	zero,r16,802db0 <___vfprintf_internal_r+0x5f8>
  803104:	00800404 	movi	r2,16
  803108:	1402a80e 	bge	r2,r16,803bac <___vfprintf_internal_r+0x13f4>
  80310c:	dc400d17 	ldw	r17,52(sp)
  803110:	1027883a 	mov	r19,r2
  803114:	07002074 	movhi	fp,129
  803118:	e73be784 	addi	fp,fp,-4194
  80311c:	050001c4 	movi	r20,7
  803120:	00000306 	br	803130 <___vfprintf_internal_r+0x978>
  803124:	18c00204 	addi	r3,r3,8
  803128:	843ffc04 	addi	r16,r16,-16
  80312c:	9c02a20e 	bge	r19,r16,803bb8 <___vfprintf_internal_r+0x1400>
  803130:	94800404 	addi	r18,r18,16
  803134:	8c400044 	addi	r17,r17,1
  803138:	1f000015 	stw	fp,0(r3)
  80313c:	1cc00115 	stw	r19,4(r3)
  803140:	dc800e15 	stw	r18,56(sp)
  803144:	dc400d15 	stw	r17,52(sp)
  803148:	a47ff60e 	bge	r20,r17,803124 <___vfprintf_internal_r+0x96c>
  80314c:	d9014f17 	ldw	r4,1340(sp)
  803150:	b00b883a 	mov	r5,r22
  803154:	d9800c04 	addi	r6,sp,48
  803158:	08027600 	call	802760 <__sprint_r>
  80315c:	103f4e1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803160:	dc800e17 	ldw	r18,56(sp)
  803164:	dc400d17 	ldw	r17,52(sp)
  803168:	d8c01904 	addi	r3,sp,100
  80316c:	003fee06 	br	803128 <___vfprintf_internal_r+0x970>
  803170:	d8802c0b 	ldhu	r2,176(sp)
  803174:	00ffffc4 	movi	r3,-1
  803178:	d8c14b15 	stw	r3,1324(sp)
  80317c:	1080100c 	andi	r2,r2,64
  803180:	103dcc1e 	bne	r2,zero,8028b4 <___vfprintf_internal_r+0xfc>
  803184:	003dce06 	br	8028c0 <___vfprintf_internal_r+0x108>
  803188:	d9014f17 	ldw	r4,1340(sp)
  80318c:	b00b883a 	mov	r5,r22
  803190:	d9800c04 	addi	r6,sp,48
  803194:	08027600 	call	802760 <__sprint_r>
  803198:	103f3f1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  80319c:	dc800e17 	ldw	r18,56(sp)
  8031a0:	003f2e06 	br	802e5c <___vfprintf_internal_r+0x6a4>
  8031a4:	d9414c17 	ldw	r5,1328(sp)
  8031a8:	29400414 	ori	r5,r5,16
  8031ac:	d9414c15 	stw	r5,1328(sp)
  8031b0:	d9814c17 	ldw	r6,1328(sp)
  8031b4:	3080080c 	andi	r2,r6,32
  8031b8:	10014f1e 	bne	r2,zero,8036f8 <___vfprintf_internal_r+0xf40>
  8031bc:	d8c14c17 	ldw	r3,1328(sp)
  8031c0:	1880040c 	andi	r2,r3,16
  8031c4:	1002f01e 	bne	r2,zero,803d88 <___vfprintf_internal_r+0x15d0>
  8031c8:	d9014c17 	ldw	r4,1328(sp)
  8031cc:	2080100c 	andi	r2,r4,64
  8031d0:	1002ed26 	beq	r2,zero,803d88 <___vfprintf_internal_r+0x15d0>
  8031d4:	3880000f 	ldh	r2,0(r7)
  8031d8:	39c00104 	addi	r7,r7,4
  8031dc:	d9c14015 	stw	r7,1280(sp)
  8031e0:	1023d7fa 	srai	r17,r2,31
  8031e4:	1021883a 	mov	r16,r2
  8031e8:	88037816 	blt	r17,zero,803fcc <___vfprintf_internal_r+0x1814>
  8031ec:	01000044 	movi	r4,1
  8031f0:	98000416 	blt	r19,zero,803204 <___vfprintf_internal_r+0xa4c>
  8031f4:	d8c14c17 	ldw	r3,1328(sp)
  8031f8:	00bfdfc4 	movi	r2,-129
  8031fc:	1886703a 	and	r3,r3,r2
  803200:	d8c14c15 	stw	r3,1328(sp)
  803204:	8444b03a 	or	r2,r16,r17
  803208:	10022c1e 	bne	r2,zero,803abc <___vfprintf_internal_r+0x1304>
  80320c:	98022b1e 	bne	r19,zero,803abc <___vfprintf_internal_r+0x1304>
  803210:	20803fcc 	andi	r2,r4,255
  803214:	1002a126 	beq	r2,zero,803c9c <___vfprintf_internal_r+0x14e4>
  803218:	d8c01904 	addi	r3,sp,100
  80321c:	dd000f04 	addi	r20,sp,60
  803220:	d8c14115 	stw	r3,1284(sp)
  803224:	d8c14117 	ldw	r3,1284(sp)
  803228:	dcc14515 	stw	r19,1300(sp)
  80322c:	a0c5c83a 	sub	r2,r20,r3
  803230:	11c00a04 	addi	r7,r2,40
  803234:	99c0010e 	bge	r19,r7,80323c <___vfprintf_internal_r+0xa84>
  803238:	d9c14515 	stw	r7,1300(sp)
  80323c:	dcc14615 	stw	r19,1304(sp)
  803240:	d8800407 	ldb	r2,16(sp)
  803244:	103e4c26 	beq	r2,zero,802b78 <___vfprintf_internal_r+0x3c0>
  803248:	d8814517 	ldw	r2,1300(sp)
  80324c:	10800044 	addi	r2,r2,1
  803250:	d8814515 	stw	r2,1300(sp)
  803254:	003e4806 	br	802b78 <___vfprintf_internal_r+0x3c0>
  803258:	d9814c17 	ldw	r6,1328(sp)
  80325c:	31800414 	ori	r6,r6,16
  803260:	d9814c15 	stw	r6,1328(sp)
  803264:	d8c14c17 	ldw	r3,1328(sp)
  803268:	1880080c 	andi	r2,r3,32
  80326c:	1001271e 	bne	r2,zero,80370c <___vfprintf_internal_r+0xf54>
  803270:	d9414c17 	ldw	r5,1328(sp)
  803274:	2880040c 	andi	r2,r5,16
  803278:	1002bc1e 	bne	r2,zero,803d6c <___vfprintf_internal_r+0x15b4>
  80327c:	d9814c17 	ldw	r6,1328(sp)
  803280:	3080100c 	andi	r2,r6,64
  803284:	1002b926 	beq	r2,zero,803d6c <___vfprintf_internal_r+0x15b4>
  803288:	3c00000b 	ldhu	r16,0(r7)
  80328c:	0009883a 	mov	r4,zero
  803290:	39c00104 	addi	r7,r7,4
  803294:	0023883a 	mov	r17,zero
  803298:	d9c14015 	stw	r7,1280(sp)
  80329c:	d8000405 	stb	zero,16(sp)
  8032a0:	003fd306 	br	8031f0 <___vfprintf_internal_r+0xa38>
  8032a4:	d9014c17 	ldw	r4,1328(sp)
  8032a8:	21000414 	ori	r4,r4,16
  8032ac:	d9014c15 	stw	r4,1328(sp)
  8032b0:	d9414c17 	ldw	r5,1328(sp)
  8032b4:	2880080c 	andi	r2,r5,32
  8032b8:	1001081e 	bne	r2,zero,8036dc <___vfprintf_internal_r+0xf24>
  8032bc:	d8c14c17 	ldw	r3,1328(sp)
  8032c0:	1880040c 	andi	r2,r3,16
  8032c4:	1002b61e 	bne	r2,zero,803da0 <___vfprintf_internal_r+0x15e8>
  8032c8:	d9014c17 	ldw	r4,1328(sp)
  8032cc:	2080100c 	andi	r2,r4,64
  8032d0:	1002b326 	beq	r2,zero,803da0 <___vfprintf_internal_r+0x15e8>
  8032d4:	3c00000b 	ldhu	r16,0(r7)
  8032d8:	01000044 	movi	r4,1
  8032dc:	39c00104 	addi	r7,r7,4
  8032e0:	0023883a 	mov	r17,zero
  8032e4:	d9c14015 	stw	r7,1280(sp)
  8032e8:	d8000405 	stb	zero,16(sp)
  8032ec:	003fc006 	br	8031f0 <___vfprintf_internal_r+0xa38>
  8032f0:	d9014f17 	ldw	r4,1340(sp)
  8032f4:	b00b883a 	mov	r5,r22
  8032f8:	d9800c04 	addi	r6,sp,48
  8032fc:	08027600 	call	802760 <__sprint_r>
  803300:	103ee51e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803304:	dc800e17 	ldw	r18,56(sp)
  803308:	d8c01904 	addi	r3,sp,100
  80330c:	d9814c17 	ldw	r6,1328(sp)
  803310:	3080004c 	andi	r2,r6,1
  803314:	1005003a 	cmpeq	r2,r2,zero
  803318:	103ea51e 	bne	r2,zero,802db0 <___vfprintf_internal_r+0x5f8>
  80331c:	00800044 	movi	r2,1
  803320:	dc400d17 	ldw	r17,52(sp)
  803324:	18800115 	stw	r2,4(r3)
  803328:	d8814917 	ldw	r2,1316(sp)
  80332c:	94800044 	addi	r18,r18,1
  803330:	8c400044 	addi	r17,r17,1
  803334:	18800015 	stw	r2,0(r3)
  803338:	008001c4 	movi	r2,7
  80333c:	dc800e15 	stw	r18,56(sp)
  803340:	dc400d15 	stw	r17,52(sp)
  803344:	1442240e 	bge	r2,r17,803bd8 <___vfprintf_internal_r+0x1420>
  803348:	d9014f17 	ldw	r4,1340(sp)
  80334c:	b00b883a 	mov	r5,r22
  803350:	d9800c04 	addi	r6,sp,48
  803354:	08027600 	call	802760 <__sprint_r>
  803358:	103ecf1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  80335c:	dc800e17 	ldw	r18,56(sp)
  803360:	d8c01904 	addi	r3,sp,100
  803364:	003e9206 	br	802db0 <___vfprintf_internal_r+0x5f8>
  803368:	d9014f17 	ldw	r4,1340(sp)
  80336c:	b00b883a 	mov	r5,r22
  803370:	d9800c04 	addi	r6,sp,48
  803374:	08027600 	call	802760 <__sprint_r>
  803378:	103ec026 	beq	r2,zero,802e7c <___vfprintf_internal_r+0x6c4>
  80337c:	003ec606 	br	802e98 <___vfprintf_internal_r+0x6e0>
  803380:	d9014f17 	ldw	r4,1340(sp)
  803384:	b00b883a 	mov	r5,r22
  803388:	d9800c04 	addi	r6,sp,48
  80338c:	d9c15115 	stw	r7,1348(sp)
  803390:	08027600 	call	802760 <__sprint_r>
  803394:	d9c15117 	ldw	r7,1348(sp)
  803398:	103ebf1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  80339c:	dc800e17 	ldw	r18,56(sp)
  8033a0:	dc400d17 	ldw	r17,52(sp)
  8033a4:	dd401904 	addi	r21,sp,100
  8033a8:	003e7406 	br	802d7c <___vfprintf_internal_r+0x5c4>
  8033ac:	d9014f17 	ldw	r4,1340(sp)
  8033b0:	b00b883a 	mov	r5,r22
  8033b4:	d9800c04 	addi	r6,sp,48
  8033b8:	d9c15115 	stw	r7,1348(sp)
  8033bc:	08027600 	call	802760 <__sprint_r>
  8033c0:	d9c15117 	ldw	r7,1348(sp)
  8033c4:	103eb41e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  8033c8:	dd401904 	addi	r21,sp,100
  8033cc:	003d6d06 	br	802984 <___vfprintf_internal_r+0x1cc>
  8033d0:	d9014f17 	ldw	r4,1340(sp)
  8033d4:	b00b883a 	mov	r5,r22
  8033d8:	d9800c04 	addi	r6,sp,48
  8033dc:	d9c15115 	stw	r7,1348(sp)
  8033e0:	08027600 	call	802760 <__sprint_r>
  8033e4:	d9c15117 	ldw	r7,1348(sp)
  8033e8:	103eab1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  8033ec:	dc800e17 	ldw	r18,56(sp)
  8033f0:	dc400d17 	ldw	r17,52(sp)
  8033f4:	dd401904 	addi	r21,sp,100
  8033f8:	003e3406 	br	802ccc <___vfprintf_internal_r+0x514>
  8033fc:	d9014f17 	ldw	r4,1340(sp)
  803400:	b00b883a 	mov	r5,r22
  803404:	d9800c04 	addi	r6,sp,48
  803408:	d9c15115 	stw	r7,1348(sp)
  80340c:	08027600 	call	802760 <__sprint_r>
  803410:	d9c15117 	ldw	r7,1348(sp)
  803414:	103ea01e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803418:	dc800e17 	ldw	r18,56(sp)
  80341c:	dc400d17 	ldw	r17,52(sp)
  803420:	dd401904 	addi	r21,sp,100
  803424:	003e1c06 	br	802c98 <___vfprintf_internal_r+0x4e0>
  803428:	d9014f17 	ldw	r4,1340(sp)
  80342c:	b00b883a 	mov	r5,r22
  803430:	d9800c04 	addi	r6,sp,48
  803434:	d9c15115 	stw	r7,1348(sp)
  803438:	08027600 	call	802760 <__sprint_r>
  80343c:	d9c15117 	ldw	r7,1348(sp)
  803440:	103e951e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803444:	dc800e17 	ldw	r18,56(sp)
  803448:	dc400d17 	ldw	r17,52(sp)
  80344c:	dd401904 	addi	r21,sp,100
  803450:	003e0406 	br	802c64 <___vfprintf_internal_r+0x4ac>
  803454:	d9000517 	ldw	r4,20(sp)
  803458:	0102580e 	bge	zero,r4,803dbc <___vfprintf_internal_r+0x1604>
  80345c:	d9814717 	ldw	r6,1308(sp)
  803460:	21807a16 	blt	r4,r6,80364c <___vfprintf_internal_r+0xe94>
  803464:	d8814117 	ldw	r2,1284(sp)
  803468:	91a5883a 	add	r18,r18,r6
  80346c:	8c400044 	addi	r17,r17,1
  803470:	a8800015 	stw	r2,0(r21)
  803474:	008001c4 	movi	r2,7
  803478:	a9800115 	stw	r6,4(r21)
  80347c:	dc800e15 	stw	r18,56(sp)
  803480:	dc400d15 	stw	r17,52(sp)
  803484:	1442fc16 	blt	r2,r17,804078 <___vfprintf_internal_r+0x18c0>
  803488:	a8c00204 	addi	r3,r21,8
  80348c:	d9414717 	ldw	r5,1308(sp)
  803490:	2161c83a 	sub	r16,r4,r5
  803494:	043f9d0e 	bge	zero,r16,80330c <___vfprintf_internal_r+0xb54>
  803498:	00800404 	movi	r2,16
  80349c:	1402190e 	bge	r2,r16,803d04 <___vfprintf_internal_r+0x154c>
  8034a0:	dc400d17 	ldw	r17,52(sp)
  8034a4:	1027883a 	mov	r19,r2
  8034a8:	07002074 	movhi	fp,129
  8034ac:	e73be784 	addi	fp,fp,-4194
  8034b0:	050001c4 	movi	r20,7
  8034b4:	00000306 	br	8034c4 <___vfprintf_internal_r+0xd0c>
  8034b8:	18c00204 	addi	r3,r3,8
  8034bc:	843ffc04 	addi	r16,r16,-16
  8034c0:	9c02130e 	bge	r19,r16,803d10 <___vfprintf_internal_r+0x1558>
  8034c4:	94800404 	addi	r18,r18,16
  8034c8:	8c400044 	addi	r17,r17,1
  8034cc:	1f000015 	stw	fp,0(r3)
  8034d0:	1cc00115 	stw	r19,4(r3)
  8034d4:	dc800e15 	stw	r18,56(sp)
  8034d8:	dc400d15 	stw	r17,52(sp)
  8034dc:	a47ff60e 	bge	r20,r17,8034b8 <___vfprintf_internal_r+0xd00>
  8034e0:	d9014f17 	ldw	r4,1340(sp)
  8034e4:	b00b883a 	mov	r5,r22
  8034e8:	d9800c04 	addi	r6,sp,48
  8034ec:	08027600 	call	802760 <__sprint_r>
  8034f0:	103e691e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  8034f4:	dc800e17 	ldw	r18,56(sp)
  8034f8:	dc400d17 	ldw	r17,52(sp)
  8034fc:	d8c01904 	addi	r3,sp,100
  803500:	003fee06 	br	8034bc <___vfprintf_internal_r+0xd04>
  803504:	d8814717 	ldw	r2,1308(sp)
  803508:	143fffc4 	addi	r16,r2,-1
  80350c:	043e970e 	bge	zero,r16,802f6c <___vfprintf_internal_r+0x7b4>
  803510:	00800404 	movi	r2,16
  803514:	1400180e 	bge	r2,r16,803578 <___vfprintf_internal_r+0xdc0>
  803518:	1029883a 	mov	r20,r2
  80351c:	07002074 	movhi	fp,129
  803520:	e73be784 	addi	fp,fp,-4194
  803524:	054001c4 	movi	r21,7
  803528:	00000306 	br	803538 <___vfprintf_internal_r+0xd80>
  80352c:	9cc00204 	addi	r19,r19,8
  803530:	843ffc04 	addi	r16,r16,-16
  803534:	a400120e 	bge	r20,r16,803580 <___vfprintf_internal_r+0xdc8>
  803538:	94800404 	addi	r18,r18,16
  80353c:	8c400044 	addi	r17,r17,1
  803540:	9f000015 	stw	fp,0(r19)
  803544:	9d000115 	stw	r20,4(r19)
  803548:	dc800e15 	stw	r18,56(sp)
  80354c:	dc400d15 	stw	r17,52(sp)
  803550:	ac7ff60e 	bge	r21,r17,80352c <___vfprintf_internal_r+0xd74>
  803554:	d9014f17 	ldw	r4,1340(sp)
  803558:	b00b883a 	mov	r5,r22
  80355c:	d9800c04 	addi	r6,sp,48
  803560:	08027600 	call	802760 <__sprint_r>
  803564:	103e4c1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803568:	dc800e17 	ldw	r18,56(sp)
  80356c:	dc400d17 	ldw	r17,52(sp)
  803570:	dcc01904 	addi	r19,sp,100
  803574:	003fee06 	br	803530 <___vfprintf_internal_r+0xd78>
  803578:	07002074 	movhi	fp,129
  80357c:	e73be784 	addi	fp,fp,-4194
  803580:	9425883a 	add	r18,r18,r16
  803584:	8c400044 	addi	r17,r17,1
  803588:	008001c4 	movi	r2,7
  80358c:	9f000015 	stw	fp,0(r19)
  803590:	9c000115 	stw	r16,4(r19)
  803594:	dc800e15 	stw	r18,56(sp)
  803598:	dc400d15 	stw	r17,52(sp)
  80359c:	147e720e 	bge	r2,r17,802f68 <___vfprintf_internal_r+0x7b0>
  8035a0:	d9014f17 	ldw	r4,1340(sp)
  8035a4:	b00b883a 	mov	r5,r22
  8035a8:	d9800c04 	addi	r6,sp,48
  8035ac:	08027600 	call	802760 <__sprint_r>
  8035b0:	103e391e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  8035b4:	dc800e17 	ldw	r18,56(sp)
  8035b8:	dc400d17 	ldw	r17,52(sp)
  8035bc:	dcc01904 	addi	r19,sp,100
  8035c0:	003e6a06 	br	802f6c <___vfprintf_internal_r+0x7b4>
  8035c4:	d9014f17 	ldw	r4,1340(sp)
  8035c8:	b00b883a 	mov	r5,r22
  8035cc:	d9800c04 	addi	r6,sp,48
  8035d0:	d9c15115 	stw	r7,1348(sp)
  8035d4:	08027600 	call	802760 <__sprint_r>
  8035d8:	d9c15117 	ldw	r7,1348(sp)
  8035dc:	103e2e1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  8035e0:	dc800e17 	ldw	r18,56(sp)
  8035e4:	dc400d17 	ldw	r17,52(sp)
  8035e8:	dd401904 	addi	r21,sp,100
  8035ec:	003dba06 	br	802cd8 <___vfprintf_internal_r+0x520>
  8035f0:	d9014f17 	ldw	r4,1340(sp)
  8035f4:	b00b883a 	mov	r5,r22
  8035f8:	d9800c04 	addi	r6,sp,48
  8035fc:	08027600 	call	802760 <__sprint_r>
  803600:	103e251e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803604:	dc800e17 	ldw	r18,56(sp)
  803608:	dc400d17 	ldw	r17,52(sp)
  80360c:	dcc01904 	addi	r19,sp,100
  803610:	003e4206 	br	802f1c <___vfprintf_internal_r+0x764>
  803614:	d9014f17 	ldw	r4,1340(sp)
  803618:	b00b883a 	mov	r5,r22
  80361c:	d9800c04 	addi	r6,sp,48
  803620:	08027600 	call	802760 <__sprint_r>
  803624:	103e1c1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803628:	dc800e17 	ldw	r18,56(sp)
  80362c:	dc400d17 	ldw	r17,52(sp)
  803630:	d8c01904 	addi	r3,sp,100
  803634:	003e2e06 	br	802ef0 <___vfprintf_internal_r+0x738>
  803638:	d9414c17 	ldw	r5,1328(sp)
  80363c:	2880004c 	andi	r2,r5,1
  803640:	1005003a 	cmpeq	r2,r2,zero
  803644:	103dda1e 	bne	r2,zero,802db0 <___vfprintf_internal_r+0x5f8>
  803648:	003e9f06 	br	8030c8 <___vfprintf_internal_r+0x910>
  80364c:	d8c14117 	ldw	r3,1284(sp)
  803650:	9125883a 	add	r18,r18,r4
  803654:	8c400044 	addi	r17,r17,1
  803658:	008001c4 	movi	r2,7
  80365c:	a8c00015 	stw	r3,0(r21)
  803660:	a9000115 	stw	r4,4(r21)
  803664:	dc800e15 	stw	r18,56(sp)
  803668:	dc400d15 	stw	r17,52(sp)
  80366c:	14426c16 	blt	r2,r17,804020 <___vfprintf_internal_r+0x1868>
  803670:	a8c00204 	addi	r3,r21,8
  803674:	d9414917 	ldw	r5,1316(sp)
  803678:	00800044 	movi	r2,1
  80367c:	94800044 	addi	r18,r18,1
  803680:	8c400044 	addi	r17,r17,1
  803684:	18800115 	stw	r2,4(r3)
  803688:	008001c4 	movi	r2,7
  80368c:	19400015 	stw	r5,0(r3)
  803690:	dc800e15 	stw	r18,56(sp)
  803694:	dc400d15 	stw	r17,52(sp)
  803698:	2021883a 	mov	r16,r4
  80369c:	14425616 	blt	r2,r17,803ff8 <___vfprintf_internal_r+0x1840>
  8036a0:	19400204 	addi	r5,r3,8
  8036a4:	d9814717 	ldw	r6,1308(sp)
  8036a8:	8c400044 	addi	r17,r17,1
  8036ac:	dc400d15 	stw	r17,52(sp)
  8036b0:	3107c83a 	sub	r3,r6,r4
  8036b4:	d9014117 	ldw	r4,1284(sp)
  8036b8:	90e5883a 	add	r18,r18,r3
  8036bc:	28c00115 	stw	r3,4(r5)
  8036c0:	8105883a 	add	r2,r16,r4
  8036c4:	28800015 	stw	r2,0(r5)
  8036c8:	008001c4 	movi	r2,7
  8036cc:	dc800e15 	stw	r18,56(sp)
  8036d0:	147f1d16 	blt	r2,r17,803348 <___vfprintf_internal_r+0xb90>
  8036d4:	28c00204 	addi	r3,r5,8
  8036d8:	003db506 	br	802db0 <___vfprintf_internal_r+0x5f8>
  8036dc:	3c000017 	ldw	r16,0(r7)
  8036e0:	3c400117 	ldw	r17,4(r7)
  8036e4:	39800204 	addi	r6,r7,8
  8036e8:	01000044 	movi	r4,1
  8036ec:	d9814015 	stw	r6,1280(sp)
  8036f0:	d8000405 	stb	zero,16(sp)
  8036f4:	003ebe06 	br	8031f0 <___vfprintf_internal_r+0xa38>
  8036f8:	3c000017 	ldw	r16,0(r7)
  8036fc:	3c400117 	ldw	r17,4(r7)
  803700:	38800204 	addi	r2,r7,8
  803704:	d8814015 	stw	r2,1280(sp)
  803708:	003eb706 	br	8031e8 <___vfprintf_internal_r+0xa30>
  80370c:	3c000017 	ldw	r16,0(r7)
  803710:	3c400117 	ldw	r17,4(r7)
  803714:	39000204 	addi	r4,r7,8
  803718:	d9014015 	stw	r4,1280(sp)
  80371c:	0009883a 	mov	r4,zero
  803720:	d8000405 	stb	zero,16(sp)
  803724:	003eb206 	br	8031f0 <___vfprintf_internal_r+0xa38>
  803728:	38c00017 	ldw	r3,0(r7)
  80372c:	39c00104 	addi	r7,r7,4
  803730:	d8c14a15 	stw	r3,1320(sp)
  803734:	1800d70e 	bge	r3,zero,803a94 <___vfprintf_internal_r+0x12dc>
  803738:	00c7c83a 	sub	r3,zero,r3
  80373c:	d8c14a15 	stw	r3,1320(sp)
  803740:	d9014c17 	ldw	r4,1328(sp)
  803744:	b8c00007 	ldb	r3,0(r23)
  803748:	21000114 	ori	r4,r4,4
  80374c:	d9014c15 	stw	r4,1328(sp)
  803750:	003c9806 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  803754:	d9814c17 	ldw	r6,1328(sp)
  803758:	3080080c 	andi	r2,r6,32
  80375c:	1001f626 	beq	r2,zero,803f38 <___vfprintf_internal_r+0x1780>
  803760:	d9014b17 	ldw	r4,1324(sp)
  803764:	38800017 	ldw	r2,0(r7)
  803768:	39c00104 	addi	r7,r7,4
  80376c:	d9c14015 	stw	r7,1280(sp)
  803770:	2007d7fa 	srai	r3,r4,31
  803774:	d9c14017 	ldw	r7,1280(sp)
  803778:	11000015 	stw	r4,0(r2)
  80377c:	10c00115 	stw	r3,4(r2)
  803780:	003c6906 	br	802928 <___vfprintf_internal_r+0x170>
  803784:	b8c00007 	ldb	r3,0(r23)
  803788:	00801b04 	movi	r2,108
  80378c:	18825526 	beq	r3,r2,8040e4 <___vfprintf_internal_r+0x192c>
  803790:	d9414c17 	ldw	r5,1328(sp)
  803794:	29400414 	ori	r5,r5,16
  803798:	d9414c15 	stw	r5,1328(sp)
  80379c:	003c8506 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  8037a0:	d9814c17 	ldw	r6,1328(sp)
  8037a4:	b8c00007 	ldb	r3,0(r23)
  8037a8:	31800814 	ori	r6,r6,32
  8037ac:	d9814c15 	stw	r6,1328(sp)
  8037b0:	003c8006 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  8037b4:	d8814c17 	ldw	r2,1328(sp)
  8037b8:	3c000017 	ldw	r16,0(r7)
  8037bc:	00c01e04 	movi	r3,120
  8037c0:	10800094 	ori	r2,r2,2
  8037c4:	d8814c15 	stw	r2,1328(sp)
  8037c8:	39c00104 	addi	r7,r7,4
  8037cc:	01402074 	movhi	r5,129
  8037d0:	297bd004 	addi	r5,r5,-4288
  8037d4:	00800c04 	movi	r2,48
  8037d8:	0023883a 	mov	r17,zero
  8037dc:	01000084 	movi	r4,2
  8037e0:	d9c14015 	stw	r7,1280(sp)
  8037e4:	d8c14d15 	stw	r3,1332(sp)
  8037e8:	d9414415 	stw	r5,1296(sp)
  8037ec:	d8800445 	stb	r2,17(sp)
  8037f0:	d8c00485 	stb	r3,18(sp)
  8037f4:	d8000405 	stb	zero,16(sp)
  8037f8:	003e7d06 	br	8031f0 <___vfprintf_internal_r+0xa38>
  8037fc:	d8814c17 	ldw	r2,1328(sp)
  803800:	b8c00007 	ldb	r3,0(r23)
  803804:	10801014 	ori	r2,r2,64
  803808:	d8814c15 	stw	r2,1328(sp)
  80380c:	003c6906 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  803810:	d9414c17 	ldw	r5,1328(sp)
  803814:	2880020c 	andi	r2,r5,8
  803818:	1001e526 	beq	r2,zero,803fb0 <___vfprintf_internal_r+0x17f8>
  80381c:	39800017 	ldw	r6,0(r7)
  803820:	38800204 	addi	r2,r7,8
  803824:	d8814015 	stw	r2,1280(sp)
  803828:	d9814215 	stw	r6,1288(sp)
  80382c:	39c00117 	ldw	r7,4(r7)
  803830:	d9c14315 	stw	r7,1292(sp)
  803834:	d9014217 	ldw	r4,1288(sp)
  803838:	d9414317 	ldw	r5,1292(sp)
  80383c:	08081000 	call	808100 <__isinfd>
  803840:	10021d26 	beq	r2,zero,8040b8 <___vfprintf_internal_r+0x1900>
  803844:	d9014217 	ldw	r4,1288(sp)
  803848:	d9414317 	ldw	r5,1292(sp)
  80384c:	000d883a 	mov	r6,zero
  803850:	000f883a 	mov	r7,zero
  803854:	0809d000 	call	809d00 <__ltdf2>
  803858:	1002d016 	blt	r2,zero,80439c <___vfprintf_internal_r+0x1be4>
  80385c:	d9414d17 	ldw	r5,1332(sp)
  803860:	008011c4 	movi	r2,71
  803864:	11421016 	blt	r2,r5,8040a8 <___vfprintf_internal_r+0x18f0>
  803868:	01802074 	movhi	r6,129
  80386c:	31bbd504 	addi	r6,r6,-4268
  803870:	d9814115 	stw	r6,1284(sp)
  803874:	d9014c17 	ldw	r4,1328(sp)
  803878:	00c000c4 	movi	r3,3
  80387c:	00bfdfc4 	movi	r2,-129
  803880:	2088703a 	and	r4,r4,r2
  803884:	180f883a 	mov	r7,r3
  803888:	d8c14515 	stw	r3,1300(sp)
  80388c:	d9014c15 	stw	r4,1328(sp)
  803890:	d8014615 	stw	zero,1304(sp)
  803894:	003e6a06 	br	803240 <___vfprintf_internal_r+0xa88>
  803898:	38800017 	ldw	r2,0(r7)
  80389c:	00c00044 	movi	r3,1
  8038a0:	39c00104 	addi	r7,r7,4
  8038a4:	d9c14015 	stw	r7,1280(sp)
  8038a8:	d9000f04 	addi	r4,sp,60
  8038ac:	180f883a 	mov	r7,r3
  8038b0:	d8c14515 	stw	r3,1300(sp)
  8038b4:	d9014115 	stw	r4,1284(sp)
  8038b8:	d8800f05 	stb	r2,60(sp)
  8038bc:	d8000405 	stb	zero,16(sp)
  8038c0:	003cac06 	br	802b74 <___vfprintf_internal_r+0x3bc>
  8038c4:	01402074 	movhi	r5,129
  8038c8:	297bdb04 	addi	r5,r5,-4244
  8038cc:	d9414415 	stw	r5,1296(sp)
  8038d0:	d9814c17 	ldw	r6,1328(sp)
  8038d4:	3080080c 	andi	r2,r6,32
  8038d8:	1000ff26 	beq	r2,zero,803cd8 <___vfprintf_internal_r+0x1520>
  8038dc:	3c000017 	ldw	r16,0(r7)
  8038e0:	3c400117 	ldw	r17,4(r7)
  8038e4:	38800204 	addi	r2,r7,8
  8038e8:	d8814015 	stw	r2,1280(sp)
  8038ec:	d9414c17 	ldw	r5,1328(sp)
  8038f0:	2880004c 	andi	r2,r5,1
  8038f4:	1005003a 	cmpeq	r2,r2,zero
  8038f8:	1000b91e 	bne	r2,zero,803be0 <___vfprintf_internal_r+0x1428>
  8038fc:	8444b03a 	or	r2,r16,r17
  803900:	1000b726 	beq	r2,zero,803be0 <___vfprintf_internal_r+0x1428>
  803904:	d9814d17 	ldw	r6,1332(sp)
  803908:	29400094 	ori	r5,r5,2
  80390c:	00800c04 	movi	r2,48
  803910:	01000084 	movi	r4,2
  803914:	d9414c15 	stw	r5,1328(sp)
  803918:	d8800445 	stb	r2,17(sp)
  80391c:	d9800485 	stb	r6,18(sp)
  803920:	d8000405 	stb	zero,16(sp)
  803924:	003e3206 	br	8031f0 <___vfprintf_internal_r+0xa38>
  803928:	01802074 	movhi	r6,129
  80392c:	31bbd004 	addi	r6,r6,-4288
  803930:	d9814415 	stw	r6,1296(sp)
  803934:	003fe606 	br	8038d0 <___vfprintf_internal_r+0x1118>
  803938:	00800ac4 	movi	r2,43
  80393c:	d8800405 	stb	r2,16(sp)
  803940:	b8c00007 	ldb	r3,0(r23)
  803944:	003c1b06 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  803948:	d8814c17 	ldw	r2,1328(sp)
  80394c:	b8c00007 	ldb	r3,0(r23)
  803950:	10800054 	ori	r2,r2,1
  803954:	d8814c15 	stw	r2,1328(sp)
  803958:	003c1606 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  80395c:	d8800407 	ldb	r2,16(sp)
  803960:	10004c1e 	bne	r2,zero,803a94 <___vfprintf_internal_r+0x12dc>
  803964:	00800804 	movi	r2,32
  803968:	d8800405 	stb	r2,16(sp)
  80396c:	b8c00007 	ldb	r3,0(r23)
  803970:	003c1006 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  803974:	d9814c17 	ldw	r6,1328(sp)
  803978:	b8c00007 	ldb	r3,0(r23)
  80397c:	31800214 	ori	r6,r6,8
  803980:	d9814c15 	stw	r6,1328(sp)
  803984:	003c0b06 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  803988:	0009883a 	mov	r4,zero
  80398c:	04000244 	movi	r16,9
  803990:	01400284 	movi	r5,10
  803994:	d9c15115 	stw	r7,1348(sp)
  803998:	080a2380 	call	80a238 <__mulsi3>
  80399c:	b9000007 	ldb	r4,0(r23)
  8039a0:	d8c14d17 	ldw	r3,1332(sp)
  8039a4:	bdc00044 	addi	r23,r23,1
  8039a8:	d9014d15 	stw	r4,1332(sp)
  8039ac:	d9414d17 	ldw	r5,1332(sp)
  8039b0:	1885883a 	add	r2,r3,r2
  8039b4:	113ff404 	addi	r4,r2,-48
  8039b8:	28bff404 	addi	r2,r5,-48
  8039bc:	d9c15117 	ldw	r7,1348(sp)
  8039c0:	80bff32e 	bgeu	r16,r2,803990 <___vfprintf_internal_r+0x11d8>
  8039c4:	d9014a15 	stw	r4,1320(sp)
  8039c8:	003bfc06 	br	8029bc <___vfprintf_internal_r+0x204>
  8039cc:	d8814c17 	ldw	r2,1328(sp)
  8039d0:	b8c00007 	ldb	r3,0(r23)
  8039d4:	10802014 	ori	r2,r2,128
  8039d8:	d8814c15 	stw	r2,1328(sp)
  8039dc:	003bf506 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  8039e0:	b8c00007 	ldb	r3,0(r23)
  8039e4:	00800a84 	movi	r2,42
  8039e8:	bdc00044 	addi	r23,r23,1
  8039ec:	18831826 	beq	r3,r2,804650 <___vfprintf_internal_r+0x1e98>
  8039f0:	d8c14d15 	stw	r3,1332(sp)
  8039f4:	18bff404 	addi	r2,r3,-48
  8039f8:	00c00244 	movi	r3,9
  8039fc:	18827b36 	bltu	r3,r2,8043ec <___vfprintf_internal_r+0x1c34>
  803a00:	1821883a 	mov	r16,r3
  803a04:	0009883a 	mov	r4,zero
  803a08:	01400284 	movi	r5,10
  803a0c:	d9c15115 	stw	r7,1348(sp)
  803a10:	080a2380 	call	80a238 <__mulsi3>
  803a14:	d9414d17 	ldw	r5,1332(sp)
  803a18:	b9800007 	ldb	r6,0(r23)
  803a1c:	d9c15117 	ldw	r7,1348(sp)
  803a20:	1145883a 	add	r2,r2,r5
  803a24:	113ff404 	addi	r4,r2,-48
  803a28:	30bff404 	addi	r2,r6,-48
  803a2c:	d9814d15 	stw	r6,1332(sp)
  803a30:	bdc00044 	addi	r23,r23,1
  803a34:	80bff42e 	bgeu	r16,r2,803a08 <___vfprintf_internal_r+0x1250>
  803a38:	2027883a 	mov	r19,r4
  803a3c:	203bdf0e 	bge	r4,zero,8029bc <___vfprintf_internal_r+0x204>
  803a40:	04ffffc4 	movi	r19,-1
  803a44:	003bdd06 	br	8029bc <___vfprintf_internal_r+0x204>
  803a48:	d8000405 	stb	zero,16(sp)
  803a4c:	39800017 	ldw	r6,0(r7)
  803a50:	39c00104 	addi	r7,r7,4
  803a54:	d9c14015 	stw	r7,1280(sp)
  803a58:	d9814115 	stw	r6,1284(sp)
  803a5c:	3001c926 	beq	r6,zero,804184 <___vfprintf_internal_r+0x19cc>
  803a60:	98000e16 	blt	r19,zero,803a9c <___vfprintf_internal_r+0x12e4>
  803a64:	d9014117 	ldw	r4,1284(sp)
  803a68:	000b883a 	mov	r5,zero
  803a6c:	980d883a 	mov	r6,r19
  803a70:	08067a40 	call	8067a4 <memchr>
  803a74:	10025926 	beq	r2,zero,8043dc <___vfprintf_internal_r+0x1c24>
  803a78:	d8c14117 	ldw	r3,1284(sp)
  803a7c:	10cfc83a 	sub	r7,r2,r3
  803a80:	99c19e16 	blt	r19,r7,8040fc <___vfprintf_internal_r+0x1944>
  803a84:	d9c14515 	stw	r7,1300(sp)
  803a88:	38000916 	blt	r7,zero,803ab0 <___vfprintf_internal_r+0x12f8>
  803a8c:	d8014615 	stw	zero,1304(sp)
  803a90:	003deb06 	br	803240 <___vfprintf_internal_r+0xa88>
  803a94:	b8c00007 	ldb	r3,0(r23)
  803a98:	003bc606 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  803a9c:	d9014117 	ldw	r4,1284(sp)
  803aa0:	08026ec0 	call	8026ec <strlen>
  803aa4:	d8814515 	stw	r2,1300(sp)
  803aa8:	100f883a 	mov	r7,r2
  803aac:	103ff70e 	bge	r2,zero,803a8c <___vfprintf_internal_r+0x12d4>
  803ab0:	d8014515 	stw	zero,1300(sp)
  803ab4:	d8014615 	stw	zero,1304(sp)
  803ab8:	003de106 	br	803240 <___vfprintf_internal_r+0xa88>
  803abc:	20c03fcc 	andi	r3,r4,255
  803ac0:	00800044 	movi	r2,1
  803ac4:	18802d26 	beq	r3,r2,803b7c <___vfprintf_internal_r+0x13c4>
  803ac8:	18800e36 	bltu	r3,r2,803b04 <___vfprintf_internal_r+0x134c>
  803acc:	00800084 	movi	r2,2
  803ad0:	1880fa26 	beq	r3,r2,803ebc <___vfprintf_internal_r+0x1704>
  803ad4:	01002074 	movhi	r4,129
  803ad8:	213be004 	addi	r4,r4,-4224
  803adc:	08026ec0 	call	8026ec <strlen>
  803ae0:	100f883a 	mov	r7,r2
  803ae4:	dcc14515 	stw	r19,1300(sp)
  803ae8:	9880010e 	bge	r19,r2,803af0 <___vfprintf_internal_r+0x1338>
  803aec:	d8814515 	stw	r2,1300(sp)
  803af0:	00802074 	movhi	r2,129
  803af4:	10bbe004 	addi	r2,r2,-4224
  803af8:	dcc14615 	stw	r19,1304(sp)
  803afc:	d8814115 	stw	r2,1284(sp)
  803b00:	003dcf06 	br	803240 <___vfprintf_internal_r+0xa88>
  803b04:	d9401904 	addi	r5,sp,100
  803b08:	dd000f04 	addi	r20,sp,60
  803b0c:	d9414115 	stw	r5,1284(sp)
  803b10:	880a977a 	slli	r5,r17,29
  803b14:	d9814117 	ldw	r6,1284(sp)
  803b18:	8004d0fa 	srli	r2,r16,3
  803b1c:	8806d0fa 	srli	r3,r17,3
  803b20:	810001cc 	andi	r4,r16,7
  803b24:	2884b03a 	or	r2,r5,r2
  803b28:	31bfffc4 	addi	r6,r6,-1
  803b2c:	21000c04 	addi	r4,r4,48
  803b30:	d9814115 	stw	r6,1284(sp)
  803b34:	10cab03a 	or	r5,r2,r3
  803b38:	31000005 	stb	r4,0(r6)
  803b3c:	1021883a 	mov	r16,r2
  803b40:	1823883a 	mov	r17,r3
  803b44:	283ff21e 	bne	r5,zero,803b10 <___vfprintf_internal_r+0x1358>
  803b48:	d8c14c17 	ldw	r3,1328(sp)
  803b4c:	1880004c 	andi	r2,r3,1
  803b50:	1005003a 	cmpeq	r2,r2,zero
  803b54:	103db31e 	bne	r2,zero,803224 <___vfprintf_internal_r+0xa6c>
  803b58:	20803fcc 	andi	r2,r4,255
  803b5c:	1080201c 	xori	r2,r2,128
  803b60:	10bfe004 	addi	r2,r2,-128
  803b64:	00c00c04 	movi	r3,48
  803b68:	10fdae26 	beq	r2,r3,803224 <___vfprintf_internal_r+0xa6c>
  803b6c:	31bfffc4 	addi	r6,r6,-1
  803b70:	d9814115 	stw	r6,1284(sp)
  803b74:	30c00005 	stb	r3,0(r6)
  803b78:	003daa06 	br	803224 <___vfprintf_internal_r+0xa6c>
  803b7c:	88800068 	cmpgeui	r2,r17,1
  803b80:	10002c1e 	bne	r2,zero,803c34 <___vfprintf_internal_r+0x147c>
  803b84:	8800021e 	bne	r17,zero,803b90 <___vfprintf_internal_r+0x13d8>
  803b88:	00800244 	movi	r2,9
  803b8c:	14002936 	bltu	r2,r16,803c34 <___vfprintf_internal_r+0x147c>
  803b90:	d90018c4 	addi	r4,sp,99
  803b94:	dd000f04 	addi	r20,sp,60
  803b98:	d9014115 	stw	r4,1284(sp)
  803b9c:	d9014117 	ldw	r4,1284(sp)
  803ba0:	80800c04 	addi	r2,r16,48
  803ba4:	20800005 	stb	r2,0(r4)
  803ba8:	003d9e06 	br	803224 <___vfprintf_internal_r+0xa6c>
  803bac:	dc400d17 	ldw	r17,52(sp)
  803bb0:	07002074 	movhi	fp,129
  803bb4:	e73be784 	addi	fp,fp,-4194
  803bb8:	9425883a 	add	r18,r18,r16
  803bbc:	8c400044 	addi	r17,r17,1
  803bc0:	008001c4 	movi	r2,7
  803bc4:	1f000015 	stw	fp,0(r3)
  803bc8:	1c000115 	stw	r16,4(r3)
  803bcc:	dc800e15 	stw	r18,56(sp)
  803bd0:	dc400d15 	stw	r17,52(sp)
  803bd4:	147ddc16 	blt	r2,r17,803348 <___vfprintf_internal_r+0xb90>
  803bd8:	18c00204 	addi	r3,r3,8
  803bdc:	003c7406 	br	802db0 <___vfprintf_internal_r+0x5f8>
  803be0:	01000084 	movi	r4,2
  803be4:	d8000405 	stb	zero,16(sp)
  803be8:	003d8106 	br	8031f0 <___vfprintf_internal_r+0xa38>
  803bec:	d9814c17 	ldw	r6,1328(sp)
  803bf0:	30c4703a 	and	r2,r6,r3
  803bf4:	1005003a 	cmpeq	r2,r2,zero
  803bf8:	103cb326 	beq	r2,zero,802ec8 <___vfprintf_internal_r+0x710>
  803bfc:	d9014117 	ldw	r4,1284(sp)
  803c00:	94800044 	addi	r18,r18,1
  803c04:	8c400044 	addi	r17,r17,1
  803c08:	008001c4 	movi	r2,7
  803c0c:	a9000015 	stw	r4,0(r21)
  803c10:	a8c00115 	stw	r3,4(r21)
  803c14:	dc800e15 	stw	r18,56(sp)
  803c18:	dc400d15 	stw	r17,52(sp)
  803c1c:	147e6016 	blt	r2,r17,8035a0 <___vfprintf_internal_r+0xde8>
  803c20:	acc00204 	addi	r19,r21,8
  803c24:	003cd106 	br	802f6c <___vfprintf_internal_r+0x7b4>
  803c28:	07002074 	movhi	fp,129
  803c2c:	e73be784 	addi	fp,fp,-4194
  803c30:	003c4906 	br	802d58 <___vfprintf_internal_r+0x5a0>
  803c34:	dd000f04 	addi	r20,sp,60
  803c38:	dc801904 	addi	r18,sp,100
  803c3c:	8009883a 	mov	r4,r16
  803c40:	880b883a 	mov	r5,r17
  803c44:	01800284 	movi	r6,10
  803c48:	000f883a 	mov	r7,zero
  803c4c:	08089600 	call	808960 <__umoddi3>
  803c50:	12000c04 	addi	r8,r2,48
  803c54:	94bfffc4 	addi	r18,r18,-1
  803c58:	8009883a 	mov	r4,r16
  803c5c:	880b883a 	mov	r5,r17
  803c60:	01800284 	movi	r6,10
  803c64:	000f883a 	mov	r7,zero
  803c68:	92000005 	stb	r8,0(r18)
  803c6c:	08082f40 	call	8082f4 <__udivdi3>
  803c70:	1009883a 	mov	r4,r2
  803c74:	1021883a 	mov	r16,r2
  803c78:	18800068 	cmpgeui	r2,r3,1
  803c7c:	1823883a 	mov	r17,r3
  803c80:	103fee1e 	bne	r2,zero,803c3c <___vfprintf_internal_r+0x1484>
  803c84:	1800021e 	bne	r3,zero,803c90 <___vfprintf_internal_r+0x14d8>
  803c88:	00800244 	movi	r2,9
  803c8c:	113feb36 	bltu	r2,r4,803c3c <___vfprintf_internal_r+0x1484>
  803c90:	94bfffc4 	addi	r18,r18,-1
  803c94:	dc814115 	stw	r18,1284(sp)
  803c98:	003fc006 	br	803b9c <___vfprintf_internal_r+0x13e4>
  803c9c:	d9014c17 	ldw	r4,1328(sp)
  803ca0:	2080004c 	andi	r2,r4,1
  803ca4:	10009a1e 	bne	r2,zero,803f10 <___vfprintf_internal_r+0x1758>
  803ca8:	d9401904 	addi	r5,sp,100
  803cac:	dd000f04 	addi	r20,sp,60
  803cb0:	d9414115 	stw	r5,1284(sp)
  803cb4:	003d5b06 	br	803224 <___vfprintf_internal_r+0xa6c>
  803cb8:	d9014f17 	ldw	r4,1340(sp)
  803cbc:	b00b883a 	mov	r5,r22
  803cc0:	d9800c04 	addi	r6,sp,48
  803cc4:	08027600 	call	802760 <__sprint_r>
  803cc8:	103c731e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803ccc:	dc800e17 	ldw	r18,56(sp)
  803cd0:	d8c01904 	addi	r3,sp,100
  803cd4:	003cf906 	br	8030bc <___vfprintf_internal_r+0x904>
  803cd8:	d8c14c17 	ldw	r3,1328(sp)
  803cdc:	1880040c 	andi	r2,r3,16
  803ce0:	1000711e 	bne	r2,zero,803ea8 <___vfprintf_internal_r+0x16f0>
  803ce4:	d9014c17 	ldw	r4,1328(sp)
  803ce8:	2080100c 	andi	r2,r4,64
  803cec:	10006e26 	beq	r2,zero,803ea8 <___vfprintf_internal_r+0x16f0>
  803cf0:	3c00000b 	ldhu	r16,0(r7)
  803cf4:	0023883a 	mov	r17,zero
  803cf8:	39c00104 	addi	r7,r7,4
  803cfc:	d9c14015 	stw	r7,1280(sp)
  803d00:	003efa06 	br	8038ec <___vfprintf_internal_r+0x1134>
  803d04:	dc400d17 	ldw	r17,52(sp)
  803d08:	07002074 	movhi	fp,129
  803d0c:	e73be784 	addi	fp,fp,-4194
  803d10:	9425883a 	add	r18,r18,r16
  803d14:	8c400044 	addi	r17,r17,1
  803d18:	008001c4 	movi	r2,7
  803d1c:	1f000015 	stw	fp,0(r3)
  803d20:	1c000115 	stw	r16,4(r3)
  803d24:	dc800e15 	stw	r18,56(sp)
  803d28:	dc400d15 	stw	r17,52(sp)
  803d2c:	147d7016 	blt	r2,r17,8032f0 <___vfprintf_internal_r+0xb38>
  803d30:	18c00204 	addi	r3,r3,8
  803d34:	003d7506 	br	80330c <___vfprintf_internal_r+0xb54>
  803d38:	dc800e17 	ldw	r18,56(sp)
  803d3c:	dc400d17 	ldw	r17,52(sp)
  803d40:	07002074 	movhi	fp,129
  803d44:	e73beb84 	addi	fp,fp,-4178
  803d48:	003bba06 	br	802c34 <___vfprintf_internal_r+0x47c>
  803d4c:	d9014f17 	ldw	r4,1340(sp)
  803d50:	b00b883a 	mov	r5,r22
  803d54:	d9800c04 	addi	r6,sp,48
  803d58:	08027600 	call	802760 <__sprint_r>
  803d5c:	103c4e1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803d60:	dc800e17 	ldw	r18,56(sp)
  803d64:	d8c01904 	addi	r3,sp,100
  803d68:	003ce306 	br	8030f8 <___vfprintf_internal_r+0x940>
  803d6c:	3c000017 	ldw	r16,0(r7)
  803d70:	0009883a 	mov	r4,zero
  803d74:	39c00104 	addi	r7,r7,4
  803d78:	0023883a 	mov	r17,zero
  803d7c:	d9c14015 	stw	r7,1280(sp)
  803d80:	d8000405 	stb	zero,16(sp)
  803d84:	003d1a06 	br	8031f0 <___vfprintf_internal_r+0xa38>
  803d88:	38800017 	ldw	r2,0(r7)
  803d8c:	39c00104 	addi	r7,r7,4
  803d90:	d9c14015 	stw	r7,1280(sp)
  803d94:	1023d7fa 	srai	r17,r2,31
  803d98:	1021883a 	mov	r16,r2
  803d9c:	003d1206 	br	8031e8 <___vfprintf_internal_r+0xa30>
  803da0:	3c000017 	ldw	r16,0(r7)
  803da4:	01000044 	movi	r4,1
  803da8:	39c00104 	addi	r7,r7,4
  803dac:	0023883a 	mov	r17,zero
  803db0:	d9c14015 	stw	r7,1280(sp)
  803db4:	d8000405 	stb	zero,16(sp)
  803db8:	003d0d06 	br	8031f0 <___vfprintf_internal_r+0xa38>
  803dbc:	00802074 	movhi	r2,129
  803dc0:	10bbe704 	addi	r2,r2,-4196
  803dc4:	94800044 	addi	r18,r18,1
  803dc8:	8c400044 	addi	r17,r17,1
  803dcc:	a8800015 	stw	r2,0(r21)
  803dd0:	00c00044 	movi	r3,1
  803dd4:	008001c4 	movi	r2,7
  803dd8:	a8c00115 	stw	r3,4(r21)
  803ddc:	dc800e15 	stw	r18,56(sp)
  803de0:	dc400d15 	stw	r17,52(sp)
  803de4:	1440ca16 	blt	r2,r17,804110 <___vfprintf_internal_r+0x1958>
  803de8:	a8c00204 	addi	r3,r21,8
  803dec:	2000061e 	bne	r4,zero,803e08 <___vfprintf_internal_r+0x1650>
  803df0:	d9414717 	ldw	r5,1308(sp)
  803df4:	2800041e 	bne	r5,zero,803e08 <___vfprintf_internal_r+0x1650>
  803df8:	d9814c17 	ldw	r6,1328(sp)
  803dfc:	3080004c 	andi	r2,r6,1
  803e00:	1005003a 	cmpeq	r2,r2,zero
  803e04:	103bea1e 	bne	r2,zero,802db0 <___vfprintf_internal_r+0x5f8>
  803e08:	00800044 	movi	r2,1
  803e0c:	dc400d17 	ldw	r17,52(sp)
  803e10:	18800115 	stw	r2,4(r3)
  803e14:	d8814917 	ldw	r2,1316(sp)
  803e18:	94800044 	addi	r18,r18,1
  803e1c:	8c400044 	addi	r17,r17,1
  803e20:	18800015 	stw	r2,0(r3)
  803e24:	008001c4 	movi	r2,7
  803e28:	dc800e15 	stw	r18,56(sp)
  803e2c:	dc400d15 	stw	r17,52(sp)
  803e30:	1440ca16 	blt	r2,r17,80415c <___vfprintf_internal_r+0x19a4>
  803e34:	18c00204 	addi	r3,r3,8
  803e38:	0121c83a 	sub	r16,zero,r4
  803e3c:	0400500e 	bge	zero,r16,803f80 <___vfprintf_internal_r+0x17c8>
  803e40:	00800404 	movi	r2,16
  803e44:	1400800e 	bge	r2,r16,804048 <___vfprintf_internal_r+0x1890>
  803e48:	1027883a 	mov	r19,r2
  803e4c:	07002074 	movhi	fp,129
  803e50:	e73be784 	addi	fp,fp,-4194
  803e54:	050001c4 	movi	r20,7
  803e58:	00000306 	br	803e68 <___vfprintf_internal_r+0x16b0>
  803e5c:	18c00204 	addi	r3,r3,8
  803e60:	843ffc04 	addi	r16,r16,-16
  803e64:	9c007a0e 	bge	r19,r16,804050 <___vfprintf_internal_r+0x1898>
  803e68:	94800404 	addi	r18,r18,16
  803e6c:	8c400044 	addi	r17,r17,1
  803e70:	1f000015 	stw	fp,0(r3)
  803e74:	1cc00115 	stw	r19,4(r3)
  803e78:	dc800e15 	stw	r18,56(sp)
  803e7c:	dc400d15 	stw	r17,52(sp)
  803e80:	a47ff60e 	bge	r20,r17,803e5c <___vfprintf_internal_r+0x16a4>
  803e84:	d9014f17 	ldw	r4,1340(sp)
  803e88:	b00b883a 	mov	r5,r22
  803e8c:	d9800c04 	addi	r6,sp,48
  803e90:	08027600 	call	802760 <__sprint_r>
  803e94:	103c001e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803e98:	dc800e17 	ldw	r18,56(sp)
  803e9c:	dc400d17 	ldw	r17,52(sp)
  803ea0:	d8c01904 	addi	r3,sp,100
  803ea4:	003fee06 	br	803e60 <___vfprintf_internal_r+0x16a8>
  803ea8:	3c000017 	ldw	r16,0(r7)
  803eac:	0023883a 	mov	r17,zero
  803eb0:	39c00104 	addi	r7,r7,4
  803eb4:	d9c14015 	stw	r7,1280(sp)
  803eb8:	003e8c06 	br	8038ec <___vfprintf_internal_r+0x1134>
  803ebc:	d9401904 	addi	r5,sp,100
  803ec0:	dd000f04 	addi	r20,sp,60
  803ec4:	d9414115 	stw	r5,1284(sp)
  803ec8:	d9814417 	ldw	r6,1296(sp)
  803ecc:	880a973a 	slli	r5,r17,28
  803ed0:	8004d13a 	srli	r2,r16,4
  803ed4:	810003cc 	andi	r4,r16,15
  803ed8:	3109883a 	add	r4,r6,r4
  803edc:	2884b03a 	or	r2,r5,r2
  803ee0:	21400003 	ldbu	r5,0(r4)
  803ee4:	d9014117 	ldw	r4,1284(sp)
  803ee8:	8806d13a 	srli	r3,r17,4
  803eec:	1021883a 	mov	r16,r2
  803ef0:	213fffc4 	addi	r4,r4,-1
  803ef4:	d9014115 	stw	r4,1284(sp)
  803ef8:	d9814117 	ldw	r6,1284(sp)
  803efc:	10c8b03a 	or	r4,r2,r3
  803f00:	1823883a 	mov	r17,r3
  803f04:	31400005 	stb	r5,0(r6)
  803f08:	203fef1e 	bne	r4,zero,803ec8 <___vfprintf_internal_r+0x1710>
  803f0c:	003cc506 	br	803224 <___vfprintf_internal_r+0xa6c>
  803f10:	00800c04 	movi	r2,48
  803f14:	d98018c4 	addi	r6,sp,99
  803f18:	dd000f04 	addi	r20,sp,60
  803f1c:	d88018c5 	stb	r2,99(sp)
  803f20:	d9814115 	stw	r6,1284(sp)
  803f24:	003cbf06 	br	803224 <___vfprintf_internal_r+0xa6c>
  803f28:	dc400d17 	ldw	r17,52(sp)
  803f2c:	07002074 	movhi	fp,129
  803f30:	e73beb84 	addi	fp,fp,-4178
  803f34:	003bc106 	br	802e3c <___vfprintf_internal_r+0x684>
  803f38:	d9414c17 	ldw	r5,1328(sp)
  803f3c:	2880040c 	andi	r2,r5,16
  803f40:	10007c26 	beq	r2,zero,804134 <___vfprintf_internal_r+0x197c>
  803f44:	38800017 	ldw	r2,0(r7)
  803f48:	39c00104 	addi	r7,r7,4
  803f4c:	d9c14015 	stw	r7,1280(sp)
  803f50:	d9814b17 	ldw	r6,1324(sp)
  803f54:	d9c14017 	ldw	r7,1280(sp)
  803f58:	11800015 	stw	r6,0(r2)
  803f5c:	003a7206 	br	802928 <___vfprintf_internal_r+0x170>
  803f60:	d9014f17 	ldw	r4,1340(sp)
  803f64:	b00b883a 	mov	r5,r22
  803f68:	d9800c04 	addi	r6,sp,48
  803f6c:	08027600 	call	802760 <__sprint_r>
  803f70:	103bc91e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  803f74:	dc800e17 	ldw	r18,56(sp)
  803f78:	dc400d17 	ldw	r17,52(sp)
  803f7c:	d8c01904 	addi	r3,sp,100
  803f80:	d9014717 	ldw	r4,1308(sp)
  803f84:	d9414117 	ldw	r5,1284(sp)
  803f88:	8c400044 	addi	r17,r17,1
  803f8c:	9125883a 	add	r18,r18,r4
  803f90:	008001c4 	movi	r2,7
  803f94:	19400015 	stw	r5,0(r3)
  803f98:	19000115 	stw	r4,4(r3)
  803f9c:	dc800e15 	stw	r18,56(sp)
  803fa0:	dc400d15 	stw	r17,52(sp)
  803fa4:	147ce816 	blt	r2,r17,803348 <___vfprintf_internal_r+0xb90>
  803fa8:	18c00204 	addi	r3,r3,8
  803fac:	003b8006 	br	802db0 <___vfprintf_internal_r+0x5f8>
  803fb0:	38c00017 	ldw	r3,0(r7)
  803fb4:	39000204 	addi	r4,r7,8
  803fb8:	d9014015 	stw	r4,1280(sp)
  803fbc:	d8c14215 	stw	r3,1288(sp)
  803fc0:	39c00117 	ldw	r7,4(r7)
  803fc4:	d9c14315 	stw	r7,1292(sp)
  803fc8:	003e1a06 	br	803834 <___vfprintf_internal_r+0x107c>
  803fcc:	0005883a 	mov	r2,zero
  803fd0:	1409c83a 	sub	r4,r2,r16
  803fd4:	1105803a 	cmpltu	r2,r2,r4
  803fd8:	044bc83a 	sub	r5,zero,r17
  803fdc:	2885c83a 	sub	r2,r5,r2
  803fe0:	2021883a 	mov	r16,r4
  803fe4:	1023883a 	mov	r17,r2
  803fe8:	01000044 	movi	r4,1
  803fec:	00800b44 	movi	r2,45
  803ff0:	d8800405 	stb	r2,16(sp)
  803ff4:	003c7e06 	br	8031f0 <___vfprintf_internal_r+0xa38>
  803ff8:	d9014f17 	ldw	r4,1340(sp)
  803ffc:	b00b883a 	mov	r5,r22
  804000:	d9800c04 	addi	r6,sp,48
  804004:	08027600 	call	802760 <__sprint_r>
  804008:	103ba31e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  80400c:	dc800e17 	ldw	r18,56(sp)
  804010:	dc400d17 	ldw	r17,52(sp)
  804014:	d9000517 	ldw	r4,20(sp)
  804018:	d9401904 	addi	r5,sp,100
  80401c:	003da106 	br	8036a4 <___vfprintf_internal_r+0xeec>
  804020:	d9014f17 	ldw	r4,1340(sp)
  804024:	b00b883a 	mov	r5,r22
  804028:	d9800c04 	addi	r6,sp,48
  80402c:	08027600 	call	802760 <__sprint_r>
  804030:	103b991e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  804034:	dc800e17 	ldw	r18,56(sp)
  804038:	dc400d17 	ldw	r17,52(sp)
  80403c:	d9000517 	ldw	r4,20(sp)
  804040:	d8c01904 	addi	r3,sp,100
  804044:	003d8b06 	br	803674 <___vfprintf_internal_r+0xebc>
  804048:	07002074 	movhi	fp,129
  80404c:	e73be784 	addi	fp,fp,-4194
  804050:	9425883a 	add	r18,r18,r16
  804054:	8c400044 	addi	r17,r17,1
  804058:	008001c4 	movi	r2,7
  80405c:	1f000015 	stw	fp,0(r3)
  804060:	1c000115 	stw	r16,4(r3)
  804064:	dc800e15 	stw	r18,56(sp)
  804068:	dc400d15 	stw	r17,52(sp)
  80406c:	147fbc16 	blt	r2,r17,803f60 <___vfprintf_internal_r+0x17a8>
  804070:	18c00204 	addi	r3,r3,8
  804074:	003fc206 	br	803f80 <___vfprintf_internal_r+0x17c8>
  804078:	d9014f17 	ldw	r4,1340(sp)
  80407c:	b00b883a 	mov	r5,r22
  804080:	d9800c04 	addi	r6,sp,48
  804084:	08027600 	call	802760 <__sprint_r>
  804088:	103b831e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  80408c:	dc800e17 	ldw	r18,56(sp)
  804090:	d9000517 	ldw	r4,20(sp)
  804094:	d8c01904 	addi	r3,sp,100
  804098:	003cfc06 	br	80348c <___vfprintf_internal_r+0xcd4>
  80409c:	07002074 	movhi	fp,129
  8040a0:	e73be784 	addi	fp,fp,-4194
  8040a4:	003bde06 	br	803020 <___vfprintf_internal_r+0x868>
  8040a8:	00802074 	movhi	r2,129
  8040ac:	10bbd604 	addi	r2,r2,-4264
  8040b0:	d8814115 	stw	r2,1284(sp)
  8040b4:	003def06 	br	803874 <___vfprintf_internal_r+0x10bc>
  8040b8:	d9014217 	ldw	r4,1288(sp)
  8040bc:	d9414317 	ldw	r5,1292(sp)
  8040c0:	08081400 	call	808140 <__isnand>
  8040c4:	10003926 	beq	r2,zero,8041ac <___vfprintf_internal_r+0x19f4>
  8040c8:	d9414d17 	ldw	r5,1332(sp)
  8040cc:	008011c4 	movi	r2,71
  8040d0:	1140ce16 	blt	r2,r5,80440c <___vfprintf_internal_r+0x1c54>
  8040d4:	01802074 	movhi	r6,129
  8040d8:	31bbd704 	addi	r6,r6,-4260
  8040dc:	d9814115 	stw	r6,1284(sp)
  8040e0:	003de406 	br	803874 <___vfprintf_internal_r+0x10bc>
  8040e4:	d9014c17 	ldw	r4,1328(sp)
  8040e8:	bdc00044 	addi	r23,r23,1
  8040ec:	b8c00007 	ldb	r3,0(r23)
  8040f0:	21000814 	ori	r4,r4,32
  8040f4:	d9014c15 	stw	r4,1328(sp)
  8040f8:	003a2e06 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  8040fc:	dcc14515 	stw	r19,1300(sp)
  804100:	98011016 	blt	r19,zero,804544 <___vfprintf_internal_r+0x1d8c>
  804104:	980f883a 	mov	r7,r19
  804108:	d8014615 	stw	zero,1304(sp)
  80410c:	003c4c06 	br	803240 <___vfprintf_internal_r+0xa88>
  804110:	d9014f17 	ldw	r4,1340(sp)
  804114:	b00b883a 	mov	r5,r22
  804118:	d9800c04 	addi	r6,sp,48
  80411c:	08027600 	call	802760 <__sprint_r>
  804120:	103b5d1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  804124:	dc800e17 	ldw	r18,56(sp)
  804128:	d9000517 	ldw	r4,20(sp)
  80412c:	d8c01904 	addi	r3,sp,100
  804130:	003f2e06 	br	803dec <___vfprintf_internal_r+0x1634>
  804134:	d8c14c17 	ldw	r3,1328(sp)
  804138:	1880100c 	andi	r2,r3,64
  80413c:	1000a026 	beq	r2,zero,8043c0 <___vfprintf_internal_r+0x1c08>
  804140:	38800017 	ldw	r2,0(r7)
  804144:	39c00104 	addi	r7,r7,4
  804148:	d9c14015 	stw	r7,1280(sp)
  80414c:	d9014b17 	ldw	r4,1324(sp)
  804150:	d9c14017 	ldw	r7,1280(sp)
  804154:	1100000d 	sth	r4,0(r2)
  804158:	0039f306 	br	802928 <___vfprintf_internal_r+0x170>
  80415c:	d9014f17 	ldw	r4,1340(sp)
  804160:	b00b883a 	mov	r5,r22
  804164:	d9800c04 	addi	r6,sp,48
  804168:	08027600 	call	802760 <__sprint_r>
  80416c:	103b4a1e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  804170:	dc800e17 	ldw	r18,56(sp)
  804174:	dc400d17 	ldw	r17,52(sp)
  804178:	d9000517 	ldw	r4,20(sp)
  80417c:	d8c01904 	addi	r3,sp,100
  804180:	003f2d06 	br	803e38 <___vfprintf_internal_r+0x1680>
  804184:	00800184 	movi	r2,6
  804188:	14c09a36 	bltu	r2,r19,8043f4 <___vfprintf_internal_r+0x1c3c>
  80418c:	dcc14515 	stw	r19,1300(sp)
  804190:	9800010e 	bge	r19,zero,804198 <___vfprintf_internal_r+0x19e0>
  804194:	d8014515 	stw	zero,1300(sp)
  804198:	00802074 	movhi	r2,129
  80419c:	10bbd904 	addi	r2,r2,-4252
  8041a0:	980f883a 	mov	r7,r19
  8041a4:	d8814115 	stw	r2,1284(sp)
  8041a8:	003a7206 	br	802b74 <___vfprintf_internal_r+0x3bc>
  8041ac:	00bfffc4 	movi	r2,-1
  8041b0:	9880e226 	beq	r19,r2,80453c <___vfprintf_internal_r+0x1d84>
  8041b4:	d9414d17 	ldw	r5,1332(sp)
  8041b8:	008019c4 	movi	r2,103
  8041bc:	2880dc26 	beq	r5,r2,804530 <___vfprintf_internal_r+0x1d78>
  8041c0:	008011c4 	movi	r2,71
  8041c4:	2880da26 	beq	r5,r2,804530 <___vfprintf_internal_r+0x1d78>
  8041c8:	d9414c17 	ldw	r5,1328(sp)
  8041cc:	d9014317 	ldw	r4,1292(sp)
  8041d0:	d9814217 	ldw	r6,1288(sp)
  8041d4:	29404014 	ori	r5,r5,256
  8041d8:	d9414c15 	stw	r5,1328(sp)
  8041dc:	2000cc16 	blt	r4,zero,804510 <___vfprintf_internal_r+0x1d58>
  8041e0:	3021883a 	mov	r16,r6
  8041e4:	2023883a 	mov	r17,r4
  8041e8:	0039883a 	mov	fp,zero
  8041ec:	d9414d17 	ldw	r5,1332(sp)
  8041f0:	00801984 	movi	r2,102
  8041f4:	2880b726 	beq	r5,r2,8044d4 <___vfprintf_internal_r+0x1d1c>
  8041f8:	00801184 	movi	r2,70
  8041fc:	2880b526 	beq	r5,r2,8044d4 <___vfprintf_internal_r+0x1d1c>
  804200:	00801944 	movi	r2,101
  804204:	2880c826 	beq	r5,r2,804528 <___vfprintf_internal_r+0x1d70>
  804208:	00801144 	movi	r2,69
  80420c:	2880c626 	beq	r5,r2,804528 <___vfprintf_internal_r+0x1d70>
  804210:	9829883a 	mov	r20,r19
  804214:	d9014f17 	ldw	r4,1340(sp)
  804218:	d8800504 	addi	r2,sp,20
  80421c:	880d883a 	mov	r6,r17
  804220:	d8800115 	stw	r2,4(sp)
  804224:	d8c00604 	addi	r3,sp,24
  804228:	d8800704 	addi	r2,sp,28
  80422c:	800b883a 	mov	r5,r16
  804230:	01c00084 	movi	r7,2
  804234:	d8c00215 	stw	r3,8(sp)
  804238:	d8800315 	stw	r2,12(sp)
  80423c:	dd000015 	stw	r20,0(sp)
  804240:	0804b080 	call	804b08 <_dtoa_r>
  804244:	d9814d17 	ldw	r6,1332(sp)
  804248:	d8814115 	stw	r2,1284(sp)
  80424c:	008019c4 	movi	r2,103
  804250:	30809526 	beq	r6,r2,8044a8 <___vfprintf_internal_r+0x1cf0>
  804254:	d8c14d17 	ldw	r3,1332(sp)
  804258:	008011c4 	movi	r2,71
  80425c:	18809226 	beq	r3,r2,8044a8 <___vfprintf_internal_r+0x1cf0>
  804260:	d9414117 	ldw	r5,1284(sp)
  804264:	d9814d17 	ldw	r6,1332(sp)
  804268:	00801984 	movi	r2,102
  80426c:	2d25883a 	add	r18,r5,r20
  804270:	30808626 	beq	r6,r2,80448c <___vfprintf_internal_r+0x1cd4>
  804274:	00801184 	movi	r2,70
  804278:	30808426 	beq	r6,r2,80448c <___vfprintf_internal_r+0x1cd4>
  80427c:	000d883a 	mov	r6,zero
  804280:	000f883a 	mov	r7,zero
  804284:	880b883a 	mov	r5,r17
  804288:	8009883a 	mov	r4,r16
  80428c:	0809ae00 	call	809ae0 <__eqdf2>
  804290:	1000751e 	bne	r2,zero,804468 <___vfprintf_internal_r+0x1cb0>
  804294:	9005883a 	mov	r2,r18
  804298:	dc800715 	stw	r18,28(sp)
  80429c:	d9014117 	ldw	r4,1284(sp)
  8042a0:	d9414d17 	ldw	r5,1332(sp)
  8042a4:	00c019c4 	movi	r3,103
  8042a8:	1125c83a 	sub	r18,r2,r4
  8042ac:	28c06826 	beq	r5,r3,804450 <___vfprintf_internal_r+0x1c98>
  8042b0:	008011c4 	movi	r2,71
  8042b4:	28806626 	beq	r5,r2,804450 <___vfprintf_internal_r+0x1c98>
  8042b8:	d9000517 	ldw	r4,20(sp)
  8042bc:	d8c14d17 	ldw	r3,1332(sp)
  8042c0:	00801944 	movi	r2,101
  8042c4:	10c05516 	blt	r2,r3,80441c <___vfprintf_internal_r+0x1c64>
  8042c8:	213fffc4 	addi	r4,r4,-1
  8042cc:	d9000515 	stw	r4,20(sp)
  8042d0:	d8c00805 	stb	r3,32(sp)
  8042d4:	2021883a 	mov	r16,r4
  8042d8:	2000c116 	blt	r4,zero,8045e0 <___vfprintf_internal_r+0x1e28>
  8042dc:	00800ac4 	movi	r2,43
  8042e0:	d8800845 	stb	r2,33(sp)
  8042e4:	00800244 	movi	r2,9
  8042e8:	1400af0e 	bge	r2,r16,8045a8 <___vfprintf_internal_r+0x1df0>
  8042ec:	1027883a 	mov	r19,r2
  8042f0:	dc400b84 	addi	r17,sp,46
  8042f4:	8009883a 	mov	r4,r16
  8042f8:	01400284 	movi	r5,10
  8042fc:	080a1c80 	call	80a1c8 <__modsi3>
  804300:	10800c04 	addi	r2,r2,48
  804304:	8c7fffc4 	addi	r17,r17,-1
  804308:	8009883a 	mov	r4,r16
  80430c:	01400284 	movi	r5,10
  804310:	88800005 	stb	r2,0(r17)
  804314:	080a1680 	call	80a168 <__divsi3>
  804318:	1021883a 	mov	r16,r2
  80431c:	98bff516 	blt	r19,r2,8042f4 <___vfprintf_internal_r+0x1b3c>
  804320:	10c00c04 	addi	r3,r2,48
  804324:	d88009c4 	addi	r2,sp,39
  804328:	108001c4 	addi	r2,r2,7
  80432c:	897fffc4 	addi	r5,r17,-1
  804330:	88ffffc5 	stb	r3,-1(r17)
  804334:	2880a72e 	bgeu	r5,r2,8045d4 <___vfprintf_internal_r+0x1e1c>
  804338:	1009883a 	mov	r4,r2
  80433c:	d9800804 	addi	r6,sp,32
  804340:	d8c00884 	addi	r3,sp,34
  804344:	28800003 	ldbu	r2,0(r5)
  804348:	29400044 	addi	r5,r5,1
  80434c:	18800005 	stb	r2,0(r3)
  804350:	18c00044 	addi	r3,r3,1
  804354:	293ffb36 	bltu	r5,r4,804344 <___vfprintf_internal_r+0x1b8c>
  804358:	1987c83a 	sub	r3,r3,r6
  80435c:	00800044 	movi	r2,1
  804360:	d8c14815 	stw	r3,1312(sp)
  804364:	90cf883a 	add	r7,r18,r3
  804368:	1480960e 	bge	r2,r18,8045c4 <___vfprintf_internal_r+0x1e0c>
  80436c:	39c00044 	addi	r7,r7,1
  804370:	d9c14515 	stw	r7,1300(sp)
  804374:	38003416 	blt	r7,zero,804448 <___vfprintf_internal_r+0x1c90>
  804378:	e0803fcc 	andi	r2,fp,255
  80437c:	1080201c 	xori	r2,r2,128
  804380:	10bfe004 	addi	r2,r2,-128
  804384:	10004e26 	beq	r2,zero,8044c0 <___vfprintf_internal_r+0x1d08>
  804388:	00800b44 	movi	r2,45
  80438c:	dc814715 	stw	r18,1308(sp)
  804390:	d8014615 	stw	zero,1304(sp)
  804394:	d8800405 	stb	r2,16(sp)
  804398:	003bab06 	br	803248 <___vfprintf_internal_r+0xa90>
  80439c:	00800b44 	movi	r2,45
  8043a0:	d8800405 	stb	r2,16(sp)
  8043a4:	003d2d06 	br	80385c <___vfprintf_internal_r+0x10a4>
  8043a8:	d9014f17 	ldw	r4,1340(sp)
  8043ac:	b00b883a 	mov	r5,r22
  8043b0:	d9800c04 	addi	r6,sp,48
  8043b4:	08027600 	call	802760 <__sprint_r>
  8043b8:	103ab71e 	bne	r2,zero,802e98 <___vfprintf_internal_r+0x6e0>
  8043bc:	003ab506 	br	802e94 <___vfprintf_internal_r+0x6dc>
  8043c0:	38800017 	ldw	r2,0(r7)
  8043c4:	39c00104 	addi	r7,r7,4
  8043c8:	d9c14015 	stw	r7,1280(sp)
  8043cc:	d9414b17 	ldw	r5,1324(sp)
  8043d0:	d9c14017 	ldw	r7,1280(sp)
  8043d4:	11400015 	stw	r5,0(r2)
  8043d8:	00395306 	br	802928 <___vfprintf_internal_r+0x170>
  8043dc:	980f883a 	mov	r7,r19
  8043e0:	dcc14515 	stw	r19,1300(sp)
  8043e4:	d8014615 	stw	zero,1304(sp)
  8043e8:	003b9506 	br	803240 <___vfprintf_internal_r+0xa88>
  8043ec:	0027883a 	mov	r19,zero
  8043f0:	00397206 	br	8029bc <___vfprintf_internal_r+0x204>
  8043f4:	00c02074 	movhi	r3,129
  8043f8:	18fbd904 	addi	r3,r3,-4252
  8043fc:	100f883a 	mov	r7,r2
  804400:	d8814515 	stw	r2,1300(sp)
  804404:	d8c14115 	stw	r3,1284(sp)
  804408:	0039da06 	br	802b74 <___vfprintf_internal_r+0x3bc>
  80440c:	00802074 	movhi	r2,129
  804410:	10bbd804 	addi	r2,r2,-4256
  804414:	d8814115 	stw	r2,1284(sp)
  804418:	003d1606 	br	803874 <___vfprintf_internal_r+0x10bc>
  80441c:	d9414d17 	ldw	r5,1332(sp)
  804420:	00801984 	movi	r2,102
  804424:	28804926 	beq	r5,r2,80454c <___vfprintf_internal_r+0x1d94>
  804428:	200f883a 	mov	r7,r4
  80442c:	24805716 	blt	r4,r18,80458c <___vfprintf_internal_r+0x1dd4>
  804430:	d9414c17 	ldw	r5,1328(sp)
  804434:	2880004c 	andi	r2,r5,1
  804438:	10000126 	beq	r2,zero,804440 <___vfprintf_internal_r+0x1c88>
  80443c:	21c00044 	addi	r7,r4,1
  804440:	d9c14515 	stw	r7,1300(sp)
  804444:	383fcc0e 	bge	r7,zero,804378 <___vfprintf_internal_r+0x1bc0>
  804448:	d8014515 	stw	zero,1300(sp)
  80444c:	003fca06 	br	804378 <___vfprintf_internal_r+0x1bc0>
  804450:	d9000517 	ldw	r4,20(sp)
  804454:	00bfff04 	movi	r2,-4
  804458:	1100480e 	bge	r2,r4,80457c <___vfprintf_internal_r+0x1dc4>
  80445c:	99004716 	blt	r19,r4,80457c <___vfprintf_internal_r+0x1dc4>
  804460:	d8c14d15 	stw	r3,1332(sp)
  804464:	003ff006 	br	804428 <___vfprintf_internal_r+0x1c70>
  804468:	d8800717 	ldw	r2,28(sp)
  80446c:	14bf8b2e 	bgeu	r2,r18,80429c <___vfprintf_internal_r+0x1ae4>
  804470:	9007883a 	mov	r3,r18
  804474:	01000c04 	movi	r4,48
  804478:	11000005 	stb	r4,0(r2)
  80447c:	10800044 	addi	r2,r2,1
  804480:	d8800715 	stw	r2,28(sp)
  804484:	18bffc1e 	bne	r3,r2,804478 <___vfprintf_internal_r+0x1cc0>
  804488:	003f8406 	br	80429c <___vfprintf_internal_r+0x1ae4>
  80448c:	d8814117 	ldw	r2,1284(sp)
  804490:	10c00007 	ldb	r3,0(r2)
  804494:	00800c04 	movi	r2,48
  804498:	18805b26 	beq	r3,r2,804608 <___vfprintf_internal_r+0x1e50>
  80449c:	d9000517 	ldw	r4,20(sp)
  8044a0:	9125883a 	add	r18,r18,r4
  8044a4:	003f7506 	br	80427c <___vfprintf_internal_r+0x1ac4>
  8044a8:	d9014c17 	ldw	r4,1328(sp)
  8044ac:	2080004c 	andi	r2,r4,1
  8044b0:	1005003a 	cmpeq	r2,r2,zero
  8044b4:	103f6a26 	beq	r2,zero,804260 <___vfprintf_internal_r+0x1aa8>
  8044b8:	d8800717 	ldw	r2,28(sp)
  8044bc:	003f7706 	br	80429c <___vfprintf_internal_r+0x1ae4>
  8044c0:	d9c14515 	stw	r7,1300(sp)
  8044c4:	38004d16 	blt	r7,zero,8045fc <___vfprintf_internal_r+0x1e44>
  8044c8:	dc814715 	stw	r18,1308(sp)
  8044cc:	d8014615 	stw	zero,1304(sp)
  8044d0:	003b5b06 	br	803240 <___vfprintf_internal_r+0xa88>
  8044d4:	d9014f17 	ldw	r4,1340(sp)
  8044d8:	d8800504 	addi	r2,sp,20
  8044dc:	d8800115 	stw	r2,4(sp)
  8044e0:	d8c00604 	addi	r3,sp,24
  8044e4:	d8800704 	addi	r2,sp,28
  8044e8:	800b883a 	mov	r5,r16
  8044ec:	880d883a 	mov	r6,r17
  8044f0:	01c000c4 	movi	r7,3
  8044f4:	d8c00215 	stw	r3,8(sp)
  8044f8:	d8800315 	stw	r2,12(sp)
  8044fc:	dcc00015 	stw	r19,0(sp)
  804500:	9829883a 	mov	r20,r19
  804504:	0804b080 	call	804b08 <_dtoa_r>
  804508:	d8814115 	stw	r2,1284(sp)
  80450c:	003f5106 	br	804254 <___vfprintf_internal_r+0x1a9c>
  804510:	d8c14217 	ldw	r3,1288(sp)
  804514:	d9014317 	ldw	r4,1292(sp)
  804518:	07000b44 	movi	fp,45
  80451c:	1821883a 	mov	r16,r3
  804520:	2460003c 	xorhi	r17,r4,32768
  804524:	003f3106 	br	8041ec <___vfprintf_internal_r+0x1a34>
  804528:	9d000044 	addi	r20,r19,1
  80452c:	003f3906 	br	804214 <___vfprintf_internal_r+0x1a5c>
  804530:	983f251e 	bne	r19,zero,8041c8 <___vfprintf_internal_r+0x1a10>
  804534:	04c00044 	movi	r19,1
  804538:	003f2306 	br	8041c8 <___vfprintf_internal_r+0x1a10>
  80453c:	04c00184 	movi	r19,6
  804540:	003f2106 	br	8041c8 <___vfprintf_internal_r+0x1a10>
  804544:	d8014515 	stw	zero,1300(sp)
  804548:	003eee06 	br	804104 <___vfprintf_internal_r+0x194c>
  80454c:	200f883a 	mov	r7,r4
  804550:	0100370e 	bge	zero,r4,804630 <___vfprintf_internal_r+0x1e78>
  804554:	9800031e 	bne	r19,zero,804564 <___vfprintf_internal_r+0x1dac>
  804558:	d9814c17 	ldw	r6,1328(sp)
  80455c:	3080004c 	andi	r2,r6,1
  804560:	103fb726 	beq	r2,zero,804440 <___vfprintf_internal_r+0x1c88>
  804564:	20800044 	addi	r2,r4,1
  804568:	98a7883a 	add	r19,r19,r2
  80456c:	dcc14515 	stw	r19,1300(sp)
  804570:	980f883a 	mov	r7,r19
  804574:	983f800e 	bge	r19,zero,804378 <___vfprintf_internal_r+0x1bc0>
  804578:	003fb306 	br	804448 <___vfprintf_internal_r+0x1c90>
  80457c:	d9814d17 	ldw	r6,1332(sp)
  804580:	31bfff84 	addi	r6,r6,-2
  804584:	d9814d15 	stw	r6,1332(sp)
  804588:	003f4c06 	br	8042bc <___vfprintf_internal_r+0x1b04>
  80458c:	0100180e 	bge	zero,r4,8045f0 <___vfprintf_internal_r+0x1e38>
  804590:	00800044 	movi	r2,1
  804594:	1485883a 	add	r2,r2,r18
  804598:	d8814515 	stw	r2,1300(sp)
  80459c:	100f883a 	mov	r7,r2
  8045a0:	103f750e 	bge	r2,zero,804378 <___vfprintf_internal_r+0x1bc0>
  8045a4:	003fa806 	br	804448 <___vfprintf_internal_r+0x1c90>
  8045a8:	80c00c04 	addi	r3,r16,48
  8045ac:	00800c04 	movi	r2,48
  8045b0:	d8c008c5 	stb	r3,35(sp)
  8045b4:	d9800804 	addi	r6,sp,32
  8045b8:	d8c00904 	addi	r3,sp,36
  8045bc:	d8800885 	stb	r2,34(sp)
  8045c0:	003f6506 	br	804358 <___vfprintf_internal_r+0x1ba0>
  8045c4:	d9014c17 	ldw	r4,1328(sp)
  8045c8:	2084703a 	and	r2,r4,r2
  8045cc:	103f9c26 	beq	r2,zero,804440 <___vfprintf_internal_r+0x1c88>
  8045d0:	003f6606 	br	80436c <___vfprintf_internal_r+0x1bb4>
  8045d4:	d9800804 	addi	r6,sp,32
  8045d8:	d8c00884 	addi	r3,sp,34
  8045dc:	003f5e06 	br	804358 <___vfprintf_internal_r+0x1ba0>
  8045e0:	00800b44 	movi	r2,45
  8045e4:	0121c83a 	sub	r16,zero,r4
  8045e8:	d8800845 	stb	r2,33(sp)
  8045ec:	003f3d06 	br	8042e4 <___vfprintf_internal_r+0x1b2c>
  8045f0:	00800084 	movi	r2,2
  8045f4:	1105c83a 	sub	r2,r2,r4
  8045f8:	003fe606 	br	804594 <___vfprintf_internal_r+0x1ddc>
  8045fc:	d8014515 	stw	zero,1300(sp)
  804600:	dc814715 	stw	r18,1308(sp)
  804604:	003fb106 	br	8044cc <___vfprintf_internal_r+0x1d14>
  804608:	000d883a 	mov	r6,zero
  80460c:	000f883a 	mov	r7,zero
  804610:	8009883a 	mov	r4,r16
  804614:	880b883a 	mov	r5,r17
  804618:	0809b680 	call	809b68 <__nedf2>
  80461c:	103f9f26 	beq	r2,zero,80449c <___vfprintf_internal_r+0x1ce4>
  804620:	00800044 	movi	r2,1
  804624:	1509c83a 	sub	r4,r2,r20
  804628:	d9000515 	stw	r4,20(sp)
  80462c:	003f9b06 	br	80449c <___vfprintf_internal_r+0x1ce4>
  804630:	98000d1e 	bne	r19,zero,804668 <___vfprintf_internal_r+0x1eb0>
  804634:	d8c14c17 	ldw	r3,1328(sp)
  804638:	1880004c 	andi	r2,r3,1
  80463c:	10000a1e 	bne	r2,zero,804668 <___vfprintf_internal_r+0x1eb0>
  804640:	01000044 	movi	r4,1
  804644:	200f883a 	mov	r7,r4
  804648:	d9014515 	stw	r4,1300(sp)
  80464c:	003f4a06 	br	804378 <___vfprintf_internal_r+0x1bc0>
  804650:	3cc00017 	ldw	r19,0(r7)
  804654:	39c00104 	addi	r7,r7,4
  804658:	983d0e0e 	bge	r19,zero,803a94 <___vfprintf_internal_r+0x12dc>
  80465c:	b8c00007 	ldb	r3,0(r23)
  804660:	04ffffc4 	movi	r19,-1
  804664:	0038d306 	br	8029b4 <___vfprintf_internal_r+0x1fc>
  804668:	9cc00084 	addi	r19,r19,2
  80466c:	dcc14515 	stw	r19,1300(sp)
  804670:	980f883a 	mov	r7,r19
  804674:	983f400e 	bge	r19,zero,804378 <___vfprintf_internal_r+0x1bc0>
  804678:	003f7306 	br	804448 <___vfprintf_internal_r+0x1c90>

0080467c <__vfprintf_internal>:
  80467c:	00802074 	movhi	r2,129
  804680:	10844704 	addi	r2,r2,4380
  804684:	2013883a 	mov	r9,r4
  804688:	11000017 	ldw	r4,0(r2)
  80468c:	2805883a 	mov	r2,r5
  804690:	300f883a 	mov	r7,r6
  804694:	480b883a 	mov	r5,r9
  804698:	100d883a 	mov	r6,r2
  80469c:	08027b81 	jmpi	8027b8 <___vfprintf_internal_r>

008046a0 <_write_r>:
  8046a0:	defffd04 	addi	sp,sp,-12
  8046a4:	dc000015 	stw	r16,0(sp)
  8046a8:	04002074 	movhi	r16,129
  8046ac:	840b6b04 	addi	r16,r16,11692
  8046b0:	dc400115 	stw	r17,4(sp)
  8046b4:	80000015 	stw	zero,0(r16)
  8046b8:	2023883a 	mov	r17,r4
  8046bc:	2809883a 	mov	r4,r5
  8046c0:	300b883a 	mov	r5,r6
  8046c4:	380d883a 	mov	r6,r7
  8046c8:	dfc00215 	stw	ra,8(sp)
  8046cc:	080b5980 	call	80b598 <write>
  8046d0:	1007883a 	mov	r3,r2
  8046d4:	00bfffc4 	movi	r2,-1
  8046d8:	18800626 	beq	r3,r2,8046f4 <_write_r+0x54>
  8046dc:	1805883a 	mov	r2,r3
  8046e0:	dfc00217 	ldw	ra,8(sp)
  8046e4:	dc400117 	ldw	r17,4(sp)
  8046e8:	dc000017 	ldw	r16,0(sp)
  8046ec:	dec00304 	addi	sp,sp,12
  8046f0:	f800283a 	ret
  8046f4:	80800017 	ldw	r2,0(r16)
  8046f8:	103ff826 	beq	r2,zero,8046dc <_write_r+0x3c>
  8046fc:	88800015 	stw	r2,0(r17)
  804700:	1805883a 	mov	r2,r3
  804704:	dfc00217 	ldw	ra,8(sp)
  804708:	dc400117 	ldw	r17,4(sp)
  80470c:	dc000017 	ldw	r16,0(sp)
  804710:	dec00304 	addi	sp,sp,12
  804714:	f800283a 	ret

00804718 <__swsetup_r>:
  804718:	00802074 	movhi	r2,129
  80471c:	10844704 	addi	r2,r2,4380
  804720:	10c00017 	ldw	r3,0(r2)
  804724:	defffd04 	addi	sp,sp,-12
  804728:	dc400115 	stw	r17,4(sp)
  80472c:	dc000015 	stw	r16,0(sp)
  804730:	dfc00215 	stw	ra,8(sp)
  804734:	2023883a 	mov	r17,r4
  804738:	2821883a 	mov	r16,r5
  80473c:	18000226 	beq	r3,zero,804748 <__swsetup_r+0x30>
  804740:	18800e17 	ldw	r2,56(r3)
  804744:	10001f26 	beq	r2,zero,8047c4 <__swsetup_r+0xac>
  804748:	8100030b 	ldhu	r4,12(r16)
  80474c:	2080020c 	andi	r2,r4,8
  804750:	10002826 	beq	r2,zero,8047f4 <__swsetup_r+0xdc>
  804754:	81400417 	ldw	r5,16(r16)
  804758:	28001d26 	beq	r5,zero,8047d0 <__swsetup_r+0xb8>
  80475c:	2080004c 	andi	r2,r4,1
  804760:	1005003a 	cmpeq	r2,r2,zero
  804764:	10000b26 	beq	r2,zero,804794 <__swsetup_r+0x7c>
  804768:	2080008c 	andi	r2,r4,2
  80476c:	10001226 	beq	r2,zero,8047b8 <__swsetup_r+0xa0>
  804770:	0005883a 	mov	r2,zero
  804774:	80800215 	stw	r2,8(r16)
  804778:	28000b26 	beq	r5,zero,8047a8 <__swsetup_r+0x90>
  80477c:	0005883a 	mov	r2,zero
  804780:	dfc00217 	ldw	ra,8(sp)
  804784:	dc400117 	ldw	r17,4(sp)
  804788:	dc000017 	ldw	r16,0(sp)
  80478c:	dec00304 	addi	sp,sp,12
  804790:	f800283a 	ret
  804794:	80800517 	ldw	r2,20(r16)
  804798:	80000215 	stw	zero,8(r16)
  80479c:	0085c83a 	sub	r2,zero,r2
  8047a0:	80800615 	stw	r2,24(r16)
  8047a4:	283ff51e 	bne	r5,zero,80477c <__swsetup_r+0x64>
  8047a8:	2080200c 	andi	r2,r4,128
  8047ac:	103ff326 	beq	r2,zero,80477c <__swsetup_r+0x64>
  8047b0:	00bfffc4 	movi	r2,-1
  8047b4:	003ff206 	br	804780 <__swsetup_r+0x68>
  8047b8:	80800517 	ldw	r2,20(r16)
  8047bc:	80800215 	stw	r2,8(r16)
  8047c0:	003fed06 	br	804778 <__swsetup_r+0x60>
  8047c4:	1809883a 	mov	r4,r3
  8047c8:	08009b00 	call	8009b0 <__sinit>
  8047cc:	003fde06 	br	804748 <__swsetup_r+0x30>
  8047d0:	20c0a00c 	andi	r3,r4,640
  8047d4:	00808004 	movi	r2,512
  8047d8:	18bfe026 	beq	r3,r2,80475c <__swsetup_r+0x44>
  8047dc:	8809883a 	mov	r4,r17
  8047e0:	800b883a 	mov	r5,r16
  8047e4:	08018400 	call	801840 <__smakebuf_r>
  8047e8:	8100030b 	ldhu	r4,12(r16)
  8047ec:	81400417 	ldw	r5,16(r16)
  8047f0:	003fda06 	br	80475c <__swsetup_r+0x44>
  8047f4:	2080040c 	andi	r2,r4,16
  8047f8:	103fed26 	beq	r2,zero,8047b0 <__swsetup_r+0x98>
  8047fc:	2080010c 	andi	r2,r4,4
  804800:	10001226 	beq	r2,zero,80484c <__swsetup_r+0x134>
  804804:	81400c17 	ldw	r5,48(r16)
  804808:	28000526 	beq	r5,zero,804820 <__swsetup_r+0x108>
  80480c:	80801004 	addi	r2,r16,64
  804810:	28800226 	beq	r5,r2,80481c <__swsetup_r+0x104>
  804814:	8809883a 	mov	r4,r17
  804818:	0800ed80 	call	800ed8 <_free_r>
  80481c:	80000c15 	stw	zero,48(r16)
  804820:	8080030b 	ldhu	r2,12(r16)
  804824:	81400417 	ldw	r5,16(r16)
  804828:	80000115 	stw	zero,4(r16)
  80482c:	10bff6cc 	andi	r2,r2,65499
  804830:	8080030d 	sth	r2,12(r16)
  804834:	81400015 	stw	r5,0(r16)
  804838:	8080030b 	ldhu	r2,12(r16)
  80483c:	10800214 	ori	r2,r2,8
  804840:	113fffcc 	andi	r4,r2,65535
  804844:	8080030d 	sth	r2,12(r16)
  804848:	003fc306 	br	804758 <__swsetup_r+0x40>
  80484c:	81400417 	ldw	r5,16(r16)
  804850:	003ff906 	br	804838 <__swsetup_r+0x120>

00804854 <_close_r>:
  804854:	defffd04 	addi	sp,sp,-12
  804858:	dc000015 	stw	r16,0(sp)
  80485c:	04002074 	movhi	r16,129
  804860:	840b6b04 	addi	r16,r16,11692
  804864:	dc400115 	stw	r17,4(sp)
  804868:	80000015 	stw	zero,0(r16)
  80486c:	2023883a 	mov	r17,r4
  804870:	2809883a 	mov	r4,r5
  804874:	dfc00215 	stw	ra,8(sp)
  804878:	080a9280 	call	80a928 <close>
  80487c:	1007883a 	mov	r3,r2
  804880:	00bfffc4 	movi	r2,-1
  804884:	18800626 	beq	r3,r2,8048a0 <_close_r+0x4c>
  804888:	1805883a 	mov	r2,r3
  80488c:	dfc00217 	ldw	ra,8(sp)
  804890:	dc400117 	ldw	r17,4(sp)
  804894:	dc000017 	ldw	r16,0(sp)
  804898:	dec00304 	addi	sp,sp,12
  80489c:	f800283a 	ret
  8048a0:	80800017 	ldw	r2,0(r16)
  8048a4:	103ff826 	beq	r2,zero,804888 <_close_r+0x34>
  8048a8:	88800015 	stw	r2,0(r17)
  8048ac:	1805883a 	mov	r2,r3
  8048b0:	dfc00217 	ldw	ra,8(sp)
  8048b4:	dc400117 	ldw	r17,4(sp)
  8048b8:	dc000017 	ldw	r16,0(sp)
  8048bc:	dec00304 	addi	sp,sp,12
  8048c0:	f800283a 	ret

008048c4 <quorem>:
  8048c4:	28c00417 	ldw	r3,16(r5)
  8048c8:	20800417 	ldw	r2,16(r4)
  8048cc:	defff104 	addi	sp,sp,-60
  8048d0:	dfc00e15 	stw	ra,56(sp)
  8048d4:	df000d15 	stw	fp,52(sp)
  8048d8:	ddc00c15 	stw	r23,48(sp)
  8048dc:	dd800b15 	stw	r22,44(sp)
  8048e0:	dd400a15 	stw	r21,40(sp)
  8048e4:	dd000915 	stw	r20,36(sp)
  8048e8:	dcc00815 	stw	r19,32(sp)
  8048ec:	dc800715 	stw	r18,28(sp)
  8048f0:	dc400615 	stw	r17,24(sp)
  8048f4:	dc000515 	stw	r16,20(sp)
  8048f8:	d9000315 	stw	r4,12(sp)
  8048fc:	d9400415 	stw	r5,16(sp)
  804900:	10c07f16 	blt	r2,r3,804b00 <quorem+0x23c>
  804904:	1d3fffc4 	addi	r20,r3,-1
  804908:	d8c00417 	ldw	r3,16(sp)
  80490c:	d9000317 	ldw	r4,12(sp)
  804910:	a505883a 	add	r2,r20,r20
  804914:	1085883a 	add	r2,r2,r2
  804918:	1cc00504 	addi	r19,r3,20
  80491c:	25c00504 	addi	r23,r4,20
  804920:	98ad883a 	add	r22,r19,r2
  804924:	15c7883a 	add	r3,r2,r23
  804928:	b1400017 	ldw	r5,0(r22)
  80492c:	19000017 	ldw	r4,0(r3)
  804930:	d8c00015 	stw	r3,0(sp)
  804934:	29400044 	addi	r5,r5,1
  804938:	d9000215 	stw	r4,8(sp)
  80493c:	080a2280 	call	80a228 <__udivsi3>
  804940:	1039883a 	mov	fp,r2
  804944:	10003d1e 	bne	r2,zero,804a3c <quorem+0x178>
  804948:	d9400417 	ldw	r5,16(sp)
  80494c:	d9000317 	ldw	r4,12(sp)
  804950:	0806b640 	call	806b64 <__mcmp>
  804954:	10002c16 	blt	r2,zero,804a08 <quorem+0x144>
  804958:	e7000044 	addi	fp,fp,1
  80495c:	b80f883a 	mov	r7,r23
  804960:	0011883a 	mov	r8,zero
  804964:	0009883a 	mov	r4,zero
  804968:	99400017 	ldw	r5,0(r19)
  80496c:	38c00017 	ldw	r3,0(r7)
  804970:	9cc00104 	addi	r19,r19,4
  804974:	28bfffcc 	andi	r2,r5,65535
  804978:	2085883a 	add	r2,r4,r2
  80497c:	11bfffcc 	andi	r6,r2,65535
  804980:	193fffcc 	andi	r4,r3,65535
  804984:	1004d43a 	srli	r2,r2,16
  804988:	280ad43a 	srli	r5,r5,16
  80498c:	2189c83a 	sub	r4,r4,r6
  804990:	2209883a 	add	r4,r4,r8
  804994:	1806d43a 	srli	r3,r3,16
  804998:	288b883a 	add	r5,r5,r2
  80499c:	200dd43a 	srai	r6,r4,16
  8049a0:	28bfffcc 	andi	r2,r5,65535
  8049a4:	1887c83a 	sub	r3,r3,r2
  8049a8:	1987883a 	add	r3,r3,r6
  8049ac:	3900000d 	sth	r4,0(r7)
  8049b0:	38c0008d 	sth	r3,2(r7)
  8049b4:	2808d43a 	srli	r4,r5,16
  8049b8:	39c00104 	addi	r7,r7,4
  8049bc:	1811d43a 	srai	r8,r3,16
  8049c0:	b4ffe92e 	bgeu	r22,r19,804968 <quorem+0xa4>
  8049c4:	a505883a 	add	r2,r20,r20
  8049c8:	1085883a 	add	r2,r2,r2
  8049cc:	b885883a 	add	r2,r23,r2
  8049d0:	10c00017 	ldw	r3,0(r2)
  8049d4:	18000c1e 	bne	r3,zero,804a08 <quorem+0x144>
  8049d8:	113fff04 	addi	r4,r2,-4
  8049dc:	b900082e 	bgeu	r23,r4,804a00 <quorem+0x13c>
  8049e0:	10bfff17 	ldw	r2,-4(r2)
  8049e4:	10000326 	beq	r2,zero,8049f4 <quorem+0x130>
  8049e8:	00000506 	br	804a00 <quorem+0x13c>
  8049ec:	20800017 	ldw	r2,0(r4)
  8049f0:	1000031e 	bne	r2,zero,804a00 <quorem+0x13c>
  8049f4:	213fff04 	addi	r4,r4,-4
  8049f8:	a53fffc4 	addi	r20,r20,-1
  8049fc:	b93ffb36 	bltu	r23,r4,8049ec <quorem+0x128>
  804a00:	d9000317 	ldw	r4,12(sp)
  804a04:	25000415 	stw	r20,16(r4)
  804a08:	e005883a 	mov	r2,fp
  804a0c:	dfc00e17 	ldw	ra,56(sp)
  804a10:	df000d17 	ldw	fp,52(sp)
  804a14:	ddc00c17 	ldw	r23,48(sp)
  804a18:	dd800b17 	ldw	r22,44(sp)
  804a1c:	dd400a17 	ldw	r21,40(sp)
  804a20:	dd000917 	ldw	r20,36(sp)
  804a24:	dcc00817 	ldw	r19,32(sp)
  804a28:	dc800717 	ldw	r18,28(sp)
  804a2c:	dc400617 	ldw	r17,24(sp)
  804a30:	dc000517 	ldw	r16,20(sp)
  804a34:	dec00f04 	addi	sp,sp,60
  804a38:	f800283a 	ret
  804a3c:	b823883a 	mov	r17,r23
  804a40:	9825883a 	mov	r18,r19
  804a44:	d8000115 	stw	zero,4(sp)
  804a48:	002b883a 	mov	r21,zero
  804a4c:	94000017 	ldw	r16,0(r18)
  804a50:	e009883a 	mov	r4,fp
  804a54:	94800104 	addi	r18,r18,4
  804a58:	817fffcc 	andi	r5,r16,65535
  804a5c:	080a2380 	call	80a238 <__mulsi3>
  804a60:	800ad43a 	srli	r5,r16,16
  804a64:	e009883a 	mov	r4,fp
  804a68:	a8a1883a 	add	r16,r21,r2
  804a6c:	080a2380 	call	80a238 <__mulsi3>
  804a70:	89000017 	ldw	r4,0(r17)
  804a74:	80ffffcc 	andi	r3,r16,65535
  804a78:	8020d43a 	srli	r16,r16,16
  804a7c:	217fffcc 	andi	r5,r4,65535
  804a80:	28cbc83a 	sub	r5,r5,r3
  804a84:	d8c00117 	ldw	r3,4(sp)
  804a88:	2008d43a 	srli	r4,r4,16
  804a8c:	1405883a 	add	r2,r2,r16
  804a90:	28cb883a 	add	r5,r5,r3
  804a94:	280dd43a 	srai	r6,r5,16
  804a98:	10ffffcc 	andi	r3,r2,65535
  804a9c:	20c9c83a 	sub	r4,r4,r3
  804aa0:	2189883a 	add	r4,r4,r6
  804aa4:	8900008d 	sth	r4,2(r17)
  804aa8:	2009d43a 	srai	r4,r4,16
  804aac:	8940000d 	sth	r5,0(r17)
  804ab0:	102ad43a 	srli	r21,r2,16
  804ab4:	8c400104 	addi	r17,r17,4
  804ab8:	d9000115 	stw	r4,4(sp)
  804abc:	b4bfe32e 	bgeu	r22,r18,804a4c <quorem+0x188>
  804ac0:	d9000217 	ldw	r4,8(sp)
  804ac4:	203fa01e 	bne	r4,zero,804948 <quorem+0x84>
  804ac8:	d8800017 	ldw	r2,0(sp)
  804acc:	10ffff04 	addi	r3,r2,-4
  804ad0:	b8c0082e 	bgeu	r23,r3,804af4 <quorem+0x230>
  804ad4:	10bfff17 	ldw	r2,-4(r2)
  804ad8:	10000326 	beq	r2,zero,804ae8 <quorem+0x224>
  804adc:	00000506 	br	804af4 <quorem+0x230>
  804ae0:	18800017 	ldw	r2,0(r3)
  804ae4:	1000031e 	bne	r2,zero,804af4 <quorem+0x230>
  804ae8:	18ffff04 	addi	r3,r3,-4
  804aec:	a53fffc4 	addi	r20,r20,-1
  804af0:	b8fffb36 	bltu	r23,r3,804ae0 <quorem+0x21c>
  804af4:	d8c00317 	ldw	r3,12(sp)
  804af8:	1d000415 	stw	r20,16(r3)
  804afc:	003f9206 	br	804948 <quorem+0x84>
  804b00:	0005883a 	mov	r2,zero
  804b04:	003fc106 	br	804a0c <quorem+0x148>

00804b08 <_dtoa_r>:
  804b08:	22001017 	ldw	r8,64(r4)
  804b0c:	deffda04 	addi	sp,sp,-152
  804b10:	dd402115 	stw	r21,132(sp)
  804b14:	dd002015 	stw	r20,128(sp)
  804b18:	dc801e15 	stw	r18,120(sp)
  804b1c:	dc401d15 	stw	r17,116(sp)
  804b20:	dfc02515 	stw	ra,148(sp)
  804b24:	df002415 	stw	fp,144(sp)
  804b28:	ddc02315 	stw	r23,140(sp)
  804b2c:	dd802215 	stw	r22,136(sp)
  804b30:	dcc01f15 	stw	r19,124(sp)
  804b34:	dc001c15 	stw	r16,112(sp)
  804b38:	d9001615 	stw	r4,88(sp)
  804b3c:	3023883a 	mov	r17,r6
  804b40:	2829883a 	mov	r20,r5
  804b44:	d9c01715 	stw	r7,92(sp)
  804b48:	dc802817 	ldw	r18,160(sp)
  804b4c:	302b883a 	mov	r21,r6
  804b50:	40000a26 	beq	r8,zero,804b7c <_dtoa_r+0x74>
  804b54:	20801117 	ldw	r2,68(r4)
  804b58:	400b883a 	mov	r5,r8
  804b5c:	40800115 	stw	r2,4(r8)
  804b60:	20c01117 	ldw	r3,68(r4)
  804b64:	00800044 	movi	r2,1
  804b68:	10c4983a 	sll	r2,r2,r3
  804b6c:	40800215 	stw	r2,8(r8)
  804b70:	0806a080 	call	806a08 <_Bfree>
  804b74:	d8c01617 	ldw	r3,88(sp)
  804b78:	18001015 	stw	zero,64(r3)
  804b7c:	8800a316 	blt	r17,zero,804e0c <_dtoa_r+0x304>
  804b80:	90000015 	stw	zero,0(r18)
  804b84:	a8dffc2c 	andhi	r3,r21,32752
  804b88:	009ffc34 	movhi	r2,32752
  804b8c:	18809126 	beq	r3,r2,804dd4 <_dtoa_r+0x2cc>
  804b90:	000d883a 	mov	r6,zero
  804b94:	000f883a 	mov	r7,zero
  804b98:	a009883a 	mov	r4,r20
  804b9c:	a80b883a 	mov	r5,r21
  804ba0:	dd001215 	stw	r20,72(sp)
  804ba4:	dd401315 	stw	r21,76(sp)
  804ba8:	0809b680 	call	809b68 <__nedf2>
  804bac:	1000171e 	bne	r2,zero,804c0c <_dtoa_r+0x104>
  804bb0:	d9802717 	ldw	r6,156(sp)
  804bb4:	00800044 	movi	r2,1
  804bb8:	30800015 	stw	r2,0(r6)
  804bbc:	d8802917 	ldw	r2,164(sp)
  804bc0:	10029b26 	beq	r2,zero,805630 <_dtoa_r+0xb28>
  804bc4:	d9002917 	ldw	r4,164(sp)
  804bc8:	00802074 	movhi	r2,129
  804bcc:	10bbe744 	addi	r2,r2,-4195
  804bd0:	10ffffc4 	addi	r3,r2,-1
  804bd4:	20800015 	stw	r2,0(r4)
  804bd8:	1805883a 	mov	r2,r3
  804bdc:	dfc02517 	ldw	ra,148(sp)
  804be0:	df002417 	ldw	fp,144(sp)
  804be4:	ddc02317 	ldw	r23,140(sp)
  804be8:	dd802217 	ldw	r22,136(sp)
  804bec:	dd402117 	ldw	r21,132(sp)
  804bf0:	dd002017 	ldw	r20,128(sp)
  804bf4:	dcc01f17 	ldw	r19,124(sp)
  804bf8:	dc801e17 	ldw	r18,120(sp)
  804bfc:	dc401d17 	ldw	r17,116(sp)
  804c00:	dc001c17 	ldw	r16,112(sp)
  804c04:	dec02604 	addi	sp,sp,152
  804c08:	f800283a 	ret
  804c0c:	d9001617 	ldw	r4,88(sp)
  804c10:	d9401217 	ldw	r5,72(sp)
  804c14:	d8800104 	addi	r2,sp,4
  804c18:	a80d883a 	mov	r6,r21
  804c1c:	d9c00204 	addi	r7,sp,8
  804c20:	d8800015 	stw	r2,0(sp)
  804c24:	08070440 	call	807044 <__d2b>
  804c28:	d8800715 	stw	r2,28(sp)
  804c2c:	a804d53a 	srli	r2,r21,20
  804c30:	1101ffcc 	andi	r4,r2,2047
  804c34:	20008626 	beq	r4,zero,804e50 <_dtoa_r+0x348>
  804c38:	d8c01217 	ldw	r3,72(sp)
  804c3c:	00800434 	movhi	r2,16
  804c40:	10bfffc4 	addi	r2,r2,-1
  804c44:	ddc00117 	ldw	r23,4(sp)
  804c48:	a884703a 	and	r2,r21,r2
  804c4c:	1811883a 	mov	r8,r3
  804c50:	124ffc34 	orhi	r9,r2,16368
  804c54:	25bf0044 	addi	r22,r4,-1023
  804c58:	d8000815 	stw	zero,32(sp)
  804c5c:	0005883a 	mov	r2,zero
  804c60:	00cffe34 	movhi	r3,16376
  804c64:	480b883a 	mov	r5,r9
  804c68:	4009883a 	mov	r4,r8
  804c6c:	180f883a 	mov	r7,r3
  804c70:	100d883a 	mov	r6,r2
  804c74:	08093d00 	call	8093d0 <__subdf3>
  804c78:	0218dbf4 	movhi	r8,25455
  804c7c:	4210d844 	addi	r8,r8,17249
  804c80:	024ff4f4 	movhi	r9,16339
  804c84:	4a61e9c4 	addi	r9,r9,-30809
  804c88:	480f883a 	mov	r7,r9
  804c8c:	400d883a 	mov	r6,r8
  804c90:	180b883a 	mov	r5,r3
  804c94:	1009883a 	mov	r4,r2
  804c98:	08094c40 	call	8094c4 <__muldf3>
  804c9c:	0222d874 	movhi	r8,35681
  804ca0:	42322cc4 	addi	r8,r8,-14157
  804ca4:	024ff1f4 	movhi	r9,16327
  804ca8:	4a628a04 	addi	r9,r9,-30168
  804cac:	480f883a 	mov	r7,r9
  804cb0:	400d883a 	mov	r6,r8
  804cb4:	180b883a 	mov	r5,r3
  804cb8:	1009883a 	mov	r4,r2
  804cbc:	08094500 	call	809450 <__adddf3>
  804cc0:	b009883a 	mov	r4,r22
  804cc4:	1021883a 	mov	r16,r2
  804cc8:	1823883a 	mov	r17,r3
  804ccc:	0809d880 	call	809d88 <__floatsidf>
  804cd0:	021427f4 	movhi	r8,20639
  804cd4:	421e7ec4 	addi	r8,r8,31227
  804cd8:	024ff4f4 	movhi	r9,16339
  804cdc:	4a5104c4 	addi	r9,r9,17427
  804ce0:	480f883a 	mov	r7,r9
  804ce4:	400d883a 	mov	r6,r8
  804ce8:	180b883a 	mov	r5,r3
  804cec:	1009883a 	mov	r4,r2
  804cf0:	08094c40 	call	8094c4 <__muldf3>
  804cf4:	180f883a 	mov	r7,r3
  804cf8:	880b883a 	mov	r5,r17
  804cfc:	100d883a 	mov	r6,r2
  804d00:	8009883a 	mov	r4,r16
  804d04:	08094500 	call	809450 <__adddf3>
  804d08:	1009883a 	mov	r4,r2
  804d0c:	180b883a 	mov	r5,r3
  804d10:	1021883a 	mov	r16,r2
  804d14:	1823883a 	mov	r17,r3
  804d18:	0809e800 	call	809e80 <__fixdfsi>
  804d1c:	000d883a 	mov	r6,zero
  804d20:	000f883a 	mov	r7,zero
  804d24:	8009883a 	mov	r4,r16
  804d28:	880b883a 	mov	r5,r17
  804d2c:	d8800d15 	stw	r2,52(sp)
  804d30:	0809d000 	call	809d00 <__ltdf2>
  804d34:	10031716 	blt	r2,zero,805994 <_dtoa_r+0xe8c>
  804d38:	d8c00d17 	ldw	r3,52(sp)
  804d3c:	00800584 	movi	r2,22
  804d40:	10c1482e 	bgeu	r2,r3,805264 <_dtoa_r+0x75c>
  804d44:	01000044 	movi	r4,1
  804d48:	d9000c15 	stw	r4,48(sp)
  804d4c:	bd85c83a 	sub	r2,r23,r22
  804d50:	11bfffc4 	addi	r6,r2,-1
  804d54:	30030b16 	blt	r6,zero,805984 <_dtoa_r+0xe7c>
  804d58:	d9800a15 	stw	r6,40(sp)
  804d5c:	d8001115 	stw	zero,68(sp)
  804d60:	d8c00d17 	ldw	r3,52(sp)
  804d64:	1802ff16 	blt	r3,zero,805964 <_dtoa_r+0xe5c>
  804d68:	d9000a17 	ldw	r4,40(sp)
  804d6c:	d8c00915 	stw	r3,36(sp)
  804d70:	d8001015 	stw	zero,64(sp)
  804d74:	20c9883a 	add	r4,r4,r3
  804d78:	d9000a15 	stw	r4,40(sp)
  804d7c:	d9001717 	ldw	r4,92(sp)
  804d80:	00800244 	movi	r2,9
  804d84:	11004636 	bltu	r2,r4,804ea0 <_dtoa_r+0x398>
  804d88:	00800144 	movi	r2,5
  804d8c:	11020416 	blt	r2,r4,8055a0 <_dtoa_r+0xa98>
  804d90:	04400044 	movi	r17,1
  804d94:	d8c01717 	ldw	r3,92(sp)
  804d98:	00800144 	movi	r2,5
  804d9c:	10c1ed36 	bltu	r2,r3,805554 <_dtoa_r+0xa4c>
  804da0:	18c5883a 	add	r2,r3,r3
  804da4:	1085883a 	add	r2,r2,r2
  804da8:	00c02034 	movhi	r3,128
  804dac:	18d36f04 	addi	r3,r3,19900
  804db0:	10c5883a 	add	r2,r2,r3
  804db4:	11000017 	ldw	r4,0(r2)
  804db8:	2000683a 	jmp	r4
  804dbc:	00804ea8 	cmpgeui	r2,zero,314
  804dc0:	00804ea8 	cmpgeui	r2,zero,314
  804dc4:	008058a8 	cmpgeui	r2,zero,354
  804dc8:	00805880 	call	80588 <__reset-0x77fa78>
  804dcc:	008058c4 	movi	r2,355
  804dd0:	008058d0 	cmplti	r2,zero,355
  804dd4:	d9002717 	ldw	r4,156(sp)
  804dd8:	0089c3c4 	movi	r2,9999
  804ddc:	20800015 	stw	r2,0(r4)
  804de0:	a0001026 	beq	r20,zero,804e24 <_dtoa_r+0x31c>
  804de4:	00c02074 	movhi	r3,129
  804de8:	18fbf304 	addi	r3,r3,-4148
  804dec:	d9802917 	ldw	r6,164(sp)
  804df0:	303f7926 	beq	r6,zero,804bd8 <_dtoa_r+0xd0>
  804df4:	188000c7 	ldb	r2,3(r3)
  804df8:	190000c4 	addi	r4,r3,3
  804dfc:	1000101e 	bne	r2,zero,804e40 <_dtoa_r+0x338>
  804e00:	d8802917 	ldw	r2,164(sp)
  804e04:	11000015 	stw	r4,0(r2)
  804e08:	003f7306 	br	804bd8 <_dtoa_r+0xd0>
  804e0c:	00a00034 	movhi	r2,32768
  804e10:	10bfffc4 	addi	r2,r2,-1
  804e14:	00c00044 	movi	r3,1
  804e18:	88aa703a 	and	r21,r17,r2
  804e1c:	90c00015 	stw	r3,0(r18)
  804e20:	003f5806 	br	804b84 <_dtoa_r+0x7c>
  804e24:	00800434 	movhi	r2,16
  804e28:	10bfffc4 	addi	r2,r2,-1
  804e2c:	a884703a 	and	r2,r21,r2
  804e30:	103fec1e 	bne	r2,zero,804de4 <_dtoa_r+0x2dc>
  804e34:	00c02074 	movhi	r3,129
  804e38:	18fbf004 	addi	r3,r3,-4160
  804e3c:	003feb06 	br	804dec <_dtoa_r+0x2e4>
  804e40:	d8802917 	ldw	r2,164(sp)
  804e44:	19000204 	addi	r4,r3,8
  804e48:	11000015 	stw	r4,0(r2)
  804e4c:	003f6206 	br	804bd8 <_dtoa_r+0xd0>
  804e50:	ddc00117 	ldw	r23,4(sp)
  804e54:	d8800217 	ldw	r2,8(sp)
  804e58:	01000804 	movi	r4,32
  804e5c:	b8c10c84 	addi	r3,r23,1074
  804e60:	18a3883a 	add	r17,r3,r2
  804e64:	2441b80e 	bge	r4,r17,805548 <_dtoa_r+0xa40>
  804e68:	00c01004 	movi	r3,64
  804e6c:	1c47c83a 	sub	r3,r3,r17
  804e70:	88bff804 	addi	r2,r17,-32
  804e74:	a8c6983a 	sll	r3,r21,r3
  804e78:	a084d83a 	srl	r2,r20,r2
  804e7c:	1888b03a 	or	r4,r3,r2
  804e80:	0809f580 	call	809f58 <__floatunsidf>
  804e84:	1011883a 	mov	r8,r2
  804e88:	00bf8434 	movhi	r2,65040
  804e8c:	01000044 	movi	r4,1
  804e90:	10d3883a 	add	r9,r2,r3
  804e94:	8dbef344 	addi	r22,r17,-1075
  804e98:	d9000815 	stw	r4,32(sp)
  804e9c:	003f6f06 	br	804c5c <_dtoa_r+0x154>
  804ea0:	d8001715 	stw	zero,92(sp)
  804ea4:	04400044 	movi	r17,1
  804ea8:	00bfffc4 	movi	r2,-1
  804eac:	00c00044 	movi	r3,1
  804eb0:	d8800e15 	stw	r2,56(sp)
  804eb4:	d8002615 	stw	zero,152(sp)
  804eb8:	d8800f15 	stw	r2,60(sp)
  804ebc:	d8c00b15 	stw	r3,44(sp)
  804ec0:	1021883a 	mov	r16,r2
  804ec4:	d8801617 	ldw	r2,88(sp)
  804ec8:	10001115 	stw	zero,68(r2)
  804ecc:	d8801617 	ldw	r2,88(sp)
  804ed0:	11401117 	ldw	r5,68(r2)
  804ed4:	1009883a 	mov	r4,r2
  804ed8:	0806f880 	call	806f88 <_Balloc>
  804edc:	d8c01617 	ldw	r3,88(sp)
  804ee0:	d8800515 	stw	r2,20(sp)
  804ee4:	18801015 	stw	r2,64(r3)
  804ee8:	00800384 	movi	r2,14
  804eec:	14006836 	bltu	r2,r16,805090 <_dtoa_r+0x588>
  804ef0:	8805003a 	cmpeq	r2,r17,zero
  804ef4:	1000661e 	bne	r2,zero,805090 <_dtoa_r+0x588>
  804ef8:	d9000d17 	ldw	r4,52(sp)
  804efc:	0102300e 	bge	zero,r4,8057c0 <_dtoa_r+0xcb8>
  804f00:	208003cc 	andi	r2,r4,15
  804f04:	100490fa 	slli	r2,r2,3
  804f08:	2025d13a 	srai	r18,r4,4
  804f0c:	00c02074 	movhi	r3,129
  804f10:	18fc0404 	addi	r3,r3,-4080
  804f14:	10c5883a 	add	r2,r2,r3
  804f18:	90c0040c 	andi	r3,r18,16
  804f1c:	14000017 	ldw	r16,0(r2)
  804f20:	14400117 	ldw	r17,4(r2)
  804f24:	18036a1e 	bne	r3,zero,805cd0 <_dtoa_r+0x11c8>
  804f28:	05800084 	movi	r22,2
  804f2c:	90001026 	beq	r18,zero,804f70 <_dtoa_r+0x468>
  804f30:	04c02074 	movhi	r19,129
  804f34:	9cfc3604 	addi	r19,r19,-3880
  804f38:	9080004c 	andi	r2,r18,1
  804f3c:	1005003a 	cmpeq	r2,r2,zero
  804f40:	1000081e 	bne	r2,zero,804f64 <_dtoa_r+0x45c>
  804f44:	99800017 	ldw	r6,0(r19)
  804f48:	99c00117 	ldw	r7,4(r19)
  804f4c:	880b883a 	mov	r5,r17
  804f50:	8009883a 	mov	r4,r16
  804f54:	08094c40 	call	8094c4 <__muldf3>
  804f58:	1021883a 	mov	r16,r2
  804f5c:	b5800044 	addi	r22,r22,1
  804f60:	1823883a 	mov	r17,r3
  804f64:	9025d07a 	srai	r18,r18,1
  804f68:	9cc00204 	addi	r19,r19,8
  804f6c:	903ff21e 	bne	r18,zero,804f38 <_dtoa_r+0x430>
  804f70:	a80b883a 	mov	r5,r21
  804f74:	a009883a 	mov	r4,r20
  804f78:	880f883a 	mov	r7,r17
  804f7c:	800d883a 	mov	r6,r16
  804f80:	08098880 	call	809888 <__divdf3>
  804f84:	1029883a 	mov	r20,r2
  804f88:	182b883a 	mov	r21,r3
  804f8c:	d8c00c17 	ldw	r3,48(sp)
  804f90:	1805003a 	cmpeq	r2,r3,zero
  804f94:	1000081e 	bne	r2,zero,804fb8 <_dtoa_r+0x4b0>
  804f98:	0005883a 	mov	r2,zero
  804f9c:	00cffc34 	movhi	r3,16368
  804fa0:	180f883a 	mov	r7,r3
  804fa4:	a009883a 	mov	r4,r20
  804fa8:	a80b883a 	mov	r5,r21
  804fac:	100d883a 	mov	r6,r2
  804fb0:	0809d000 	call	809d00 <__ltdf2>
  804fb4:	1003fe16 	blt	r2,zero,805fb0 <_dtoa_r+0x14a8>
  804fb8:	b009883a 	mov	r4,r22
  804fbc:	0809d880 	call	809d88 <__floatsidf>
  804fc0:	180b883a 	mov	r5,r3
  804fc4:	1009883a 	mov	r4,r2
  804fc8:	a00d883a 	mov	r6,r20
  804fcc:	a80f883a 	mov	r7,r21
  804fd0:	08094c40 	call	8094c4 <__muldf3>
  804fd4:	0011883a 	mov	r8,zero
  804fd8:	02500734 	movhi	r9,16412
  804fdc:	1009883a 	mov	r4,r2
  804fe0:	180b883a 	mov	r5,r3
  804fe4:	480f883a 	mov	r7,r9
  804fe8:	400d883a 	mov	r6,r8
  804fec:	08094500 	call	809450 <__adddf3>
  804ff0:	d9000f17 	ldw	r4,60(sp)
  804ff4:	102d883a 	mov	r22,r2
  804ff8:	00bf3034 	movhi	r2,64704
  804ffc:	18b9883a 	add	fp,r3,r2
  805000:	e02f883a 	mov	r23,fp
  805004:	20028f1e 	bne	r4,zero,805a44 <_dtoa_r+0xf3c>
  805008:	0005883a 	mov	r2,zero
  80500c:	00d00534 	movhi	r3,16404
  805010:	a009883a 	mov	r4,r20
  805014:	a80b883a 	mov	r5,r21
  805018:	180f883a 	mov	r7,r3
  80501c:	100d883a 	mov	r6,r2
  805020:	08093d00 	call	8093d0 <__subdf3>
  805024:	1009883a 	mov	r4,r2
  805028:	e00f883a 	mov	r7,fp
  80502c:	180b883a 	mov	r5,r3
  805030:	b00d883a 	mov	r6,r22
  805034:	1025883a 	mov	r18,r2
  805038:	1827883a 	mov	r19,r3
  80503c:	0809bf00 	call	809bf0 <__gtdf2>
  805040:	00834f16 	blt	zero,r2,805d80 <_dtoa_r+0x1278>
  805044:	e0e0003c 	xorhi	r3,fp,32768
  805048:	9009883a 	mov	r4,r18
  80504c:	980b883a 	mov	r5,r19
  805050:	180f883a 	mov	r7,r3
  805054:	b00d883a 	mov	r6,r22
  805058:	0809d000 	call	809d00 <__ltdf2>
  80505c:	1000080e 	bge	r2,zero,805080 <_dtoa_r+0x578>
  805060:	0027883a 	mov	r19,zero
  805064:	0025883a 	mov	r18,zero
  805068:	d8802617 	ldw	r2,152(sp)
  80506c:	df000517 	ldw	fp,20(sp)
  805070:	d8000615 	stw	zero,24(sp)
  805074:	0084303a 	nor	r2,zero,r2
  805078:	d8800d15 	stw	r2,52(sp)
  80507c:	00019b06 	br	8056ec <_dtoa_r+0xbe4>
  805080:	d9801217 	ldw	r6,72(sp)
  805084:	d8801317 	ldw	r2,76(sp)
  805088:	3029883a 	mov	r20,r6
  80508c:	102b883a 	mov	r21,r2
  805090:	d8c00217 	ldw	r3,8(sp)
  805094:	18008516 	blt	r3,zero,8052ac <_dtoa_r+0x7a4>
  805098:	d9000d17 	ldw	r4,52(sp)
  80509c:	00800384 	movi	r2,14
  8050a0:	11008216 	blt	r2,r4,8052ac <_dtoa_r+0x7a4>
  8050a4:	200490fa 	slli	r2,r4,3
  8050a8:	d9802617 	ldw	r6,152(sp)
  8050ac:	00c02074 	movhi	r3,129
  8050b0:	18fc0404 	addi	r3,r3,-4080
  8050b4:	10c5883a 	add	r2,r2,r3
  8050b8:	14800017 	ldw	r18,0(r2)
  8050bc:	14c00117 	ldw	r19,4(r2)
  8050c0:	30031e16 	blt	r6,zero,805d3c <_dtoa_r+0x1234>
  8050c4:	d9000517 	ldw	r4,20(sp)
  8050c8:	d8c00f17 	ldw	r3,60(sp)
  8050cc:	a823883a 	mov	r17,r21
  8050d0:	a021883a 	mov	r16,r20
  8050d4:	192b883a 	add	r21,r3,r4
  8050d8:	2039883a 	mov	fp,r4
  8050dc:	00000f06 	br	80511c <_dtoa_r+0x614>
  8050e0:	0005883a 	mov	r2,zero
  8050e4:	00d00934 	movhi	r3,16420
  8050e8:	5009883a 	mov	r4,r10
  8050ec:	580b883a 	mov	r5,r11
  8050f0:	180f883a 	mov	r7,r3
  8050f4:	100d883a 	mov	r6,r2
  8050f8:	08094c40 	call	8094c4 <__muldf3>
  8050fc:	180b883a 	mov	r5,r3
  805100:	000d883a 	mov	r6,zero
  805104:	000f883a 	mov	r7,zero
  805108:	1009883a 	mov	r4,r2
  80510c:	1021883a 	mov	r16,r2
  805110:	1823883a 	mov	r17,r3
  805114:	0809b680 	call	809b68 <__nedf2>
  805118:	10004526 	beq	r2,zero,805230 <_dtoa_r+0x728>
  80511c:	900d883a 	mov	r6,r18
  805120:	980f883a 	mov	r7,r19
  805124:	8009883a 	mov	r4,r16
  805128:	880b883a 	mov	r5,r17
  80512c:	08098880 	call	809888 <__divdf3>
  805130:	180b883a 	mov	r5,r3
  805134:	1009883a 	mov	r4,r2
  805138:	0809e800 	call	809e80 <__fixdfsi>
  80513c:	1009883a 	mov	r4,r2
  805140:	1029883a 	mov	r20,r2
  805144:	0809d880 	call	809d88 <__floatsidf>
  805148:	180f883a 	mov	r7,r3
  80514c:	9009883a 	mov	r4,r18
  805150:	980b883a 	mov	r5,r19
  805154:	100d883a 	mov	r6,r2
  805158:	08094c40 	call	8094c4 <__muldf3>
  80515c:	180f883a 	mov	r7,r3
  805160:	880b883a 	mov	r5,r17
  805164:	8009883a 	mov	r4,r16
  805168:	100d883a 	mov	r6,r2
  80516c:	08093d00 	call	8093d0 <__subdf3>
  805170:	1015883a 	mov	r10,r2
  805174:	a0800c04 	addi	r2,r20,48
  805178:	e0800005 	stb	r2,0(fp)
  80517c:	e7000044 	addi	fp,fp,1
  805180:	1817883a 	mov	r11,r3
  805184:	e57fd61e 	bne	fp,r21,8050e0 <_dtoa_r+0x5d8>
  805188:	500d883a 	mov	r6,r10
  80518c:	180f883a 	mov	r7,r3
  805190:	5009883a 	mov	r4,r10
  805194:	180b883a 	mov	r5,r3
  805198:	08094500 	call	809450 <__adddf3>
  80519c:	100d883a 	mov	r6,r2
  8051a0:	9009883a 	mov	r4,r18
  8051a4:	980b883a 	mov	r5,r19
  8051a8:	180f883a 	mov	r7,r3
  8051ac:	1021883a 	mov	r16,r2
  8051b0:	1823883a 	mov	r17,r3
  8051b4:	0809d000 	call	809d00 <__ltdf2>
  8051b8:	10000816 	blt	r2,zero,8051dc <_dtoa_r+0x6d4>
  8051bc:	980b883a 	mov	r5,r19
  8051c0:	800d883a 	mov	r6,r16
  8051c4:	880f883a 	mov	r7,r17
  8051c8:	9009883a 	mov	r4,r18
  8051cc:	0809ae00 	call	809ae0 <__eqdf2>
  8051d0:	1000171e 	bne	r2,zero,805230 <_dtoa_r+0x728>
  8051d4:	a080004c 	andi	r2,r20,1
  8051d8:	10001526 	beq	r2,zero,805230 <_dtoa_r+0x728>
  8051dc:	d8800d17 	ldw	r2,52(sp)
  8051e0:	d8800415 	stw	r2,16(sp)
  8051e4:	e009883a 	mov	r4,fp
  8051e8:	213fffc4 	addi	r4,r4,-1
  8051ec:	20c00007 	ldb	r3,0(r4)
  8051f0:	00800e44 	movi	r2,57
  8051f4:	1880081e 	bne	r3,r2,805218 <_dtoa_r+0x710>
  8051f8:	d8800517 	ldw	r2,20(sp)
  8051fc:	113ffa1e 	bne	r2,r4,8051e8 <_dtoa_r+0x6e0>
  805200:	d8c00417 	ldw	r3,16(sp)
  805204:	d9800517 	ldw	r6,20(sp)
  805208:	00800c04 	movi	r2,48
  80520c:	18c00044 	addi	r3,r3,1
  805210:	d8c00415 	stw	r3,16(sp)
  805214:	30800005 	stb	r2,0(r6)
  805218:	20800003 	ldbu	r2,0(r4)
  80521c:	d8c00417 	ldw	r3,16(sp)
  805220:	27000044 	addi	fp,r4,1
  805224:	10800044 	addi	r2,r2,1
  805228:	d8c00d15 	stw	r3,52(sp)
  80522c:	20800005 	stb	r2,0(r4)
  805230:	d9001617 	ldw	r4,88(sp)
  805234:	d9400717 	ldw	r5,28(sp)
  805238:	0806a080 	call	806a08 <_Bfree>
  80523c:	e0000005 	stb	zero,0(fp)
  805240:	d9800d17 	ldw	r6,52(sp)
  805244:	d8c02717 	ldw	r3,156(sp)
  805248:	d9002917 	ldw	r4,164(sp)
  80524c:	30800044 	addi	r2,r6,1
  805250:	18800015 	stw	r2,0(r3)
  805254:	20029c26 	beq	r4,zero,805cc8 <_dtoa_r+0x11c0>
  805258:	d8c00517 	ldw	r3,20(sp)
  80525c:	27000015 	stw	fp,0(r4)
  805260:	003e5d06 	br	804bd8 <_dtoa_r+0xd0>
  805264:	d9800d17 	ldw	r6,52(sp)
  805268:	00c02074 	movhi	r3,129
  80526c:	18fc0404 	addi	r3,r3,-4080
  805270:	d9001217 	ldw	r4,72(sp)
  805274:	300490fa 	slli	r2,r6,3
  805278:	d9401317 	ldw	r5,76(sp)
  80527c:	10c5883a 	add	r2,r2,r3
  805280:	12000017 	ldw	r8,0(r2)
  805284:	12400117 	ldw	r9,4(r2)
  805288:	400d883a 	mov	r6,r8
  80528c:	480f883a 	mov	r7,r9
  805290:	0809d000 	call	809d00 <__ltdf2>
  805294:	1000030e 	bge	r2,zero,8052a4 <_dtoa_r+0x79c>
  805298:	d8800d17 	ldw	r2,52(sp)
  80529c:	10bfffc4 	addi	r2,r2,-1
  8052a0:	d8800d15 	stw	r2,52(sp)
  8052a4:	d8000c15 	stw	zero,48(sp)
  8052a8:	003ea806 	br	804d4c <_dtoa_r+0x244>
  8052ac:	d9000b17 	ldw	r4,44(sp)
  8052b0:	202cc03a 	cmpne	r22,r4,zero
  8052b4:	b000c71e 	bne	r22,zero,8055d4 <_dtoa_r+0xacc>
  8052b8:	dc001117 	ldw	r16,68(sp)
  8052bc:	dc801017 	ldw	r18,64(sp)
  8052c0:	0027883a 	mov	r19,zero
  8052c4:	04000b0e 	bge	zero,r16,8052f4 <_dtoa_r+0x7ec>
  8052c8:	d8c00a17 	ldw	r3,40(sp)
  8052cc:	00c0090e 	bge	zero,r3,8052f4 <_dtoa_r+0x7ec>
  8052d0:	8005883a 	mov	r2,r16
  8052d4:	1c011316 	blt	r3,r16,805724 <_dtoa_r+0xc1c>
  8052d8:	d9000a17 	ldw	r4,40(sp)
  8052dc:	d9801117 	ldw	r6,68(sp)
  8052e0:	80a1c83a 	sub	r16,r16,r2
  8052e4:	2089c83a 	sub	r4,r4,r2
  8052e8:	308dc83a 	sub	r6,r6,r2
  8052ec:	d9000a15 	stw	r4,40(sp)
  8052f0:	d9801115 	stw	r6,68(sp)
  8052f4:	d8801017 	ldw	r2,64(sp)
  8052f8:	0080150e 	bge	zero,r2,805350 <_dtoa_r+0x848>
  8052fc:	d8c00b17 	ldw	r3,44(sp)
  805300:	1805003a 	cmpeq	r2,r3,zero
  805304:	1001c91e 	bne	r2,zero,805a2c <_dtoa_r+0xf24>
  805308:	04800e0e 	bge	zero,r18,805344 <_dtoa_r+0x83c>
  80530c:	d9001617 	ldw	r4,88(sp)
  805310:	980b883a 	mov	r5,r19
  805314:	900d883a 	mov	r6,r18
  805318:	08078540 	call	807854 <__pow5mult>
  80531c:	d9001617 	ldw	r4,88(sp)
  805320:	d9800717 	ldw	r6,28(sp)
  805324:	100b883a 	mov	r5,r2
  805328:	1027883a 	mov	r19,r2
  80532c:	08074980 	call	807498 <__multiply>
  805330:	d9001617 	ldw	r4,88(sp)
  805334:	d9400717 	ldw	r5,28(sp)
  805338:	1023883a 	mov	r17,r2
  80533c:	0806a080 	call	806a08 <_Bfree>
  805340:	dc400715 	stw	r17,28(sp)
  805344:	d9001017 	ldw	r4,64(sp)
  805348:	248dc83a 	sub	r6,r4,r18
  80534c:	30010e1e 	bne	r6,zero,805788 <_dtoa_r+0xc80>
  805350:	d9001617 	ldw	r4,88(sp)
  805354:	04400044 	movi	r17,1
  805358:	880b883a 	mov	r5,r17
  80535c:	08076ec0 	call	8076ec <__i2b>
  805360:	d9800917 	ldw	r6,36(sp)
  805364:	1025883a 	mov	r18,r2
  805368:	0180040e 	bge	zero,r6,80537c <_dtoa_r+0x874>
  80536c:	d9001617 	ldw	r4,88(sp)
  805370:	100b883a 	mov	r5,r2
  805374:	08078540 	call	807854 <__pow5mult>
  805378:	1025883a 	mov	r18,r2
  80537c:	d8801717 	ldw	r2,92(sp)
  805380:	8880f30e 	bge	r17,r2,805750 <_dtoa_r+0xc48>
  805384:	0023883a 	mov	r17,zero
  805388:	d9800917 	ldw	r6,36(sp)
  80538c:	30019e1e 	bne	r6,zero,805a08 <_dtoa_r+0xf00>
  805390:	00c00044 	movi	r3,1
  805394:	d9000a17 	ldw	r4,40(sp)
  805398:	20c5883a 	add	r2,r4,r3
  80539c:	10c007cc 	andi	r3,r2,31
  8053a0:	1800841e 	bne	r3,zero,8055b4 <_dtoa_r+0xaac>
  8053a4:	00800704 	movi	r2,28
  8053a8:	d9000a17 	ldw	r4,40(sp)
  8053ac:	d9801117 	ldw	r6,68(sp)
  8053b0:	80a1883a 	add	r16,r16,r2
  8053b4:	2089883a 	add	r4,r4,r2
  8053b8:	308d883a 	add	r6,r6,r2
  8053bc:	d9000a15 	stw	r4,40(sp)
  8053c0:	d9801115 	stw	r6,68(sp)
  8053c4:	d8801117 	ldw	r2,68(sp)
  8053c8:	0080050e 	bge	zero,r2,8053e0 <_dtoa_r+0x8d8>
  8053cc:	d9400717 	ldw	r5,28(sp)
  8053d0:	d9001617 	ldw	r4,88(sp)
  8053d4:	100d883a 	mov	r6,r2
  8053d8:	080734c0 	call	80734c <__lshift>
  8053dc:	d8800715 	stw	r2,28(sp)
  8053e0:	d8c00a17 	ldw	r3,40(sp)
  8053e4:	00c0050e 	bge	zero,r3,8053fc <_dtoa_r+0x8f4>
  8053e8:	d9001617 	ldw	r4,88(sp)
  8053ec:	900b883a 	mov	r5,r18
  8053f0:	180d883a 	mov	r6,r3
  8053f4:	080734c0 	call	80734c <__lshift>
  8053f8:	1025883a 	mov	r18,r2
  8053fc:	d9000c17 	ldw	r4,48(sp)
  805400:	2005003a 	cmpeq	r2,r4,zero
  805404:	10016f26 	beq	r2,zero,8059c4 <_dtoa_r+0xebc>
  805408:	d9000f17 	ldw	r4,60(sp)
  80540c:	0102170e 	bge	zero,r4,805c6c <_dtoa_r+0x1164>
  805410:	d9800b17 	ldw	r6,44(sp)
  805414:	3005003a 	cmpeq	r2,r6,zero
  805418:	1000881e 	bne	r2,zero,80563c <_dtoa_r+0xb34>
  80541c:	0400050e 	bge	zero,r16,805434 <_dtoa_r+0x92c>
  805420:	d9001617 	ldw	r4,88(sp)
  805424:	980b883a 	mov	r5,r19
  805428:	800d883a 	mov	r6,r16
  80542c:	080734c0 	call	80734c <__lshift>
  805430:	1027883a 	mov	r19,r2
  805434:	8804c03a 	cmpne	r2,r17,zero
  805438:	1002541e 	bne	r2,zero,805d8c <_dtoa_r+0x1284>
  80543c:	980b883a 	mov	r5,r19
  805440:	dd800517 	ldw	r22,20(sp)
  805444:	dcc00615 	stw	r19,24(sp)
  805448:	a700004c 	andi	fp,r20,1
  80544c:	2827883a 	mov	r19,r5
  805450:	d9000717 	ldw	r4,28(sp)
  805454:	900b883a 	mov	r5,r18
  805458:	08048c40 	call	8048c4 <quorem>
  80545c:	d9000717 	ldw	r4,28(sp)
  805460:	d9400617 	ldw	r5,24(sp)
  805464:	1023883a 	mov	r17,r2
  805468:	8dc00c04 	addi	r23,r17,48
  80546c:	0806b640 	call	806b64 <__mcmp>
  805470:	d9001617 	ldw	r4,88(sp)
  805474:	900b883a 	mov	r5,r18
  805478:	980d883a 	mov	r6,r19
  80547c:	1029883a 	mov	r20,r2
  805480:	08071c00 	call	8071c0 <__mdiff>
  805484:	102b883a 	mov	r21,r2
  805488:	10800317 	ldw	r2,12(r2)
  80548c:	1001281e 	bne	r2,zero,805930 <_dtoa_r+0xe28>
  805490:	d9000717 	ldw	r4,28(sp)
  805494:	a80b883a 	mov	r5,r21
  805498:	0806b640 	call	806b64 <__mcmp>
  80549c:	d9001617 	ldw	r4,88(sp)
  8054a0:	1021883a 	mov	r16,r2
  8054a4:	a80b883a 	mov	r5,r21
  8054a8:	0806a080 	call	806a08 <_Bfree>
  8054ac:	8000041e 	bne	r16,zero,8054c0 <_dtoa_r+0x9b8>
  8054b0:	d8801717 	ldw	r2,92(sp)
  8054b4:	1000021e 	bne	r2,zero,8054c0 <_dtoa_r+0x9b8>
  8054b8:	e004c03a 	cmpne	r2,fp,zero
  8054bc:	10011726 	beq	r2,zero,80591c <_dtoa_r+0xe14>
  8054c0:	a0010616 	blt	r20,zero,8058dc <_dtoa_r+0xdd4>
  8054c4:	a000041e 	bne	r20,zero,8054d8 <_dtoa_r+0x9d0>
  8054c8:	d8c01717 	ldw	r3,92(sp)
  8054cc:	1800021e 	bne	r3,zero,8054d8 <_dtoa_r+0x9d0>
  8054d0:	e004c03a 	cmpne	r2,fp,zero
  8054d4:	10010126 	beq	r2,zero,8058dc <_dtoa_r+0xdd4>
  8054d8:	04023d16 	blt	zero,r16,805dd0 <_dtoa_r+0x12c8>
  8054dc:	b5c00005 	stb	r23,0(r22)
  8054e0:	d9800517 	ldw	r6,20(sp)
  8054e4:	d9000f17 	ldw	r4,60(sp)
  8054e8:	b5800044 	addi	r22,r22,1
  8054ec:	3105883a 	add	r2,r6,r4
  8054f0:	b0806526 	beq	r22,r2,805688 <_dtoa_r+0xb80>
  8054f4:	d9400717 	ldw	r5,28(sp)
  8054f8:	d9001617 	ldw	r4,88(sp)
  8054fc:	01800284 	movi	r6,10
  805500:	000f883a 	mov	r7,zero
  805504:	08077280 	call	807728 <__multadd>
  805508:	d8800715 	stw	r2,28(sp)
  80550c:	d8800617 	ldw	r2,24(sp)
  805510:	14c10c26 	beq	r2,r19,805944 <_dtoa_r+0xe3c>
  805514:	d9400617 	ldw	r5,24(sp)
  805518:	d9001617 	ldw	r4,88(sp)
  80551c:	01800284 	movi	r6,10
  805520:	000f883a 	mov	r7,zero
  805524:	08077280 	call	807728 <__multadd>
  805528:	d9001617 	ldw	r4,88(sp)
  80552c:	980b883a 	mov	r5,r19
  805530:	01800284 	movi	r6,10
  805534:	000f883a 	mov	r7,zero
  805538:	d8800615 	stw	r2,24(sp)
  80553c:	08077280 	call	807728 <__multadd>
  805540:	1027883a 	mov	r19,r2
  805544:	003fc206 	br	805450 <_dtoa_r+0x948>
  805548:	2445c83a 	sub	r2,r4,r17
  80554c:	a088983a 	sll	r4,r20,r2
  805550:	003e4b06 	br	804e80 <_dtoa_r+0x378>
  805554:	01bfffc4 	movi	r6,-1
  805558:	00800044 	movi	r2,1
  80555c:	d9800e15 	stw	r6,56(sp)
  805560:	d9800f15 	stw	r6,60(sp)
  805564:	d8800b15 	stw	r2,44(sp)
  805568:	d8c01617 	ldw	r3,88(sp)
  80556c:	008005c4 	movi	r2,23
  805570:	18001115 	stw	zero,68(r3)
  805574:	1580082e 	bgeu	r2,r22,805598 <_dtoa_r+0xa90>
  805578:	00c00104 	movi	r3,4
  80557c:	0009883a 	mov	r4,zero
  805580:	18c7883a 	add	r3,r3,r3
  805584:	18800504 	addi	r2,r3,20
  805588:	21000044 	addi	r4,r4,1
  80558c:	b0bffc2e 	bgeu	r22,r2,805580 <_dtoa_r+0xa78>
  805590:	d9801617 	ldw	r6,88(sp)
  805594:	31001115 	stw	r4,68(r6)
  805598:	dc000f17 	ldw	r16,60(sp)
  80559c:	003e4b06 	br	804ecc <_dtoa_r+0x3c4>
  8055a0:	d9801717 	ldw	r6,92(sp)
  8055a4:	0023883a 	mov	r17,zero
  8055a8:	31bfff04 	addi	r6,r6,-4
  8055ac:	d9801715 	stw	r6,92(sp)
  8055b0:	003df806 	br	804d94 <_dtoa_r+0x28c>
  8055b4:	00800804 	movi	r2,32
  8055b8:	10c9c83a 	sub	r4,r2,r3
  8055bc:	00c00104 	movi	r3,4
  8055c0:	19005a16 	blt	r3,r4,80572c <_dtoa_r+0xc24>
  8055c4:	008000c4 	movi	r2,3
  8055c8:	113f7e16 	blt	r2,r4,8053c4 <_dtoa_r+0x8bc>
  8055cc:	20800704 	addi	r2,r4,28
  8055d0:	003f7506 	br	8053a8 <_dtoa_r+0x8a0>
  8055d4:	d9801717 	ldw	r6,92(sp)
  8055d8:	00800044 	movi	r2,1
  8055dc:	1180a10e 	bge	r2,r6,805864 <_dtoa_r+0xd5c>
  8055e0:	d9800f17 	ldw	r6,60(sp)
  8055e4:	d8c01017 	ldw	r3,64(sp)
  8055e8:	30bfffc4 	addi	r2,r6,-1
  8055ec:	1881c616 	blt	r3,r2,805d08 <_dtoa_r+0x1200>
  8055f0:	18a5c83a 	sub	r18,r3,r2
  8055f4:	d8800f17 	ldw	r2,60(sp)
  8055f8:	10026216 	blt	r2,zero,805f84 <_dtoa_r+0x147c>
  8055fc:	dc001117 	ldw	r16,68(sp)
  805600:	1007883a 	mov	r3,r2
  805604:	d9800a17 	ldw	r6,40(sp)
  805608:	d8801117 	ldw	r2,68(sp)
  80560c:	d9001617 	ldw	r4,88(sp)
  805610:	30cd883a 	add	r6,r6,r3
  805614:	10c5883a 	add	r2,r2,r3
  805618:	01400044 	movi	r5,1
  80561c:	d9800a15 	stw	r6,40(sp)
  805620:	d8801115 	stw	r2,68(sp)
  805624:	08076ec0 	call	8076ec <__i2b>
  805628:	1027883a 	mov	r19,r2
  80562c:	003f2506 	br	8052c4 <_dtoa_r+0x7bc>
  805630:	00c02074 	movhi	r3,129
  805634:	18fbe704 	addi	r3,r3,-4196
  805638:	003d6706 	br	804bd8 <_dtoa_r+0xd0>
  80563c:	dd800517 	ldw	r22,20(sp)
  805640:	04000044 	movi	r16,1
  805644:	00000706 	br	805664 <_dtoa_r+0xb5c>
  805648:	d9400717 	ldw	r5,28(sp)
  80564c:	d9001617 	ldw	r4,88(sp)
  805650:	01800284 	movi	r6,10
  805654:	000f883a 	mov	r7,zero
  805658:	08077280 	call	807728 <__multadd>
  80565c:	d8800715 	stw	r2,28(sp)
  805660:	84000044 	addi	r16,r16,1
  805664:	d9000717 	ldw	r4,28(sp)
  805668:	900b883a 	mov	r5,r18
  80566c:	08048c40 	call	8048c4 <quorem>
  805670:	15c00c04 	addi	r23,r2,48
  805674:	b5c00005 	stb	r23,0(r22)
  805678:	d8c00f17 	ldw	r3,60(sp)
  80567c:	b5800044 	addi	r22,r22,1
  805680:	80fff116 	blt	r16,r3,805648 <_dtoa_r+0xb40>
  805684:	d8000615 	stw	zero,24(sp)
  805688:	d9400717 	ldw	r5,28(sp)
  80568c:	d9001617 	ldw	r4,88(sp)
  805690:	01800044 	movi	r6,1
  805694:	080734c0 	call	80734c <__lshift>
  805698:	1009883a 	mov	r4,r2
  80569c:	900b883a 	mov	r5,r18
  8056a0:	d8800715 	stw	r2,28(sp)
  8056a4:	0806b640 	call	806b64 <__mcmp>
  8056a8:	00803c0e 	bge	zero,r2,80579c <_dtoa_r+0xc94>
  8056ac:	b009883a 	mov	r4,r22
  8056b0:	213fffc4 	addi	r4,r4,-1
  8056b4:	21400003 	ldbu	r5,0(r4)
  8056b8:	00800e44 	movi	r2,57
  8056bc:	28c03fcc 	andi	r3,r5,255
  8056c0:	18c0201c 	xori	r3,r3,128
  8056c4:	18ffe004 	addi	r3,r3,-128
  8056c8:	1881981e 	bne	r3,r2,805d2c <_dtoa_r+0x1224>
  8056cc:	d9800517 	ldw	r6,20(sp)
  8056d0:	21bff71e 	bne	r4,r6,8056b0 <_dtoa_r+0xba8>
  8056d4:	d8800d17 	ldw	r2,52(sp)
  8056d8:	37000044 	addi	fp,r6,1
  8056dc:	10800044 	addi	r2,r2,1
  8056e0:	d8800d15 	stw	r2,52(sp)
  8056e4:	00800c44 	movi	r2,49
  8056e8:	30800005 	stb	r2,0(r6)
  8056ec:	d9001617 	ldw	r4,88(sp)
  8056f0:	900b883a 	mov	r5,r18
  8056f4:	0806a080 	call	806a08 <_Bfree>
  8056f8:	983ecd26 	beq	r19,zero,805230 <_dtoa_r+0x728>
  8056fc:	d8c00617 	ldw	r3,24(sp)
  805700:	18000426 	beq	r3,zero,805714 <_dtoa_r+0xc0c>
  805704:	1cc00326 	beq	r3,r19,805714 <_dtoa_r+0xc0c>
  805708:	d9001617 	ldw	r4,88(sp)
  80570c:	180b883a 	mov	r5,r3
  805710:	0806a080 	call	806a08 <_Bfree>
  805714:	d9001617 	ldw	r4,88(sp)
  805718:	980b883a 	mov	r5,r19
  80571c:	0806a080 	call	806a08 <_Bfree>
  805720:	003ec306 	br	805230 <_dtoa_r+0x728>
  805724:	1805883a 	mov	r2,r3
  805728:	003eeb06 	br	8052d8 <_dtoa_r+0x7d0>
  80572c:	d9800a17 	ldw	r6,40(sp)
  805730:	d8c01117 	ldw	r3,68(sp)
  805734:	20bfff04 	addi	r2,r4,-4
  805738:	308d883a 	add	r6,r6,r2
  80573c:	1887883a 	add	r3,r3,r2
  805740:	80a1883a 	add	r16,r16,r2
  805744:	d9800a15 	stw	r6,40(sp)
  805748:	d8c01115 	stw	r3,68(sp)
  80574c:	003f1d06 	br	8053c4 <_dtoa_r+0x8bc>
  805750:	a03f0c1e 	bne	r20,zero,805384 <_dtoa_r+0x87c>
  805754:	00800434 	movhi	r2,16
  805758:	10bfffc4 	addi	r2,r2,-1
  80575c:	a884703a 	and	r2,r21,r2
  805760:	103f081e 	bne	r2,zero,805384 <_dtoa_r+0x87c>
  805764:	a89ffc2c 	andhi	r2,r21,32752
  805768:	103f0626 	beq	r2,zero,805384 <_dtoa_r+0x87c>
  80576c:	d8c01117 	ldw	r3,68(sp)
  805770:	d9000a17 	ldw	r4,40(sp)
  805774:	18c00044 	addi	r3,r3,1
  805778:	21000044 	addi	r4,r4,1
  80577c:	d8c01115 	stw	r3,68(sp)
  805780:	d9000a15 	stw	r4,40(sp)
  805784:	003f0006 	br	805388 <_dtoa_r+0x880>
  805788:	d9400717 	ldw	r5,28(sp)
  80578c:	d9001617 	ldw	r4,88(sp)
  805790:	08078540 	call	807854 <__pow5mult>
  805794:	d8800715 	stw	r2,28(sp)
  805798:	003eed06 	br	805350 <_dtoa_r+0x848>
  80579c:	1000021e 	bne	r2,zero,8057a8 <_dtoa_r+0xca0>
  8057a0:	b880004c 	andi	r2,r23,1
  8057a4:	103fc11e 	bne	r2,zero,8056ac <_dtoa_r+0xba4>
  8057a8:	b5bfffc4 	addi	r22,r22,-1
  8057ac:	b0c00007 	ldb	r3,0(r22)
  8057b0:	00800c04 	movi	r2,48
  8057b4:	18bffc26 	beq	r3,r2,8057a8 <_dtoa_r+0xca0>
  8057b8:	b7000044 	addi	fp,r22,1
  8057bc:	003fcb06 	br	8056ec <_dtoa_r+0xbe4>
  8057c0:	d9800d17 	ldw	r6,52(sp)
  8057c4:	018fc83a 	sub	r7,zero,r6
  8057c8:	3801f726 	beq	r7,zero,805fa8 <_dtoa_r+0x14a0>
  8057cc:	398003cc 	andi	r6,r7,15
  8057d0:	300c90fa 	slli	r6,r6,3
  8057d4:	01402074 	movhi	r5,129
  8057d8:	297c0404 	addi	r5,r5,-4080
  8057dc:	d9001217 	ldw	r4,72(sp)
  8057e0:	314d883a 	add	r6,r6,r5
  8057e4:	30c00117 	ldw	r3,4(r6)
  8057e8:	30800017 	ldw	r2,0(r6)
  8057ec:	d9401317 	ldw	r5,76(sp)
  8057f0:	3821d13a 	srai	r16,r7,4
  8057f4:	100d883a 	mov	r6,r2
  8057f8:	180f883a 	mov	r7,r3
  8057fc:	08094c40 	call	8094c4 <__muldf3>
  805800:	1011883a 	mov	r8,r2
  805804:	1813883a 	mov	r9,r3
  805808:	1029883a 	mov	r20,r2
  80580c:	182b883a 	mov	r21,r3
  805810:	8001e526 	beq	r16,zero,805fa8 <_dtoa_r+0x14a0>
  805814:	05800084 	movi	r22,2
  805818:	04402074 	movhi	r17,129
  80581c:	8c7c3604 	addi	r17,r17,-3880
  805820:	8080004c 	andi	r2,r16,1
  805824:	1005003a 	cmpeq	r2,r2,zero
  805828:	1000081e 	bne	r2,zero,80584c <_dtoa_r+0xd44>
  80582c:	89800017 	ldw	r6,0(r17)
  805830:	89c00117 	ldw	r7,4(r17)
  805834:	480b883a 	mov	r5,r9
  805838:	4009883a 	mov	r4,r8
  80583c:	08094c40 	call	8094c4 <__muldf3>
  805840:	1011883a 	mov	r8,r2
  805844:	b5800044 	addi	r22,r22,1
  805848:	1813883a 	mov	r9,r3
  80584c:	8021d07a 	srai	r16,r16,1
  805850:	8c400204 	addi	r17,r17,8
  805854:	803ff21e 	bne	r16,zero,805820 <_dtoa_r+0xd18>
  805858:	4029883a 	mov	r20,r8
  80585c:	482b883a 	mov	r21,r9
  805860:	003dca06 	br	804f8c <_dtoa_r+0x484>
  805864:	d9000817 	ldw	r4,32(sp)
  805868:	2005003a 	cmpeq	r2,r4,zero
  80586c:	1001f61e 	bne	r2,zero,806048 <_dtoa_r+0x1540>
  805870:	dc001117 	ldw	r16,68(sp)
  805874:	dc801017 	ldw	r18,64(sp)
  805878:	18c10cc4 	addi	r3,r3,1075
  80587c:	003f6106 	br	805604 <_dtoa_r+0xafc>
  805880:	d8000b15 	stw	zero,44(sp)
  805884:	d9802617 	ldw	r6,152(sp)
  805888:	d8c00d17 	ldw	r3,52(sp)
  80588c:	30800044 	addi	r2,r6,1
  805890:	18ad883a 	add	r22,r3,r2
  805894:	b13fffc4 	addi	r4,r22,-1
  805898:	d9000e15 	stw	r4,56(sp)
  80589c:	0581f60e 	bge	zero,r22,806078 <_dtoa_r+0x1570>
  8058a0:	dd800f15 	stw	r22,60(sp)
  8058a4:	003f3006 	br	805568 <_dtoa_r+0xa60>
  8058a8:	d8000b15 	stw	zero,44(sp)
  8058ac:	d9002617 	ldw	r4,152(sp)
  8058b0:	0101eb0e 	bge	zero,r4,806060 <_dtoa_r+0x1558>
  8058b4:	202d883a 	mov	r22,r4
  8058b8:	d9000e15 	stw	r4,56(sp)
  8058bc:	d9000f15 	stw	r4,60(sp)
  8058c0:	003f2906 	br	805568 <_dtoa_r+0xa60>
  8058c4:	01800044 	movi	r6,1
  8058c8:	d9800b15 	stw	r6,44(sp)
  8058cc:	003ff706 	br	8058ac <_dtoa_r+0xda4>
  8058d0:	01000044 	movi	r4,1
  8058d4:	d9000b15 	stw	r4,44(sp)
  8058d8:	003fea06 	br	805884 <_dtoa_r+0xd7c>
  8058dc:	04000c0e 	bge	zero,r16,805910 <_dtoa_r+0xe08>
  8058e0:	d9400717 	ldw	r5,28(sp)
  8058e4:	d9001617 	ldw	r4,88(sp)
  8058e8:	01800044 	movi	r6,1
  8058ec:	080734c0 	call	80734c <__lshift>
  8058f0:	1009883a 	mov	r4,r2
  8058f4:	900b883a 	mov	r5,r18
  8058f8:	d8800715 	stw	r2,28(sp)
  8058fc:	0806b640 	call	806b64 <__mcmp>
  805900:	0081e00e 	bge	zero,r2,806084 <_dtoa_r+0x157c>
  805904:	bdc00044 	addi	r23,r23,1
  805908:	00800e84 	movi	r2,58
  80590c:	b881a226 	beq	r23,r2,805f98 <_dtoa_r+0x1490>
  805910:	b7000044 	addi	fp,r22,1
  805914:	b5c00005 	stb	r23,0(r22)
  805918:	003f7406 	br	8056ec <_dtoa_r+0xbe4>
  80591c:	00800e44 	movi	r2,57
  805920:	b8819d26 	beq	r23,r2,805f98 <_dtoa_r+0x1490>
  805924:	053ffa0e 	bge	zero,r20,805910 <_dtoa_r+0xe08>
  805928:	8dc00c44 	addi	r23,r17,49
  80592c:	003ff806 	br	805910 <_dtoa_r+0xe08>
  805930:	d9001617 	ldw	r4,88(sp)
  805934:	a80b883a 	mov	r5,r21
  805938:	04000044 	movi	r16,1
  80593c:	0806a080 	call	806a08 <_Bfree>
  805940:	003edf06 	br	8054c0 <_dtoa_r+0x9b8>
  805944:	d9001617 	ldw	r4,88(sp)
  805948:	980b883a 	mov	r5,r19
  80594c:	01800284 	movi	r6,10
  805950:	000f883a 	mov	r7,zero
  805954:	08077280 	call	807728 <__multadd>
  805958:	1027883a 	mov	r19,r2
  80595c:	d8800615 	stw	r2,24(sp)
  805960:	003ebb06 	br	805450 <_dtoa_r+0x948>
  805964:	d9801117 	ldw	r6,68(sp)
  805968:	d8800d17 	ldw	r2,52(sp)
  80596c:	d8000915 	stw	zero,36(sp)
  805970:	308dc83a 	sub	r6,r6,r2
  805974:	0087c83a 	sub	r3,zero,r2
  805978:	d9801115 	stw	r6,68(sp)
  80597c:	d8c01015 	stw	r3,64(sp)
  805980:	003cfe06 	br	804d7c <_dtoa_r+0x274>
  805984:	018dc83a 	sub	r6,zero,r6
  805988:	d9801115 	stw	r6,68(sp)
  80598c:	d8000a15 	stw	zero,40(sp)
  805990:	003cf306 	br	804d60 <_dtoa_r+0x258>
  805994:	d9000d17 	ldw	r4,52(sp)
  805998:	0809d880 	call	809d88 <__floatsidf>
  80599c:	880b883a 	mov	r5,r17
  8059a0:	8009883a 	mov	r4,r16
  8059a4:	180f883a 	mov	r7,r3
  8059a8:	100d883a 	mov	r6,r2
  8059ac:	0809b680 	call	809b68 <__nedf2>
  8059b0:	103ce126 	beq	r2,zero,804d38 <_dtoa_r+0x230>
  8059b4:	d9800d17 	ldw	r6,52(sp)
  8059b8:	31bfffc4 	addi	r6,r6,-1
  8059bc:	d9800d15 	stw	r6,52(sp)
  8059c0:	003cdd06 	br	804d38 <_dtoa_r+0x230>
  8059c4:	d9000717 	ldw	r4,28(sp)
  8059c8:	900b883a 	mov	r5,r18
  8059cc:	0806b640 	call	806b64 <__mcmp>
  8059d0:	103e8d0e 	bge	r2,zero,805408 <_dtoa_r+0x900>
  8059d4:	d9400717 	ldw	r5,28(sp)
  8059d8:	d9001617 	ldw	r4,88(sp)
  8059dc:	01800284 	movi	r6,10
  8059e0:	000f883a 	mov	r7,zero
  8059e4:	08077280 	call	807728 <__multadd>
  8059e8:	d9800d17 	ldw	r6,52(sp)
  8059ec:	d8800715 	stw	r2,28(sp)
  8059f0:	31bfffc4 	addi	r6,r6,-1
  8059f4:	d9800d15 	stw	r6,52(sp)
  8059f8:	b001a71e 	bne	r22,zero,806098 <_dtoa_r+0x1590>
  8059fc:	d8800e17 	ldw	r2,56(sp)
  805a00:	d8800f15 	stw	r2,60(sp)
  805a04:	003e8006 	br	805408 <_dtoa_r+0x900>
  805a08:	90800417 	ldw	r2,16(r18)
  805a0c:	1085883a 	add	r2,r2,r2
  805a10:	1085883a 	add	r2,r2,r2
  805a14:	1485883a 	add	r2,r2,r18
  805a18:	11000417 	ldw	r4,16(r2)
  805a1c:	0806a300 	call	806a30 <__hi0bits>
  805a20:	00c00804 	movi	r3,32
  805a24:	1887c83a 	sub	r3,r3,r2
  805a28:	003e5a06 	br	805394 <_dtoa_r+0x88c>
  805a2c:	d9400717 	ldw	r5,28(sp)
  805a30:	d9801017 	ldw	r6,64(sp)
  805a34:	d9001617 	ldw	r4,88(sp)
  805a38:	08078540 	call	807854 <__pow5mult>
  805a3c:	d8800715 	stw	r2,28(sp)
  805a40:	003e4306 	br	805350 <_dtoa_r+0x848>
  805a44:	d9800f17 	ldw	r6,60(sp)
  805a48:	d8800d17 	ldw	r2,52(sp)
  805a4c:	d9800315 	stw	r6,12(sp)
  805a50:	d8800415 	stw	r2,16(sp)
  805a54:	d8c00b17 	ldw	r3,44(sp)
  805a58:	1805003a 	cmpeq	r2,r3,zero
  805a5c:	1000e21e 	bne	r2,zero,805de8 <_dtoa_r+0x12e0>
  805a60:	d9000317 	ldw	r4,12(sp)
  805a64:	0005883a 	mov	r2,zero
  805a68:	00cff834 	movhi	r3,16352
  805a6c:	200c90fa 	slli	r6,r4,3
  805a70:	01002074 	movhi	r4,129
  805a74:	213c0404 	addi	r4,r4,-4080
  805a78:	180b883a 	mov	r5,r3
  805a7c:	310d883a 	add	r6,r6,r4
  805a80:	327fff17 	ldw	r9,-4(r6)
  805a84:	323ffe17 	ldw	r8,-8(r6)
  805a88:	1009883a 	mov	r4,r2
  805a8c:	480f883a 	mov	r7,r9
  805a90:	400d883a 	mov	r6,r8
  805a94:	08098880 	call	809888 <__divdf3>
  805a98:	180b883a 	mov	r5,r3
  805a9c:	b00d883a 	mov	r6,r22
  805aa0:	b80f883a 	mov	r7,r23
  805aa4:	1009883a 	mov	r4,r2
  805aa8:	08093d00 	call	8093d0 <__subdf3>
  805aac:	a80b883a 	mov	r5,r21
  805ab0:	a009883a 	mov	r4,r20
  805ab4:	d8c01915 	stw	r3,100(sp)
  805ab8:	d8801815 	stw	r2,96(sp)
  805abc:	0809e800 	call	809e80 <__fixdfsi>
  805ac0:	1009883a 	mov	r4,r2
  805ac4:	1027883a 	mov	r19,r2
  805ac8:	0809d880 	call	809d88 <__floatsidf>
  805acc:	a80b883a 	mov	r5,r21
  805ad0:	a009883a 	mov	r4,r20
  805ad4:	180f883a 	mov	r7,r3
  805ad8:	100d883a 	mov	r6,r2
  805adc:	08093d00 	call	8093d0 <__subdf3>
  805ae0:	d9801817 	ldw	r6,96(sp)
  805ae4:	1823883a 	mov	r17,r3
  805ae8:	d8801415 	stw	r2,80(sp)
  805aec:	302d883a 	mov	r22,r6
  805af0:	d9800517 	ldw	r6,20(sp)
  805af4:	9cc00c04 	addi	r19,r19,48
  805af8:	dc401515 	stw	r17,84(sp)
  805afc:	d8c01917 	ldw	r3,100(sp)
  805b00:	34c00005 	stb	r19,0(r6)
  805b04:	d8800517 	ldw	r2,20(sp)
  805b08:	d9401917 	ldw	r5,100(sp)
  805b0c:	d9801417 	ldw	r6,80(sp)
  805b10:	b009883a 	mov	r4,r22
  805b14:	880f883a 	mov	r7,r17
  805b18:	182f883a 	mov	r23,r3
  805b1c:	17000044 	addi	fp,r2,1
  805b20:	0809bf00 	call	809bf0 <__gtdf2>
  805b24:	00804e16 	blt	zero,r2,805c60 <_dtoa_r+0x1158>
  805b28:	d9801417 	ldw	r6,80(sp)
  805b2c:	0005883a 	mov	r2,zero
  805b30:	00cffc34 	movhi	r3,16368
  805b34:	180b883a 	mov	r5,r3
  805b38:	880f883a 	mov	r7,r17
  805b3c:	1009883a 	mov	r4,r2
  805b40:	08093d00 	call	8093d0 <__subdf3>
  805b44:	d9401917 	ldw	r5,100(sp)
  805b48:	180f883a 	mov	r7,r3
  805b4c:	b009883a 	mov	r4,r22
  805b50:	100d883a 	mov	r6,r2
  805b54:	0809bf00 	call	809bf0 <__gtdf2>
  805b58:	00bda216 	blt	zero,r2,8051e4 <_dtoa_r+0x6dc>
  805b5c:	d8c00317 	ldw	r3,12(sp)
  805b60:	00800044 	movi	r2,1
  805b64:	10c01216 	blt	r2,r3,805bb0 <_dtoa_r+0x10a8>
  805b68:	003d4506 	br	805080 <_dtoa_r+0x578>
  805b6c:	d9801417 	ldw	r6,80(sp)
  805b70:	0005883a 	mov	r2,zero
  805b74:	00cffc34 	movhi	r3,16368
  805b78:	180b883a 	mov	r5,r3
  805b7c:	880f883a 	mov	r7,r17
  805b80:	1009883a 	mov	r4,r2
  805b84:	08093d00 	call	8093d0 <__subdf3>
  805b88:	d9c01b17 	ldw	r7,108(sp)
  805b8c:	180b883a 	mov	r5,r3
  805b90:	1009883a 	mov	r4,r2
  805b94:	b00d883a 	mov	r6,r22
  805b98:	0809d000 	call	809d00 <__ltdf2>
  805b9c:	103d9116 	blt	r2,zero,8051e4 <_dtoa_r+0x6dc>
  805ba0:	d9800517 	ldw	r6,20(sp)
  805ba4:	d9000317 	ldw	r4,12(sp)
  805ba8:	3105883a 	add	r2,r6,r4
  805bac:	e0bd3426 	beq	fp,r2,805080 <_dtoa_r+0x578>
  805bb0:	04500934 	movhi	r17,16420
  805bb4:	0021883a 	mov	r16,zero
  805bb8:	b80b883a 	mov	r5,r23
  805bbc:	b009883a 	mov	r4,r22
  805bc0:	800d883a 	mov	r6,r16
  805bc4:	880f883a 	mov	r7,r17
  805bc8:	08094c40 	call	8094c4 <__muldf3>
  805bcc:	d9401517 	ldw	r5,84(sp)
  805bd0:	d9001417 	ldw	r4,80(sp)
  805bd4:	880f883a 	mov	r7,r17
  805bd8:	000d883a 	mov	r6,zero
  805bdc:	d8801a15 	stw	r2,104(sp)
  805be0:	d8c01b15 	stw	r3,108(sp)
  805be4:	08094c40 	call	8094c4 <__muldf3>
  805be8:	180b883a 	mov	r5,r3
  805bec:	1009883a 	mov	r4,r2
  805bf0:	1823883a 	mov	r17,r3
  805bf4:	1021883a 	mov	r16,r2
  805bf8:	0809e800 	call	809e80 <__fixdfsi>
  805bfc:	1009883a 	mov	r4,r2
  805c00:	102b883a 	mov	r21,r2
  805c04:	0809d880 	call	809d88 <__floatsidf>
  805c08:	880b883a 	mov	r5,r17
  805c0c:	8009883a 	mov	r4,r16
  805c10:	180f883a 	mov	r7,r3
  805c14:	100d883a 	mov	r6,r2
  805c18:	08093d00 	call	8093d0 <__subdf3>
  805c1c:	1021883a 	mov	r16,r2
  805c20:	d9001b17 	ldw	r4,108(sp)
  805c24:	1823883a 	mov	r17,r3
  805c28:	dc001415 	stw	r16,80(sp)
  805c2c:	ad400c04 	addi	r21,r21,48
  805c30:	dc401515 	stw	r17,84(sp)
  805c34:	d8801a17 	ldw	r2,104(sp)
  805c38:	e5400005 	stb	r21,0(fp)
  805c3c:	202f883a 	mov	r23,r4
  805c40:	d9c01b17 	ldw	r7,108(sp)
  805c44:	d9001417 	ldw	r4,80(sp)
  805c48:	880b883a 	mov	r5,r17
  805c4c:	100d883a 	mov	r6,r2
  805c50:	102d883a 	mov	r22,r2
  805c54:	e7000044 	addi	fp,fp,1
  805c58:	0809d000 	call	809d00 <__ltdf2>
  805c5c:	103fc30e 	bge	r2,zero,805b6c <_dtoa_r+0x1064>
  805c60:	d9000417 	ldw	r4,16(sp)
  805c64:	d9000d15 	stw	r4,52(sp)
  805c68:	003d7106 	br	805230 <_dtoa_r+0x728>
  805c6c:	d9801717 	ldw	r6,92(sp)
  805c70:	00800084 	movi	r2,2
  805c74:	11bde60e 	bge	r2,r6,805410 <_dtoa_r+0x908>
  805c78:	203cfb1e 	bne	r4,zero,805068 <_dtoa_r+0x560>
  805c7c:	d9001617 	ldw	r4,88(sp)
  805c80:	900b883a 	mov	r5,r18
  805c84:	01800144 	movi	r6,5
  805c88:	000f883a 	mov	r7,zero
  805c8c:	08077280 	call	807728 <__multadd>
  805c90:	d9000717 	ldw	r4,28(sp)
  805c94:	100b883a 	mov	r5,r2
  805c98:	1025883a 	mov	r18,r2
  805c9c:	0806b640 	call	806b64 <__mcmp>
  805ca0:	00bcf10e 	bge	zero,r2,805068 <_dtoa_r+0x560>
  805ca4:	d8c00d17 	ldw	r3,52(sp)
  805ca8:	d9000517 	ldw	r4,20(sp)
  805cac:	d8000615 	stw	zero,24(sp)
  805cb0:	18c00044 	addi	r3,r3,1
  805cb4:	d8c00d15 	stw	r3,52(sp)
  805cb8:	00800c44 	movi	r2,49
  805cbc:	27000044 	addi	fp,r4,1
  805cc0:	20800005 	stb	r2,0(r4)
  805cc4:	003e8906 	br	8056ec <_dtoa_r+0xbe4>
  805cc8:	d8c00517 	ldw	r3,20(sp)
  805ccc:	003bc206 	br	804bd8 <_dtoa_r+0xd0>
  805cd0:	01802074 	movhi	r6,129
  805cd4:	31bc3604 	addi	r6,r6,-3880
  805cd8:	30c00917 	ldw	r3,36(r6)
  805cdc:	30800817 	ldw	r2,32(r6)
  805ce0:	d9001217 	ldw	r4,72(sp)
  805ce4:	d9401317 	ldw	r5,76(sp)
  805ce8:	180f883a 	mov	r7,r3
  805cec:	100d883a 	mov	r6,r2
  805cf0:	08098880 	call	809888 <__divdf3>
  805cf4:	948003cc 	andi	r18,r18,15
  805cf8:	058000c4 	movi	r22,3
  805cfc:	1029883a 	mov	r20,r2
  805d00:	182b883a 	mov	r21,r3
  805d04:	003c8906 	br	804f2c <_dtoa_r+0x424>
  805d08:	d9001017 	ldw	r4,64(sp)
  805d0c:	d9800917 	ldw	r6,36(sp)
  805d10:	0025883a 	mov	r18,zero
  805d14:	1105c83a 	sub	r2,r2,r4
  805d18:	2089883a 	add	r4,r4,r2
  805d1c:	308d883a 	add	r6,r6,r2
  805d20:	d9001015 	stw	r4,64(sp)
  805d24:	d9800915 	stw	r6,36(sp)
  805d28:	003e3206 	br	8055f4 <_dtoa_r+0xaec>
  805d2c:	28800044 	addi	r2,r5,1
  805d30:	27000044 	addi	fp,r4,1
  805d34:	20800005 	stb	r2,0(r4)
  805d38:	003e6c06 	br	8056ec <_dtoa_r+0xbe4>
  805d3c:	d8800f17 	ldw	r2,60(sp)
  805d40:	00bce016 	blt	zero,r2,8050c4 <_dtoa_r+0x5bc>
  805d44:	d9800f17 	ldw	r6,60(sp)
  805d48:	303cc51e 	bne	r6,zero,805060 <_dtoa_r+0x558>
  805d4c:	0005883a 	mov	r2,zero
  805d50:	00d00534 	movhi	r3,16404
  805d54:	980b883a 	mov	r5,r19
  805d58:	180f883a 	mov	r7,r3
  805d5c:	9009883a 	mov	r4,r18
  805d60:	100d883a 	mov	r6,r2
  805d64:	08094c40 	call	8094c4 <__muldf3>
  805d68:	180b883a 	mov	r5,r3
  805d6c:	a80f883a 	mov	r7,r21
  805d70:	1009883a 	mov	r4,r2
  805d74:	a00d883a 	mov	r6,r20
  805d78:	0809c780 	call	809c78 <__gedf2>
  805d7c:	103cb80e 	bge	r2,zero,805060 <_dtoa_r+0x558>
  805d80:	0027883a 	mov	r19,zero
  805d84:	0025883a 	mov	r18,zero
  805d88:	003fc606 	br	805ca4 <_dtoa_r+0x119c>
  805d8c:	99400117 	ldw	r5,4(r19)
  805d90:	d9001617 	ldw	r4,88(sp)
  805d94:	0806f880 	call	806f88 <_Balloc>
  805d98:	99800417 	ldw	r6,16(r19)
  805d9c:	11000304 	addi	r4,r2,12
  805da0:	99400304 	addi	r5,r19,12
  805da4:	318d883a 	add	r6,r6,r6
  805da8:	318d883a 	add	r6,r6,r6
  805dac:	31800204 	addi	r6,r6,8
  805db0:	1023883a 	mov	r17,r2
  805db4:	08068880 	call	806888 <memcpy>
  805db8:	d9001617 	ldw	r4,88(sp)
  805dbc:	880b883a 	mov	r5,r17
  805dc0:	01800044 	movi	r6,1
  805dc4:	080734c0 	call	80734c <__lshift>
  805dc8:	100b883a 	mov	r5,r2
  805dcc:	003d9c06 	br	805440 <_dtoa_r+0x938>
  805dd0:	00800e44 	movi	r2,57
  805dd4:	b8807026 	beq	r23,r2,805f98 <_dtoa_r+0x1490>
  805dd8:	b8800044 	addi	r2,r23,1
  805ddc:	b7000044 	addi	fp,r22,1
  805de0:	b0800005 	stb	r2,0(r22)
  805de4:	003e4106 	br	8056ec <_dtoa_r+0xbe4>
  805de8:	d8800317 	ldw	r2,12(sp)
  805dec:	01802074 	movhi	r6,129
  805df0:	31bc0404 	addi	r6,r6,-4080
  805df4:	b009883a 	mov	r4,r22
  805df8:	100e90fa 	slli	r7,r2,3
  805dfc:	b80b883a 	mov	r5,r23
  805e00:	398f883a 	add	r7,r7,r6
  805e04:	38bffe17 	ldw	r2,-8(r7)
  805e08:	d9800517 	ldw	r6,20(sp)
  805e0c:	38ffff17 	ldw	r3,-4(r7)
  805e10:	37000044 	addi	fp,r6,1
  805e14:	180f883a 	mov	r7,r3
  805e18:	100d883a 	mov	r6,r2
  805e1c:	08094c40 	call	8094c4 <__muldf3>
  805e20:	a80b883a 	mov	r5,r21
  805e24:	a009883a 	mov	r4,r20
  805e28:	182f883a 	mov	r23,r3
  805e2c:	102d883a 	mov	r22,r2
  805e30:	0809e800 	call	809e80 <__fixdfsi>
  805e34:	1009883a 	mov	r4,r2
  805e38:	1027883a 	mov	r19,r2
  805e3c:	0809d880 	call	809d88 <__floatsidf>
  805e40:	a80b883a 	mov	r5,r21
  805e44:	a009883a 	mov	r4,r20
  805e48:	180f883a 	mov	r7,r3
  805e4c:	100d883a 	mov	r6,r2
  805e50:	08093d00 	call	8093d0 <__subdf3>
  805e54:	180b883a 	mov	r5,r3
  805e58:	d8c00517 	ldw	r3,20(sp)
  805e5c:	9cc00c04 	addi	r19,r19,48
  805e60:	1009883a 	mov	r4,r2
  805e64:	1cc00005 	stb	r19,0(r3)
  805e68:	2021883a 	mov	r16,r4
  805e6c:	d9000317 	ldw	r4,12(sp)
  805e70:	00800044 	movi	r2,1
  805e74:	2823883a 	mov	r17,r5
  805e78:	20802226 	beq	r4,r2,805f04 <_dtoa_r+0x13fc>
  805e7c:	1029883a 	mov	r20,r2
  805e80:	0005883a 	mov	r2,zero
  805e84:	00d00934 	movhi	r3,16420
  805e88:	180f883a 	mov	r7,r3
  805e8c:	100d883a 	mov	r6,r2
  805e90:	880b883a 	mov	r5,r17
  805e94:	8009883a 	mov	r4,r16
  805e98:	08094c40 	call	8094c4 <__muldf3>
  805e9c:	180b883a 	mov	r5,r3
  805ea0:	1009883a 	mov	r4,r2
  805ea4:	1823883a 	mov	r17,r3
  805ea8:	1021883a 	mov	r16,r2
  805eac:	0809e800 	call	809e80 <__fixdfsi>
  805eb0:	1009883a 	mov	r4,r2
  805eb4:	102b883a 	mov	r21,r2
  805eb8:	0809d880 	call	809d88 <__floatsidf>
  805ebc:	880b883a 	mov	r5,r17
  805ec0:	8009883a 	mov	r4,r16
  805ec4:	180f883a 	mov	r7,r3
  805ec8:	100d883a 	mov	r6,r2
  805ecc:	08093d00 	call	8093d0 <__subdf3>
  805ed0:	180b883a 	mov	r5,r3
  805ed4:	d8c00517 	ldw	r3,20(sp)
  805ed8:	1009883a 	mov	r4,r2
  805edc:	ad400c04 	addi	r21,r21,48
  805ee0:	1d05883a 	add	r2,r3,r20
  805ee4:	15400005 	stb	r21,0(r2)
  805ee8:	2021883a 	mov	r16,r4
  805eec:	d9000317 	ldw	r4,12(sp)
  805ef0:	a5000044 	addi	r20,r20,1
  805ef4:	2823883a 	mov	r17,r5
  805ef8:	a13fe11e 	bne	r20,r4,805e80 <_dtoa_r+0x1378>
  805efc:	e505883a 	add	r2,fp,r20
  805f00:	173fffc4 	addi	fp,r2,-1
  805f04:	0025883a 	mov	r18,zero
  805f08:	04cff834 	movhi	r19,16352
  805f0c:	b009883a 	mov	r4,r22
  805f10:	b80b883a 	mov	r5,r23
  805f14:	900d883a 	mov	r6,r18
  805f18:	980f883a 	mov	r7,r19
  805f1c:	08094500 	call	809450 <__adddf3>
  805f20:	180b883a 	mov	r5,r3
  805f24:	1009883a 	mov	r4,r2
  805f28:	800d883a 	mov	r6,r16
  805f2c:	880f883a 	mov	r7,r17
  805f30:	0809d000 	call	809d00 <__ltdf2>
  805f34:	103cab16 	blt	r2,zero,8051e4 <_dtoa_r+0x6dc>
  805f38:	0009883a 	mov	r4,zero
  805f3c:	980b883a 	mov	r5,r19
  805f40:	b80f883a 	mov	r7,r23
  805f44:	b00d883a 	mov	r6,r22
  805f48:	08093d00 	call	8093d0 <__subdf3>
  805f4c:	180b883a 	mov	r5,r3
  805f50:	880f883a 	mov	r7,r17
  805f54:	1009883a 	mov	r4,r2
  805f58:	800d883a 	mov	r6,r16
  805f5c:	0809bf00 	call	809bf0 <__gtdf2>
  805f60:	00bc470e 	bge	zero,r2,805080 <_dtoa_r+0x578>
  805f64:	00c00c04 	movi	r3,48
  805f68:	e73fffc4 	addi	fp,fp,-1
  805f6c:	e0800007 	ldb	r2,0(fp)
  805f70:	10fffd26 	beq	r2,r3,805f68 <_dtoa_r+0x1460>
  805f74:	d9800417 	ldw	r6,16(sp)
  805f78:	e7000044 	addi	fp,fp,1
  805f7c:	d9800d15 	stw	r6,52(sp)
  805f80:	003cab06 	br	805230 <_dtoa_r+0x728>
  805f84:	d8c00f17 	ldw	r3,60(sp)
  805f88:	d9001117 	ldw	r4,68(sp)
  805f8c:	20e1c83a 	sub	r16,r4,r3
  805f90:	0007883a 	mov	r3,zero
  805f94:	003d9b06 	br	805604 <_dtoa_r+0xafc>
  805f98:	00800e44 	movi	r2,57
  805f9c:	b0800005 	stb	r2,0(r22)
  805fa0:	b5800044 	addi	r22,r22,1
  805fa4:	003dc106 	br	8056ac <_dtoa_r+0xba4>
  805fa8:	05800084 	movi	r22,2
  805fac:	003bf706 	br	804f8c <_dtoa_r+0x484>
  805fb0:	d9000f17 	ldw	r4,60(sp)
  805fb4:	013c000e 	bge	zero,r4,804fb8 <_dtoa_r+0x4b0>
  805fb8:	d9800e17 	ldw	r6,56(sp)
  805fbc:	01bc300e 	bge	zero,r6,805080 <_dtoa_r+0x578>
  805fc0:	0005883a 	mov	r2,zero
  805fc4:	00d00934 	movhi	r3,16420
  805fc8:	a80b883a 	mov	r5,r21
  805fcc:	180f883a 	mov	r7,r3
  805fd0:	a009883a 	mov	r4,r20
  805fd4:	100d883a 	mov	r6,r2
  805fd8:	08094c40 	call	8094c4 <__muldf3>
  805fdc:	b1000044 	addi	r4,r22,1
  805fe0:	1021883a 	mov	r16,r2
  805fe4:	1823883a 	mov	r17,r3
  805fe8:	0809d880 	call	809d88 <__floatsidf>
  805fec:	880b883a 	mov	r5,r17
  805ff0:	8009883a 	mov	r4,r16
  805ff4:	180f883a 	mov	r7,r3
  805ff8:	100d883a 	mov	r6,r2
  805ffc:	08094c40 	call	8094c4 <__muldf3>
  806000:	0011883a 	mov	r8,zero
  806004:	02500734 	movhi	r9,16412
  806008:	180b883a 	mov	r5,r3
  80600c:	480f883a 	mov	r7,r9
  806010:	1009883a 	mov	r4,r2
  806014:	400d883a 	mov	r6,r8
  806018:	08094500 	call	809450 <__adddf3>
  80601c:	102d883a 	mov	r22,r2
  806020:	00bf3034 	movhi	r2,64704
  806024:	10ef883a 	add	r23,r2,r3
  806028:	d8800d17 	ldw	r2,52(sp)
  80602c:	d8c00e17 	ldw	r3,56(sp)
  806030:	8029883a 	mov	r20,r16
  806034:	10bfffc4 	addi	r2,r2,-1
  806038:	882b883a 	mov	r21,r17
  80603c:	d8800415 	stw	r2,16(sp)
  806040:	d8c00315 	stw	r3,12(sp)
  806044:	003e8306 	br	805a54 <_dtoa_r+0xf4c>
  806048:	d8800117 	ldw	r2,4(sp)
  80604c:	dc001117 	ldw	r16,68(sp)
  806050:	dc801017 	ldw	r18,64(sp)
  806054:	00c00d84 	movi	r3,54
  806058:	1887c83a 	sub	r3,r3,r2
  80605c:	003d6906 	br	805604 <_dtoa_r+0xafc>
  806060:	01800044 	movi	r6,1
  806064:	3021883a 	mov	r16,r6
  806068:	d9800f15 	stw	r6,60(sp)
  80606c:	d9802615 	stw	r6,152(sp)
  806070:	d9800e15 	stw	r6,56(sp)
  806074:	003b9306 	br	804ec4 <_dtoa_r+0x3bc>
  806078:	b021883a 	mov	r16,r22
  80607c:	dd800f15 	stw	r22,60(sp)
  806080:	003b9006 	br	804ec4 <_dtoa_r+0x3bc>
  806084:	103e221e 	bne	r2,zero,805910 <_dtoa_r+0xe08>
  806088:	b880004c 	andi	r2,r23,1
  80608c:	1005003a 	cmpeq	r2,r2,zero
  806090:	103e1f1e 	bne	r2,zero,805910 <_dtoa_r+0xe08>
  806094:	003e1b06 	br	805904 <_dtoa_r+0xdfc>
  806098:	d9001617 	ldw	r4,88(sp)
  80609c:	980b883a 	mov	r5,r19
  8060a0:	01800284 	movi	r6,10
  8060a4:	000f883a 	mov	r7,zero
  8060a8:	08077280 	call	807728 <__multadd>
  8060ac:	d8c00e17 	ldw	r3,56(sp)
  8060b0:	1027883a 	mov	r19,r2
  8060b4:	d8c00f15 	stw	r3,60(sp)
  8060b8:	003cd306 	br	805408 <_dtoa_r+0x900>

008060bc <__sflags>:
  8060bc:	28c00007 	ldb	r3,0(r5)
  8060c0:	00801c84 	movi	r2,114
  8060c4:	18800926 	beq	r3,r2,8060ec <__sflags+0x30>
  8060c8:	00801dc4 	movi	r2,119
  8060cc:	18801426 	beq	r3,r2,806120 <__sflags+0x64>
  8060d0:	00801844 	movi	r2,97
  8060d4:	18801626 	beq	r3,r2,806130 <__sflags+0x74>
  8060d8:	0007883a 	mov	r3,zero
  8060dc:	00800584 	movi	r2,22
  8060e0:	20800015 	stw	r2,0(r4)
  8060e4:	1805883a 	mov	r2,r3
  8060e8:	f800283a 	ret
  8060ec:	000f883a 	mov	r7,zero
  8060f0:	0011883a 	mov	r8,zero
  8060f4:	00c00104 	movi	r3,4
  8060f8:	28800047 	ldb	r2,1(r5)
  8060fc:	10000426 	beq	r2,zero,806110 <__sflags+0x54>
  806100:	01000ac4 	movi	r4,43
  806104:	11000e26 	beq	r2,r4,806140 <__sflags+0x84>
  806108:	28800087 	ldb	r2,2(r5)
  80610c:	11000c26 	beq	r2,r4,806140 <__sflags+0x84>
  806110:	3a04b03a 	or	r2,r7,r8
  806114:	30800015 	stw	r2,0(r6)
  806118:	1805883a 	mov	r2,r3
  80611c:	f800283a 	ret
  806120:	01c00044 	movi	r7,1
  806124:	02018004 	movi	r8,1536
  806128:	00c00204 	movi	r3,8
  80612c:	003ff206 	br	8060f8 <__sflags+0x3c>
  806130:	01c00044 	movi	r7,1
  806134:	02008204 	movi	r8,520
  806138:	00c04204 	movi	r3,264
  80613c:	003fee06 	br	8060f8 <__sflags+0x3c>
  806140:	00bffcc4 	movi	r2,-13
  806144:	1884703a 	and	r2,r3,r2
  806148:	01c00084 	movi	r7,2
  80614c:	10c00414 	ori	r3,r2,16
  806150:	3a04b03a 	or	r2,r7,r8
  806154:	30800015 	stw	r2,0(r6)
  806158:	003fef06 	br	806118 <__sflags+0x5c>

0080615c <__sfvwrite_r>:
  80615c:	30800217 	ldw	r2,8(r6)
  806160:	defff504 	addi	sp,sp,-44
  806164:	df000915 	stw	fp,36(sp)
  806168:	dd800715 	stw	r22,28(sp)
  80616c:	dc800315 	stw	r18,12(sp)
  806170:	dfc00a15 	stw	ra,40(sp)
  806174:	ddc00815 	stw	r23,32(sp)
  806178:	dd400615 	stw	r21,24(sp)
  80617c:	dd000515 	stw	r20,20(sp)
  806180:	dcc00415 	stw	r19,16(sp)
  806184:	dc400215 	stw	r17,8(sp)
  806188:	dc000115 	stw	r16,4(sp)
  80618c:	302d883a 	mov	r22,r6
  806190:	2039883a 	mov	fp,r4
  806194:	2825883a 	mov	r18,r5
  806198:	10001c26 	beq	r2,zero,80620c <__sfvwrite_r+0xb0>
  80619c:	29c0030b 	ldhu	r7,12(r5)
  8061a0:	3880020c 	andi	r2,r7,8
  8061a4:	10002726 	beq	r2,zero,806244 <__sfvwrite_r+0xe8>
  8061a8:	28800417 	ldw	r2,16(r5)
  8061ac:	10002526 	beq	r2,zero,806244 <__sfvwrite_r+0xe8>
  8061b0:	3880008c 	andi	r2,r7,2
  8061b4:	b5400017 	ldw	r21,0(r22)
  8061b8:	10002826 	beq	r2,zero,80625c <__sfvwrite_r+0x100>
  8061bc:	0021883a 	mov	r16,zero
  8061c0:	0023883a 	mov	r17,zero
  8061c4:	880d883a 	mov	r6,r17
  8061c8:	e009883a 	mov	r4,fp
  8061cc:	00810004 	movi	r2,1024
  8061d0:	80006e26 	beq	r16,zero,80638c <__sfvwrite_r+0x230>
  8061d4:	800f883a 	mov	r7,r16
  8061d8:	91400717 	ldw	r5,28(r18)
  8061dc:	1400012e 	bgeu	r2,r16,8061e4 <__sfvwrite_r+0x88>
  8061e0:	100f883a 	mov	r7,r2
  8061e4:	90c00917 	ldw	r3,36(r18)
  8061e8:	183ee83a 	callr	r3
  8061ec:	1007883a 	mov	r3,r2
  8061f0:	80a1c83a 	sub	r16,r16,r2
  8061f4:	88a3883a 	add	r17,r17,r2
  8061f8:	00806d0e 	bge	zero,r2,8063b0 <__sfvwrite_r+0x254>
  8061fc:	b0800217 	ldw	r2,8(r22)
  806200:	10c5c83a 	sub	r2,r2,r3
  806204:	b0800215 	stw	r2,8(r22)
  806208:	103fee1e 	bne	r2,zero,8061c4 <__sfvwrite_r+0x68>
  80620c:	0009883a 	mov	r4,zero
  806210:	2005883a 	mov	r2,r4
  806214:	dfc00a17 	ldw	ra,40(sp)
  806218:	df000917 	ldw	fp,36(sp)
  80621c:	ddc00817 	ldw	r23,32(sp)
  806220:	dd800717 	ldw	r22,28(sp)
  806224:	dd400617 	ldw	r21,24(sp)
  806228:	dd000517 	ldw	r20,20(sp)
  80622c:	dcc00417 	ldw	r19,16(sp)
  806230:	dc800317 	ldw	r18,12(sp)
  806234:	dc400217 	ldw	r17,8(sp)
  806238:	dc000117 	ldw	r16,4(sp)
  80623c:	dec00b04 	addi	sp,sp,44
  806240:	f800283a 	ret
  806244:	08047180 	call	804718 <__swsetup_r>
  806248:	1000e41e 	bne	r2,zero,8065dc <__sfvwrite_r+0x480>
  80624c:	91c0030b 	ldhu	r7,12(r18)
  806250:	b5400017 	ldw	r21,0(r22)
  806254:	3880008c 	andi	r2,r7,2
  806258:	103fd81e 	bne	r2,zero,8061bc <__sfvwrite_r+0x60>
  80625c:	3880004c 	andi	r2,r7,1
  806260:	1005003a 	cmpeq	r2,r2,zero
  806264:	10005726 	beq	r2,zero,8063c4 <__sfvwrite_r+0x268>
  806268:	0029883a 	mov	r20,zero
  80626c:	002f883a 	mov	r23,zero
  806270:	a0004226 	beq	r20,zero,80637c <__sfvwrite_r+0x220>
  806274:	3880800c 	andi	r2,r7,512
  806278:	94000217 	ldw	r16,8(r18)
  80627c:	10008b26 	beq	r2,zero,8064ac <__sfvwrite_r+0x350>
  806280:	800d883a 	mov	r6,r16
  806284:	a400a536 	bltu	r20,r16,80651c <__sfvwrite_r+0x3c0>
  806288:	3881200c 	andi	r2,r7,1152
  80628c:	10002726 	beq	r2,zero,80632c <__sfvwrite_r+0x1d0>
  806290:	90800517 	ldw	r2,20(r18)
  806294:	92000417 	ldw	r8,16(r18)
  806298:	91400017 	ldw	r5,0(r18)
  80629c:	1087883a 	add	r3,r2,r2
  8062a0:	1887883a 	add	r3,r3,r2
  8062a4:	1808d7fa 	srli	r4,r3,31
  8062a8:	2a21c83a 	sub	r16,r5,r8
  8062ac:	80800044 	addi	r2,r16,1
  8062b0:	20c9883a 	add	r4,r4,r3
  8062b4:	2027d07a 	srai	r19,r4,1
  8062b8:	a085883a 	add	r2,r20,r2
  8062bc:	980d883a 	mov	r6,r19
  8062c0:	9880022e 	bgeu	r19,r2,8062cc <__sfvwrite_r+0x170>
  8062c4:	1027883a 	mov	r19,r2
  8062c8:	100d883a 	mov	r6,r2
  8062cc:	3881000c 	andi	r2,r7,1024
  8062d0:	1000b826 	beq	r2,zero,8065b4 <__sfvwrite_r+0x458>
  8062d4:	300b883a 	mov	r5,r6
  8062d8:	e009883a 	mov	r4,fp
  8062dc:	08019d40 	call	8019d4 <_malloc_r>
  8062e0:	10003126 	beq	r2,zero,8063a8 <__sfvwrite_r+0x24c>
  8062e4:	91400417 	ldw	r5,16(r18)
  8062e8:	1009883a 	mov	r4,r2
  8062ec:	800d883a 	mov	r6,r16
  8062f0:	1023883a 	mov	r17,r2
  8062f4:	08068880 	call	806888 <memcpy>
  8062f8:	90c0030b 	ldhu	r3,12(r18)
  8062fc:	00beffc4 	movi	r2,-1025
  806300:	1886703a 	and	r3,r3,r2
  806304:	18c02014 	ori	r3,r3,128
  806308:	90c0030d 	sth	r3,12(r18)
  80630c:	9c07c83a 	sub	r3,r19,r16
  806310:	8c05883a 	add	r2,r17,r16
  806314:	a00d883a 	mov	r6,r20
  806318:	a021883a 	mov	r16,r20
  80631c:	90800015 	stw	r2,0(r18)
  806320:	90c00215 	stw	r3,8(r18)
  806324:	94400415 	stw	r17,16(r18)
  806328:	94c00515 	stw	r19,20(r18)
  80632c:	91000017 	ldw	r4,0(r18)
  806330:	b80b883a 	mov	r5,r23
  806334:	a023883a 	mov	r17,r20
  806338:	08069280 	call	806928 <memmove>
  80633c:	90c00217 	ldw	r3,8(r18)
  806340:	90800017 	ldw	r2,0(r18)
  806344:	a027883a 	mov	r19,r20
  806348:	1c07c83a 	sub	r3,r3,r16
  80634c:	1405883a 	add	r2,r2,r16
  806350:	90c00215 	stw	r3,8(r18)
  806354:	a021883a 	mov	r16,r20
  806358:	90800015 	stw	r2,0(r18)
  80635c:	b0800217 	ldw	r2,8(r22)
  806360:	1405c83a 	sub	r2,r2,r16
  806364:	b0800215 	stw	r2,8(r22)
  806368:	103fa826 	beq	r2,zero,80620c <__sfvwrite_r+0xb0>
  80636c:	a469c83a 	sub	r20,r20,r17
  806370:	91c0030b 	ldhu	r7,12(r18)
  806374:	bcef883a 	add	r23,r23,r19
  806378:	a03fbe1e 	bne	r20,zero,806274 <__sfvwrite_r+0x118>
  80637c:	adc00017 	ldw	r23,0(r21)
  806380:	ad000117 	ldw	r20,4(r21)
  806384:	ad400204 	addi	r21,r21,8
  806388:	003fb906 	br	806270 <__sfvwrite_r+0x114>
  80638c:	ac400017 	ldw	r17,0(r21)
  806390:	ac000117 	ldw	r16,4(r21)
  806394:	ad400204 	addi	r21,r21,8
  806398:	003f8a06 	br	8061c4 <__sfvwrite_r+0x68>
  80639c:	91400417 	ldw	r5,16(r18)
  8063a0:	e009883a 	mov	r4,fp
  8063a4:	0800ed80 	call	800ed8 <_free_r>
  8063a8:	00800304 	movi	r2,12
  8063ac:	e0800015 	stw	r2,0(fp)
  8063b0:	9080030b 	ldhu	r2,12(r18)
  8063b4:	013fffc4 	movi	r4,-1
  8063b8:	10801014 	ori	r2,r2,64
  8063bc:	9080030d 	sth	r2,12(r18)
  8063c0:	003f9306 	br	806210 <__sfvwrite_r+0xb4>
  8063c4:	0027883a 	mov	r19,zero
  8063c8:	002f883a 	mov	r23,zero
  8063cc:	d8000015 	stw	zero,0(sp)
  8063d0:	0029883a 	mov	r20,zero
  8063d4:	98001e26 	beq	r19,zero,806450 <__sfvwrite_r+0x2f4>
  8063d8:	d8c00017 	ldw	r3,0(sp)
  8063dc:	1804c03a 	cmpne	r2,r3,zero
  8063e0:	10005e26 	beq	r2,zero,80655c <__sfvwrite_r+0x400>
  8063e4:	9821883a 	mov	r16,r19
  8063e8:	a4c0012e 	bgeu	r20,r19,8063f0 <__sfvwrite_r+0x294>
  8063ec:	a021883a 	mov	r16,r20
  8063f0:	91000017 	ldw	r4,0(r18)
  8063f4:	90800417 	ldw	r2,16(r18)
  8063f8:	91800217 	ldw	r6,8(r18)
  8063fc:	91c00517 	ldw	r7,20(r18)
  806400:	1100022e 	bgeu	r2,r4,80640c <__sfvwrite_r+0x2b0>
  806404:	31e3883a 	add	r17,r6,r7
  806408:	8c001616 	blt	r17,r16,806464 <__sfvwrite_r+0x308>
  80640c:	81c03816 	blt	r16,r7,8064f0 <__sfvwrite_r+0x394>
  806410:	90c00917 	ldw	r3,36(r18)
  806414:	91400717 	ldw	r5,28(r18)
  806418:	e009883a 	mov	r4,fp
  80641c:	b80d883a 	mov	r6,r23
  806420:	183ee83a 	callr	r3
  806424:	1023883a 	mov	r17,r2
  806428:	00bfe10e 	bge	zero,r2,8063b0 <__sfvwrite_r+0x254>
  80642c:	a469c83a 	sub	r20,r20,r17
  806430:	a0001826 	beq	r20,zero,806494 <__sfvwrite_r+0x338>
  806434:	b0800217 	ldw	r2,8(r22)
  806438:	1445c83a 	sub	r2,r2,r17
  80643c:	b0800215 	stw	r2,8(r22)
  806440:	103f7226 	beq	r2,zero,80620c <__sfvwrite_r+0xb0>
  806444:	9c67c83a 	sub	r19,r19,r17
  806448:	bc6f883a 	add	r23,r23,r17
  80644c:	983fe21e 	bne	r19,zero,8063d8 <__sfvwrite_r+0x27c>
  806450:	adc00017 	ldw	r23,0(r21)
  806454:	acc00117 	ldw	r19,4(r21)
  806458:	ad400204 	addi	r21,r21,8
  80645c:	d8000015 	stw	zero,0(sp)
  806460:	003fdc06 	br	8063d4 <__sfvwrite_r+0x278>
  806464:	b80b883a 	mov	r5,r23
  806468:	880d883a 	mov	r6,r17
  80646c:	08069280 	call	806928 <memmove>
  806470:	90c00017 	ldw	r3,0(r18)
  806474:	e009883a 	mov	r4,fp
  806478:	900b883a 	mov	r5,r18
  80647c:	1c47883a 	add	r3,r3,r17
  806480:	90c00015 	stw	r3,0(r18)
  806484:	08007180 	call	800718 <_fflush_r>
  806488:	103fc91e 	bne	r2,zero,8063b0 <__sfvwrite_r+0x254>
  80648c:	a469c83a 	sub	r20,r20,r17
  806490:	a03fe81e 	bne	r20,zero,806434 <__sfvwrite_r+0x2d8>
  806494:	e009883a 	mov	r4,fp
  806498:	900b883a 	mov	r5,r18
  80649c:	08007180 	call	800718 <_fflush_r>
  8064a0:	103fc31e 	bne	r2,zero,8063b0 <__sfvwrite_r+0x254>
  8064a4:	d8000015 	stw	zero,0(sp)
  8064a8:	003fe206 	br	806434 <__sfvwrite_r+0x2d8>
  8064ac:	91000017 	ldw	r4,0(r18)
  8064b0:	90800417 	ldw	r2,16(r18)
  8064b4:	1100022e 	bgeu	r2,r4,8064c0 <__sfvwrite_r+0x364>
  8064b8:	8023883a 	mov	r17,r16
  8064bc:	85003136 	bltu	r16,r20,806584 <__sfvwrite_r+0x428>
  8064c0:	91c00517 	ldw	r7,20(r18)
  8064c4:	a1c01836 	bltu	r20,r7,806528 <__sfvwrite_r+0x3cc>
  8064c8:	90c00917 	ldw	r3,36(r18)
  8064cc:	91400717 	ldw	r5,28(r18)
  8064d0:	e009883a 	mov	r4,fp
  8064d4:	b80d883a 	mov	r6,r23
  8064d8:	183ee83a 	callr	r3
  8064dc:	1021883a 	mov	r16,r2
  8064e0:	00bfb30e 	bge	zero,r2,8063b0 <__sfvwrite_r+0x254>
  8064e4:	1023883a 	mov	r17,r2
  8064e8:	1027883a 	mov	r19,r2
  8064ec:	003f9b06 	br	80635c <__sfvwrite_r+0x200>
  8064f0:	b80b883a 	mov	r5,r23
  8064f4:	800d883a 	mov	r6,r16
  8064f8:	08069280 	call	806928 <memmove>
  8064fc:	90c00217 	ldw	r3,8(r18)
  806500:	90800017 	ldw	r2,0(r18)
  806504:	8023883a 	mov	r17,r16
  806508:	1c07c83a 	sub	r3,r3,r16
  80650c:	1405883a 	add	r2,r2,r16
  806510:	90c00215 	stw	r3,8(r18)
  806514:	90800015 	stw	r2,0(r18)
  806518:	003fc406 	br	80642c <__sfvwrite_r+0x2d0>
  80651c:	a00d883a 	mov	r6,r20
  806520:	a021883a 	mov	r16,r20
  806524:	003f8106 	br	80632c <__sfvwrite_r+0x1d0>
  806528:	b80b883a 	mov	r5,r23
  80652c:	a00d883a 	mov	r6,r20
  806530:	08069280 	call	806928 <memmove>
  806534:	90c00217 	ldw	r3,8(r18)
  806538:	90800017 	ldw	r2,0(r18)
  80653c:	a021883a 	mov	r16,r20
  806540:	1d07c83a 	sub	r3,r3,r20
  806544:	1505883a 	add	r2,r2,r20
  806548:	a023883a 	mov	r17,r20
  80654c:	a027883a 	mov	r19,r20
  806550:	90c00215 	stw	r3,8(r18)
  806554:	90800015 	stw	r2,0(r18)
  806558:	003f8006 	br	80635c <__sfvwrite_r+0x200>
  80655c:	b809883a 	mov	r4,r23
  806560:	01400284 	movi	r5,10
  806564:	980d883a 	mov	r6,r19
  806568:	08067a40 	call	8067a4 <memchr>
  80656c:	10001726 	beq	r2,zero,8065cc <__sfvwrite_r+0x470>
  806570:	15c5c83a 	sub	r2,r2,r23
  806574:	15000044 	addi	r20,r2,1
  806578:	00800044 	movi	r2,1
  80657c:	d8800015 	stw	r2,0(sp)
  806580:	003f9806 	br	8063e4 <__sfvwrite_r+0x288>
  806584:	b80b883a 	mov	r5,r23
  806588:	800d883a 	mov	r6,r16
  80658c:	08069280 	call	806928 <memmove>
  806590:	90c00017 	ldw	r3,0(r18)
  806594:	e009883a 	mov	r4,fp
  806598:	900b883a 	mov	r5,r18
  80659c:	1c07883a 	add	r3,r3,r16
  8065a0:	90c00015 	stw	r3,0(r18)
  8065a4:	8027883a 	mov	r19,r16
  8065a8:	08007180 	call	800718 <_fflush_r>
  8065ac:	103f6b26 	beq	r2,zero,80635c <__sfvwrite_r+0x200>
  8065b0:	003f7f06 	br	8063b0 <__sfvwrite_r+0x254>
  8065b4:	400b883a 	mov	r5,r8
  8065b8:	e009883a 	mov	r4,fp
  8065bc:	0807b0c0 	call	807b0c <_realloc_r>
  8065c0:	103f7626 	beq	r2,zero,80639c <__sfvwrite_r+0x240>
  8065c4:	1023883a 	mov	r17,r2
  8065c8:	003f5006 	br	80630c <__sfvwrite_r+0x1b0>
  8065cc:	00c00044 	movi	r3,1
  8065d0:	9d000044 	addi	r20,r19,1
  8065d4:	d8c00015 	stw	r3,0(sp)
  8065d8:	003f8206 	br	8063e4 <__sfvwrite_r+0x288>
  8065dc:	9080030b 	ldhu	r2,12(r18)
  8065e0:	00c00244 	movi	r3,9
  8065e4:	013fffc4 	movi	r4,-1
  8065e8:	10801014 	ori	r2,r2,64
  8065ec:	9080030d 	sth	r2,12(r18)
  8065f0:	e0c00015 	stw	r3,0(fp)
  8065f4:	003f0606 	br	806210 <__sfvwrite_r+0xb4>

008065f8 <_isatty_r>:
  8065f8:	defffd04 	addi	sp,sp,-12
  8065fc:	dc000015 	stw	r16,0(sp)
  806600:	04002074 	movhi	r16,129
  806604:	840b6b04 	addi	r16,r16,11692
  806608:	dc400115 	stw	r17,4(sp)
  80660c:	80000015 	stw	zero,0(r16)
  806610:	2023883a 	mov	r17,r4
  806614:	2809883a 	mov	r4,r5
  806618:	dfc00215 	stw	ra,8(sp)
  80661c:	080abec0 	call	80abec <isatty>
  806620:	1007883a 	mov	r3,r2
  806624:	00bfffc4 	movi	r2,-1
  806628:	18800626 	beq	r3,r2,806644 <_isatty_r+0x4c>
  80662c:	1805883a 	mov	r2,r3
  806630:	dfc00217 	ldw	ra,8(sp)
  806634:	dc400117 	ldw	r17,4(sp)
  806638:	dc000017 	ldw	r16,0(sp)
  80663c:	dec00304 	addi	sp,sp,12
  806640:	f800283a 	ret
  806644:	80800017 	ldw	r2,0(r16)
  806648:	103ff826 	beq	r2,zero,80662c <_isatty_r+0x34>
  80664c:	88800015 	stw	r2,0(r17)
  806650:	1805883a 	mov	r2,r3
  806654:	dfc00217 	ldw	ra,8(sp)
  806658:	dc400117 	ldw	r17,4(sp)
  80665c:	dc000017 	ldw	r16,0(sp)
  806660:	dec00304 	addi	sp,sp,12
  806664:	f800283a 	ret

00806668 <__locale_charset>:
  806668:	d0a00517 	ldw	r2,-32748(gp)
  80666c:	f800283a 	ret

00806670 <_localeconv_r>:
  806670:	00802074 	movhi	r2,129
  806674:	10bbf804 	addi	r2,r2,-4128
  806678:	f800283a 	ret

0080667c <localeconv>:
  80667c:	00802074 	movhi	r2,129
  806680:	10844704 	addi	r2,r2,4380
  806684:	11000017 	ldw	r4,0(r2)
  806688:	08066701 	jmpi	806670 <_localeconv_r>

0080668c <_setlocale_r>:
  80668c:	defffc04 	addi	sp,sp,-16
  806690:	00c02074 	movhi	r3,129
  806694:	18fbce04 	addi	r3,r3,-4296
  806698:	dc800215 	stw	r18,8(sp)
  80669c:	dc400115 	stw	r17,4(sp)
  8066a0:	dc000015 	stw	r16,0(sp)
  8066a4:	2023883a 	mov	r17,r4
  8066a8:	2825883a 	mov	r18,r5
  8066ac:	dfc00315 	stw	ra,12(sp)
  8066b0:	3021883a 	mov	r16,r6
  8066b4:	3009883a 	mov	r4,r6
  8066b8:	180b883a 	mov	r5,r3
  8066bc:	30000926 	beq	r6,zero,8066e4 <_setlocale_r+0x58>
  8066c0:	08081700 	call	808170 <strcmp>
  8066c4:	8009883a 	mov	r4,r16
  8066c8:	01402074 	movhi	r5,129
  8066cc:	297bdf04 	addi	r5,r5,-4228
  8066d0:	10000b1e 	bne	r2,zero,806700 <_setlocale_r+0x74>
  8066d4:	8c000d15 	stw	r16,52(r17)
  8066d8:	8c800c15 	stw	r18,48(r17)
  8066dc:	00c02074 	movhi	r3,129
  8066e0:	18fbce04 	addi	r3,r3,-4296
  8066e4:	1805883a 	mov	r2,r3
  8066e8:	dfc00317 	ldw	ra,12(sp)
  8066ec:	dc800217 	ldw	r18,8(sp)
  8066f0:	dc400117 	ldw	r17,4(sp)
  8066f4:	dc000017 	ldw	r16,0(sp)
  8066f8:	dec00404 	addi	sp,sp,16
  8066fc:	f800283a 	ret
  806700:	08081700 	call	808170 <strcmp>
  806704:	0007883a 	mov	r3,zero
  806708:	103ff226 	beq	r2,zero,8066d4 <_setlocale_r+0x48>
  80670c:	003ff506 	br	8066e4 <_setlocale_r+0x58>

00806710 <setlocale>:
  806710:	01802074 	movhi	r6,129
  806714:	31844704 	addi	r6,r6,4380
  806718:	2007883a 	mov	r3,r4
  80671c:	31000017 	ldw	r4,0(r6)
  806720:	280d883a 	mov	r6,r5
  806724:	180b883a 	mov	r5,r3
  806728:	080668c1 	jmpi	80668c <_setlocale_r>

0080672c <_lseek_r>:
  80672c:	defffd04 	addi	sp,sp,-12
  806730:	dc000015 	stw	r16,0(sp)
  806734:	04002074 	movhi	r16,129
  806738:	840b6b04 	addi	r16,r16,11692
  80673c:	dc400115 	stw	r17,4(sp)
  806740:	80000015 	stw	zero,0(r16)
  806744:	2023883a 	mov	r17,r4
  806748:	2809883a 	mov	r4,r5
  80674c:	300b883a 	mov	r5,r6
  806750:	380d883a 	mov	r6,r7
  806754:	dfc00215 	stw	ra,8(sp)
  806758:	080adfc0 	call	80adfc <lseek>
  80675c:	1007883a 	mov	r3,r2
  806760:	00bfffc4 	movi	r2,-1
  806764:	18800626 	beq	r3,r2,806780 <_lseek_r+0x54>
  806768:	1805883a 	mov	r2,r3
  80676c:	dfc00217 	ldw	ra,8(sp)
  806770:	dc400117 	ldw	r17,4(sp)
  806774:	dc000017 	ldw	r16,0(sp)
  806778:	dec00304 	addi	sp,sp,12
  80677c:	f800283a 	ret
  806780:	80800017 	ldw	r2,0(r16)
  806784:	103ff826 	beq	r2,zero,806768 <_lseek_r+0x3c>
  806788:	88800015 	stw	r2,0(r17)
  80678c:	1805883a 	mov	r2,r3
  806790:	dfc00217 	ldw	ra,8(sp)
  806794:	dc400117 	ldw	r17,4(sp)
  806798:	dc000017 	ldw	r16,0(sp)
  80679c:	dec00304 	addi	sp,sp,12
  8067a0:	f800283a 	ret

008067a4 <memchr>:
  8067a4:	008000c4 	movi	r2,3
  8067a8:	29403fcc 	andi	r5,r5,255
  8067ac:	2007883a 	mov	r3,r4
  8067b0:	1180022e 	bgeu	r2,r6,8067bc <memchr+0x18>
  8067b4:	2084703a 	and	r2,r4,r2
  8067b8:	10000b26 	beq	r2,zero,8067e8 <memchr+0x44>
  8067bc:	313fffc4 	addi	r4,r6,-1
  8067c0:	3000051e 	bne	r6,zero,8067d8 <memchr+0x34>
  8067c4:	00002c06 	br	806878 <memchr+0xd4>
  8067c8:	213fffc4 	addi	r4,r4,-1
  8067cc:	00bfffc4 	movi	r2,-1
  8067d0:	18c00044 	addi	r3,r3,1
  8067d4:	20802826 	beq	r4,r2,806878 <memchr+0xd4>
  8067d8:	18800003 	ldbu	r2,0(r3)
  8067dc:	28bffa1e 	bne	r5,r2,8067c8 <memchr+0x24>
  8067e0:	1805883a 	mov	r2,r3
  8067e4:	f800283a 	ret
  8067e8:	0011883a 	mov	r8,zero
  8067ec:	0007883a 	mov	r3,zero
  8067f0:	01c00104 	movi	r7,4
  8067f4:	4004923a 	slli	r2,r8,8
  8067f8:	18c00044 	addi	r3,r3,1
  8067fc:	1151883a 	add	r8,r2,r5
  806800:	19fffc1e 	bne	r3,r7,8067f4 <memchr+0x50>
  806804:	02bfbff4 	movhi	r10,65279
  806808:	52bfbfc4 	addi	r10,r10,-257
  80680c:	02602074 	movhi	r9,32897
  806810:	4a602004 	addi	r9,r9,-32640
  806814:	02c000c4 	movi	r11,3
  806818:	20800017 	ldw	r2,0(r4)
  80681c:	31bfff04 	addi	r6,r6,-4
  806820:	200f883a 	mov	r7,r4
  806824:	1204f03a 	xor	r2,r2,r8
  806828:	1287883a 	add	r3,r2,r10
  80682c:	1a46703a 	and	r3,r3,r9
  806830:	0084303a 	nor	r2,zero,r2
  806834:	10c4703a 	and	r2,r2,r3
  806838:	10000b26 	beq	r2,zero,806868 <memchr+0xc4>
  80683c:	20800003 	ldbu	r2,0(r4)
  806840:	28800f26 	beq	r5,r2,806880 <memchr+0xdc>
  806844:	20800043 	ldbu	r2,1(r4)
  806848:	21c00044 	addi	r7,r4,1
  80684c:	28800c26 	beq	r5,r2,806880 <memchr+0xdc>
  806850:	20800083 	ldbu	r2,2(r4)
  806854:	21c00084 	addi	r7,r4,2
  806858:	28800926 	beq	r5,r2,806880 <memchr+0xdc>
  80685c:	208000c3 	ldbu	r2,3(r4)
  806860:	21c000c4 	addi	r7,r4,3
  806864:	28800626 	beq	r5,r2,806880 <memchr+0xdc>
  806868:	21000104 	addi	r4,r4,4
  80686c:	59bfea36 	bltu	r11,r6,806818 <memchr+0x74>
  806870:	2007883a 	mov	r3,r4
  806874:	003fd106 	br	8067bc <memchr+0x18>
  806878:	0005883a 	mov	r2,zero
  80687c:	f800283a 	ret
  806880:	3805883a 	mov	r2,r7
  806884:	f800283a 	ret

00806888 <memcpy>:
  806888:	01c003c4 	movi	r7,15
  80688c:	2007883a 	mov	r3,r4
  806890:	3980032e 	bgeu	r7,r6,8068a0 <memcpy+0x18>
  806894:	2904b03a 	or	r2,r5,r4
  806898:	108000cc 	andi	r2,r2,3
  80689c:	10000926 	beq	r2,zero,8068c4 <memcpy+0x3c>
  8068a0:	30000626 	beq	r6,zero,8068bc <memcpy+0x34>
  8068a4:	30cd883a 	add	r6,r6,r3
  8068a8:	28800003 	ldbu	r2,0(r5)
  8068ac:	29400044 	addi	r5,r5,1
  8068b0:	18800005 	stb	r2,0(r3)
  8068b4:	18c00044 	addi	r3,r3,1
  8068b8:	30fffb1e 	bne	r6,r3,8068a8 <memcpy+0x20>
  8068bc:	2005883a 	mov	r2,r4
  8068c0:	f800283a 	ret
  8068c4:	3811883a 	mov	r8,r7
  8068c8:	200f883a 	mov	r7,r4
  8068cc:	28c00017 	ldw	r3,0(r5)
  8068d0:	31bffc04 	addi	r6,r6,-16
  8068d4:	38c00015 	stw	r3,0(r7)
  8068d8:	28800117 	ldw	r2,4(r5)
  8068dc:	38800115 	stw	r2,4(r7)
  8068e0:	28c00217 	ldw	r3,8(r5)
  8068e4:	38c00215 	stw	r3,8(r7)
  8068e8:	28800317 	ldw	r2,12(r5)
  8068ec:	29400404 	addi	r5,r5,16
  8068f0:	38800315 	stw	r2,12(r7)
  8068f4:	39c00404 	addi	r7,r7,16
  8068f8:	41bff436 	bltu	r8,r6,8068cc <memcpy+0x44>
  8068fc:	008000c4 	movi	r2,3
  806900:	1180072e 	bgeu	r2,r6,806920 <memcpy+0x98>
  806904:	1007883a 	mov	r3,r2
  806908:	28800017 	ldw	r2,0(r5)
  80690c:	31bfff04 	addi	r6,r6,-4
  806910:	29400104 	addi	r5,r5,4
  806914:	38800015 	stw	r2,0(r7)
  806918:	39c00104 	addi	r7,r7,4
  80691c:	19bffa36 	bltu	r3,r6,806908 <memcpy+0x80>
  806920:	3807883a 	mov	r3,r7
  806924:	003fde06 	br	8068a0 <memcpy+0x18>

00806928 <memmove>:
  806928:	2807883a 	mov	r3,r5
  80692c:	2011883a 	mov	r8,r4
  806930:	29000c2e 	bgeu	r5,r4,806964 <memmove+0x3c>
  806934:	298f883a 	add	r7,r5,r6
  806938:	21c00a2e 	bgeu	r4,r7,806964 <memmove+0x3c>
  80693c:	30000726 	beq	r6,zero,80695c <memmove+0x34>
  806940:	2187883a 	add	r3,r4,r6
  806944:	198dc83a 	sub	r6,r3,r6
  806948:	39ffffc4 	addi	r7,r7,-1
  80694c:	38800003 	ldbu	r2,0(r7)
  806950:	18ffffc4 	addi	r3,r3,-1
  806954:	18800005 	stb	r2,0(r3)
  806958:	19bffb1e 	bne	r3,r6,806948 <memmove+0x20>
  80695c:	2005883a 	mov	r2,r4
  806960:	f800283a 	ret
  806964:	01c003c4 	movi	r7,15
  806968:	39800a36 	bltu	r7,r6,806994 <memmove+0x6c>
  80696c:	303ffb26 	beq	r6,zero,80695c <memmove+0x34>
  806970:	400f883a 	mov	r7,r8
  806974:	320d883a 	add	r6,r6,r8
  806978:	28800003 	ldbu	r2,0(r5)
  80697c:	29400044 	addi	r5,r5,1
  806980:	38800005 	stb	r2,0(r7)
  806984:	39c00044 	addi	r7,r7,1
  806988:	39bffb1e 	bne	r7,r6,806978 <memmove+0x50>
  80698c:	2005883a 	mov	r2,r4
  806990:	f800283a 	ret
  806994:	1904b03a 	or	r2,r3,r4
  806998:	108000cc 	andi	r2,r2,3
  80699c:	103ff31e 	bne	r2,zero,80696c <memmove+0x44>
  8069a0:	3811883a 	mov	r8,r7
  8069a4:	180b883a 	mov	r5,r3
  8069a8:	200f883a 	mov	r7,r4
  8069ac:	28c00017 	ldw	r3,0(r5)
  8069b0:	31bffc04 	addi	r6,r6,-16
  8069b4:	38c00015 	stw	r3,0(r7)
  8069b8:	28800117 	ldw	r2,4(r5)
  8069bc:	38800115 	stw	r2,4(r7)
  8069c0:	28c00217 	ldw	r3,8(r5)
  8069c4:	38c00215 	stw	r3,8(r7)
  8069c8:	28800317 	ldw	r2,12(r5)
  8069cc:	29400404 	addi	r5,r5,16
  8069d0:	38800315 	stw	r2,12(r7)
  8069d4:	39c00404 	addi	r7,r7,16
  8069d8:	41bff436 	bltu	r8,r6,8069ac <memmove+0x84>
  8069dc:	008000c4 	movi	r2,3
  8069e0:	1180072e 	bgeu	r2,r6,806a00 <memmove+0xd8>
  8069e4:	1007883a 	mov	r3,r2
  8069e8:	28800017 	ldw	r2,0(r5)
  8069ec:	31bfff04 	addi	r6,r6,-4
  8069f0:	29400104 	addi	r5,r5,4
  8069f4:	38800015 	stw	r2,0(r7)
  8069f8:	39c00104 	addi	r7,r7,4
  8069fc:	19bffa36 	bltu	r3,r6,8069e8 <memmove+0xc0>
  806a00:	3811883a 	mov	r8,r7
  806a04:	003fd906 	br	80696c <memmove+0x44>

00806a08 <_Bfree>:
  806a08:	28000826 	beq	r5,zero,806a2c <_Bfree+0x24>
  806a0c:	28800117 	ldw	r2,4(r5)
  806a10:	21001317 	ldw	r4,76(r4)
  806a14:	1085883a 	add	r2,r2,r2
  806a18:	1085883a 	add	r2,r2,r2
  806a1c:	1105883a 	add	r2,r2,r4
  806a20:	10c00017 	ldw	r3,0(r2)
  806a24:	28c00015 	stw	r3,0(r5)
  806a28:	11400015 	stw	r5,0(r2)
  806a2c:	f800283a 	ret

00806a30 <__hi0bits>:
  806a30:	20bfffec 	andhi	r2,r4,65535
  806a34:	10001426 	beq	r2,zero,806a88 <__hi0bits+0x58>
  806a38:	0007883a 	mov	r3,zero
  806a3c:	20bfc02c 	andhi	r2,r4,65280
  806a40:	1000021e 	bne	r2,zero,806a4c <__hi0bits+0x1c>
  806a44:	2008923a 	slli	r4,r4,8
  806a48:	18c00204 	addi	r3,r3,8
  806a4c:	20bc002c 	andhi	r2,r4,61440
  806a50:	1000021e 	bne	r2,zero,806a5c <__hi0bits+0x2c>
  806a54:	2008913a 	slli	r4,r4,4
  806a58:	18c00104 	addi	r3,r3,4
  806a5c:	20b0002c 	andhi	r2,r4,49152
  806a60:	1000031e 	bne	r2,zero,806a70 <__hi0bits+0x40>
  806a64:	2105883a 	add	r2,r4,r4
  806a68:	18c00084 	addi	r3,r3,2
  806a6c:	1089883a 	add	r4,r2,r2
  806a70:	20000316 	blt	r4,zero,806a80 <__hi0bits+0x50>
  806a74:	2090002c 	andhi	r2,r4,16384
  806a78:	10000626 	beq	r2,zero,806a94 <__hi0bits+0x64>
  806a7c:	18c00044 	addi	r3,r3,1
  806a80:	1805883a 	mov	r2,r3
  806a84:	f800283a 	ret
  806a88:	2008943a 	slli	r4,r4,16
  806a8c:	00c00404 	movi	r3,16
  806a90:	003fea06 	br	806a3c <__hi0bits+0xc>
  806a94:	00c00804 	movi	r3,32
  806a98:	1805883a 	mov	r2,r3
  806a9c:	f800283a 	ret

00806aa0 <__lo0bits>:
  806aa0:	20c00017 	ldw	r3,0(r4)
  806aa4:	188001cc 	andi	r2,r3,7
  806aa8:	10000a26 	beq	r2,zero,806ad4 <__lo0bits+0x34>
  806aac:	1880004c 	andi	r2,r3,1
  806ab0:	1005003a 	cmpeq	r2,r2,zero
  806ab4:	10002126 	beq	r2,zero,806b3c <__lo0bits+0x9c>
  806ab8:	1880008c 	andi	r2,r3,2
  806abc:	1000251e 	bne	r2,zero,806b54 <__lo0bits+0xb4>
  806ac0:	1804d0ba 	srli	r2,r3,2
  806ac4:	01400084 	movi	r5,2
  806ac8:	20800015 	stw	r2,0(r4)
  806acc:	2805883a 	mov	r2,r5
  806ad0:	f800283a 	ret
  806ad4:	18bfffcc 	andi	r2,r3,65535
  806ad8:	10001526 	beq	r2,zero,806b30 <__lo0bits+0x90>
  806adc:	000b883a 	mov	r5,zero
  806ae0:	18803fcc 	andi	r2,r3,255
  806ae4:	1000021e 	bne	r2,zero,806af0 <__lo0bits+0x50>
  806ae8:	1806d23a 	srli	r3,r3,8
  806aec:	29400204 	addi	r5,r5,8
  806af0:	188003cc 	andi	r2,r3,15
  806af4:	1000021e 	bne	r2,zero,806b00 <__lo0bits+0x60>
  806af8:	1806d13a 	srli	r3,r3,4
  806afc:	29400104 	addi	r5,r5,4
  806b00:	188000cc 	andi	r2,r3,3
  806b04:	1000021e 	bne	r2,zero,806b10 <__lo0bits+0x70>
  806b08:	1806d0ba 	srli	r3,r3,2
  806b0c:	29400084 	addi	r5,r5,2
  806b10:	1880004c 	andi	r2,r3,1
  806b14:	1000031e 	bne	r2,zero,806b24 <__lo0bits+0x84>
  806b18:	1806d07a 	srli	r3,r3,1
  806b1c:	18000a26 	beq	r3,zero,806b48 <__lo0bits+0xa8>
  806b20:	29400044 	addi	r5,r5,1
  806b24:	2805883a 	mov	r2,r5
  806b28:	20c00015 	stw	r3,0(r4)
  806b2c:	f800283a 	ret
  806b30:	1806d43a 	srli	r3,r3,16
  806b34:	01400404 	movi	r5,16
  806b38:	003fe906 	br	806ae0 <__lo0bits+0x40>
  806b3c:	000b883a 	mov	r5,zero
  806b40:	2805883a 	mov	r2,r5
  806b44:	f800283a 	ret
  806b48:	01400804 	movi	r5,32
  806b4c:	2805883a 	mov	r2,r5
  806b50:	f800283a 	ret
  806b54:	1804d07a 	srli	r2,r3,1
  806b58:	01400044 	movi	r5,1
  806b5c:	20800015 	stw	r2,0(r4)
  806b60:	003fda06 	br	806acc <__lo0bits+0x2c>

00806b64 <__mcmp>:
  806b64:	20800417 	ldw	r2,16(r4)
  806b68:	28c00417 	ldw	r3,16(r5)
  806b6c:	10cfc83a 	sub	r7,r2,r3
  806b70:	38000c1e 	bne	r7,zero,806ba4 <__mcmp+0x40>
  806b74:	18c5883a 	add	r2,r3,r3
  806b78:	1085883a 	add	r2,r2,r2
  806b7c:	10c00504 	addi	r3,r2,20
  806b80:	21000504 	addi	r4,r4,20
  806b84:	28cb883a 	add	r5,r5,r3
  806b88:	2085883a 	add	r2,r4,r2
  806b8c:	10bfff04 	addi	r2,r2,-4
  806b90:	297fff04 	addi	r5,r5,-4
  806b94:	11800017 	ldw	r6,0(r2)
  806b98:	28c00017 	ldw	r3,0(r5)
  806b9c:	30c0031e 	bne	r6,r3,806bac <__mcmp+0x48>
  806ba0:	20bffa36 	bltu	r4,r2,806b8c <__mcmp+0x28>
  806ba4:	3805883a 	mov	r2,r7
  806ba8:	f800283a 	ret
  806bac:	30c00336 	bltu	r6,r3,806bbc <__mcmp+0x58>
  806bb0:	01c00044 	movi	r7,1
  806bb4:	3805883a 	mov	r2,r7
  806bb8:	f800283a 	ret
  806bbc:	01ffffc4 	movi	r7,-1
  806bc0:	003ff806 	br	806ba4 <__mcmp+0x40>

00806bc4 <__ulp>:
  806bc4:	295ffc2c 	andhi	r5,r5,32752
  806bc8:	013f3034 	movhi	r4,64704
  806bcc:	290b883a 	add	r5,r5,r4
  806bd0:	0145c83a 	sub	r2,zero,r5
  806bd4:	1007d53a 	srai	r3,r2,20
  806bd8:	000d883a 	mov	r6,zero
  806bdc:	0140040e 	bge	zero,r5,806bf0 <__ulp+0x2c>
  806be0:	280f883a 	mov	r7,r5
  806be4:	3807883a 	mov	r3,r7
  806be8:	3005883a 	mov	r2,r6
  806bec:	f800283a 	ret
  806bf0:	008004c4 	movi	r2,19
  806bf4:	193ffb04 	addi	r4,r3,-20
  806bf8:	10c00c0e 	bge	r2,r3,806c2c <__ulp+0x68>
  806bfc:	008007c4 	movi	r2,31
  806c00:	1107c83a 	sub	r3,r2,r4
  806c04:	00800784 	movi	r2,30
  806c08:	01400044 	movi	r5,1
  806c0c:	11000216 	blt	r2,r4,806c18 <__ulp+0x54>
  806c10:	00800044 	movi	r2,1
  806c14:	10ca983a 	sll	r5,r2,r3
  806c18:	000f883a 	mov	r7,zero
  806c1c:	280d883a 	mov	r6,r5
  806c20:	3807883a 	mov	r3,r7
  806c24:	3005883a 	mov	r2,r6
  806c28:	f800283a 	ret
  806c2c:	00800234 	movhi	r2,8
  806c30:	10cfd83a 	sra	r7,r2,r3
  806c34:	000d883a 	mov	r6,zero
  806c38:	3005883a 	mov	r2,r6
  806c3c:	3807883a 	mov	r3,r7
  806c40:	f800283a 	ret

00806c44 <__b2d>:
  806c44:	20800417 	ldw	r2,16(r4)
  806c48:	defff904 	addi	sp,sp,-28
  806c4c:	dd000415 	stw	r20,16(sp)
  806c50:	1085883a 	add	r2,r2,r2
  806c54:	25000504 	addi	r20,r4,20
  806c58:	1085883a 	add	r2,r2,r2
  806c5c:	dc000015 	stw	r16,0(sp)
  806c60:	a0a1883a 	add	r16,r20,r2
  806c64:	dd400515 	stw	r21,20(sp)
  806c68:	857fff17 	ldw	r21,-4(r16)
  806c6c:	dc400115 	stw	r17,4(sp)
  806c70:	dfc00615 	stw	ra,24(sp)
  806c74:	a809883a 	mov	r4,r21
  806c78:	2823883a 	mov	r17,r5
  806c7c:	dcc00315 	stw	r19,12(sp)
  806c80:	dc800215 	stw	r18,8(sp)
  806c84:	0806a300 	call	806a30 <__hi0bits>
  806c88:	100b883a 	mov	r5,r2
  806c8c:	00800804 	movi	r2,32
  806c90:	1145c83a 	sub	r2,r2,r5
  806c94:	88800015 	stw	r2,0(r17)
  806c98:	00800284 	movi	r2,10
  806c9c:	80ffff04 	addi	r3,r16,-4
  806ca0:	11401416 	blt	r2,r5,806cf4 <__b2d+0xb0>
  806ca4:	008002c4 	movi	r2,11
  806ca8:	1149c83a 	sub	r4,r2,r5
  806cac:	a0c02736 	bltu	r20,r3,806d4c <__b2d+0x108>
  806cb0:	000d883a 	mov	r6,zero
  806cb4:	28800544 	addi	r2,r5,21
  806cb8:	a906d83a 	srl	r3,r21,r4
  806cbc:	a884983a 	sll	r2,r21,r2
  806cc0:	1ccffc34 	orhi	r19,r3,16368
  806cc4:	11a4b03a 	or	r18,r2,r6
  806cc8:	9005883a 	mov	r2,r18
  806ccc:	9807883a 	mov	r3,r19
  806cd0:	dfc00617 	ldw	ra,24(sp)
  806cd4:	dd400517 	ldw	r21,20(sp)
  806cd8:	dd000417 	ldw	r20,16(sp)
  806cdc:	dcc00317 	ldw	r19,12(sp)
  806ce0:	dc800217 	ldw	r18,8(sp)
  806ce4:	dc400117 	ldw	r17,4(sp)
  806ce8:	dc000017 	ldw	r16,0(sp)
  806cec:	dec00704 	addi	sp,sp,28
  806cf0:	f800283a 	ret
  806cf4:	a0c00e36 	bltu	r20,r3,806d30 <__b2d+0xec>
  806cf8:	293ffd44 	addi	r4,r5,-11
  806cfc:	000d883a 	mov	r6,zero
  806d00:	20000f26 	beq	r4,zero,806d40 <__b2d+0xfc>
  806d04:	00800804 	movi	r2,32
  806d08:	110bc83a 	sub	r5,r2,r4
  806d0c:	a0c01236 	bltu	r20,r3,806d58 <__b2d+0x114>
  806d10:	000f883a 	mov	r7,zero
  806d14:	a904983a 	sll	r2,r21,r4
  806d18:	3146d83a 	srl	r3,r6,r5
  806d1c:	3108983a 	sll	r4,r6,r4
  806d20:	108ffc34 	orhi	r2,r2,16368
  806d24:	18a6b03a 	or	r19,r3,r2
  806d28:	3924b03a 	or	r18,r7,r4
  806d2c:	003fe606 	br	806cc8 <__b2d+0x84>
  806d30:	293ffd44 	addi	r4,r5,-11
  806d34:	81bffe17 	ldw	r6,-8(r16)
  806d38:	80fffe04 	addi	r3,r16,-8
  806d3c:	203ff11e 	bne	r4,zero,806d04 <__b2d+0xc0>
  806d40:	accffc34 	orhi	r19,r21,16368
  806d44:	3025883a 	mov	r18,r6
  806d48:	003fdf06 	br	806cc8 <__b2d+0x84>
  806d4c:	18bfff17 	ldw	r2,-4(r3)
  806d50:	110cd83a 	srl	r6,r2,r4
  806d54:	003fd706 	br	806cb4 <__b2d+0x70>
  806d58:	18bfff17 	ldw	r2,-4(r3)
  806d5c:	114ed83a 	srl	r7,r2,r5
  806d60:	003fec06 	br	806d14 <__b2d+0xd0>

00806d64 <__ratio>:
  806d64:	defff904 	addi	sp,sp,-28
  806d68:	dc400215 	stw	r17,8(sp)
  806d6c:	2823883a 	mov	r17,r5
  806d70:	d80b883a 	mov	r5,sp
  806d74:	dfc00615 	stw	ra,24(sp)
  806d78:	dd000515 	stw	r20,20(sp)
  806d7c:	dcc00415 	stw	r19,16(sp)
  806d80:	dc800315 	stw	r18,12(sp)
  806d84:	2025883a 	mov	r18,r4
  806d88:	0806c440 	call	806c44 <__b2d>
  806d8c:	8809883a 	mov	r4,r17
  806d90:	d9400104 	addi	r5,sp,4
  806d94:	1027883a 	mov	r19,r2
  806d98:	1829883a 	mov	r20,r3
  806d9c:	0806c440 	call	806c44 <__b2d>
  806da0:	89000417 	ldw	r4,16(r17)
  806da4:	91c00417 	ldw	r7,16(r18)
  806da8:	d9800117 	ldw	r6,4(sp)
  806dac:	180b883a 	mov	r5,r3
  806db0:	390fc83a 	sub	r7,r7,r4
  806db4:	1009883a 	mov	r4,r2
  806db8:	d8800017 	ldw	r2,0(sp)
  806dbc:	380e917a 	slli	r7,r7,5
  806dc0:	2011883a 	mov	r8,r4
  806dc4:	1185c83a 	sub	r2,r2,r6
  806dc8:	11c5883a 	add	r2,r2,r7
  806dcc:	1006953a 	slli	r3,r2,20
  806dd0:	2813883a 	mov	r9,r5
  806dd4:	00800d0e 	bge	zero,r2,806e0c <__ratio+0xa8>
  806dd8:	1d29883a 	add	r20,r3,r20
  806ddc:	a00b883a 	mov	r5,r20
  806de0:	480f883a 	mov	r7,r9
  806de4:	9809883a 	mov	r4,r19
  806de8:	400d883a 	mov	r6,r8
  806dec:	08098880 	call	809888 <__divdf3>
  806df0:	dfc00617 	ldw	ra,24(sp)
  806df4:	dd000517 	ldw	r20,20(sp)
  806df8:	dcc00417 	ldw	r19,16(sp)
  806dfc:	dc800317 	ldw	r18,12(sp)
  806e00:	dc400217 	ldw	r17,8(sp)
  806e04:	dec00704 	addi	sp,sp,28
  806e08:	f800283a 	ret
  806e0c:	28d3c83a 	sub	r9,r5,r3
  806e10:	003ff206 	br	806ddc <__ratio+0x78>

00806e14 <_mprec_log10>:
  806e14:	defffe04 	addi	sp,sp,-8
  806e18:	008005c4 	movi	r2,23
  806e1c:	dc000015 	stw	r16,0(sp)
  806e20:	dfc00115 	stw	ra,4(sp)
  806e24:	2021883a 	mov	r16,r4
  806e28:	11000c16 	blt	r2,r4,806e5c <_mprec_log10+0x48>
  806e2c:	200490fa 	slli	r2,r4,3
  806e30:	00c02074 	movhi	r3,129
  806e34:	18fc0404 	addi	r3,r3,-4080
  806e38:	10c5883a 	add	r2,r2,r3
  806e3c:	12400117 	ldw	r9,4(r2)
  806e40:	12000017 	ldw	r8,0(r2)
  806e44:	4807883a 	mov	r3,r9
  806e48:	4005883a 	mov	r2,r8
  806e4c:	dfc00117 	ldw	ra,4(sp)
  806e50:	dc000017 	ldw	r16,0(sp)
  806e54:	dec00204 	addi	sp,sp,8
  806e58:	f800283a 	ret
  806e5c:	0011883a 	mov	r8,zero
  806e60:	024ffc34 	movhi	r9,16368
  806e64:	0005883a 	mov	r2,zero
  806e68:	00d00934 	movhi	r3,16420
  806e6c:	480b883a 	mov	r5,r9
  806e70:	4009883a 	mov	r4,r8
  806e74:	180f883a 	mov	r7,r3
  806e78:	100d883a 	mov	r6,r2
  806e7c:	08094c40 	call	8094c4 <__muldf3>
  806e80:	843fffc4 	addi	r16,r16,-1
  806e84:	1011883a 	mov	r8,r2
  806e88:	1813883a 	mov	r9,r3
  806e8c:	803ff51e 	bne	r16,zero,806e64 <_mprec_log10+0x50>
  806e90:	4005883a 	mov	r2,r8
  806e94:	4807883a 	mov	r3,r9
  806e98:	dfc00117 	ldw	ra,4(sp)
  806e9c:	dc000017 	ldw	r16,0(sp)
  806ea0:	dec00204 	addi	sp,sp,8
  806ea4:	f800283a 	ret

00806ea8 <__copybits>:
  806ea8:	297fffc4 	addi	r5,r5,-1
  806eac:	30800417 	ldw	r2,16(r6)
  806eb0:	280bd17a 	srai	r5,r5,5
  806eb4:	31800504 	addi	r6,r6,20
  806eb8:	1085883a 	add	r2,r2,r2
  806ebc:	294b883a 	add	r5,r5,r5
  806ec0:	294b883a 	add	r5,r5,r5
  806ec4:	1085883a 	add	r2,r2,r2
  806ec8:	290b883a 	add	r5,r5,r4
  806ecc:	3087883a 	add	r3,r6,r2
  806ed0:	29400104 	addi	r5,r5,4
  806ed4:	30c0052e 	bgeu	r6,r3,806eec <__copybits+0x44>
  806ed8:	30800017 	ldw	r2,0(r6)
  806edc:	31800104 	addi	r6,r6,4
  806ee0:	20800015 	stw	r2,0(r4)
  806ee4:	21000104 	addi	r4,r4,4
  806ee8:	30fffb36 	bltu	r6,r3,806ed8 <__copybits+0x30>
  806eec:	2140032e 	bgeu	r4,r5,806efc <__copybits+0x54>
  806ef0:	20000015 	stw	zero,0(r4)
  806ef4:	21000104 	addi	r4,r4,4
  806ef8:	217ffd36 	bltu	r4,r5,806ef0 <__copybits+0x48>
  806efc:	f800283a 	ret

00806f00 <__any_on>:
  806f00:	20800417 	ldw	r2,16(r4)
  806f04:	2807d17a 	srai	r3,r5,5
  806f08:	21000504 	addi	r4,r4,20
  806f0c:	10c00d0e 	bge	r2,r3,806f44 <__any_on+0x44>
  806f10:	1085883a 	add	r2,r2,r2
  806f14:	1085883a 	add	r2,r2,r2
  806f18:	208d883a 	add	r6,r4,r2
  806f1c:	2180182e 	bgeu	r4,r6,806f80 <__any_on+0x80>
  806f20:	30bfff17 	ldw	r2,-4(r6)
  806f24:	30ffff04 	addi	r3,r6,-4
  806f28:	1000041e 	bne	r2,zero,806f3c <__any_on+0x3c>
  806f2c:	20c0142e 	bgeu	r4,r3,806f80 <__any_on+0x80>
  806f30:	18ffff04 	addi	r3,r3,-4
  806f34:	18800017 	ldw	r2,0(r3)
  806f38:	103ffc26 	beq	r2,zero,806f2c <__any_on+0x2c>
  806f3c:	00800044 	movi	r2,1
  806f40:	f800283a 	ret
  806f44:	18800a0e 	bge	r3,r2,806f70 <__any_on+0x70>
  806f48:	294007cc 	andi	r5,r5,31
  806f4c:	28000826 	beq	r5,zero,806f70 <__any_on+0x70>
  806f50:	18c5883a 	add	r2,r3,r3
  806f54:	1085883a 	add	r2,r2,r2
  806f58:	208d883a 	add	r6,r4,r2
  806f5c:	30c00017 	ldw	r3,0(r6)
  806f60:	1944d83a 	srl	r2,r3,r5
  806f64:	1144983a 	sll	r2,r2,r5
  806f68:	18bff41e 	bne	r3,r2,806f3c <__any_on+0x3c>
  806f6c:	003feb06 	br	806f1c <__any_on+0x1c>
  806f70:	18c5883a 	add	r2,r3,r3
  806f74:	1085883a 	add	r2,r2,r2
  806f78:	208d883a 	add	r6,r4,r2
  806f7c:	003fe706 	br	806f1c <__any_on+0x1c>
  806f80:	0005883a 	mov	r2,zero
  806f84:	f800283a 	ret

00806f88 <_Balloc>:
  806f88:	20c01317 	ldw	r3,76(r4)
  806f8c:	defffb04 	addi	sp,sp,-20
  806f90:	dcc00315 	stw	r19,12(sp)
  806f94:	dc800215 	stw	r18,8(sp)
  806f98:	dfc00415 	stw	ra,16(sp)
  806f9c:	2825883a 	mov	r18,r5
  806fa0:	dc400115 	stw	r17,4(sp)
  806fa4:	dc000015 	stw	r16,0(sp)
  806fa8:	2027883a 	mov	r19,r4
  806fac:	01800404 	movi	r6,16
  806fb0:	01400104 	movi	r5,4
  806fb4:	18001726 	beq	r3,zero,807014 <_Balloc+0x8c>
  806fb8:	01400044 	movi	r5,1
  806fbc:	9485883a 	add	r2,r18,r18
  806fc0:	2ca2983a 	sll	r17,r5,r18
  806fc4:	1085883a 	add	r2,r2,r2
  806fc8:	10c7883a 	add	r3,r2,r3
  806fcc:	1c000017 	ldw	r16,0(r3)
  806fd0:	8c4d883a 	add	r6,r17,r17
  806fd4:	318d883a 	add	r6,r6,r6
  806fd8:	9809883a 	mov	r4,r19
  806fdc:	31800504 	addi	r6,r6,20
  806fe0:	80001226 	beq	r16,zero,80702c <_Balloc+0xa4>
  806fe4:	80800017 	ldw	r2,0(r16)
  806fe8:	18800015 	stw	r2,0(r3)
  806fec:	80000415 	stw	zero,16(r16)
  806ff0:	80000315 	stw	zero,12(r16)
  806ff4:	8005883a 	mov	r2,r16
  806ff8:	dfc00417 	ldw	ra,16(sp)
  806ffc:	dcc00317 	ldw	r19,12(sp)
  807000:	dc800217 	ldw	r18,8(sp)
  807004:	dc400117 	ldw	r17,4(sp)
  807008:	dc000017 	ldw	r16,0(sp)
  80700c:	dec00504 	addi	sp,sp,20
  807010:	f800283a 	ret
  807014:	080822c0 	call	80822c <_calloc_r>
  807018:	1007883a 	mov	r3,r2
  80701c:	0021883a 	mov	r16,zero
  807020:	98801315 	stw	r2,76(r19)
  807024:	103fe41e 	bne	r2,zero,806fb8 <_Balloc+0x30>
  807028:	003ff206 	br	806ff4 <_Balloc+0x6c>
  80702c:	080822c0 	call	80822c <_calloc_r>
  807030:	103ff026 	beq	r2,zero,806ff4 <_Balloc+0x6c>
  807034:	1021883a 	mov	r16,r2
  807038:	14800115 	stw	r18,4(r2)
  80703c:	14400215 	stw	r17,8(r2)
  807040:	003fea06 	br	806fec <_Balloc+0x64>

00807044 <__d2b>:
  807044:	defff504 	addi	sp,sp,-44
  807048:	dcc00515 	stw	r19,20(sp)
  80704c:	04c00044 	movi	r19,1
  807050:	dc000215 	stw	r16,8(sp)
  807054:	2821883a 	mov	r16,r5
  807058:	980b883a 	mov	r5,r19
  80705c:	ddc00915 	stw	r23,36(sp)
  807060:	dd800815 	stw	r22,32(sp)
  807064:	dd400715 	stw	r21,28(sp)
  807068:	dd000615 	stw	r20,24(sp)
  80706c:	dc800415 	stw	r18,16(sp)
  807070:	dc400315 	stw	r17,12(sp)
  807074:	dfc00a15 	stw	ra,40(sp)
  807078:	3023883a 	mov	r17,r6
  80707c:	382d883a 	mov	r22,r7
  807080:	ddc00b17 	ldw	r23,44(sp)
  807084:	0806f880 	call	806f88 <_Balloc>
  807088:	1025883a 	mov	r18,r2
  80708c:	00a00034 	movhi	r2,32768
  807090:	10bfffc4 	addi	r2,r2,-1
  807094:	8888703a 	and	r4,r17,r2
  807098:	202ad53a 	srli	r21,r4,20
  80709c:	00800434 	movhi	r2,16
  8070a0:	10bfffc4 	addi	r2,r2,-1
  8070a4:	8886703a 	and	r3,r17,r2
  8070a8:	a829003a 	cmpeq	r20,r21,zero
  8070ac:	800b883a 	mov	r5,r16
  8070b0:	d8c00115 	stw	r3,4(sp)
  8070b4:	94000504 	addi	r16,r18,20
  8070b8:	a000021e 	bne	r20,zero,8070c4 <__d2b+0x80>
  8070bc:	18c00434 	orhi	r3,r3,16
  8070c0:	d8c00115 	stw	r3,4(sp)
  8070c4:	28002726 	beq	r5,zero,807164 <__d2b+0x120>
  8070c8:	d809883a 	mov	r4,sp
  8070cc:	d9400015 	stw	r5,0(sp)
  8070d0:	0806aa00 	call	806aa0 <__lo0bits>
  8070d4:	100d883a 	mov	r6,r2
  8070d8:	10003526 	beq	r2,zero,8071b0 <__d2b+0x16c>
  8070dc:	d8c00117 	ldw	r3,4(sp)
  8070e0:	00800804 	movi	r2,32
  8070e4:	1185c83a 	sub	r2,r2,r6
  8070e8:	d9000017 	ldw	r4,0(sp)
  8070ec:	1886983a 	sll	r3,r3,r2
  8070f0:	1906b03a 	or	r3,r3,r4
  8070f4:	90c00515 	stw	r3,20(r18)
  8070f8:	d8c00117 	ldw	r3,4(sp)
  8070fc:	1986d83a 	srl	r3,r3,r6
  807100:	d8c00115 	stw	r3,4(sp)
  807104:	180b003a 	cmpeq	r5,r3,zero
  807108:	00800084 	movi	r2,2
  80710c:	114bc83a 	sub	r5,r2,r5
  807110:	80c00115 	stw	r3,4(r16)
  807114:	91400415 	stw	r5,16(r18)
  807118:	a0001a1e 	bne	r20,zero,807184 <__d2b+0x140>
  80711c:	3545883a 	add	r2,r6,r21
  807120:	10bef344 	addi	r2,r2,-1075
  807124:	00c00d44 	movi	r3,53
  807128:	b0800015 	stw	r2,0(r22)
  80712c:	1987c83a 	sub	r3,r3,r6
  807130:	b8c00015 	stw	r3,0(r23)
  807134:	9005883a 	mov	r2,r18
  807138:	dfc00a17 	ldw	ra,40(sp)
  80713c:	ddc00917 	ldw	r23,36(sp)
  807140:	dd800817 	ldw	r22,32(sp)
  807144:	dd400717 	ldw	r21,28(sp)
  807148:	dd000617 	ldw	r20,24(sp)
  80714c:	dcc00517 	ldw	r19,20(sp)
  807150:	dc800417 	ldw	r18,16(sp)
  807154:	dc400317 	ldw	r17,12(sp)
  807158:	dc000217 	ldw	r16,8(sp)
  80715c:	dec00b04 	addi	sp,sp,44
  807160:	f800283a 	ret
  807164:	d9000104 	addi	r4,sp,4
  807168:	0806aa00 	call	806aa0 <__lo0bits>
  80716c:	11800804 	addi	r6,r2,32
  807170:	d8800117 	ldw	r2,4(sp)
  807174:	94c00415 	stw	r19,16(r18)
  807178:	980b883a 	mov	r5,r19
  80717c:	90800515 	stw	r2,20(r18)
  807180:	a03fe626 	beq	r20,zero,80711c <__d2b+0xd8>
  807184:	2945883a 	add	r2,r5,r5
  807188:	1085883a 	add	r2,r2,r2
  80718c:	1405883a 	add	r2,r2,r16
  807190:	113fff17 	ldw	r4,-4(r2)
  807194:	30fef384 	addi	r3,r6,-1074
  807198:	2820917a 	slli	r16,r5,5
  80719c:	b0c00015 	stw	r3,0(r22)
  8071a0:	0806a300 	call	806a30 <__hi0bits>
  8071a4:	80a1c83a 	sub	r16,r16,r2
  8071a8:	bc000015 	stw	r16,0(r23)
  8071ac:	003fe106 	br	807134 <__d2b+0xf0>
  8071b0:	d8800017 	ldw	r2,0(sp)
  8071b4:	90800515 	stw	r2,20(r18)
  8071b8:	d8c00117 	ldw	r3,4(sp)
  8071bc:	003fd106 	br	807104 <__d2b+0xc0>

008071c0 <__mdiff>:
  8071c0:	defffb04 	addi	sp,sp,-20
  8071c4:	dc000015 	stw	r16,0(sp)
  8071c8:	2821883a 	mov	r16,r5
  8071cc:	dc800215 	stw	r18,8(sp)
  8071d0:	300b883a 	mov	r5,r6
  8071d4:	2025883a 	mov	r18,r4
  8071d8:	8009883a 	mov	r4,r16
  8071dc:	dc400115 	stw	r17,4(sp)
  8071e0:	dfc00415 	stw	ra,16(sp)
  8071e4:	dcc00315 	stw	r19,12(sp)
  8071e8:	3023883a 	mov	r17,r6
  8071ec:	0806b640 	call	806b64 <__mcmp>
  8071f0:	10004226 	beq	r2,zero,8072fc <__mdiff+0x13c>
  8071f4:	10005016 	blt	r2,zero,807338 <__mdiff+0x178>
  8071f8:	0027883a 	mov	r19,zero
  8071fc:	81400117 	ldw	r5,4(r16)
  807200:	9009883a 	mov	r4,r18
  807204:	0806f880 	call	806f88 <_Balloc>
  807208:	1019883a 	mov	r12,r2
  80720c:	82800417 	ldw	r10,16(r16)
  807210:	88800417 	ldw	r2,16(r17)
  807214:	81800504 	addi	r6,r16,20
  807218:	5287883a 	add	r3,r10,r10
  80721c:	1085883a 	add	r2,r2,r2
  807220:	18c7883a 	add	r3,r3,r3
  807224:	1085883a 	add	r2,r2,r2
  807228:	8a000504 	addi	r8,r17,20
  80722c:	64c00315 	stw	r19,12(r12)
  807230:	30db883a 	add	r13,r6,r3
  807234:	4097883a 	add	r11,r8,r2
  807238:	61c00504 	addi	r7,r12,20
  80723c:	0013883a 	mov	r9,zero
  807240:	31000017 	ldw	r4,0(r6)
  807244:	41400017 	ldw	r5,0(r8)
  807248:	42000104 	addi	r8,r8,4
  80724c:	20bfffcc 	andi	r2,r4,65535
  807250:	28ffffcc 	andi	r3,r5,65535
  807254:	10c5c83a 	sub	r2,r2,r3
  807258:	1245883a 	add	r2,r2,r9
  80725c:	2008d43a 	srli	r4,r4,16
  807260:	280ad43a 	srli	r5,r5,16
  807264:	1007d43a 	srai	r3,r2,16
  807268:	3880000d 	sth	r2,0(r7)
  80726c:	2149c83a 	sub	r4,r4,r5
  807270:	20c9883a 	add	r4,r4,r3
  807274:	3900008d 	sth	r4,2(r7)
  807278:	31800104 	addi	r6,r6,4
  80727c:	39c00104 	addi	r7,r7,4
  807280:	2013d43a 	srai	r9,r4,16
  807284:	42ffee36 	bltu	r8,r11,807240 <__mdiff+0x80>
  807288:	33400c2e 	bgeu	r6,r13,8072bc <__mdiff+0xfc>
  80728c:	30800017 	ldw	r2,0(r6)
  807290:	31800104 	addi	r6,r6,4
  807294:	10ffffcc 	andi	r3,r2,65535
  807298:	1a47883a 	add	r3,r3,r9
  80729c:	1004d43a 	srli	r2,r2,16
  8072a0:	1809d43a 	srai	r4,r3,16
  8072a4:	38c0000d 	sth	r3,0(r7)
  8072a8:	1105883a 	add	r2,r2,r4
  8072ac:	3880008d 	sth	r2,2(r7)
  8072b0:	1013d43a 	srai	r9,r2,16
  8072b4:	39c00104 	addi	r7,r7,4
  8072b8:	337ff436 	bltu	r6,r13,80728c <__mdiff+0xcc>
  8072bc:	38bfff17 	ldw	r2,-4(r7)
  8072c0:	38ffff04 	addi	r3,r7,-4
  8072c4:	1000041e 	bne	r2,zero,8072d8 <__mdiff+0x118>
  8072c8:	18ffff04 	addi	r3,r3,-4
  8072cc:	18800017 	ldw	r2,0(r3)
  8072d0:	52bfffc4 	addi	r10,r10,-1
  8072d4:	103ffc26 	beq	r2,zero,8072c8 <__mdiff+0x108>
  8072d8:	6005883a 	mov	r2,r12
  8072dc:	62800415 	stw	r10,16(r12)
  8072e0:	dfc00417 	ldw	ra,16(sp)
  8072e4:	dcc00317 	ldw	r19,12(sp)
  8072e8:	dc800217 	ldw	r18,8(sp)
  8072ec:	dc400117 	ldw	r17,4(sp)
  8072f0:	dc000017 	ldw	r16,0(sp)
  8072f4:	dec00504 	addi	sp,sp,20
  8072f8:	f800283a 	ret
  8072fc:	9009883a 	mov	r4,r18
  807300:	000b883a 	mov	r5,zero
  807304:	0806f880 	call	806f88 <_Balloc>
  807308:	1019883a 	mov	r12,r2
  80730c:	00800044 	movi	r2,1
  807310:	60800415 	stw	r2,16(r12)
  807314:	6005883a 	mov	r2,r12
  807318:	60000515 	stw	zero,20(r12)
  80731c:	dfc00417 	ldw	ra,16(sp)
  807320:	dcc00317 	ldw	r19,12(sp)
  807324:	dc800217 	ldw	r18,8(sp)
  807328:	dc400117 	ldw	r17,4(sp)
  80732c:	dc000017 	ldw	r16,0(sp)
  807330:	dec00504 	addi	sp,sp,20
  807334:	f800283a 	ret
  807338:	880d883a 	mov	r6,r17
  80733c:	04c00044 	movi	r19,1
  807340:	8023883a 	mov	r17,r16
  807344:	3021883a 	mov	r16,r6
  807348:	003fac06 	br	8071fc <__mdiff+0x3c>

0080734c <__lshift>:
  80734c:	defff904 	addi	sp,sp,-28
  807350:	28800417 	ldw	r2,16(r5)
  807354:	dc000015 	stw	r16,0(sp)
  807358:	3021d17a 	srai	r16,r6,5
  80735c:	28c00217 	ldw	r3,8(r5)
  807360:	10800044 	addi	r2,r2,1
  807364:	dc400115 	stw	r17,4(sp)
  807368:	80a3883a 	add	r17,r16,r2
  80736c:	dd400515 	stw	r21,20(sp)
  807370:	dd000415 	stw	r20,16(sp)
  807374:	dc800215 	stw	r18,8(sp)
  807378:	dfc00615 	stw	ra,24(sp)
  80737c:	2825883a 	mov	r18,r5
  807380:	dcc00315 	stw	r19,12(sp)
  807384:	3029883a 	mov	r20,r6
  807388:	202b883a 	mov	r21,r4
  80738c:	29400117 	ldw	r5,4(r5)
  807390:	1c40030e 	bge	r3,r17,8073a0 <__lshift+0x54>
  807394:	18c7883a 	add	r3,r3,r3
  807398:	29400044 	addi	r5,r5,1
  80739c:	1c7ffd16 	blt	r3,r17,807394 <__lshift+0x48>
  8073a0:	a809883a 	mov	r4,r21
  8073a4:	0806f880 	call	806f88 <_Balloc>
  8073a8:	1027883a 	mov	r19,r2
  8073ac:	11400504 	addi	r5,r2,20
  8073b0:	0400090e 	bge	zero,r16,8073d8 <__lshift+0x8c>
  8073b4:	2805883a 	mov	r2,r5
  8073b8:	0007883a 	mov	r3,zero
  8073bc:	18c00044 	addi	r3,r3,1
  8073c0:	10000015 	stw	zero,0(r2)
  8073c4:	10800104 	addi	r2,r2,4
  8073c8:	80fffc1e 	bne	r16,r3,8073bc <__lshift+0x70>
  8073cc:	8405883a 	add	r2,r16,r16
  8073d0:	1085883a 	add	r2,r2,r2
  8073d4:	288b883a 	add	r5,r5,r2
  8073d8:	90800417 	ldw	r2,16(r18)
  8073dc:	91000504 	addi	r4,r18,20
  8073e0:	a18007cc 	andi	r6,r20,31
  8073e4:	1085883a 	add	r2,r2,r2
  8073e8:	1085883a 	add	r2,r2,r2
  8073ec:	208f883a 	add	r7,r4,r2
  8073f0:	30001e26 	beq	r6,zero,80746c <__lshift+0x120>
  8073f4:	00800804 	movi	r2,32
  8073f8:	1191c83a 	sub	r8,r2,r6
  8073fc:	0007883a 	mov	r3,zero
  807400:	20800017 	ldw	r2,0(r4)
  807404:	1184983a 	sll	r2,r2,r6
  807408:	1884b03a 	or	r2,r3,r2
  80740c:	28800015 	stw	r2,0(r5)
  807410:	20c00017 	ldw	r3,0(r4)
  807414:	21000104 	addi	r4,r4,4
  807418:	29400104 	addi	r5,r5,4
  80741c:	1a06d83a 	srl	r3,r3,r8
  807420:	21fff736 	bltu	r4,r7,807400 <__lshift+0xb4>
  807424:	28c00015 	stw	r3,0(r5)
  807428:	18000126 	beq	r3,zero,807430 <__lshift+0xe4>
  80742c:	8c400044 	addi	r17,r17,1
  807430:	88bfffc4 	addi	r2,r17,-1
  807434:	98800415 	stw	r2,16(r19)
  807438:	a809883a 	mov	r4,r21
  80743c:	900b883a 	mov	r5,r18
  807440:	0806a080 	call	806a08 <_Bfree>
  807444:	9805883a 	mov	r2,r19
  807448:	dfc00617 	ldw	ra,24(sp)
  80744c:	dd400517 	ldw	r21,20(sp)
  807450:	dd000417 	ldw	r20,16(sp)
  807454:	dcc00317 	ldw	r19,12(sp)
  807458:	dc800217 	ldw	r18,8(sp)
  80745c:	dc400117 	ldw	r17,4(sp)
  807460:	dc000017 	ldw	r16,0(sp)
  807464:	dec00704 	addi	sp,sp,28
  807468:	f800283a 	ret
  80746c:	20800017 	ldw	r2,0(r4)
  807470:	21000104 	addi	r4,r4,4
  807474:	28800015 	stw	r2,0(r5)
  807478:	29400104 	addi	r5,r5,4
  80747c:	21ffec2e 	bgeu	r4,r7,807430 <__lshift+0xe4>
  807480:	20800017 	ldw	r2,0(r4)
  807484:	21000104 	addi	r4,r4,4
  807488:	28800015 	stw	r2,0(r5)
  80748c:	29400104 	addi	r5,r5,4
  807490:	21fff636 	bltu	r4,r7,80746c <__lshift+0x120>
  807494:	003fe606 	br	807430 <__lshift+0xe4>

00807498 <__multiply>:
  807498:	defff004 	addi	sp,sp,-64
  80749c:	dc800815 	stw	r18,32(sp)
  8074a0:	dc400715 	stw	r17,28(sp)
  8074a4:	2c800417 	ldw	r18,16(r5)
  8074a8:	34400417 	ldw	r17,16(r6)
  8074ac:	dcc00915 	stw	r19,36(sp)
  8074b0:	dc000615 	stw	r16,24(sp)
  8074b4:	dfc00f15 	stw	ra,60(sp)
  8074b8:	df000e15 	stw	fp,56(sp)
  8074bc:	ddc00d15 	stw	r23,52(sp)
  8074c0:	dd800c15 	stw	r22,48(sp)
  8074c4:	dd400b15 	stw	r21,44(sp)
  8074c8:	dd000a15 	stw	r20,40(sp)
  8074cc:	2821883a 	mov	r16,r5
  8074d0:	3027883a 	mov	r19,r6
  8074d4:	9440040e 	bge	r18,r17,8074e8 <__multiply+0x50>
  8074d8:	8825883a 	mov	r18,r17
  8074dc:	2c400417 	ldw	r17,16(r5)
  8074e0:	2827883a 	mov	r19,r5
  8074e4:	3021883a 	mov	r16,r6
  8074e8:	80800217 	ldw	r2,8(r16)
  8074ec:	9447883a 	add	r3,r18,r17
  8074f0:	d8c00415 	stw	r3,16(sp)
  8074f4:	81400117 	ldw	r5,4(r16)
  8074f8:	10c0010e 	bge	r2,r3,807500 <__multiply+0x68>
  8074fc:	29400044 	addi	r5,r5,1
  807500:	0806f880 	call	806f88 <_Balloc>
  807504:	d8800515 	stw	r2,20(sp)
  807508:	d9000417 	ldw	r4,16(sp)
  80750c:	d8c00517 	ldw	r3,20(sp)
  807510:	2105883a 	add	r2,r4,r4
  807514:	1085883a 	add	r2,r2,r2
  807518:	19000504 	addi	r4,r3,20
  80751c:	2085883a 	add	r2,r4,r2
  807520:	d8800315 	stw	r2,12(sp)
  807524:	2080052e 	bgeu	r4,r2,80753c <__multiply+0xa4>
  807528:	2005883a 	mov	r2,r4
  80752c:	d8c00317 	ldw	r3,12(sp)
  807530:	10000015 	stw	zero,0(r2)
  807534:	10800104 	addi	r2,r2,4
  807538:	10fffc36 	bltu	r2,r3,80752c <__multiply+0x94>
  80753c:	8c45883a 	add	r2,r17,r17
  807540:	9487883a 	add	r3,r18,r18
  807544:	9dc00504 	addi	r23,r19,20
  807548:	1085883a 	add	r2,r2,r2
  80754c:	84000504 	addi	r16,r16,20
  807550:	18c7883a 	add	r3,r3,r3
  807554:	b885883a 	add	r2,r23,r2
  807558:	dc000015 	stw	r16,0(sp)
  80755c:	d8800215 	stw	r2,8(sp)
  807560:	80f9883a 	add	fp,r16,r3
  807564:	b880432e 	bgeu	r23,r2,807674 <__multiply+0x1dc>
  807568:	d9000115 	stw	r4,4(sp)
  80756c:	b9000017 	ldw	r4,0(r23)
  807570:	253fffcc 	andi	r20,r4,65535
  807574:	a0001a26 	beq	r20,zero,8075e0 <__multiply+0x148>
  807578:	dcc00017 	ldw	r19,0(sp)
  80757c:	dc800117 	ldw	r18,4(sp)
  807580:	002b883a 	mov	r21,zero
  807584:	9c400017 	ldw	r17,0(r19)
  807588:	94000017 	ldw	r16,0(r18)
  80758c:	a009883a 	mov	r4,r20
  807590:	897fffcc 	andi	r5,r17,65535
  807594:	080a2380 	call	80a238 <__mulsi3>
  807598:	880ad43a 	srli	r5,r17,16
  80759c:	80ffffcc 	andi	r3,r16,65535
  8075a0:	a8c7883a 	add	r3,r21,r3
  8075a4:	a009883a 	mov	r4,r20
  8075a8:	10e3883a 	add	r17,r2,r3
  8075ac:	8020d43a 	srli	r16,r16,16
  8075b0:	080a2380 	call	80a238 <__mulsi3>
  8075b4:	8806d43a 	srli	r3,r17,16
  8075b8:	1405883a 	add	r2,r2,r16
  8075bc:	9cc00104 	addi	r19,r19,4
  8075c0:	1887883a 	add	r3,r3,r2
  8075c4:	90c0008d 	sth	r3,2(r18)
  8075c8:	9440000d 	sth	r17,0(r18)
  8075cc:	182ad43a 	srli	r21,r3,16
  8075d0:	94800104 	addi	r18,r18,4
  8075d4:	9f3feb36 	bltu	r19,fp,807584 <__multiply+0xec>
  8075d8:	95400015 	stw	r21,0(r18)
  8075dc:	b9000017 	ldw	r4,0(r23)
  8075e0:	202ad43a 	srli	r21,r4,16
  8075e4:	a8001c26 	beq	r21,zero,807658 <__multiply+0x1c0>
  8075e8:	d9000117 	ldw	r4,4(sp)
  8075ec:	dd000017 	ldw	r20,0(sp)
  8075f0:	002d883a 	mov	r22,zero
  8075f4:	24c00017 	ldw	r19,0(r4)
  8075f8:	2025883a 	mov	r18,r4
  8075fc:	9823883a 	mov	r17,r19
  807600:	a4000017 	ldw	r16,0(r20)
  807604:	a809883a 	mov	r4,r21
  807608:	a5000104 	addi	r20,r20,4
  80760c:	817fffcc 	andi	r5,r16,65535
  807610:	080a2380 	call	80a238 <__mulsi3>
  807614:	8806d43a 	srli	r3,r17,16
  807618:	800ad43a 	srli	r5,r16,16
  80761c:	94c0000d 	sth	r19,0(r18)
  807620:	b0c7883a 	add	r3,r22,r3
  807624:	10e1883a 	add	r16,r2,r3
  807628:	9400008d 	sth	r16,2(r18)
  80762c:	a809883a 	mov	r4,r21
  807630:	94800104 	addi	r18,r18,4
  807634:	080a2380 	call	80a238 <__mulsi3>
  807638:	94400017 	ldw	r17,0(r18)
  80763c:	8020d43a 	srli	r16,r16,16
  807640:	88ffffcc 	andi	r3,r17,65535
  807644:	10c5883a 	add	r2,r2,r3
  807648:	80a7883a 	add	r19,r16,r2
  80764c:	982cd43a 	srli	r22,r19,16
  807650:	a73feb36 	bltu	r20,fp,807600 <__multiply+0x168>
  807654:	94c00015 	stw	r19,0(r18)
  807658:	d8800217 	ldw	r2,8(sp)
  80765c:	bdc00104 	addi	r23,r23,4
  807660:	b880042e 	bgeu	r23,r2,807674 <__multiply+0x1dc>
  807664:	d8c00117 	ldw	r3,4(sp)
  807668:	18c00104 	addi	r3,r3,4
  80766c:	d8c00115 	stw	r3,4(sp)
  807670:	003fbe06 	br	80756c <__multiply+0xd4>
  807674:	d9000417 	ldw	r4,16(sp)
  807678:	01000c0e 	bge	zero,r4,8076ac <__multiply+0x214>
  80767c:	d8c00317 	ldw	r3,12(sp)
  807680:	18bfff17 	ldw	r2,-4(r3)
  807684:	18ffff04 	addi	r3,r3,-4
  807688:	10000326 	beq	r2,zero,807698 <__multiply+0x200>
  80768c:	00000706 	br	8076ac <__multiply+0x214>
  807690:	18800017 	ldw	r2,0(r3)
  807694:	1000051e 	bne	r2,zero,8076ac <__multiply+0x214>
  807698:	d9000417 	ldw	r4,16(sp)
  80769c:	18ffff04 	addi	r3,r3,-4
  8076a0:	213fffc4 	addi	r4,r4,-1
  8076a4:	d9000415 	stw	r4,16(sp)
  8076a8:	203ff91e 	bne	r4,zero,807690 <__multiply+0x1f8>
  8076ac:	d8800417 	ldw	r2,16(sp)
  8076b0:	d8c00517 	ldw	r3,20(sp)
  8076b4:	18800415 	stw	r2,16(r3)
  8076b8:	1805883a 	mov	r2,r3
  8076bc:	dfc00f17 	ldw	ra,60(sp)
  8076c0:	df000e17 	ldw	fp,56(sp)
  8076c4:	ddc00d17 	ldw	r23,52(sp)
  8076c8:	dd800c17 	ldw	r22,48(sp)
  8076cc:	dd400b17 	ldw	r21,44(sp)
  8076d0:	dd000a17 	ldw	r20,40(sp)
  8076d4:	dcc00917 	ldw	r19,36(sp)
  8076d8:	dc800817 	ldw	r18,32(sp)
  8076dc:	dc400717 	ldw	r17,28(sp)
  8076e0:	dc000617 	ldw	r16,24(sp)
  8076e4:	dec01004 	addi	sp,sp,64
  8076e8:	f800283a 	ret

008076ec <__i2b>:
  8076ec:	defffd04 	addi	sp,sp,-12
  8076f0:	dc000015 	stw	r16,0(sp)
  8076f4:	04000044 	movi	r16,1
  8076f8:	dc800115 	stw	r18,4(sp)
  8076fc:	2825883a 	mov	r18,r5
  807700:	800b883a 	mov	r5,r16
  807704:	dfc00215 	stw	ra,8(sp)
  807708:	0806f880 	call	806f88 <_Balloc>
  80770c:	14000415 	stw	r16,16(r2)
  807710:	14800515 	stw	r18,20(r2)
  807714:	dfc00217 	ldw	ra,8(sp)
  807718:	dc800117 	ldw	r18,4(sp)
  80771c:	dc000017 	ldw	r16,0(sp)
  807720:	dec00304 	addi	sp,sp,12
  807724:	f800283a 	ret

00807728 <__multadd>:
  807728:	defff604 	addi	sp,sp,-40
  80772c:	dd800615 	stw	r22,24(sp)
  807730:	2d800417 	ldw	r22,16(r5)
  807734:	df000815 	stw	fp,32(sp)
  807738:	ddc00715 	stw	r23,28(sp)
  80773c:	dd400515 	stw	r21,20(sp)
  807740:	dd000415 	stw	r20,16(sp)
  807744:	dcc00315 	stw	r19,12(sp)
  807748:	dc800215 	stw	r18,8(sp)
  80774c:	dfc00915 	stw	ra,36(sp)
  807750:	dc400115 	stw	r17,4(sp)
  807754:	dc000015 	stw	r16,0(sp)
  807758:	282f883a 	mov	r23,r5
  80775c:	2039883a 	mov	fp,r4
  807760:	302b883a 	mov	r21,r6
  807764:	3829883a 	mov	r20,r7
  807768:	2c800504 	addi	r18,r5,20
  80776c:	0027883a 	mov	r19,zero
  807770:	94400017 	ldw	r17,0(r18)
  807774:	a80b883a 	mov	r5,r21
  807778:	9cc00044 	addi	r19,r19,1
  80777c:	893fffcc 	andi	r4,r17,65535
  807780:	080a2380 	call	80a238 <__mulsi3>
  807784:	8808d43a 	srli	r4,r17,16
  807788:	1521883a 	add	r16,r2,r20
  80778c:	a80b883a 	mov	r5,r21
  807790:	080a2380 	call	80a238 <__mulsi3>
  807794:	8008d43a 	srli	r4,r16,16
  807798:	843fffcc 	andi	r16,r16,65535
  80779c:	1105883a 	add	r2,r2,r4
  8077a0:	1006943a 	slli	r3,r2,16
  8077a4:	1028d43a 	srli	r20,r2,16
  8077a8:	1c07883a 	add	r3,r3,r16
  8077ac:	90c00015 	stw	r3,0(r18)
  8077b0:	94800104 	addi	r18,r18,4
  8077b4:	9dbfee16 	blt	r19,r22,807770 <__multadd+0x48>
  8077b8:	a0000826 	beq	r20,zero,8077dc <__multadd+0xb4>
  8077bc:	b8800217 	ldw	r2,8(r23)
  8077c0:	b080130e 	bge	r22,r2,807810 <__multadd+0xe8>
  8077c4:	b585883a 	add	r2,r22,r22
  8077c8:	1085883a 	add	r2,r2,r2
  8077cc:	15c5883a 	add	r2,r2,r23
  8077d0:	b0c00044 	addi	r3,r22,1
  8077d4:	15000515 	stw	r20,20(r2)
  8077d8:	b8c00415 	stw	r3,16(r23)
  8077dc:	b805883a 	mov	r2,r23
  8077e0:	dfc00917 	ldw	ra,36(sp)
  8077e4:	df000817 	ldw	fp,32(sp)
  8077e8:	ddc00717 	ldw	r23,28(sp)
  8077ec:	dd800617 	ldw	r22,24(sp)
  8077f0:	dd400517 	ldw	r21,20(sp)
  8077f4:	dd000417 	ldw	r20,16(sp)
  8077f8:	dcc00317 	ldw	r19,12(sp)
  8077fc:	dc800217 	ldw	r18,8(sp)
  807800:	dc400117 	ldw	r17,4(sp)
  807804:	dc000017 	ldw	r16,0(sp)
  807808:	dec00a04 	addi	sp,sp,40
  80780c:	f800283a 	ret
  807810:	b9400117 	ldw	r5,4(r23)
  807814:	e009883a 	mov	r4,fp
  807818:	29400044 	addi	r5,r5,1
  80781c:	0806f880 	call	806f88 <_Balloc>
  807820:	b9800417 	ldw	r6,16(r23)
  807824:	b9400304 	addi	r5,r23,12
  807828:	11000304 	addi	r4,r2,12
  80782c:	318d883a 	add	r6,r6,r6
  807830:	318d883a 	add	r6,r6,r6
  807834:	31800204 	addi	r6,r6,8
  807838:	1023883a 	mov	r17,r2
  80783c:	08068880 	call	806888 <memcpy>
  807840:	b80b883a 	mov	r5,r23
  807844:	e009883a 	mov	r4,fp
  807848:	0806a080 	call	806a08 <_Bfree>
  80784c:	882f883a 	mov	r23,r17
  807850:	003fdc06 	br	8077c4 <__multadd+0x9c>

00807854 <__pow5mult>:
  807854:	defffa04 	addi	sp,sp,-24
  807858:	308000cc 	andi	r2,r6,3
  80785c:	dd000415 	stw	r20,16(sp)
  807860:	dcc00315 	stw	r19,12(sp)
  807864:	dc000015 	stw	r16,0(sp)
  807868:	dfc00515 	stw	ra,20(sp)
  80786c:	dc800215 	stw	r18,8(sp)
  807870:	dc400115 	stw	r17,4(sp)
  807874:	3021883a 	mov	r16,r6
  807878:	2027883a 	mov	r19,r4
  80787c:	2829883a 	mov	r20,r5
  807880:	10002b1e 	bne	r2,zero,807930 <__pow5mult+0xdc>
  807884:	8025d0ba 	srai	r18,r16,2
  807888:	90001b26 	beq	r18,zero,8078f8 <__pow5mult+0xa4>
  80788c:	9c001217 	ldw	r16,72(r19)
  807890:	8000081e 	bne	r16,zero,8078b4 <__pow5mult+0x60>
  807894:	00003006 	br	807958 <__pow5mult+0x104>
  807898:	800b883a 	mov	r5,r16
  80789c:	800d883a 	mov	r6,r16
  8078a0:	9809883a 	mov	r4,r19
  8078a4:	90001426 	beq	r18,zero,8078f8 <__pow5mult+0xa4>
  8078a8:	80800017 	ldw	r2,0(r16)
  8078ac:	10001b26 	beq	r2,zero,80791c <__pow5mult+0xc8>
  8078b0:	1021883a 	mov	r16,r2
  8078b4:	9080004c 	andi	r2,r18,1
  8078b8:	1005003a 	cmpeq	r2,r2,zero
  8078bc:	9025d07a 	srai	r18,r18,1
  8078c0:	800d883a 	mov	r6,r16
  8078c4:	9809883a 	mov	r4,r19
  8078c8:	a00b883a 	mov	r5,r20
  8078cc:	103ff21e 	bne	r2,zero,807898 <__pow5mult+0x44>
  8078d0:	08074980 	call	807498 <__multiply>
  8078d4:	a00b883a 	mov	r5,r20
  8078d8:	9809883a 	mov	r4,r19
  8078dc:	1023883a 	mov	r17,r2
  8078e0:	0806a080 	call	806a08 <_Bfree>
  8078e4:	8829883a 	mov	r20,r17
  8078e8:	800b883a 	mov	r5,r16
  8078ec:	800d883a 	mov	r6,r16
  8078f0:	9809883a 	mov	r4,r19
  8078f4:	903fec1e 	bne	r18,zero,8078a8 <__pow5mult+0x54>
  8078f8:	a005883a 	mov	r2,r20
  8078fc:	dfc00517 	ldw	ra,20(sp)
  807900:	dd000417 	ldw	r20,16(sp)
  807904:	dcc00317 	ldw	r19,12(sp)
  807908:	dc800217 	ldw	r18,8(sp)
  80790c:	dc400117 	ldw	r17,4(sp)
  807910:	dc000017 	ldw	r16,0(sp)
  807914:	dec00604 	addi	sp,sp,24
  807918:	f800283a 	ret
  80791c:	08074980 	call	807498 <__multiply>
  807920:	80800015 	stw	r2,0(r16)
  807924:	1021883a 	mov	r16,r2
  807928:	10000015 	stw	zero,0(r2)
  80792c:	003fe106 	br	8078b4 <__pow5mult+0x60>
  807930:	1085883a 	add	r2,r2,r2
  807934:	00c02074 	movhi	r3,129
  807938:	18fc4a04 	addi	r3,r3,-3800
  80793c:	1085883a 	add	r2,r2,r2
  807940:	10c5883a 	add	r2,r2,r3
  807944:	11bfff17 	ldw	r6,-4(r2)
  807948:	000f883a 	mov	r7,zero
  80794c:	08077280 	call	807728 <__multadd>
  807950:	1029883a 	mov	r20,r2
  807954:	003fcb06 	br	807884 <__pow5mult+0x30>
  807958:	9809883a 	mov	r4,r19
  80795c:	01409c44 	movi	r5,625
  807960:	08076ec0 	call	8076ec <__i2b>
  807964:	98801215 	stw	r2,72(r19)
  807968:	1021883a 	mov	r16,r2
  80796c:	10000015 	stw	zero,0(r2)
  807970:	003fd006 	br	8078b4 <__pow5mult+0x60>

00807974 <__s2b>:
  807974:	defff904 	addi	sp,sp,-28
  807978:	dcc00315 	stw	r19,12(sp)
  80797c:	dc800215 	stw	r18,8(sp)
  807980:	2827883a 	mov	r19,r5
  807984:	2025883a 	mov	r18,r4
  807988:	01400244 	movi	r5,9
  80798c:	39000204 	addi	r4,r7,8
  807990:	dd000415 	stw	r20,16(sp)
  807994:	dc400115 	stw	r17,4(sp)
  807998:	dfc00615 	stw	ra,24(sp)
  80799c:	dd400515 	stw	r21,20(sp)
  8079a0:	dc000015 	stw	r16,0(sp)
  8079a4:	3829883a 	mov	r20,r7
  8079a8:	3023883a 	mov	r17,r6
  8079ac:	080a1680 	call	80a168 <__divsi3>
  8079b0:	00c00044 	movi	r3,1
  8079b4:	1880350e 	bge	r3,r2,807a8c <__s2b+0x118>
  8079b8:	000b883a 	mov	r5,zero
  8079bc:	18c7883a 	add	r3,r3,r3
  8079c0:	29400044 	addi	r5,r5,1
  8079c4:	18bffd16 	blt	r3,r2,8079bc <__s2b+0x48>
  8079c8:	9009883a 	mov	r4,r18
  8079cc:	0806f880 	call	806f88 <_Balloc>
  8079d0:	1011883a 	mov	r8,r2
  8079d4:	d8800717 	ldw	r2,28(sp)
  8079d8:	00c00044 	movi	r3,1
  8079dc:	01800244 	movi	r6,9
  8079e0:	40800515 	stw	r2,20(r8)
  8079e4:	40c00415 	stw	r3,16(r8)
  8079e8:	3440260e 	bge	r6,r17,807a84 <__s2b+0x110>
  8079ec:	3021883a 	mov	r16,r6
  8079f0:	99ab883a 	add	r21,r19,r6
  8079f4:	9c05883a 	add	r2,r19,r16
  8079f8:	11c00007 	ldb	r7,0(r2)
  8079fc:	400b883a 	mov	r5,r8
  807a00:	9009883a 	mov	r4,r18
  807a04:	39fff404 	addi	r7,r7,-48
  807a08:	01800284 	movi	r6,10
  807a0c:	08077280 	call	807728 <__multadd>
  807a10:	84000044 	addi	r16,r16,1
  807a14:	1011883a 	mov	r8,r2
  807a18:	8c3ff61e 	bne	r17,r16,8079f4 <__s2b+0x80>
  807a1c:	ac45883a 	add	r2,r21,r17
  807a20:	117ffe04 	addi	r5,r2,-8
  807a24:	880d883a 	mov	r6,r17
  807a28:	35000c0e 	bge	r6,r20,807a5c <__s2b+0xe8>
  807a2c:	a185c83a 	sub	r2,r20,r6
  807a30:	2821883a 	mov	r16,r5
  807a34:	28a3883a 	add	r17,r5,r2
  807a38:	81c00007 	ldb	r7,0(r16)
  807a3c:	400b883a 	mov	r5,r8
  807a40:	9009883a 	mov	r4,r18
  807a44:	39fff404 	addi	r7,r7,-48
  807a48:	01800284 	movi	r6,10
  807a4c:	08077280 	call	807728 <__multadd>
  807a50:	84000044 	addi	r16,r16,1
  807a54:	1011883a 	mov	r8,r2
  807a58:	847ff71e 	bne	r16,r17,807a38 <__s2b+0xc4>
  807a5c:	4005883a 	mov	r2,r8
  807a60:	dfc00617 	ldw	ra,24(sp)
  807a64:	dd400517 	ldw	r21,20(sp)
  807a68:	dd000417 	ldw	r20,16(sp)
  807a6c:	dcc00317 	ldw	r19,12(sp)
  807a70:	dc800217 	ldw	r18,8(sp)
  807a74:	dc400117 	ldw	r17,4(sp)
  807a78:	dc000017 	ldw	r16,0(sp)
  807a7c:	dec00704 	addi	sp,sp,28
  807a80:	f800283a 	ret
  807a84:	99400284 	addi	r5,r19,10
  807a88:	003fe706 	br	807a28 <__s2b+0xb4>
  807a8c:	000b883a 	mov	r5,zero
  807a90:	003fcd06 	br	8079c8 <__s2b+0x54>

00807a94 <_read_r>:
  807a94:	defffd04 	addi	sp,sp,-12
  807a98:	dc000015 	stw	r16,0(sp)
  807a9c:	04002074 	movhi	r16,129
  807aa0:	840b6b04 	addi	r16,r16,11692
  807aa4:	dc400115 	stw	r17,4(sp)
  807aa8:	80000015 	stw	zero,0(r16)
  807aac:	2023883a 	mov	r17,r4
  807ab0:	2809883a 	mov	r4,r5
  807ab4:	300b883a 	mov	r5,r6
  807ab8:	380d883a 	mov	r6,r7
  807abc:	dfc00215 	stw	ra,8(sp)
  807ac0:	080b2e00 	call	80b2e0 <read>
  807ac4:	1007883a 	mov	r3,r2
  807ac8:	00bfffc4 	movi	r2,-1
  807acc:	18800626 	beq	r3,r2,807ae8 <_read_r+0x54>
  807ad0:	1805883a 	mov	r2,r3
  807ad4:	dfc00217 	ldw	ra,8(sp)
  807ad8:	dc400117 	ldw	r17,4(sp)
  807adc:	dc000017 	ldw	r16,0(sp)
  807ae0:	dec00304 	addi	sp,sp,12
  807ae4:	f800283a 	ret
  807ae8:	80800017 	ldw	r2,0(r16)
  807aec:	103ff826 	beq	r2,zero,807ad0 <_read_r+0x3c>
  807af0:	88800015 	stw	r2,0(r17)
  807af4:	1805883a 	mov	r2,r3
  807af8:	dfc00217 	ldw	ra,8(sp)
  807afc:	dc400117 	ldw	r17,4(sp)
  807b00:	dc000017 	ldw	r16,0(sp)
  807b04:	dec00304 	addi	sp,sp,12
  807b08:	f800283a 	ret

00807b0c <_realloc_r>:
  807b0c:	defff404 	addi	sp,sp,-48
  807b10:	dd800815 	stw	r22,32(sp)
  807b14:	dc800415 	stw	r18,16(sp)
  807b18:	dc400315 	stw	r17,12(sp)
  807b1c:	dfc00b15 	stw	ra,44(sp)
  807b20:	df000a15 	stw	fp,40(sp)
  807b24:	ddc00915 	stw	r23,36(sp)
  807b28:	dd400715 	stw	r21,28(sp)
  807b2c:	dd000615 	stw	r20,24(sp)
  807b30:	dcc00515 	stw	r19,20(sp)
  807b34:	dc000215 	stw	r16,8(sp)
  807b38:	2825883a 	mov	r18,r5
  807b3c:	3023883a 	mov	r17,r6
  807b40:	202d883a 	mov	r22,r4
  807b44:	2800c926 	beq	r5,zero,807e6c <_realloc_r+0x360>
  807b48:	080afbc0 	call	80afbc <__malloc_lock>
  807b4c:	943ffe04 	addi	r16,r18,-8
  807b50:	88c002c4 	addi	r3,r17,11
  807b54:	00800584 	movi	r2,22
  807b58:	82000117 	ldw	r8,4(r16)
  807b5c:	10c01b2e 	bgeu	r2,r3,807bcc <_realloc_r+0xc0>
  807b60:	00bffe04 	movi	r2,-8
  807b64:	188e703a 	and	r7,r3,r2
  807b68:	3839883a 	mov	fp,r7
  807b6c:	38001a16 	blt	r7,zero,807bd8 <_realloc_r+0xcc>
  807b70:	e4401936 	bltu	fp,r17,807bd8 <_realloc_r+0xcc>
  807b74:	013fff04 	movi	r4,-4
  807b78:	4126703a 	and	r19,r8,r4
  807b7c:	99c02616 	blt	r19,r7,807c18 <_realloc_r+0x10c>
  807b80:	802b883a 	mov	r21,r16
  807b84:	9829883a 	mov	r20,r19
  807b88:	84000204 	addi	r16,r16,8
  807b8c:	a80f883a 	mov	r7,r21
  807b90:	a70dc83a 	sub	r6,r20,fp
  807b94:	008003c4 	movi	r2,15
  807b98:	1180c136 	bltu	r2,r6,807ea0 <_realloc_r+0x394>
  807b9c:	38800117 	ldw	r2,4(r7)
  807ba0:	a549883a 	add	r4,r20,r21
  807ba4:	1080004c 	andi	r2,r2,1
  807ba8:	a084b03a 	or	r2,r20,r2
  807bac:	38800115 	stw	r2,4(r7)
  807bb0:	20c00117 	ldw	r3,4(r4)
  807bb4:	18c00054 	ori	r3,r3,1
  807bb8:	20c00115 	stw	r3,4(r4)
  807bbc:	b009883a 	mov	r4,r22
  807bc0:	080afdc0 	call	80afdc <__malloc_unlock>
  807bc4:	8023883a 	mov	r17,r16
  807bc8:	00000606 	br	807be4 <_realloc_r+0xd8>
  807bcc:	01c00404 	movi	r7,16
  807bd0:	3839883a 	mov	fp,r7
  807bd4:	e47fe72e 	bgeu	fp,r17,807b74 <_realloc_r+0x68>
  807bd8:	00800304 	movi	r2,12
  807bdc:	0023883a 	mov	r17,zero
  807be0:	b0800015 	stw	r2,0(r22)
  807be4:	8805883a 	mov	r2,r17
  807be8:	dfc00b17 	ldw	ra,44(sp)
  807bec:	df000a17 	ldw	fp,40(sp)
  807bf0:	ddc00917 	ldw	r23,36(sp)
  807bf4:	dd800817 	ldw	r22,32(sp)
  807bf8:	dd400717 	ldw	r21,28(sp)
  807bfc:	dd000617 	ldw	r20,24(sp)
  807c00:	dcc00517 	ldw	r19,20(sp)
  807c04:	dc800417 	ldw	r18,16(sp)
  807c08:	dc400317 	ldw	r17,12(sp)
  807c0c:	dc000217 	ldw	r16,8(sp)
  807c10:	dec00c04 	addi	sp,sp,48
  807c14:	f800283a 	ret
  807c18:	00802074 	movhi	r2,129
  807c1c:	10be4704 	addi	r2,r2,-1764
  807c20:	12400217 	ldw	r9,8(r2)
  807c24:	84cd883a 	add	r6,r16,r19
  807c28:	802b883a 	mov	r21,r16
  807c2c:	3240b926 	beq	r6,r9,807f14 <_realloc_r+0x408>
  807c30:	31400117 	ldw	r5,4(r6)
  807c34:	00bfff84 	movi	r2,-2
  807c38:	2884703a 	and	r2,r5,r2
  807c3c:	1185883a 	add	r2,r2,r6
  807c40:	10c00117 	ldw	r3,4(r2)
  807c44:	18c0004c 	andi	r3,r3,1
  807c48:	1807003a 	cmpeq	r3,r3,zero
  807c4c:	1800a326 	beq	r3,zero,807edc <_realloc_r+0x3d0>
  807c50:	2908703a 	and	r4,r5,r4
  807c54:	9929883a 	add	r20,r19,r4
  807c58:	a1c0a30e 	bge	r20,r7,807ee8 <_realloc_r+0x3dc>
  807c5c:	4080004c 	andi	r2,r8,1
  807c60:	1000551e 	bne	r2,zero,807db8 <_realloc_r+0x2ac>
  807c64:	80800017 	ldw	r2,0(r16)
  807c68:	80afc83a 	sub	r23,r16,r2
  807c6c:	b8c00117 	ldw	r3,4(r23)
  807c70:	00bfff04 	movi	r2,-4
  807c74:	1884703a 	and	r2,r3,r2
  807c78:	30002e26 	beq	r6,zero,807d34 <_realloc_r+0x228>
  807c7c:	3240b926 	beq	r6,r9,807f64 <_realloc_r+0x458>
  807c80:	98a9883a 	add	r20,r19,r2
  807c84:	2509883a 	add	r4,r4,r20
  807c88:	d9000015 	stw	r4,0(sp)
  807c8c:	21c02a16 	blt	r4,r7,807d38 <_realloc_r+0x22c>
  807c90:	30800317 	ldw	r2,12(r6)
  807c94:	30c00217 	ldw	r3,8(r6)
  807c98:	01400904 	movi	r5,36
  807c9c:	99bfff04 	addi	r6,r19,-4
  807ca0:	18800315 	stw	r2,12(r3)
  807ca4:	10c00215 	stw	r3,8(r2)
  807ca8:	b9000317 	ldw	r4,12(r23)
  807cac:	b8800217 	ldw	r2,8(r23)
  807cb0:	b82b883a 	mov	r21,r23
  807cb4:	bc000204 	addi	r16,r23,8
  807cb8:	20800215 	stw	r2,8(r4)
  807cbc:	11000315 	stw	r4,12(r2)
  807cc0:	2980e436 	bltu	r5,r6,808054 <_realloc_r+0x548>
  807cc4:	008004c4 	movi	r2,19
  807cc8:	9009883a 	mov	r4,r18
  807ccc:	8011883a 	mov	r8,r16
  807cd0:	11800f2e 	bgeu	r2,r6,807d10 <_realloc_r+0x204>
  807cd4:	90800017 	ldw	r2,0(r18)
  807cd8:	ba000404 	addi	r8,r23,16
  807cdc:	91000204 	addi	r4,r18,8
  807ce0:	b8800215 	stw	r2,8(r23)
  807ce4:	90c00117 	ldw	r3,4(r18)
  807ce8:	008006c4 	movi	r2,27
  807cec:	b8c00315 	stw	r3,12(r23)
  807cf0:	1180072e 	bgeu	r2,r6,807d10 <_realloc_r+0x204>
  807cf4:	90c00217 	ldw	r3,8(r18)
  807cf8:	ba000604 	addi	r8,r23,24
  807cfc:	91000404 	addi	r4,r18,16
  807d00:	b8c00415 	stw	r3,16(r23)
  807d04:	90800317 	ldw	r2,12(r18)
  807d08:	b8800515 	stw	r2,20(r23)
  807d0c:	3140e726 	beq	r6,r5,8080ac <_realloc_r+0x5a0>
  807d10:	20800017 	ldw	r2,0(r4)
  807d14:	dd000017 	ldw	r20,0(sp)
  807d18:	b80f883a 	mov	r7,r23
  807d1c:	40800015 	stw	r2,0(r8)
  807d20:	20c00117 	ldw	r3,4(r4)
  807d24:	40c00115 	stw	r3,4(r8)
  807d28:	20800217 	ldw	r2,8(r4)
  807d2c:	40800215 	stw	r2,8(r8)
  807d30:	003f9706 	br	807b90 <_realloc_r+0x84>
  807d34:	98a9883a 	add	r20,r19,r2
  807d38:	a1c01f16 	blt	r20,r7,807db8 <_realloc_r+0x2ac>
  807d3c:	b8c00317 	ldw	r3,12(r23)
  807d40:	b8800217 	ldw	r2,8(r23)
  807d44:	99bfff04 	addi	r6,r19,-4
  807d48:	01400904 	movi	r5,36
  807d4c:	b82b883a 	mov	r21,r23
  807d50:	18800215 	stw	r2,8(r3)
  807d54:	10c00315 	stw	r3,12(r2)
  807d58:	bc000204 	addi	r16,r23,8
  807d5c:	2980c336 	bltu	r5,r6,80806c <_realloc_r+0x560>
  807d60:	008004c4 	movi	r2,19
  807d64:	9009883a 	mov	r4,r18
  807d68:	8011883a 	mov	r8,r16
  807d6c:	11800f2e 	bgeu	r2,r6,807dac <_realloc_r+0x2a0>
  807d70:	90800017 	ldw	r2,0(r18)
  807d74:	ba000404 	addi	r8,r23,16
  807d78:	91000204 	addi	r4,r18,8
  807d7c:	b8800215 	stw	r2,8(r23)
  807d80:	90c00117 	ldw	r3,4(r18)
  807d84:	008006c4 	movi	r2,27
  807d88:	b8c00315 	stw	r3,12(r23)
  807d8c:	1180072e 	bgeu	r2,r6,807dac <_realloc_r+0x2a0>
  807d90:	90c00217 	ldw	r3,8(r18)
  807d94:	ba000604 	addi	r8,r23,24
  807d98:	91000404 	addi	r4,r18,16
  807d9c:	b8c00415 	stw	r3,16(r23)
  807da0:	90800317 	ldw	r2,12(r18)
  807da4:	b8800515 	stw	r2,20(r23)
  807da8:	3140c726 	beq	r6,r5,8080c8 <_realloc_r+0x5bc>
  807dac:	20800017 	ldw	r2,0(r4)
  807db0:	b80f883a 	mov	r7,r23
  807db4:	003fd906 	br	807d1c <_realloc_r+0x210>
  807db8:	880b883a 	mov	r5,r17
  807dbc:	b009883a 	mov	r4,r22
  807dc0:	08019d40 	call	8019d4 <_malloc_r>
  807dc4:	1023883a 	mov	r17,r2
  807dc8:	10002526 	beq	r2,zero,807e60 <_realloc_r+0x354>
  807dcc:	80800117 	ldw	r2,4(r16)
  807dd0:	00ffff84 	movi	r3,-2
  807dd4:	893ffe04 	addi	r4,r17,-8
  807dd8:	10c4703a 	and	r2,r2,r3
  807ddc:	8085883a 	add	r2,r16,r2
  807de0:	20809526 	beq	r4,r2,808038 <_realloc_r+0x52c>
  807de4:	99bfff04 	addi	r6,r19,-4
  807de8:	01c00904 	movi	r7,36
  807dec:	39804536 	bltu	r7,r6,807f04 <_realloc_r+0x3f8>
  807df0:	008004c4 	movi	r2,19
  807df4:	9009883a 	mov	r4,r18
  807df8:	880b883a 	mov	r5,r17
  807dfc:	11800f2e 	bgeu	r2,r6,807e3c <_realloc_r+0x330>
  807e00:	90800017 	ldw	r2,0(r18)
  807e04:	89400204 	addi	r5,r17,8
  807e08:	91000204 	addi	r4,r18,8
  807e0c:	88800015 	stw	r2,0(r17)
  807e10:	90c00117 	ldw	r3,4(r18)
  807e14:	008006c4 	movi	r2,27
  807e18:	88c00115 	stw	r3,4(r17)
  807e1c:	1180072e 	bgeu	r2,r6,807e3c <_realloc_r+0x330>
  807e20:	90c00217 	ldw	r3,8(r18)
  807e24:	89400404 	addi	r5,r17,16
  807e28:	91000404 	addi	r4,r18,16
  807e2c:	88c00215 	stw	r3,8(r17)
  807e30:	90800317 	ldw	r2,12(r18)
  807e34:	88800315 	stw	r2,12(r17)
  807e38:	31c09126 	beq	r6,r7,808080 <_realloc_r+0x574>
  807e3c:	20800017 	ldw	r2,0(r4)
  807e40:	28800015 	stw	r2,0(r5)
  807e44:	20c00117 	ldw	r3,4(r4)
  807e48:	28c00115 	stw	r3,4(r5)
  807e4c:	20800217 	ldw	r2,8(r4)
  807e50:	28800215 	stw	r2,8(r5)
  807e54:	900b883a 	mov	r5,r18
  807e58:	b009883a 	mov	r4,r22
  807e5c:	0800ed80 	call	800ed8 <_free_r>
  807e60:	b009883a 	mov	r4,r22
  807e64:	080afdc0 	call	80afdc <__malloc_unlock>
  807e68:	003f5e06 	br	807be4 <_realloc_r+0xd8>
  807e6c:	300b883a 	mov	r5,r6
  807e70:	dfc00b17 	ldw	ra,44(sp)
  807e74:	df000a17 	ldw	fp,40(sp)
  807e78:	ddc00917 	ldw	r23,36(sp)
  807e7c:	dd800817 	ldw	r22,32(sp)
  807e80:	dd400717 	ldw	r21,28(sp)
  807e84:	dd000617 	ldw	r20,24(sp)
  807e88:	dcc00517 	ldw	r19,20(sp)
  807e8c:	dc800417 	ldw	r18,16(sp)
  807e90:	dc400317 	ldw	r17,12(sp)
  807e94:	dc000217 	ldw	r16,8(sp)
  807e98:	dec00c04 	addi	sp,sp,48
  807e9c:	08019d41 	jmpi	8019d4 <_malloc_r>
  807ea0:	38800117 	ldw	r2,4(r7)
  807ea4:	e54b883a 	add	r5,fp,r21
  807ea8:	31000054 	ori	r4,r6,1
  807eac:	1080004c 	andi	r2,r2,1
  807eb0:	1704b03a 	or	r2,r2,fp
  807eb4:	38800115 	stw	r2,4(r7)
  807eb8:	29000115 	stw	r4,4(r5)
  807ebc:	2987883a 	add	r3,r5,r6
  807ec0:	18800117 	ldw	r2,4(r3)
  807ec4:	29400204 	addi	r5,r5,8
  807ec8:	b009883a 	mov	r4,r22
  807ecc:	10800054 	ori	r2,r2,1
  807ed0:	18800115 	stw	r2,4(r3)
  807ed4:	0800ed80 	call	800ed8 <_free_r>
  807ed8:	003f3806 	br	807bbc <_realloc_r+0xb0>
  807edc:	000d883a 	mov	r6,zero
  807ee0:	0009883a 	mov	r4,zero
  807ee4:	003f5d06 	br	807c5c <_realloc_r+0x150>
  807ee8:	30c00217 	ldw	r3,8(r6)
  807eec:	30800317 	ldw	r2,12(r6)
  807ef0:	800f883a 	mov	r7,r16
  807ef4:	84000204 	addi	r16,r16,8
  807ef8:	10c00215 	stw	r3,8(r2)
  807efc:	18800315 	stw	r2,12(r3)
  807f00:	003f2306 	br	807b90 <_realloc_r+0x84>
  807f04:	8809883a 	mov	r4,r17
  807f08:	900b883a 	mov	r5,r18
  807f0c:	08069280 	call	806928 <memmove>
  807f10:	003fd006 	br	807e54 <_realloc_r+0x348>
  807f14:	30800117 	ldw	r2,4(r6)
  807f18:	e0c00404 	addi	r3,fp,16
  807f1c:	1108703a 	and	r4,r2,r4
  807f20:	9905883a 	add	r2,r19,r4
  807f24:	10ff4d16 	blt	r2,r3,807c5c <_realloc_r+0x150>
  807f28:	1705c83a 	sub	r2,r2,fp
  807f2c:	870b883a 	add	r5,r16,fp
  807f30:	10800054 	ori	r2,r2,1
  807f34:	28800115 	stw	r2,4(r5)
  807f38:	80c00117 	ldw	r3,4(r16)
  807f3c:	00802074 	movhi	r2,129
  807f40:	10be4704 	addi	r2,r2,-1764
  807f44:	b009883a 	mov	r4,r22
  807f48:	18c0004c 	andi	r3,r3,1
  807f4c:	e0c6b03a 	or	r3,fp,r3
  807f50:	11400215 	stw	r5,8(r2)
  807f54:	80c00115 	stw	r3,4(r16)
  807f58:	080afdc0 	call	80afdc <__malloc_unlock>
  807f5c:	84400204 	addi	r17,r16,8
  807f60:	003f2006 	br	807be4 <_realloc_r+0xd8>
  807f64:	98a9883a 	add	r20,r19,r2
  807f68:	2509883a 	add	r4,r4,r20
  807f6c:	e0800404 	addi	r2,fp,16
  807f70:	d9000115 	stw	r4,4(sp)
  807f74:	20bf7016 	blt	r4,r2,807d38 <_realloc_r+0x22c>
  807f78:	b8c00317 	ldw	r3,12(r23)
  807f7c:	b8800217 	ldw	r2,8(r23)
  807f80:	99bfff04 	addi	r6,r19,-4
  807f84:	01400904 	movi	r5,36
  807f88:	18800215 	stw	r2,8(r3)
  807f8c:	10c00315 	stw	r3,12(r2)
  807f90:	bc400204 	addi	r17,r23,8
  807f94:	29804136 	bltu	r5,r6,80809c <_realloc_r+0x590>
  807f98:	008004c4 	movi	r2,19
  807f9c:	9009883a 	mov	r4,r18
  807fa0:	880f883a 	mov	r7,r17
  807fa4:	11800f2e 	bgeu	r2,r6,807fe4 <_realloc_r+0x4d8>
  807fa8:	90800017 	ldw	r2,0(r18)
  807fac:	b9c00404 	addi	r7,r23,16
  807fb0:	91000204 	addi	r4,r18,8
  807fb4:	b8800215 	stw	r2,8(r23)
  807fb8:	90c00117 	ldw	r3,4(r18)
  807fbc:	008006c4 	movi	r2,27
  807fc0:	b8c00315 	stw	r3,12(r23)
  807fc4:	1180072e 	bgeu	r2,r6,807fe4 <_realloc_r+0x4d8>
  807fc8:	90c00217 	ldw	r3,8(r18)
  807fcc:	b9c00604 	addi	r7,r23,24
  807fd0:	91000404 	addi	r4,r18,16
  807fd4:	b8c00415 	stw	r3,16(r23)
  807fd8:	90800317 	ldw	r2,12(r18)
  807fdc:	b8800515 	stw	r2,20(r23)
  807fe0:	31404026 	beq	r6,r5,8080e4 <_realloc_r+0x5d8>
  807fe4:	20800017 	ldw	r2,0(r4)
  807fe8:	38800015 	stw	r2,0(r7)
  807fec:	20c00117 	ldw	r3,4(r4)
  807ff0:	38c00115 	stw	r3,4(r7)
  807ff4:	20800217 	ldw	r2,8(r4)
  807ff8:	38800215 	stw	r2,8(r7)
  807ffc:	d8c00117 	ldw	r3,4(sp)
  808000:	bf0b883a 	add	r5,r23,fp
  808004:	b009883a 	mov	r4,r22
  808008:	1f05c83a 	sub	r2,r3,fp
  80800c:	10800054 	ori	r2,r2,1
  808010:	28800115 	stw	r2,4(r5)
  808014:	b8c00117 	ldw	r3,4(r23)
  808018:	00802074 	movhi	r2,129
  80801c:	10be4704 	addi	r2,r2,-1764
  808020:	11400215 	stw	r5,8(r2)
  808024:	18c0004c 	andi	r3,r3,1
  808028:	e0c6b03a 	or	r3,fp,r3
  80802c:	b8c00115 	stw	r3,4(r23)
  808030:	080afdc0 	call	80afdc <__malloc_unlock>
  808034:	003eeb06 	br	807be4 <_realloc_r+0xd8>
  808038:	20800117 	ldw	r2,4(r4)
  80803c:	00ffff04 	movi	r3,-4
  808040:	800f883a 	mov	r7,r16
  808044:	10c4703a 	and	r2,r2,r3
  808048:	98a9883a 	add	r20,r19,r2
  80804c:	84000204 	addi	r16,r16,8
  808050:	003ecf06 	br	807b90 <_realloc_r+0x84>
  808054:	900b883a 	mov	r5,r18
  808058:	8009883a 	mov	r4,r16
  80805c:	08069280 	call	806928 <memmove>
  808060:	dd000017 	ldw	r20,0(sp)
  808064:	b80f883a 	mov	r7,r23
  808068:	003ec906 	br	807b90 <_realloc_r+0x84>
  80806c:	900b883a 	mov	r5,r18
  808070:	8009883a 	mov	r4,r16
  808074:	08069280 	call	806928 <memmove>
  808078:	b80f883a 	mov	r7,r23
  80807c:	003ec406 	br	807b90 <_realloc_r+0x84>
  808080:	90c00417 	ldw	r3,16(r18)
  808084:	89400604 	addi	r5,r17,24
  808088:	91000604 	addi	r4,r18,24
  80808c:	88c00415 	stw	r3,16(r17)
  808090:	90800517 	ldw	r2,20(r18)
  808094:	88800515 	stw	r2,20(r17)
  808098:	003f6806 	br	807e3c <_realloc_r+0x330>
  80809c:	900b883a 	mov	r5,r18
  8080a0:	8809883a 	mov	r4,r17
  8080a4:	08069280 	call	806928 <memmove>
  8080a8:	003fd406 	br	807ffc <_realloc_r+0x4f0>
  8080ac:	90c00417 	ldw	r3,16(r18)
  8080b0:	91000604 	addi	r4,r18,24
  8080b4:	ba000804 	addi	r8,r23,32
  8080b8:	b8c00615 	stw	r3,24(r23)
  8080bc:	90800517 	ldw	r2,20(r18)
  8080c0:	b8800715 	stw	r2,28(r23)
  8080c4:	003f1206 	br	807d10 <_realloc_r+0x204>
  8080c8:	90c00417 	ldw	r3,16(r18)
  8080cc:	91000604 	addi	r4,r18,24
  8080d0:	ba000804 	addi	r8,r23,32
  8080d4:	b8c00615 	stw	r3,24(r23)
  8080d8:	90800517 	ldw	r2,20(r18)
  8080dc:	b8800715 	stw	r2,28(r23)
  8080e0:	003f3206 	br	807dac <_realloc_r+0x2a0>
  8080e4:	90c00417 	ldw	r3,16(r18)
  8080e8:	91000604 	addi	r4,r18,24
  8080ec:	b9c00804 	addi	r7,r23,32
  8080f0:	b8c00615 	stw	r3,24(r23)
  8080f4:	90800517 	ldw	r2,20(r18)
  8080f8:	b8800715 	stw	r2,28(r23)
  8080fc:	003fb906 	br	807fe4 <_realloc_r+0x4d8>

00808100 <__isinfd>:
  808100:	200d883a 	mov	r6,r4
  808104:	0109c83a 	sub	r4,zero,r4
  808108:	2188b03a 	or	r4,r4,r6
  80810c:	2008d7fa 	srli	r4,r4,31
  808110:	00a00034 	movhi	r2,32768
  808114:	10bfffc4 	addi	r2,r2,-1
  808118:	1144703a 	and	r2,r2,r5
  80811c:	2088b03a 	or	r4,r4,r2
  808120:	009ffc34 	movhi	r2,32752
  808124:	1105c83a 	sub	r2,r2,r4
  808128:	0087c83a 	sub	r3,zero,r2
  80812c:	10c4b03a 	or	r2,r2,r3
  808130:	1004d7fa 	srli	r2,r2,31
  808134:	00c00044 	movi	r3,1
  808138:	1885c83a 	sub	r2,r3,r2
  80813c:	f800283a 	ret

00808140 <__isnand>:
  808140:	200d883a 	mov	r6,r4
  808144:	0109c83a 	sub	r4,zero,r4
  808148:	2188b03a 	or	r4,r4,r6
  80814c:	2008d7fa 	srli	r4,r4,31
  808150:	00a00034 	movhi	r2,32768
  808154:	10bfffc4 	addi	r2,r2,-1
  808158:	1144703a 	and	r2,r2,r5
  80815c:	2088b03a 	or	r4,r4,r2
  808160:	009ffc34 	movhi	r2,32752
  808164:	1105c83a 	sub	r2,r2,r4
  808168:	1004d7fa 	srli	r2,r2,31
  80816c:	f800283a 	ret

00808170 <strcmp>:
  808170:	2144b03a 	or	r2,r4,r5
  808174:	108000cc 	andi	r2,r2,3
  808178:	10001d1e 	bne	r2,zero,8081f0 <strcmp+0x80>
  80817c:	200f883a 	mov	r7,r4
  808180:	28800017 	ldw	r2,0(r5)
  808184:	21000017 	ldw	r4,0(r4)
  808188:	280d883a 	mov	r6,r5
  80818c:	2080161e 	bne	r4,r2,8081e8 <strcmp+0x78>
  808190:	023fbff4 	movhi	r8,65279
  808194:	423fbfc4 	addi	r8,r8,-257
  808198:	2207883a 	add	r3,r4,r8
  80819c:	01602074 	movhi	r5,32897
  8081a0:	29602004 	addi	r5,r5,-32640
  8081a4:	1946703a 	and	r3,r3,r5
  8081a8:	0104303a 	nor	r2,zero,r4
  8081ac:	10c4703a 	and	r2,r2,r3
  8081b0:	10001c1e 	bne	r2,zero,808224 <strcmp+0xb4>
  8081b4:	4013883a 	mov	r9,r8
  8081b8:	2811883a 	mov	r8,r5
  8081bc:	00000106 	br	8081c4 <strcmp+0x54>
  8081c0:	1800181e 	bne	r3,zero,808224 <strcmp+0xb4>
  8081c4:	39c00104 	addi	r7,r7,4
  8081c8:	39000017 	ldw	r4,0(r7)
  8081cc:	31800104 	addi	r6,r6,4
  8081d0:	31400017 	ldw	r5,0(r6)
  8081d4:	2245883a 	add	r2,r4,r9
  8081d8:	1204703a 	and	r2,r2,r8
  8081dc:	0106303a 	nor	r3,zero,r4
  8081e0:	1886703a 	and	r3,r3,r2
  8081e4:	217ff626 	beq	r4,r5,8081c0 <strcmp+0x50>
  8081e8:	3809883a 	mov	r4,r7
  8081ec:	300b883a 	mov	r5,r6
  8081f0:	20c00007 	ldb	r3,0(r4)
  8081f4:	1800051e 	bne	r3,zero,80820c <strcmp+0x9c>
  8081f8:	00000606 	br	808214 <strcmp+0xa4>
  8081fc:	21000044 	addi	r4,r4,1
  808200:	20c00007 	ldb	r3,0(r4)
  808204:	29400044 	addi	r5,r5,1
  808208:	18000226 	beq	r3,zero,808214 <strcmp+0xa4>
  80820c:	28800007 	ldb	r2,0(r5)
  808210:	18bffa26 	beq	r3,r2,8081fc <strcmp+0x8c>
  808214:	20c00003 	ldbu	r3,0(r4)
  808218:	28800003 	ldbu	r2,0(r5)
  80821c:	1885c83a 	sub	r2,r3,r2
  808220:	f800283a 	ret
  808224:	0005883a 	mov	r2,zero
  808228:	f800283a 	ret

0080822c <_calloc_r>:
  80822c:	defffe04 	addi	sp,sp,-8
  808230:	dc400015 	stw	r17,0(sp)
  808234:	2023883a 	mov	r17,r4
  808238:	2809883a 	mov	r4,r5
  80823c:	300b883a 	mov	r5,r6
  808240:	dfc00115 	stw	ra,4(sp)
  808244:	080a2380 	call	80a238 <__mulsi3>
  808248:	100b883a 	mov	r5,r2
  80824c:	8809883a 	mov	r4,r17
  808250:	08019d40 	call	8019d4 <_malloc_r>
  808254:	1023883a 	mov	r17,r2
  808258:	01c00904 	movi	r7,36
  80825c:	10000d26 	beq	r2,zero,808294 <_calloc_r+0x68>
  808260:	10ffff17 	ldw	r3,-4(r2)
  808264:	1009883a 	mov	r4,r2
  808268:	00bfff04 	movi	r2,-4
  80826c:	1886703a 	and	r3,r3,r2
  808270:	1887883a 	add	r3,r3,r2
  808274:	180d883a 	mov	r6,r3
  808278:	000b883a 	mov	r5,zero
  80827c:	38c01736 	bltu	r7,r3,8082dc <_calloc_r+0xb0>
  808280:	008004c4 	movi	r2,19
  808284:	10c00836 	bltu	r2,r3,8082a8 <_calloc_r+0x7c>
  808288:	20000215 	stw	zero,8(r4)
  80828c:	20000015 	stw	zero,0(r4)
  808290:	20000115 	stw	zero,4(r4)
  808294:	8805883a 	mov	r2,r17
  808298:	dfc00117 	ldw	ra,4(sp)
  80829c:	dc400017 	ldw	r17,0(sp)
  8082a0:	dec00204 	addi	sp,sp,8
  8082a4:	f800283a 	ret
  8082a8:	008006c4 	movi	r2,27
  8082ac:	88000015 	stw	zero,0(r17)
  8082b0:	88000115 	stw	zero,4(r17)
  8082b4:	89000204 	addi	r4,r17,8
  8082b8:	10fff32e 	bgeu	r2,r3,808288 <_calloc_r+0x5c>
  8082bc:	88000215 	stw	zero,8(r17)
  8082c0:	88000315 	stw	zero,12(r17)
  8082c4:	89000404 	addi	r4,r17,16
  8082c8:	19ffef1e 	bne	r3,r7,808288 <_calloc_r+0x5c>
  8082cc:	89000604 	addi	r4,r17,24
  8082d0:	88000415 	stw	zero,16(r17)
  8082d4:	88000515 	stw	zero,20(r17)
  8082d8:	003feb06 	br	808288 <_calloc_r+0x5c>
  8082dc:	08021140 	call	802114 <memset>
  8082e0:	8805883a 	mov	r2,r17
  8082e4:	dfc00117 	ldw	ra,4(sp)
  8082e8:	dc400017 	ldw	r17,0(sp)
  8082ec:	dec00204 	addi	sp,sp,8
  8082f0:	f800283a 	ret

008082f4 <__udivdi3>:
  8082f4:	defff104 	addi	sp,sp,-60
  8082f8:	0015883a 	mov	r10,zero
  8082fc:	2005883a 	mov	r2,r4
  808300:	3011883a 	mov	r8,r6
  808304:	df000d15 	stw	fp,52(sp)
  808308:	dd400a15 	stw	r21,40(sp)
  80830c:	dcc00815 	stw	r19,32(sp)
  808310:	dfc00e15 	stw	ra,56(sp)
  808314:	ddc00c15 	stw	r23,48(sp)
  808318:	dd800b15 	stw	r22,44(sp)
  80831c:	dd000915 	stw	r20,36(sp)
  808320:	dc800715 	stw	r18,28(sp)
  808324:	dc400615 	stw	r17,24(sp)
  808328:	dc000515 	stw	r16,20(sp)
  80832c:	da800315 	stw	r10,12(sp)
  808330:	4027883a 	mov	r19,r8
  808334:	1039883a 	mov	fp,r2
  808338:	282b883a 	mov	r21,r5
  80833c:	da800415 	stw	r10,16(sp)
  808340:	3800401e 	bne	r7,zero,808444 <__udivdi3+0x150>
  808344:	2a006536 	bltu	r5,r8,8084dc <__udivdi3+0x1e8>
  808348:	4000b526 	beq	r8,zero,808620 <__udivdi3+0x32c>
  80834c:	00bfffd4 	movui	r2,65535
  808350:	14c0ad36 	bltu	r2,r19,808608 <__udivdi3+0x314>
  808354:	00803fc4 	movi	r2,255
  808358:	14c15e36 	bltu	r2,r19,8088d4 <__udivdi3+0x5e0>
  80835c:	000b883a 	mov	r5,zero
  808360:	0005883a 	mov	r2,zero
  808364:	9884d83a 	srl	r2,r19,r2
  808368:	01002074 	movhi	r4,129
  80836c:	213c5204 	addi	r4,r4,-3768
  808370:	01800804 	movi	r6,32
  808374:	1105883a 	add	r2,r2,r4
  808378:	10c00003 	ldbu	r3,0(r2)
  80837c:	28c7883a 	add	r3,r5,r3
  808380:	30e9c83a 	sub	r20,r6,r3
  808384:	a0010a1e 	bne	r20,zero,8087b0 <__udivdi3+0x4bc>
  808388:	982ed43a 	srli	r23,r19,16
  80838c:	acebc83a 	sub	r21,r21,r19
  808390:	9dbfffcc 	andi	r22,r19,65535
  808394:	05000044 	movi	r20,1
  808398:	a809883a 	mov	r4,r21
  80839c:	b80b883a 	mov	r5,r23
  8083a0:	080a2280 	call	80a228 <__udivsi3>
  8083a4:	100b883a 	mov	r5,r2
  8083a8:	b009883a 	mov	r4,r22
  8083ac:	1021883a 	mov	r16,r2
  8083b0:	080a2380 	call	80a238 <__mulsi3>
  8083b4:	a809883a 	mov	r4,r21
  8083b8:	b80b883a 	mov	r5,r23
  8083bc:	1023883a 	mov	r17,r2
  8083c0:	080a2300 	call	80a230 <__umodsi3>
  8083c4:	1004943a 	slli	r2,r2,16
  8083c8:	e006d43a 	srli	r3,fp,16
  8083cc:	10c4b03a 	or	r2,r2,r3
  8083d0:	1440042e 	bgeu	r2,r17,8083e4 <__udivdi3+0xf0>
  8083d4:	14c5883a 	add	r2,r2,r19
  8083d8:	843fffc4 	addi	r16,r16,-1
  8083dc:	14c00136 	bltu	r2,r19,8083e4 <__udivdi3+0xf0>
  8083e0:	14415c36 	bltu	r2,r17,808954 <__udivdi3+0x660>
  8083e4:	1463c83a 	sub	r17,r2,r17
  8083e8:	8809883a 	mov	r4,r17
  8083ec:	b80b883a 	mov	r5,r23
  8083f0:	080a2280 	call	80a228 <__udivsi3>
  8083f4:	100b883a 	mov	r5,r2
  8083f8:	b009883a 	mov	r4,r22
  8083fc:	102b883a 	mov	r21,r2
  808400:	080a2380 	call	80a238 <__mulsi3>
  808404:	8809883a 	mov	r4,r17
  808408:	b80b883a 	mov	r5,r23
  80840c:	1025883a 	mov	r18,r2
  808410:	080a2300 	call	80a230 <__umodsi3>
  808414:	1004943a 	slli	r2,r2,16
  808418:	e0ffffcc 	andi	r3,fp,65535
  80841c:	10c4b03a 	or	r2,r2,r3
  808420:	1480042e 	bgeu	r2,r18,808434 <__udivdi3+0x140>
  808424:	9885883a 	add	r2,r19,r2
  808428:	ad7fffc4 	addi	r21,r21,-1
  80842c:	14c00136 	bltu	r2,r19,808434 <__udivdi3+0x140>
  808430:	14813c36 	bltu	r2,r18,808924 <__udivdi3+0x630>
  808434:	8004943a 	slli	r2,r16,16
  808438:	a009883a 	mov	r4,r20
  80843c:	a884b03a 	or	r2,r21,r2
  808440:	00001506 	br	808498 <__udivdi3+0x1a4>
  808444:	380d883a 	mov	r6,r7
  808448:	29c06c36 	bltu	r5,r7,8085fc <__udivdi3+0x308>
  80844c:	00bfffd4 	movui	r2,65535
  808450:	11c06436 	bltu	r2,r7,8085e4 <__udivdi3+0x2f0>
  808454:	00803fc4 	movi	r2,255
  808458:	11c11836 	bltu	r2,r7,8088bc <__udivdi3+0x5c8>
  80845c:	000b883a 	mov	r5,zero
  808460:	0005883a 	mov	r2,zero
  808464:	3084d83a 	srl	r2,r6,r2
  808468:	01002074 	movhi	r4,129
  80846c:	213c5204 	addi	r4,r4,-3768
  808470:	01c00804 	movi	r7,32
  808474:	1105883a 	add	r2,r2,r4
  808478:	10c00003 	ldbu	r3,0(r2)
  80847c:	28c7883a 	add	r3,r5,r3
  808480:	38edc83a 	sub	r22,r7,r3
  808484:	b000731e 	bne	r22,zero,808654 <__udivdi3+0x360>
  808488:	35400136 	bltu	r6,r21,808490 <__udivdi3+0x19c>
  80848c:	e4c05b36 	bltu	fp,r19,8085fc <__udivdi3+0x308>
  808490:	00800044 	movi	r2,1
  808494:	0009883a 	mov	r4,zero
  808498:	d8800315 	stw	r2,12(sp)
  80849c:	d9400317 	ldw	r5,12(sp)
  8084a0:	2007883a 	mov	r3,r4
  8084a4:	d9000415 	stw	r4,16(sp)
  8084a8:	2805883a 	mov	r2,r5
  8084ac:	dfc00e17 	ldw	ra,56(sp)
  8084b0:	df000d17 	ldw	fp,52(sp)
  8084b4:	ddc00c17 	ldw	r23,48(sp)
  8084b8:	dd800b17 	ldw	r22,44(sp)
  8084bc:	dd400a17 	ldw	r21,40(sp)
  8084c0:	dd000917 	ldw	r20,36(sp)
  8084c4:	dcc00817 	ldw	r19,32(sp)
  8084c8:	dc800717 	ldw	r18,28(sp)
  8084cc:	dc400617 	ldw	r17,24(sp)
  8084d0:	dc000517 	ldw	r16,20(sp)
  8084d4:	dec00f04 	addi	sp,sp,60
  8084d8:	f800283a 	ret
  8084dc:	00bfffd4 	movui	r2,65535
  8084e0:	12005636 	bltu	r2,r8,80863c <__udivdi3+0x348>
  8084e4:	00803fc4 	movi	r2,255
  8084e8:	12010036 	bltu	r2,r8,8088ec <__udivdi3+0x5f8>
  8084ec:	000b883a 	mov	r5,zero
  8084f0:	0005883a 	mov	r2,zero
  8084f4:	9884d83a 	srl	r2,r19,r2
  8084f8:	01002074 	movhi	r4,129
  8084fc:	213c5204 	addi	r4,r4,-3768
  808500:	01800804 	movi	r6,32
  808504:	1105883a 	add	r2,r2,r4
  808508:	10c00003 	ldbu	r3,0(r2)
  80850c:	28c7883a 	add	r3,r5,r3
  808510:	30cbc83a 	sub	r5,r6,r3
  808514:	28000626 	beq	r5,zero,808530 <__udivdi3+0x23c>
  808518:	3145c83a 	sub	r2,r6,r5
  80851c:	e084d83a 	srl	r2,fp,r2
  808520:	a946983a 	sll	r3,r21,r5
  808524:	e178983a 	sll	fp,fp,r5
  808528:	9966983a 	sll	r19,r19,r5
  80852c:	18aab03a 	or	r21,r3,r2
  808530:	982ed43a 	srli	r23,r19,16
  808534:	a809883a 	mov	r4,r21
  808538:	9cbfffcc 	andi	r18,r19,65535
  80853c:	b80b883a 	mov	r5,r23
  808540:	080a2280 	call	80a228 <__udivsi3>
  808544:	100b883a 	mov	r5,r2
  808548:	9009883a 	mov	r4,r18
  80854c:	1021883a 	mov	r16,r2
  808550:	080a2380 	call	80a238 <__mulsi3>
  808554:	a809883a 	mov	r4,r21
  808558:	b80b883a 	mov	r5,r23
  80855c:	1023883a 	mov	r17,r2
  808560:	080a2300 	call	80a230 <__umodsi3>
  808564:	1004943a 	slli	r2,r2,16
  808568:	e006d43a 	srli	r3,fp,16
  80856c:	10c4b03a 	or	r2,r2,r3
  808570:	1440042e 	bgeu	r2,r17,808584 <__udivdi3+0x290>
  808574:	14c5883a 	add	r2,r2,r19
  808578:	843fffc4 	addi	r16,r16,-1
  80857c:	14c00136 	bltu	r2,r19,808584 <__udivdi3+0x290>
  808580:	1440ea36 	bltu	r2,r17,80892c <__udivdi3+0x638>
  808584:	1463c83a 	sub	r17,r2,r17
  808588:	8809883a 	mov	r4,r17
  80858c:	b80b883a 	mov	r5,r23
  808590:	080a2280 	call	80a228 <__udivsi3>
  808594:	100b883a 	mov	r5,r2
  808598:	9009883a 	mov	r4,r18
  80859c:	102b883a 	mov	r21,r2
  8085a0:	080a2380 	call	80a238 <__mulsi3>
  8085a4:	8809883a 	mov	r4,r17
  8085a8:	b80b883a 	mov	r5,r23
  8085ac:	1025883a 	mov	r18,r2
  8085b0:	080a2300 	call	80a230 <__umodsi3>
  8085b4:	1004943a 	slli	r2,r2,16
  8085b8:	e0ffffcc 	andi	r3,fp,65535
  8085bc:	10c4b03a 	or	r2,r2,r3
  8085c0:	1480042e 	bgeu	r2,r18,8085d4 <__udivdi3+0x2e0>
  8085c4:	9885883a 	add	r2,r19,r2
  8085c8:	ad7fffc4 	addi	r21,r21,-1
  8085cc:	14c00136 	bltu	r2,r19,8085d4 <__udivdi3+0x2e0>
  8085d0:	1480d936 	bltu	r2,r18,808938 <__udivdi3+0x644>
  8085d4:	8004943a 	slli	r2,r16,16
  8085d8:	0009883a 	mov	r4,zero
  8085dc:	a884b03a 	or	r2,r21,r2
  8085e0:	003fad06 	br	808498 <__udivdi3+0x1a4>
  8085e4:	00804034 	movhi	r2,256
  8085e8:	10bfffc4 	addi	r2,r2,-1
  8085ec:	11c0b636 	bltu	r2,r7,8088c8 <__udivdi3+0x5d4>
  8085f0:	01400404 	movi	r5,16
  8085f4:	2805883a 	mov	r2,r5
  8085f8:	003f9a06 	br	808464 <__udivdi3+0x170>
  8085fc:	0005883a 	mov	r2,zero
  808600:	0009883a 	mov	r4,zero
  808604:	003fa406 	br	808498 <__udivdi3+0x1a4>
  808608:	00804034 	movhi	r2,256
  80860c:	10bfffc4 	addi	r2,r2,-1
  808610:	14c0b336 	bltu	r2,r19,8088e0 <__udivdi3+0x5ec>
  808614:	01400404 	movi	r5,16
  808618:	2805883a 	mov	r2,r5
  80861c:	003f5106 	br	808364 <__udivdi3+0x70>
  808620:	01000044 	movi	r4,1
  808624:	000b883a 	mov	r5,zero
  808628:	080a2280 	call	80a228 <__udivsi3>
  80862c:	1027883a 	mov	r19,r2
  808630:	00bfffd4 	movui	r2,65535
  808634:	14fff436 	bltu	r2,r19,808608 <__udivdi3+0x314>
  808638:	003f4606 	br	808354 <__udivdi3+0x60>
  80863c:	00804034 	movhi	r2,256
  808640:	10bfffc4 	addi	r2,r2,-1
  808644:	1200ac36 	bltu	r2,r8,8088f8 <__udivdi3+0x604>
  808648:	01400404 	movi	r5,16
  80864c:	2805883a 	mov	r2,r5
  808650:	003fa806 	br	8084f4 <__udivdi3+0x200>
  808654:	3d85c83a 	sub	r2,r7,r22
  808658:	3588983a 	sll	r4,r6,r22
  80865c:	9886d83a 	srl	r3,r19,r2
  808660:	a8a2d83a 	srl	r17,r21,r2
  808664:	e084d83a 	srl	r2,fp,r2
  808668:	20eeb03a 	or	r23,r4,r3
  80866c:	b824d43a 	srli	r18,r23,16
  808670:	ad86983a 	sll	r3,r21,r22
  808674:	8809883a 	mov	r4,r17
  808678:	900b883a 	mov	r5,r18
  80867c:	1886b03a 	or	r3,r3,r2
  808680:	d8c00115 	stw	r3,4(sp)
  808684:	bc3fffcc 	andi	r16,r23,65535
  808688:	080a2280 	call	80a228 <__udivsi3>
  80868c:	100b883a 	mov	r5,r2
  808690:	8009883a 	mov	r4,r16
  808694:	1029883a 	mov	r20,r2
  808698:	080a2380 	call	80a238 <__mulsi3>
  80869c:	900b883a 	mov	r5,r18
  8086a0:	8809883a 	mov	r4,r17
  8086a4:	102b883a 	mov	r21,r2
  8086a8:	080a2300 	call	80a230 <__umodsi3>
  8086ac:	d9400117 	ldw	r5,4(sp)
  8086b0:	1004943a 	slli	r2,r2,16
  8086b4:	9da6983a 	sll	r19,r19,r22
  8086b8:	2806d43a 	srli	r3,r5,16
  8086bc:	10c4b03a 	or	r2,r2,r3
  8086c0:	1540032e 	bgeu	r2,r21,8086d0 <__udivdi3+0x3dc>
  8086c4:	15c5883a 	add	r2,r2,r23
  8086c8:	a53fffc4 	addi	r20,r20,-1
  8086cc:	15c0912e 	bgeu	r2,r23,808914 <__udivdi3+0x620>
  8086d0:	1563c83a 	sub	r17,r2,r21
  8086d4:	8809883a 	mov	r4,r17
  8086d8:	900b883a 	mov	r5,r18
  8086dc:	080a2280 	call	80a228 <__udivsi3>
  8086e0:	100b883a 	mov	r5,r2
  8086e4:	8009883a 	mov	r4,r16
  8086e8:	102b883a 	mov	r21,r2
  8086ec:	080a2380 	call	80a238 <__mulsi3>
  8086f0:	8809883a 	mov	r4,r17
  8086f4:	900b883a 	mov	r5,r18
  8086f8:	1021883a 	mov	r16,r2
  8086fc:	080a2300 	call	80a230 <__umodsi3>
  808700:	da800117 	ldw	r10,4(sp)
  808704:	1004943a 	slli	r2,r2,16
  808708:	50ffffcc 	andi	r3,r10,65535
  80870c:	10c6b03a 	or	r3,r2,r3
  808710:	1c00032e 	bgeu	r3,r16,808720 <__udivdi3+0x42c>
  808714:	1dc7883a 	add	r3,r3,r23
  808718:	ad7fffc4 	addi	r21,r21,-1
  80871c:	1dc0792e 	bgeu	r3,r23,808904 <__udivdi3+0x610>
  808720:	a004943a 	slli	r2,r20,16
  808724:	982ed43a 	srli	r23,r19,16
  808728:	9cffffcc 	andi	r19,r19,65535
  80872c:	a8a4b03a 	or	r18,r21,r2
  808730:	947fffcc 	andi	r17,r18,65535
  808734:	902ad43a 	srli	r21,r18,16
  808738:	8809883a 	mov	r4,r17
  80873c:	980b883a 	mov	r5,r19
  808740:	1c21c83a 	sub	r16,r3,r16
  808744:	080a2380 	call	80a238 <__mulsi3>
  808748:	8809883a 	mov	r4,r17
  80874c:	b80b883a 	mov	r5,r23
  808750:	1029883a 	mov	r20,r2
  808754:	080a2380 	call	80a238 <__mulsi3>
  808758:	980b883a 	mov	r5,r19
  80875c:	a809883a 	mov	r4,r21
  808760:	1023883a 	mov	r17,r2
  808764:	080a2380 	call	80a238 <__mulsi3>
  808768:	a809883a 	mov	r4,r21
  80876c:	b80b883a 	mov	r5,r23
  808770:	1027883a 	mov	r19,r2
  808774:	080a2380 	call	80a238 <__mulsi3>
  808778:	1009883a 	mov	r4,r2
  80877c:	a004d43a 	srli	r2,r20,16
  808780:	8ce3883a 	add	r17,r17,r19
  808784:	1447883a 	add	r3,r2,r17
  808788:	1cc0022e 	bgeu	r3,r19,808794 <__udivdi3+0x4a0>
  80878c:	00800074 	movhi	r2,1
  808790:	2089883a 	add	r4,r4,r2
  808794:	1804d43a 	srli	r2,r3,16
  808798:	2085883a 	add	r2,r4,r2
  80879c:	80804436 	bltu	r16,r2,8088b0 <__udivdi3+0x5bc>
  8087a0:	80803e26 	beq	r16,r2,80889c <__udivdi3+0x5a8>
  8087a4:	9005883a 	mov	r2,r18
  8087a8:	0009883a 	mov	r4,zero
  8087ac:	003f3a06 	br	808498 <__udivdi3+0x1a4>
  8087b0:	9d26983a 	sll	r19,r19,r20
  8087b4:	3505c83a 	sub	r2,r6,r20
  8087b8:	a8a2d83a 	srl	r17,r21,r2
  8087bc:	982ed43a 	srli	r23,r19,16
  8087c0:	e084d83a 	srl	r2,fp,r2
  8087c4:	ad06983a 	sll	r3,r21,r20
  8087c8:	8809883a 	mov	r4,r17
  8087cc:	b80b883a 	mov	r5,r23
  8087d0:	1886b03a 	or	r3,r3,r2
  8087d4:	d8c00015 	stw	r3,0(sp)
  8087d8:	9dbfffcc 	andi	r22,r19,65535
  8087dc:	080a2280 	call	80a228 <__udivsi3>
  8087e0:	100b883a 	mov	r5,r2
  8087e4:	b009883a 	mov	r4,r22
  8087e8:	d8800215 	stw	r2,8(sp)
  8087ec:	080a2380 	call	80a238 <__mulsi3>
  8087f0:	8809883a 	mov	r4,r17
  8087f4:	b80b883a 	mov	r5,r23
  8087f8:	102b883a 	mov	r21,r2
  8087fc:	080a2300 	call	80a230 <__umodsi3>
  808800:	d9000017 	ldw	r4,0(sp)
  808804:	1004943a 	slli	r2,r2,16
  808808:	2006d43a 	srli	r3,r4,16
  80880c:	10c4b03a 	or	r2,r2,r3
  808810:	1540052e 	bgeu	r2,r21,808828 <__udivdi3+0x534>
  808814:	d9400217 	ldw	r5,8(sp)
  808818:	14c5883a 	add	r2,r2,r19
  80881c:	297fffc4 	addi	r5,r5,-1
  808820:	d9400215 	stw	r5,8(sp)
  808824:	14c0462e 	bgeu	r2,r19,808940 <__udivdi3+0x64c>
  808828:	1563c83a 	sub	r17,r2,r21
  80882c:	8809883a 	mov	r4,r17
  808830:	b80b883a 	mov	r5,r23
  808834:	080a2280 	call	80a228 <__udivsi3>
  808838:	100b883a 	mov	r5,r2
  80883c:	b009883a 	mov	r4,r22
  808840:	1025883a 	mov	r18,r2
  808844:	080a2380 	call	80a238 <__mulsi3>
  808848:	8809883a 	mov	r4,r17
  80884c:	b80b883a 	mov	r5,r23
  808850:	1021883a 	mov	r16,r2
  808854:	080a2300 	call	80a230 <__umodsi3>
  808858:	da800017 	ldw	r10,0(sp)
  80885c:	1004943a 	slli	r2,r2,16
  808860:	50ffffcc 	andi	r3,r10,65535
  808864:	10c6b03a 	or	r3,r2,r3
  808868:	1c00062e 	bgeu	r3,r16,808884 <__udivdi3+0x590>
  80886c:	1cc7883a 	add	r3,r3,r19
  808870:	94bfffc4 	addi	r18,r18,-1
  808874:	1cc00336 	bltu	r3,r19,808884 <__udivdi3+0x590>
  808878:	1c00022e 	bgeu	r3,r16,808884 <__udivdi3+0x590>
  80887c:	94bfffc4 	addi	r18,r18,-1
  808880:	1cc7883a 	add	r3,r3,r19
  808884:	d9000217 	ldw	r4,8(sp)
  808888:	e538983a 	sll	fp,fp,r20
  80888c:	1c2bc83a 	sub	r21,r3,r16
  808890:	2004943a 	slli	r2,r4,16
  808894:	90a8b03a 	or	r20,r18,r2
  808898:	003ebf06 	br	808398 <__udivdi3+0xa4>
  80889c:	1804943a 	slli	r2,r3,16
  8088a0:	e588983a 	sll	r4,fp,r22
  8088a4:	a0ffffcc 	andi	r3,r20,65535
  8088a8:	10c5883a 	add	r2,r2,r3
  8088ac:	20bfbd2e 	bgeu	r4,r2,8087a4 <__udivdi3+0x4b0>
  8088b0:	90bfffc4 	addi	r2,r18,-1
  8088b4:	0009883a 	mov	r4,zero
  8088b8:	003ef706 	br	808498 <__udivdi3+0x1a4>
  8088bc:	01400204 	movi	r5,8
  8088c0:	2805883a 	mov	r2,r5
  8088c4:	003ee706 	br	808464 <__udivdi3+0x170>
  8088c8:	01400604 	movi	r5,24
  8088cc:	2805883a 	mov	r2,r5
  8088d0:	003ee406 	br	808464 <__udivdi3+0x170>
  8088d4:	01400204 	movi	r5,8
  8088d8:	2805883a 	mov	r2,r5
  8088dc:	003ea106 	br	808364 <__udivdi3+0x70>
  8088e0:	01400604 	movi	r5,24
  8088e4:	2805883a 	mov	r2,r5
  8088e8:	003e9e06 	br	808364 <__udivdi3+0x70>
  8088ec:	01400204 	movi	r5,8
  8088f0:	2805883a 	mov	r2,r5
  8088f4:	003eff06 	br	8084f4 <__udivdi3+0x200>
  8088f8:	01400604 	movi	r5,24
  8088fc:	2805883a 	mov	r2,r5
  808900:	003efc06 	br	8084f4 <__udivdi3+0x200>
  808904:	1c3f862e 	bgeu	r3,r16,808720 <__udivdi3+0x42c>
  808908:	1dc7883a 	add	r3,r3,r23
  80890c:	ad7fffc4 	addi	r21,r21,-1
  808910:	003f8306 	br	808720 <__udivdi3+0x42c>
  808914:	157f6e2e 	bgeu	r2,r21,8086d0 <__udivdi3+0x3dc>
  808918:	a53fffc4 	addi	r20,r20,-1
  80891c:	15c5883a 	add	r2,r2,r23
  808920:	003f6b06 	br	8086d0 <__udivdi3+0x3dc>
  808924:	ad7fffc4 	addi	r21,r21,-1
  808928:	003ec206 	br	808434 <__udivdi3+0x140>
  80892c:	843fffc4 	addi	r16,r16,-1
  808930:	14c5883a 	add	r2,r2,r19
  808934:	003f1306 	br	808584 <__udivdi3+0x290>
  808938:	ad7fffc4 	addi	r21,r21,-1
  80893c:	003f2506 	br	8085d4 <__udivdi3+0x2e0>
  808940:	157fb92e 	bgeu	r2,r21,808828 <__udivdi3+0x534>
  808944:	297fffc4 	addi	r5,r5,-1
  808948:	14c5883a 	add	r2,r2,r19
  80894c:	d9400215 	stw	r5,8(sp)
  808950:	003fb506 	br	808828 <__udivdi3+0x534>
  808954:	843fffc4 	addi	r16,r16,-1
  808958:	14c5883a 	add	r2,r2,r19
  80895c:	003ea106 	br	8083e4 <__udivdi3+0xf0>

00808960 <__umoddi3>:
  808960:	defff004 	addi	sp,sp,-64
  808964:	3011883a 	mov	r8,r6
  808968:	000d883a 	mov	r6,zero
  80896c:	dd400b15 	stw	r21,44(sp)
  808970:	dcc00915 	stw	r19,36(sp)
  808974:	dc000615 	stw	r16,24(sp)
  808978:	dfc00f15 	stw	ra,60(sp)
  80897c:	df000e15 	stw	fp,56(sp)
  808980:	ddc00d15 	stw	r23,52(sp)
  808984:	dd800c15 	stw	r22,48(sp)
  808988:	dd000a15 	stw	r20,40(sp)
  80898c:	dc800815 	stw	r18,32(sp)
  808990:	dc400715 	stw	r17,28(sp)
  808994:	2817883a 	mov	r11,r5
  808998:	d9800415 	stw	r6,16(sp)
  80899c:	4027883a 	mov	r19,r8
  8089a0:	d9800515 	stw	r6,20(sp)
  8089a4:	2021883a 	mov	r16,r4
  8089a8:	282b883a 	mov	r21,r5
  8089ac:	38002c1e 	bne	r7,zero,808a60 <__umoddi3+0x100>
  8089b0:	2a005636 	bltu	r5,r8,808b0c <__umoddi3+0x1ac>
  8089b4:	40009a26 	beq	r8,zero,808c20 <__umoddi3+0x2c0>
  8089b8:	00bfffd4 	movui	r2,65535
  8089bc:	14c09236 	bltu	r2,r19,808c08 <__umoddi3+0x2a8>
  8089c0:	00803fc4 	movi	r2,255
  8089c4:	14c15c36 	bltu	r2,r19,808f38 <__umoddi3+0x5d8>
  8089c8:	000b883a 	mov	r5,zero
  8089cc:	0005883a 	mov	r2,zero
  8089d0:	9884d83a 	srl	r2,r19,r2
  8089d4:	01002074 	movhi	r4,129
  8089d8:	213c5204 	addi	r4,r4,-3768
  8089dc:	01800804 	movi	r6,32
  8089e0:	1105883a 	add	r2,r2,r4
  8089e4:	10c00003 	ldbu	r3,0(r2)
  8089e8:	28c7883a 	add	r3,r5,r3
  8089ec:	30e5c83a 	sub	r18,r6,r3
  8089f0:	9000a41e 	bne	r18,zero,808c84 <__umoddi3+0x324>
  8089f4:	982ed43a 	srli	r23,r19,16
  8089f8:	acebc83a 	sub	r21,r21,r19
  8089fc:	9d3fffcc 	andi	r20,r19,65535
  808a00:	002d883a 	mov	r22,zero
  808a04:	a809883a 	mov	r4,r21
  808a08:	b80b883a 	mov	r5,r23
  808a0c:	080a2280 	call	80a228 <__udivsi3>
  808a10:	100b883a 	mov	r5,r2
  808a14:	a009883a 	mov	r4,r20
  808a18:	080a2380 	call	80a238 <__mulsi3>
  808a1c:	a809883a 	mov	r4,r21
  808a20:	b80b883a 	mov	r5,r23
  808a24:	1023883a 	mov	r17,r2
  808a28:	080a2300 	call	80a230 <__umodsi3>
  808a2c:	1004943a 	slli	r2,r2,16
  808a30:	8006d43a 	srli	r3,r16,16
  808a34:	10c4b03a 	or	r2,r2,r3
  808a38:	1440032e 	bgeu	r2,r17,808a48 <__umoddi3+0xe8>
  808a3c:	14c5883a 	add	r2,r2,r19
  808a40:	14c00136 	bltu	r2,r19,808a48 <__umoddi3+0xe8>
  808a44:	14415836 	bltu	r2,r17,808fa8 <__umoddi3+0x648>
  808a48:	1463c83a 	sub	r17,r2,r17
  808a4c:	8809883a 	mov	r4,r17
  808a50:	b80b883a 	mov	r5,r23
  808a54:	080a2280 	call	80a228 <__udivsi3>
  808a58:	a009883a 	mov	r4,r20
  808a5c:	00005306 	br	808bac <__umoddi3+0x24c>
  808a60:	380d883a 	mov	r6,r7
  808a64:	29c0132e 	bgeu	r5,r7,808ab4 <__umoddi3+0x154>
  808a68:	d9000415 	stw	r4,16(sp)
  808a6c:	d9400515 	stw	r5,20(sp)
  808a70:	d9400417 	ldw	r5,16(sp)
  808a74:	5813883a 	mov	r9,r11
  808a78:	2811883a 	mov	r8,r5
  808a7c:	4005883a 	mov	r2,r8
  808a80:	4807883a 	mov	r3,r9
  808a84:	dfc00f17 	ldw	ra,60(sp)
  808a88:	df000e17 	ldw	fp,56(sp)
  808a8c:	ddc00d17 	ldw	r23,52(sp)
  808a90:	dd800c17 	ldw	r22,48(sp)
  808a94:	dd400b17 	ldw	r21,44(sp)
  808a98:	dd000a17 	ldw	r20,40(sp)
  808a9c:	dcc00917 	ldw	r19,36(sp)
  808aa0:	dc800817 	ldw	r18,32(sp)
  808aa4:	dc400717 	ldw	r17,28(sp)
  808aa8:	dc000617 	ldw	r16,24(sp)
  808aac:	dec01004 	addi	sp,sp,64
  808ab0:	f800283a 	ret
  808ab4:	00bfffd4 	movui	r2,65535
  808ab8:	11c06636 	bltu	r2,r7,808c54 <__umoddi3+0x2f4>
  808abc:	00803fc4 	movi	r2,255
  808ac0:	11c12036 	bltu	r2,r7,808f44 <__umoddi3+0x5e4>
  808ac4:	000b883a 	mov	r5,zero
  808ac8:	0005883a 	mov	r2,zero
  808acc:	3084d83a 	srl	r2,r6,r2
  808ad0:	01002074 	movhi	r4,129
  808ad4:	213c5204 	addi	r4,r4,-3768
  808ad8:	01c00804 	movi	r7,32
  808adc:	1105883a 	add	r2,r2,r4
  808ae0:	10c00003 	ldbu	r3,0(r2)
  808ae4:	28c7883a 	add	r3,r5,r3
  808ae8:	38e5c83a 	sub	r18,r7,r3
  808aec:	9000941e 	bne	r18,zero,808d40 <__umoddi3+0x3e0>
  808af0:	35405e36 	bltu	r6,r21,808c6c <__umoddi3+0x30c>
  808af4:	84c05d2e 	bgeu	r16,r19,808c6c <__umoddi3+0x30c>
  808af8:	8011883a 	mov	r8,r16
  808afc:	a813883a 	mov	r9,r21
  808b00:	dc000415 	stw	r16,16(sp)
  808b04:	dd400515 	stw	r21,20(sp)
  808b08:	003fdc06 	br	808a7c <__umoddi3+0x11c>
  808b0c:	00bfffd4 	movui	r2,65535
  808b10:	12004a36 	bltu	r2,r8,808c3c <__umoddi3+0x2dc>
  808b14:	00803fc4 	movi	r2,255
  808b18:	12010d36 	bltu	r2,r8,808f50 <__umoddi3+0x5f0>
  808b1c:	000b883a 	mov	r5,zero
  808b20:	0005883a 	mov	r2,zero
  808b24:	9884d83a 	srl	r2,r19,r2
  808b28:	01002074 	movhi	r4,129
  808b2c:	213c5204 	addi	r4,r4,-3768
  808b30:	01800804 	movi	r6,32
  808b34:	1105883a 	add	r2,r2,r4
  808b38:	10c00003 	ldbu	r3,0(r2)
  808b3c:	28c7883a 	add	r3,r5,r3
  808b40:	30c7c83a 	sub	r3,r6,r3
  808b44:	1800dc1e 	bne	r3,zero,808eb8 <__umoddi3+0x558>
  808b48:	002d883a 	mov	r22,zero
  808b4c:	982ed43a 	srli	r23,r19,16
  808b50:	a809883a 	mov	r4,r21
  808b54:	9cbfffcc 	andi	r18,r19,65535
  808b58:	b80b883a 	mov	r5,r23
  808b5c:	080a2280 	call	80a228 <__udivsi3>
  808b60:	100b883a 	mov	r5,r2
  808b64:	9009883a 	mov	r4,r18
  808b68:	080a2380 	call	80a238 <__mulsi3>
  808b6c:	a809883a 	mov	r4,r21
  808b70:	b80b883a 	mov	r5,r23
  808b74:	1023883a 	mov	r17,r2
  808b78:	080a2300 	call	80a230 <__umodsi3>
  808b7c:	1004943a 	slli	r2,r2,16
  808b80:	8006d43a 	srli	r3,r16,16
  808b84:	10c4b03a 	or	r2,r2,r3
  808b88:	1440032e 	bgeu	r2,r17,808b98 <__umoddi3+0x238>
  808b8c:	14c5883a 	add	r2,r2,r19
  808b90:	14c00136 	bltu	r2,r19,808b98 <__umoddi3+0x238>
  808b94:	14410236 	bltu	r2,r17,808fa0 <__umoddi3+0x640>
  808b98:	1463c83a 	sub	r17,r2,r17
  808b9c:	8809883a 	mov	r4,r17
  808ba0:	b80b883a 	mov	r5,r23
  808ba4:	080a2280 	call	80a228 <__udivsi3>
  808ba8:	9009883a 	mov	r4,r18
  808bac:	100b883a 	mov	r5,r2
  808bb0:	080a2380 	call	80a238 <__mulsi3>
  808bb4:	8809883a 	mov	r4,r17
  808bb8:	b80b883a 	mov	r5,r23
  808bbc:	102b883a 	mov	r21,r2
  808bc0:	080a2300 	call	80a230 <__umodsi3>
  808bc4:	1004943a 	slli	r2,r2,16
  808bc8:	80ffffcc 	andi	r3,r16,65535
  808bcc:	10c4b03a 	or	r2,r2,r3
  808bd0:	1540042e 	bgeu	r2,r21,808be4 <__umoddi3+0x284>
  808bd4:	14c5883a 	add	r2,r2,r19
  808bd8:	14c00236 	bltu	r2,r19,808be4 <__umoddi3+0x284>
  808bdc:	1540012e 	bgeu	r2,r21,808be4 <__umoddi3+0x284>
  808be0:	14c5883a 	add	r2,r2,r19
  808be4:	1545c83a 	sub	r2,r2,r21
  808be8:	1584d83a 	srl	r2,r2,r22
  808bec:	0013883a 	mov	r9,zero
  808bf0:	d8800415 	stw	r2,16(sp)
  808bf4:	d8c00417 	ldw	r3,16(sp)
  808bf8:	0005883a 	mov	r2,zero
  808bfc:	d8800515 	stw	r2,20(sp)
  808c00:	1811883a 	mov	r8,r3
  808c04:	003f9d06 	br	808a7c <__umoddi3+0x11c>
  808c08:	00804034 	movhi	r2,256
  808c0c:	10bfffc4 	addi	r2,r2,-1
  808c10:	14c0c636 	bltu	r2,r19,808f2c <__umoddi3+0x5cc>
  808c14:	01400404 	movi	r5,16
  808c18:	2805883a 	mov	r2,r5
  808c1c:	003f6c06 	br	8089d0 <__umoddi3+0x70>
  808c20:	01000044 	movi	r4,1
  808c24:	000b883a 	mov	r5,zero
  808c28:	080a2280 	call	80a228 <__udivsi3>
  808c2c:	1027883a 	mov	r19,r2
  808c30:	00bfffd4 	movui	r2,65535
  808c34:	14fff436 	bltu	r2,r19,808c08 <__umoddi3+0x2a8>
  808c38:	003f6106 	br	8089c0 <__umoddi3+0x60>
  808c3c:	00804034 	movhi	r2,256
  808c40:	10bfffc4 	addi	r2,r2,-1
  808c44:	1200c536 	bltu	r2,r8,808f5c <__umoddi3+0x5fc>
  808c48:	01400404 	movi	r5,16
  808c4c:	2805883a 	mov	r2,r5
  808c50:	003fb406 	br	808b24 <__umoddi3+0x1c4>
  808c54:	00804034 	movhi	r2,256
  808c58:	10bfffc4 	addi	r2,r2,-1
  808c5c:	11c0c236 	bltu	r2,r7,808f68 <__umoddi3+0x608>
  808c60:	01400404 	movi	r5,16
  808c64:	2805883a 	mov	r2,r5
  808c68:	003f9806 	br	808acc <__umoddi3+0x16c>
  808c6c:	84c9c83a 	sub	r4,r16,r19
  808c70:	8105803a 	cmpltu	r2,r16,r4
  808c74:	a987c83a 	sub	r3,r21,r6
  808c78:	18abc83a 	sub	r21,r3,r2
  808c7c:	2021883a 	mov	r16,r4
  808c80:	003f9d06 	br	808af8 <__umoddi3+0x198>
  808c84:	9ca6983a 	sll	r19,r19,r18
  808c88:	3485c83a 	sub	r2,r6,r18
  808c8c:	a8a2d83a 	srl	r17,r21,r2
  808c90:	982ed43a 	srli	r23,r19,16
  808c94:	ac86983a 	sll	r3,r21,r18
  808c98:	8084d83a 	srl	r2,r16,r2
  808c9c:	8809883a 	mov	r4,r17
  808ca0:	b80b883a 	mov	r5,r23
  808ca4:	18b8b03a 	or	fp,r3,r2
  808ca8:	9d3fffcc 	andi	r20,r19,65535
  808cac:	080a2280 	call	80a228 <__udivsi3>
  808cb0:	100b883a 	mov	r5,r2
  808cb4:	a009883a 	mov	r4,r20
  808cb8:	080a2380 	call	80a238 <__mulsi3>
  808cbc:	8809883a 	mov	r4,r17
  808cc0:	b80b883a 	mov	r5,r23
  808cc4:	102b883a 	mov	r21,r2
  808cc8:	080a2300 	call	80a230 <__umodsi3>
  808ccc:	1004943a 	slli	r2,r2,16
  808cd0:	e006d43a 	srli	r3,fp,16
  808cd4:	902d883a 	mov	r22,r18
  808cd8:	10c4b03a 	or	r2,r2,r3
  808cdc:	1540022e 	bgeu	r2,r21,808ce8 <__umoddi3+0x388>
  808ce0:	14c5883a 	add	r2,r2,r19
  808ce4:	14c0ab2e 	bgeu	r2,r19,808f94 <__umoddi3+0x634>
  808ce8:	1563c83a 	sub	r17,r2,r21
  808cec:	8809883a 	mov	r4,r17
  808cf0:	b80b883a 	mov	r5,r23
  808cf4:	080a2280 	call	80a228 <__udivsi3>
  808cf8:	100b883a 	mov	r5,r2
  808cfc:	a009883a 	mov	r4,r20
  808d00:	080a2380 	call	80a238 <__mulsi3>
  808d04:	8809883a 	mov	r4,r17
  808d08:	b80b883a 	mov	r5,r23
  808d0c:	102b883a 	mov	r21,r2
  808d10:	080a2300 	call	80a230 <__umodsi3>
  808d14:	1004943a 	slli	r2,r2,16
  808d18:	e0ffffcc 	andi	r3,fp,65535
  808d1c:	10c4b03a 	or	r2,r2,r3
  808d20:	1540042e 	bgeu	r2,r21,808d34 <__umoddi3+0x3d4>
  808d24:	14c5883a 	add	r2,r2,r19
  808d28:	14c00236 	bltu	r2,r19,808d34 <__umoddi3+0x3d4>
  808d2c:	1540012e 	bgeu	r2,r21,808d34 <__umoddi3+0x3d4>
  808d30:	14c5883a 	add	r2,r2,r19
  808d34:	84a0983a 	sll	r16,r16,r18
  808d38:	156bc83a 	sub	r21,r2,r21
  808d3c:	003f3106 	br	808a04 <__umoddi3+0xa4>
  808d40:	3c8fc83a 	sub	r7,r7,r18
  808d44:	3486983a 	sll	r3,r6,r18
  808d48:	99c4d83a 	srl	r2,r19,r7
  808d4c:	a9e2d83a 	srl	r17,r21,r7
  808d50:	ac8c983a 	sll	r6,r21,r18
  808d54:	18acb03a 	or	r22,r3,r2
  808d58:	b02ed43a 	srli	r23,r22,16
  808d5c:	81c4d83a 	srl	r2,r16,r7
  808d60:	8809883a 	mov	r4,r17
  808d64:	b80b883a 	mov	r5,r23
  808d68:	308cb03a 	or	r6,r6,r2
  808d6c:	d9c00315 	stw	r7,12(sp)
  808d70:	d9800215 	stw	r6,8(sp)
  808d74:	b53fffcc 	andi	r20,r22,65535
  808d78:	080a2280 	call	80a228 <__udivsi3>
  808d7c:	100b883a 	mov	r5,r2
  808d80:	a009883a 	mov	r4,r20
  808d84:	1039883a 	mov	fp,r2
  808d88:	080a2380 	call	80a238 <__mulsi3>
  808d8c:	8809883a 	mov	r4,r17
  808d90:	b80b883a 	mov	r5,r23
  808d94:	102b883a 	mov	r21,r2
  808d98:	080a2300 	call	80a230 <__umodsi3>
  808d9c:	d9000217 	ldw	r4,8(sp)
  808da0:	1004943a 	slli	r2,r2,16
  808da4:	9ca6983a 	sll	r19,r19,r18
  808da8:	2006d43a 	srli	r3,r4,16
  808dac:	84a0983a 	sll	r16,r16,r18
  808db0:	dcc00015 	stw	r19,0(sp)
  808db4:	10c4b03a 	or	r2,r2,r3
  808db8:	dc000115 	stw	r16,4(sp)
  808dbc:	1540032e 	bgeu	r2,r21,808dcc <__umoddi3+0x46c>
  808dc0:	1585883a 	add	r2,r2,r22
  808dc4:	e73fffc4 	addi	fp,fp,-1
  808dc8:	15806e2e 	bgeu	r2,r22,808f84 <__umoddi3+0x624>
  808dcc:	1563c83a 	sub	r17,r2,r21
  808dd0:	8809883a 	mov	r4,r17
  808dd4:	b80b883a 	mov	r5,r23
  808dd8:	080a2280 	call	80a228 <__udivsi3>
  808ddc:	100b883a 	mov	r5,r2
  808de0:	a009883a 	mov	r4,r20
  808de4:	1021883a 	mov	r16,r2
  808de8:	080a2380 	call	80a238 <__mulsi3>
  808dec:	b80b883a 	mov	r5,r23
  808df0:	8809883a 	mov	r4,r17
  808df4:	1029883a 	mov	r20,r2
  808df8:	080a2300 	call	80a230 <__umodsi3>
  808dfc:	d9400217 	ldw	r5,8(sp)
  808e00:	1004943a 	slli	r2,r2,16
  808e04:	28ffffcc 	andi	r3,r5,65535
  808e08:	10c4b03a 	or	r2,r2,r3
  808e0c:	1500032e 	bgeu	r2,r20,808e1c <__umoddi3+0x4bc>
  808e10:	1585883a 	add	r2,r2,r22
  808e14:	843fffc4 	addi	r16,r16,-1
  808e18:	1580562e 	bgeu	r2,r22,808f74 <__umoddi3+0x614>
  808e1c:	d9800017 	ldw	r6,0(sp)
  808e20:	e022943a 	slli	r17,fp,16
  808e24:	302ed43a 	srli	r23,r6,16
  808e28:	8462b03a 	or	r17,r16,r17
  808e2c:	34ffffcc 	andi	r19,r6,65535
  808e30:	882ad43a 	srli	r21,r17,16
  808e34:	8c7fffcc 	andi	r17,r17,65535
  808e38:	8809883a 	mov	r4,r17
  808e3c:	980b883a 	mov	r5,r19
  808e40:	1521c83a 	sub	r16,r2,r20
  808e44:	080a2380 	call	80a238 <__mulsi3>
  808e48:	8809883a 	mov	r4,r17
  808e4c:	b80b883a 	mov	r5,r23
  808e50:	1029883a 	mov	r20,r2
  808e54:	080a2380 	call	80a238 <__mulsi3>
  808e58:	980b883a 	mov	r5,r19
  808e5c:	a809883a 	mov	r4,r21
  808e60:	1023883a 	mov	r17,r2
  808e64:	080a2380 	call	80a238 <__mulsi3>
  808e68:	a809883a 	mov	r4,r21
  808e6c:	b80b883a 	mov	r5,r23
  808e70:	1027883a 	mov	r19,r2
  808e74:	080a2380 	call	80a238 <__mulsi3>
  808e78:	100b883a 	mov	r5,r2
  808e7c:	a004d43a 	srli	r2,r20,16
  808e80:	8ce3883a 	add	r17,r17,r19
  808e84:	1449883a 	add	r4,r2,r17
  808e88:	24c0022e 	bgeu	r4,r19,808e94 <__umoddi3+0x534>
  808e8c:	00800074 	movhi	r2,1
  808e90:	288b883a 	add	r5,r5,r2
  808e94:	2004d43a 	srli	r2,r4,16
  808e98:	2008943a 	slli	r4,r4,16
  808e9c:	a0ffffcc 	andi	r3,r20,65535
  808ea0:	288d883a 	add	r6,r5,r2
  808ea4:	20c9883a 	add	r4,r4,r3
  808ea8:	81800b36 	bltu	r16,r6,808ed8 <__umoddi3+0x578>
  808eac:	81804026 	beq	r16,r6,808fb0 <__umoddi3+0x650>
  808eb0:	818dc83a 	sub	r6,r16,r6
  808eb4:	00000f06 	br	808ef4 <__umoddi3+0x594>
  808eb8:	30c5c83a 	sub	r2,r6,r3
  808ebc:	182d883a 	mov	r22,r3
  808ec0:	8084d83a 	srl	r2,r16,r2
  808ec4:	a8c6983a 	sll	r3,r21,r3
  808ec8:	9da6983a 	sll	r19,r19,r22
  808ecc:	85a0983a 	sll	r16,r16,r22
  808ed0:	18aab03a 	or	r21,r3,r2
  808ed4:	003f1d06 	br	808b4c <__umoddi3+0x1ec>
  808ed8:	d8c00017 	ldw	r3,0(sp)
  808edc:	20c5c83a 	sub	r2,r4,r3
  808ee0:	2089803a 	cmpltu	r4,r4,r2
  808ee4:	3587c83a 	sub	r3,r6,r22
  808ee8:	1907c83a 	sub	r3,r3,r4
  808eec:	80cdc83a 	sub	r6,r16,r3
  808ef0:	1009883a 	mov	r4,r2
  808ef4:	d9400117 	ldw	r5,4(sp)
  808ef8:	2905c83a 	sub	r2,r5,r4
  808efc:	2887803a 	cmpltu	r3,r5,r2
  808f00:	30c7c83a 	sub	r3,r6,r3
  808f04:	d9800317 	ldw	r6,12(sp)
  808f08:	1484d83a 	srl	r2,r2,r18
  808f0c:	1988983a 	sll	r4,r3,r6
  808f10:	1c86d83a 	srl	r3,r3,r18
  808f14:	2088b03a 	or	r4,r4,r2
  808f18:	2011883a 	mov	r8,r4
  808f1c:	1813883a 	mov	r9,r3
  808f20:	d9000415 	stw	r4,16(sp)
  808f24:	d8c00515 	stw	r3,20(sp)
  808f28:	003ed406 	br	808a7c <__umoddi3+0x11c>
  808f2c:	01400604 	movi	r5,24
  808f30:	2805883a 	mov	r2,r5
  808f34:	003ea606 	br	8089d0 <__umoddi3+0x70>
  808f38:	01400204 	movi	r5,8
  808f3c:	2805883a 	mov	r2,r5
  808f40:	003ea306 	br	8089d0 <__umoddi3+0x70>
  808f44:	01400204 	movi	r5,8
  808f48:	2805883a 	mov	r2,r5
  808f4c:	003edf06 	br	808acc <__umoddi3+0x16c>
  808f50:	01400204 	movi	r5,8
  808f54:	2805883a 	mov	r2,r5
  808f58:	003ef206 	br	808b24 <__umoddi3+0x1c4>
  808f5c:	01400604 	movi	r5,24
  808f60:	2805883a 	mov	r2,r5
  808f64:	003eef06 	br	808b24 <__umoddi3+0x1c4>
  808f68:	01400604 	movi	r5,24
  808f6c:	2805883a 	mov	r2,r5
  808f70:	003ed606 	br	808acc <__umoddi3+0x16c>
  808f74:	153fa92e 	bgeu	r2,r20,808e1c <__umoddi3+0x4bc>
  808f78:	843fffc4 	addi	r16,r16,-1
  808f7c:	1585883a 	add	r2,r2,r22
  808f80:	003fa606 	br	808e1c <__umoddi3+0x4bc>
  808f84:	157f912e 	bgeu	r2,r21,808dcc <__umoddi3+0x46c>
  808f88:	e73fffc4 	addi	fp,fp,-1
  808f8c:	1585883a 	add	r2,r2,r22
  808f90:	003f8e06 	br	808dcc <__umoddi3+0x46c>
  808f94:	157f542e 	bgeu	r2,r21,808ce8 <__umoddi3+0x388>
  808f98:	14c5883a 	add	r2,r2,r19
  808f9c:	003f5206 	br	808ce8 <__umoddi3+0x388>
  808fa0:	14c5883a 	add	r2,r2,r19
  808fa4:	003efc06 	br	808b98 <__umoddi3+0x238>
  808fa8:	14c5883a 	add	r2,r2,r19
  808fac:	003ea606 	br	808a48 <__umoddi3+0xe8>
  808fb0:	d8800117 	ldw	r2,4(sp)
  808fb4:	113fc836 	bltu	r2,r4,808ed8 <__umoddi3+0x578>
  808fb8:	000d883a 	mov	r6,zero
  808fbc:	003fcd06 	br	808ef4 <__umoddi3+0x594>

00808fc0 <_fpadd_parts>:
  808fc0:	defff804 	addi	sp,sp,-32
  808fc4:	dcc00315 	stw	r19,12(sp)
  808fc8:	2027883a 	mov	r19,r4
  808fcc:	21000017 	ldw	r4,0(r4)
  808fd0:	00c00044 	movi	r3,1
  808fd4:	dd400515 	stw	r21,20(sp)
  808fd8:	dd000415 	stw	r20,16(sp)
  808fdc:	ddc00715 	stw	r23,28(sp)
  808fe0:	dd800615 	stw	r22,24(sp)
  808fe4:	dc800215 	stw	r18,8(sp)
  808fe8:	dc400115 	stw	r17,4(sp)
  808fec:	dc000015 	stw	r16,0(sp)
  808ff0:	282b883a 	mov	r21,r5
  808ff4:	3029883a 	mov	r20,r6
  808ff8:	1900632e 	bgeu	r3,r4,809188 <_fpadd_parts+0x1c8>
  808ffc:	28800017 	ldw	r2,0(r5)
  809000:	1880812e 	bgeu	r3,r2,809208 <_fpadd_parts+0x248>
  809004:	00c00104 	movi	r3,4
  809008:	20c0dc26 	beq	r4,r3,80937c <_fpadd_parts+0x3bc>
  80900c:	10c07e26 	beq	r2,r3,809208 <_fpadd_parts+0x248>
  809010:	00c00084 	movi	r3,2
  809014:	10c06726 	beq	r2,r3,8091b4 <_fpadd_parts+0x1f4>
  809018:	20c07b26 	beq	r4,r3,809208 <_fpadd_parts+0x248>
  80901c:	9dc00217 	ldw	r23,8(r19)
  809020:	28c00217 	ldw	r3,8(r5)
  809024:	9c400317 	ldw	r17,12(r19)
  809028:	2bc00317 	ldw	r15,12(r5)
  80902c:	b8cdc83a 	sub	r6,r23,r3
  809030:	9c800417 	ldw	r18,16(r19)
  809034:	2c000417 	ldw	r16,16(r5)
  809038:	3009883a 	mov	r4,r6
  80903c:	30009716 	blt	r6,zero,80929c <_fpadd_parts+0x2dc>
  809040:	00800fc4 	movi	r2,63
  809044:	11806b16 	blt	r2,r6,8091f4 <_fpadd_parts+0x234>
  809048:	0100a40e 	bge	zero,r4,8092dc <_fpadd_parts+0x31c>
  80904c:	35bff804 	addi	r22,r6,-32
  809050:	b000bc16 	blt	r22,zero,809344 <_fpadd_parts+0x384>
  809054:	8596d83a 	srl	r11,r16,r22
  809058:	0019883a 	mov	r12,zero
  80905c:	0013883a 	mov	r9,zero
  809060:	01000044 	movi	r4,1
  809064:	0015883a 	mov	r10,zero
  809068:	b000be16 	blt	r22,zero,809364 <_fpadd_parts+0x3a4>
  80906c:	2590983a 	sll	r8,r4,r22
  809070:	000f883a 	mov	r7,zero
  809074:	00bfffc4 	movi	r2,-1
  809078:	3889883a 	add	r4,r7,r2
  80907c:	408b883a 	add	r5,r8,r2
  809080:	21cd803a 	cmpltu	r6,r4,r7
  809084:	314b883a 	add	r5,r6,r5
  809088:	7904703a 	and	r2,r15,r4
  80908c:	8146703a 	and	r3,r16,r5
  809090:	10c4b03a 	or	r2,r2,r3
  809094:	10000226 	beq	r2,zero,8090a0 <_fpadd_parts+0xe0>
  809098:	02400044 	movi	r9,1
  80909c:	0015883a 	mov	r10,zero
  8090a0:	5a5eb03a 	or	r15,r11,r9
  8090a4:	62a0b03a 	or	r16,r12,r10
  8090a8:	99400117 	ldw	r5,4(r19)
  8090ac:	a8800117 	ldw	r2,4(r21)
  8090b0:	28806e26 	beq	r5,r2,80926c <_fpadd_parts+0x2ac>
  8090b4:	28006626 	beq	r5,zero,809250 <_fpadd_parts+0x290>
  8090b8:	7c45c83a 	sub	r2,r15,r17
  8090bc:	7889803a 	cmpltu	r4,r15,r2
  8090c0:	8487c83a 	sub	r3,r16,r18
  8090c4:	1909c83a 	sub	r4,r3,r4
  8090c8:	100d883a 	mov	r6,r2
  8090cc:	200f883a 	mov	r7,r4
  8090d0:	38007716 	blt	r7,zero,8092b0 <_fpadd_parts+0x2f0>
  8090d4:	a5c00215 	stw	r23,8(r20)
  8090d8:	a1c00415 	stw	r7,16(r20)
  8090dc:	a0000115 	stw	zero,4(r20)
  8090e0:	a1800315 	stw	r6,12(r20)
  8090e4:	a2000317 	ldw	r8,12(r20)
  8090e8:	a2400417 	ldw	r9,16(r20)
  8090ec:	00bfffc4 	movi	r2,-1
  8090f0:	408b883a 	add	r5,r8,r2
  8090f4:	2a09803a 	cmpltu	r4,r5,r8
  8090f8:	488d883a 	add	r6,r9,r2
  8090fc:	01c40034 	movhi	r7,4096
  809100:	39ffffc4 	addi	r7,r7,-1
  809104:	218d883a 	add	r6,r4,r6
  809108:	39801736 	bltu	r7,r6,809168 <_fpadd_parts+0x1a8>
  80910c:	31c06526 	beq	r6,r7,8092a4 <_fpadd_parts+0x2e4>
  809110:	a3000217 	ldw	r12,8(r20)
  809114:	4209883a 	add	r4,r8,r8
  809118:	00bfffc4 	movi	r2,-1
  80911c:	220f803a 	cmpltu	r7,r4,r8
  809120:	4a4b883a 	add	r5,r9,r9
  809124:	394f883a 	add	r7,r7,r5
  809128:	2095883a 	add	r10,r4,r2
  80912c:	3897883a 	add	r11,r7,r2
  809130:	510d803a 	cmpltu	r6,r10,r4
  809134:	6099883a 	add	r12,r12,r2
  809138:	32d7883a 	add	r11,r6,r11
  80913c:	00840034 	movhi	r2,4096
  809140:	10bfffc4 	addi	r2,r2,-1
  809144:	2011883a 	mov	r8,r4
  809148:	3813883a 	mov	r9,r7
  80914c:	a1000315 	stw	r4,12(r20)
  809150:	a1c00415 	stw	r7,16(r20)
  809154:	a3000215 	stw	r12,8(r20)
  809158:	12c00336 	bltu	r2,r11,809168 <_fpadd_parts+0x1a8>
  80915c:	58bfed1e 	bne	r11,r2,809114 <_fpadd_parts+0x154>
  809160:	00bfff84 	movi	r2,-2
  809164:	12bfeb2e 	bgeu	r2,r10,809114 <_fpadd_parts+0x154>
  809168:	a2800417 	ldw	r10,16(r20)
  80916c:	008000c4 	movi	r2,3
  809170:	00c80034 	movhi	r3,8192
  809174:	18ffffc4 	addi	r3,r3,-1
  809178:	a2400317 	ldw	r9,12(r20)
  80917c:	a0800015 	stw	r2,0(r20)
  809180:	1a802336 	bltu	r3,r10,809210 <_fpadd_parts+0x250>
  809184:	a027883a 	mov	r19,r20
  809188:	9805883a 	mov	r2,r19
  80918c:	ddc00717 	ldw	r23,28(sp)
  809190:	dd800617 	ldw	r22,24(sp)
  809194:	dd400517 	ldw	r21,20(sp)
  809198:	dd000417 	ldw	r20,16(sp)
  80919c:	dcc00317 	ldw	r19,12(sp)
  8091a0:	dc800217 	ldw	r18,8(sp)
  8091a4:	dc400117 	ldw	r17,4(sp)
  8091a8:	dc000017 	ldw	r16,0(sp)
  8091ac:	dec00804 	addi	sp,sp,32
  8091b0:	f800283a 	ret
  8091b4:	20fff41e 	bne	r4,r3,809188 <_fpadd_parts+0x1c8>
  8091b8:	31000015 	stw	r4,0(r6)
  8091bc:	98800117 	ldw	r2,4(r19)
  8091c0:	30800115 	stw	r2,4(r6)
  8091c4:	98c00217 	ldw	r3,8(r19)
  8091c8:	30c00215 	stw	r3,8(r6)
  8091cc:	98800317 	ldw	r2,12(r19)
  8091d0:	30800315 	stw	r2,12(r6)
  8091d4:	98c00417 	ldw	r3,16(r19)
  8091d8:	30c00415 	stw	r3,16(r6)
  8091dc:	98800117 	ldw	r2,4(r19)
  8091e0:	28c00117 	ldw	r3,4(r5)
  8091e4:	3027883a 	mov	r19,r6
  8091e8:	10c4703a 	and	r2,r2,r3
  8091ec:	30800115 	stw	r2,4(r6)
  8091f0:	003fe506 	br	809188 <_fpadd_parts+0x1c8>
  8091f4:	1dc02616 	blt	r3,r23,809290 <_fpadd_parts+0x2d0>
  8091f8:	0023883a 	mov	r17,zero
  8091fc:	182f883a 	mov	r23,r3
  809200:	0025883a 	mov	r18,zero
  809204:	003fa806 	br	8090a8 <_fpadd_parts+0xe8>
  809208:	a827883a 	mov	r19,r21
  80920c:	003fde06 	br	809188 <_fpadd_parts+0x1c8>
  809210:	01800044 	movi	r6,1
  809214:	500497fa 	slli	r2,r10,31
  809218:	4808d07a 	srli	r4,r9,1
  80921c:	518ad83a 	srl	r5,r10,r6
  809220:	a2000217 	ldw	r8,8(r20)
  809224:	1108b03a 	or	r4,r2,r4
  809228:	0007883a 	mov	r3,zero
  80922c:	4984703a 	and	r2,r9,r6
  809230:	208cb03a 	or	r6,r4,r2
  809234:	28ceb03a 	or	r7,r5,r3
  809238:	42000044 	addi	r8,r8,1
  80923c:	a027883a 	mov	r19,r20
  809240:	a1c00415 	stw	r7,16(r20)
  809244:	a2000215 	stw	r8,8(r20)
  809248:	a1800315 	stw	r6,12(r20)
  80924c:	003fce06 	br	809188 <_fpadd_parts+0x1c8>
  809250:	8bc5c83a 	sub	r2,r17,r15
  809254:	8889803a 	cmpltu	r4,r17,r2
  809258:	9407c83a 	sub	r3,r18,r16
  80925c:	1909c83a 	sub	r4,r3,r4
  809260:	100d883a 	mov	r6,r2
  809264:	200f883a 	mov	r7,r4
  809268:	003f9906 	br	8090d0 <_fpadd_parts+0x110>
  80926c:	7c45883a 	add	r2,r15,r17
  809270:	13c9803a 	cmpltu	r4,r2,r15
  809274:	8487883a 	add	r3,r16,r18
  809278:	20c9883a 	add	r4,r4,r3
  80927c:	a1400115 	stw	r5,4(r20)
  809280:	a5c00215 	stw	r23,8(r20)
  809284:	a0800315 	stw	r2,12(r20)
  809288:	a1000415 	stw	r4,16(r20)
  80928c:	003fb606 	br	809168 <_fpadd_parts+0x1a8>
  809290:	001f883a 	mov	r15,zero
  809294:	0021883a 	mov	r16,zero
  809298:	003f8306 	br	8090a8 <_fpadd_parts+0xe8>
  80929c:	018dc83a 	sub	r6,zero,r6
  8092a0:	003f6706 	br	809040 <_fpadd_parts+0x80>
  8092a4:	00bfff84 	movi	r2,-2
  8092a8:	117faf36 	bltu	r2,r5,809168 <_fpadd_parts+0x1a8>
  8092ac:	003f9806 	br	809110 <_fpadd_parts+0x150>
  8092b0:	0005883a 	mov	r2,zero
  8092b4:	1189c83a 	sub	r4,r2,r6
  8092b8:	1105803a 	cmpltu	r2,r2,r4
  8092bc:	01cbc83a 	sub	r5,zero,r7
  8092c0:	2885c83a 	sub	r2,r5,r2
  8092c4:	01800044 	movi	r6,1
  8092c8:	a1800115 	stw	r6,4(r20)
  8092cc:	a5c00215 	stw	r23,8(r20)
  8092d0:	a1000315 	stw	r4,12(r20)
  8092d4:	a0800415 	stw	r2,16(r20)
  8092d8:	003f8206 	br	8090e4 <_fpadd_parts+0x124>
  8092dc:	203f7226 	beq	r4,zero,8090a8 <_fpadd_parts+0xe8>
  8092e0:	35bff804 	addi	r22,r6,-32
  8092e4:	b9af883a 	add	r23,r23,r6
  8092e8:	b0003116 	blt	r22,zero,8093b0 <_fpadd_parts+0x3f0>
  8092ec:	959ad83a 	srl	r13,r18,r22
  8092f0:	001d883a 	mov	r14,zero
  8092f4:	000f883a 	mov	r7,zero
  8092f8:	01000044 	movi	r4,1
  8092fc:	0011883a 	mov	r8,zero
  809300:	b0002516 	blt	r22,zero,809398 <_fpadd_parts+0x3d8>
  809304:	2594983a 	sll	r10,r4,r22
  809308:	0013883a 	mov	r9,zero
  80930c:	00bfffc4 	movi	r2,-1
  809310:	4889883a 	add	r4,r9,r2
  809314:	508b883a 	add	r5,r10,r2
  809318:	224d803a 	cmpltu	r6,r4,r9
  80931c:	314b883a 	add	r5,r6,r5
  809320:	8904703a 	and	r2,r17,r4
  809324:	9146703a 	and	r3,r18,r5
  809328:	10c4b03a 	or	r2,r2,r3
  80932c:	10000226 	beq	r2,zero,809338 <_fpadd_parts+0x378>
  809330:	01c00044 	movi	r7,1
  809334:	0011883a 	mov	r8,zero
  809338:	69e2b03a 	or	r17,r13,r7
  80933c:	7224b03a 	or	r18,r14,r8
  809340:	003f5906 	br	8090a8 <_fpadd_parts+0xe8>
  809344:	8407883a 	add	r3,r16,r16
  809348:	008007c4 	movi	r2,31
  80934c:	1185c83a 	sub	r2,r2,r6
  809350:	1886983a 	sll	r3,r3,r2
  809354:	7996d83a 	srl	r11,r15,r6
  809358:	8198d83a 	srl	r12,r16,r6
  80935c:	1ad6b03a 	or	r11,r3,r11
  809360:	003f3e06 	br	80905c <_fpadd_parts+0x9c>
  809364:	2006d07a 	srli	r3,r4,1
  809368:	008007c4 	movi	r2,31
  80936c:	1185c83a 	sub	r2,r2,r6
  809370:	1890d83a 	srl	r8,r3,r2
  809374:	218e983a 	sll	r7,r4,r6
  809378:	003f3e06 	br	809074 <_fpadd_parts+0xb4>
  80937c:	113f821e 	bne	r2,r4,809188 <_fpadd_parts+0x1c8>
  809380:	28c00117 	ldw	r3,4(r5)
  809384:	98800117 	ldw	r2,4(r19)
  809388:	10ff7f26 	beq	r2,r3,809188 <_fpadd_parts+0x1c8>
  80938c:	04c02074 	movhi	r19,129
  809390:	9cfc4d04 	addi	r19,r19,-3788
  809394:	003f7c06 	br	809188 <_fpadd_parts+0x1c8>
  809398:	2006d07a 	srli	r3,r4,1
  80939c:	008007c4 	movi	r2,31
  8093a0:	1185c83a 	sub	r2,r2,r6
  8093a4:	1894d83a 	srl	r10,r3,r2
  8093a8:	2192983a 	sll	r9,r4,r6
  8093ac:	003fd706 	br	80930c <_fpadd_parts+0x34c>
  8093b0:	9487883a 	add	r3,r18,r18
  8093b4:	008007c4 	movi	r2,31
  8093b8:	1185c83a 	sub	r2,r2,r6
  8093bc:	1886983a 	sll	r3,r3,r2
  8093c0:	899ad83a 	srl	r13,r17,r6
  8093c4:	919cd83a 	srl	r14,r18,r6
  8093c8:	1b5ab03a 	or	r13,r3,r13
  8093cc:	003fc906 	br	8092f4 <_fpadd_parts+0x334>

008093d0 <__subdf3>:
  8093d0:	deffea04 	addi	sp,sp,-88
  8093d4:	dcc01415 	stw	r19,80(sp)
  8093d8:	dcc00404 	addi	r19,sp,16
  8093dc:	2011883a 	mov	r8,r4
  8093e0:	2813883a 	mov	r9,r5
  8093e4:	dc401315 	stw	r17,76(sp)
  8093e8:	d809883a 	mov	r4,sp
  8093ec:	980b883a 	mov	r5,r19
  8093f0:	dc400904 	addi	r17,sp,36
  8093f4:	dfc01515 	stw	ra,84(sp)
  8093f8:	da400115 	stw	r9,4(sp)
  8093fc:	d9c00315 	stw	r7,12(sp)
  809400:	da000015 	stw	r8,0(sp)
  809404:	d9800215 	stw	r6,8(sp)
  809408:	080a7280 	call	80a728 <__unpack_d>
  80940c:	d9000204 	addi	r4,sp,8
  809410:	880b883a 	mov	r5,r17
  809414:	080a7280 	call	80a728 <__unpack_d>
  809418:	d8800a17 	ldw	r2,40(sp)
  80941c:	880b883a 	mov	r5,r17
  809420:	9809883a 	mov	r4,r19
  809424:	d9800e04 	addi	r6,sp,56
  809428:	1080005c 	xori	r2,r2,1
  80942c:	d8800a15 	stw	r2,40(sp)
  809430:	0808fc00 	call	808fc0 <_fpadd_parts>
  809434:	1009883a 	mov	r4,r2
  809438:	080a4140 	call	80a414 <__pack_d>
  80943c:	dfc01517 	ldw	ra,84(sp)
  809440:	dcc01417 	ldw	r19,80(sp)
  809444:	dc401317 	ldw	r17,76(sp)
  809448:	dec01604 	addi	sp,sp,88
  80944c:	f800283a 	ret

00809450 <__adddf3>:
  809450:	deffea04 	addi	sp,sp,-88
  809454:	dcc01415 	stw	r19,80(sp)
  809458:	dcc00404 	addi	r19,sp,16
  80945c:	2011883a 	mov	r8,r4
  809460:	2813883a 	mov	r9,r5
  809464:	dc401315 	stw	r17,76(sp)
  809468:	d809883a 	mov	r4,sp
  80946c:	980b883a 	mov	r5,r19
  809470:	dc400904 	addi	r17,sp,36
  809474:	dfc01515 	stw	ra,84(sp)
  809478:	da400115 	stw	r9,4(sp)
  80947c:	d9c00315 	stw	r7,12(sp)
  809480:	da000015 	stw	r8,0(sp)
  809484:	d9800215 	stw	r6,8(sp)
  809488:	080a7280 	call	80a728 <__unpack_d>
  80948c:	d9000204 	addi	r4,sp,8
  809490:	880b883a 	mov	r5,r17
  809494:	080a7280 	call	80a728 <__unpack_d>
  809498:	d9800e04 	addi	r6,sp,56
  80949c:	9809883a 	mov	r4,r19
  8094a0:	880b883a 	mov	r5,r17
  8094a4:	0808fc00 	call	808fc0 <_fpadd_parts>
  8094a8:	1009883a 	mov	r4,r2
  8094ac:	080a4140 	call	80a414 <__pack_d>
  8094b0:	dfc01517 	ldw	ra,84(sp)
  8094b4:	dcc01417 	ldw	r19,80(sp)
  8094b8:	dc401317 	ldw	r17,76(sp)
  8094bc:	dec01604 	addi	sp,sp,88
  8094c0:	f800283a 	ret

008094c4 <__muldf3>:
  8094c4:	deffe004 	addi	sp,sp,-128
  8094c8:	dc401815 	stw	r17,96(sp)
  8094cc:	dc400404 	addi	r17,sp,16
  8094d0:	2011883a 	mov	r8,r4
  8094d4:	2813883a 	mov	r9,r5
  8094d8:	dc001715 	stw	r16,92(sp)
  8094dc:	d809883a 	mov	r4,sp
  8094e0:	880b883a 	mov	r5,r17
  8094e4:	dc000904 	addi	r16,sp,36
  8094e8:	dfc01f15 	stw	ra,124(sp)
  8094ec:	da400115 	stw	r9,4(sp)
  8094f0:	d9c00315 	stw	r7,12(sp)
  8094f4:	da000015 	stw	r8,0(sp)
  8094f8:	d9800215 	stw	r6,8(sp)
  8094fc:	ddc01e15 	stw	r23,120(sp)
  809500:	dd801d15 	stw	r22,116(sp)
  809504:	dd401c15 	stw	r21,112(sp)
  809508:	dd001b15 	stw	r20,108(sp)
  80950c:	dcc01a15 	stw	r19,104(sp)
  809510:	dc801915 	stw	r18,100(sp)
  809514:	080a7280 	call	80a728 <__unpack_d>
  809518:	d9000204 	addi	r4,sp,8
  80951c:	800b883a 	mov	r5,r16
  809520:	080a7280 	call	80a728 <__unpack_d>
  809524:	d9000417 	ldw	r4,16(sp)
  809528:	00800044 	movi	r2,1
  80952c:	1100102e 	bgeu	r2,r4,809570 <__muldf3+0xac>
  809530:	d8c00917 	ldw	r3,36(sp)
  809534:	10c0062e 	bgeu	r2,r3,809550 <__muldf3+0x8c>
  809538:	00800104 	movi	r2,4
  80953c:	20800a26 	beq	r4,r2,809568 <__muldf3+0xa4>
  809540:	1880cc26 	beq	r3,r2,809874 <__muldf3+0x3b0>
  809544:	00800084 	movi	r2,2
  809548:	20800926 	beq	r4,r2,809570 <__muldf3+0xac>
  80954c:	1880191e 	bne	r3,r2,8095b4 <__muldf3+0xf0>
  809550:	d8c00a17 	ldw	r3,40(sp)
  809554:	d8800517 	ldw	r2,20(sp)
  809558:	8009883a 	mov	r4,r16
  80955c:	10c4c03a 	cmpne	r2,r2,r3
  809560:	d8800a15 	stw	r2,40(sp)
  809564:	00000706 	br	809584 <__muldf3+0xc0>
  809568:	00800084 	movi	r2,2
  80956c:	1880c326 	beq	r3,r2,80987c <__muldf3+0x3b8>
  809570:	d8800517 	ldw	r2,20(sp)
  809574:	d8c00a17 	ldw	r3,40(sp)
  809578:	8809883a 	mov	r4,r17
  80957c:	10c4c03a 	cmpne	r2,r2,r3
  809580:	d8800515 	stw	r2,20(sp)
  809584:	080a4140 	call	80a414 <__pack_d>
  809588:	dfc01f17 	ldw	ra,124(sp)
  80958c:	ddc01e17 	ldw	r23,120(sp)
  809590:	dd801d17 	ldw	r22,116(sp)
  809594:	dd401c17 	ldw	r21,112(sp)
  809598:	dd001b17 	ldw	r20,108(sp)
  80959c:	dcc01a17 	ldw	r19,104(sp)
  8095a0:	dc801917 	ldw	r18,100(sp)
  8095a4:	dc401817 	ldw	r17,96(sp)
  8095a8:	dc001717 	ldw	r16,92(sp)
  8095ac:	dec02004 	addi	sp,sp,128
  8095b0:	f800283a 	ret
  8095b4:	dd800717 	ldw	r22,28(sp)
  8095b8:	dc800c17 	ldw	r18,48(sp)
  8095bc:	002b883a 	mov	r21,zero
  8095c0:	0023883a 	mov	r17,zero
  8095c4:	a80b883a 	mov	r5,r21
  8095c8:	b00d883a 	mov	r6,r22
  8095cc:	880f883a 	mov	r7,r17
  8095d0:	ddc00817 	ldw	r23,32(sp)
  8095d4:	dcc00d17 	ldw	r19,52(sp)
  8095d8:	9009883a 	mov	r4,r18
  8095dc:	080a2700 	call	80a270 <__muldi3>
  8095e0:	001b883a 	mov	r13,zero
  8095e4:	680f883a 	mov	r7,r13
  8095e8:	b009883a 	mov	r4,r22
  8095ec:	000b883a 	mov	r5,zero
  8095f0:	980d883a 	mov	r6,r19
  8095f4:	b82d883a 	mov	r22,r23
  8095f8:	002f883a 	mov	r23,zero
  8095fc:	db401615 	stw	r13,88(sp)
  809600:	d8801315 	stw	r2,76(sp)
  809604:	d8c01415 	stw	r3,80(sp)
  809608:	dcc01515 	stw	r19,84(sp)
  80960c:	080a2700 	call	80a270 <__muldi3>
  809610:	b00d883a 	mov	r6,r22
  809614:	000b883a 	mov	r5,zero
  809618:	9009883a 	mov	r4,r18
  80961c:	b80f883a 	mov	r7,r23
  809620:	1021883a 	mov	r16,r2
  809624:	1823883a 	mov	r17,r3
  809628:	080a2700 	call	80a270 <__muldi3>
  80962c:	8085883a 	add	r2,r16,r2
  809630:	140d803a 	cmpltu	r6,r2,r16
  809634:	88c7883a 	add	r3,r17,r3
  809638:	30cd883a 	add	r6,r6,r3
  80963c:	1029883a 	mov	r20,r2
  809640:	302b883a 	mov	r21,r6
  809644:	da801317 	ldw	r10,76(sp)
  809648:	dac01417 	ldw	r11,80(sp)
  80964c:	db001517 	ldw	r12,84(sp)
  809650:	db401617 	ldw	r13,88(sp)
  809654:	3440612e 	bgeu	r6,r17,8097dc <__muldf3+0x318>
  809658:	0009883a 	mov	r4,zero
  80965c:	5105883a 	add	r2,r10,r4
  809660:	128d803a 	cmpltu	r6,r2,r10
  809664:	5d07883a 	add	r3,r11,r20
  809668:	30cd883a 	add	r6,r6,r3
  80966c:	0021883a 	mov	r16,zero
  809670:	04400044 	movi	r17,1
  809674:	1025883a 	mov	r18,r2
  809678:	3027883a 	mov	r19,r6
  80967c:	32c06236 	bltu	r6,r11,809808 <__muldf3+0x344>
  809680:	59807a26 	beq	r11,r6,80986c <__muldf3+0x3a8>
  809684:	680b883a 	mov	r5,r13
  809688:	b80f883a 	mov	r7,r23
  80968c:	6009883a 	mov	r4,r12
  809690:	b00d883a 	mov	r6,r22
  809694:	080a2700 	call	80a270 <__muldi3>
  809698:	1009883a 	mov	r4,r2
  80969c:	000f883a 	mov	r7,zero
  8096a0:	1545883a 	add	r2,r2,r21
  8096a4:	1111803a 	cmpltu	r8,r2,r4
  8096a8:	19c7883a 	add	r3,r3,r7
  8096ac:	40c7883a 	add	r3,r8,r3
  8096b0:	88cb883a 	add	r5,r17,r3
  8096b4:	d8c00617 	ldw	r3,24(sp)
  8096b8:	8089883a 	add	r4,r16,r2
  8096bc:	d8800b17 	ldw	r2,44(sp)
  8096c0:	18c00104 	addi	r3,r3,4
  8096c4:	240d803a 	cmpltu	r6,r4,r16
  8096c8:	10c7883a 	add	r3,r2,r3
  8096cc:	2013883a 	mov	r9,r4
  8096d0:	d8800a17 	ldw	r2,40(sp)
  8096d4:	d9000517 	ldw	r4,20(sp)
  8096d8:	314d883a 	add	r6,r6,r5
  8096dc:	3015883a 	mov	r10,r6
  8096e0:	2088c03a 	cmpne	r4,r4,r2
  8096e4:	00880034 	movhi	r2,8192
  8096e8:	10bfffc4 	addi	r2,r2,-1
  8096ec:	d9000f15 	stw	r4,60(sp)
  8096f0:	d8c01015 	stw	r3,64(sp)
  8096f4:	1180162e 	bgeu	r2,r6,809750 <__muldf3+0x28c>
  8096f8:	1811883a 	mov	r8,r3
  8096fc:	101f883a 	mov	r15,r2
  809700:	980497fa 	slli	r2,r19,31
  809704:	9016d07a 	srli	r11,r18,1
  809708:	500697fa 	slli	r3,r10,31
  80970c:	480cd07a 	srli	r6,r9,1
  809710:	500ed07a 	srli	r7,r10,1
  809714:	12d6b03a 	or	r11,r2,r11
  809718:	00800044 	movi	r2,1
  80971c:	198cb03a 	or	r6,r3,r6
  809720:	4888703a 	and	r4,r9,r2
  809724:	9818d07a 	srli	r12,r19,1
  809728:	001b883a 	mov	r13,zero
  80972c:	03a00034 	movhi	r14,32768
  809730:	3013883a 	mov	r9,r6
  809734:	3815883a 	mov	r10,r7
  809738:	4091883a 	add	r8,r8,r2
  80973c:	20000226 	beq	r4,zero,809748 <__muldf3+0x284>
  809740:	5b64b03a 	or	r18,r11,r13
  809744:	63a6b03a 	or	r19,r12,r14
  809748:	7abfed36 	bltu	r15,r10,809700 <__muldf3+0x23c>
  80974c:	da001015 	stw	r8,64(sp)
  809750:	00840034 	movhi	r2,4096
  809754:	10bfffc4 	addi	r2,r2,-1
  809758:	12801436 	bltu	r2,r10,8097ac <__muldf3+0x2e8>
  80975c:	da001017 	ldw	r8,64(sp)
  809760:	101f883a 	mov	r15,r2
  809764:	4a45883a 	add	r2,r9,r9
  809768:	124d803a 	cmpltu	r6,r2,r9
  80976c:	5287883a 	add	r3,r10,r10
  809770:	9497883a 	add	r11,r18,r18
  809774:	5c8f803a 	cmpltu	r7,r11,r18
  809778:	9cd9883a 	add	r12,r19,r19
  80977c:	01000044 	movi	r4,1
  809780:	30cd883a 	add	r6,r6,r3
  809784:	3b0f883a 	add	r7,r7,r12
  809788:	423fffc4 	addi	r8,r8,-1
  80978c:	1013883a 	mov	r9,r2
  809790:	3015883a 	mov	r10,r6
  809794:	111ab03a 	or	r13,r2,r4
  809798:	98003016 	blt	r19,zero,80985c <__muldf3+0x398>
  80979c:	5825883a 	mov	r18,r11
  8097a0:	3827883a 	mov	r19,r7
  8097a4:	7abfef2e 	bgeu	r15,r10,809764 <__muldf3+0x2a0>
  8097a8:	da001015 	stw	r8,64(sp)
  8097ac:	00803fc4 	movi	r2,255
  8097b0:	488e703a 	and	r7,r9,r2
  8097b4:	00802004 	movi	r2,128
  8097b8:	0007883a 	mov	r3,zero
  8097bc:	0011883a 	mov	r8,zero
  8097c0:	38801826 	beq	r7,r2,809824 <__muldf3+0x360>
  8097c4:	008000c4 	movi	r2,3
  8097c8:	d9000e04 	addi	r4,sp,56
  8097cc:	da801215 	stw	r10,72(sp)
  8097d0:	d8800e15 	stw	r2,56(sp)
  8097d4:	da401115 	stw	r9,68(sp)
  8097d8:	003f6a06 	br	809584 <__muldf3+0xc0>
  8097dc:	89802126 	beq	r17,r6,809864 <__muldf3+0x3a0>
  8097e0:	0009883a 	mov	r4,zero
  8097e4:	5105883a 	add	r2,r10,r4
  8097e8:	128d803a 	cmpltu	r6,r2,r10
  8097ec:	5d07883a 	add	r3,r11,r20
  8097f0:	30cd883a 	add	r6,r6,r3
  8097f4:	0021883a 	mov	r16,zero
  8097f8:	0023883a 	mov	r17,zero
  8097fc:	1025883a 	mov	r18,r2
  809800:	3027883a 	mov	r19,r6
  809804:	32ff9e2e 	bgeu	r6,r11,809680 <__muldf3+0x1bc>
  809808:	00800044 	movi	r2,1
  80980c:	8089883a 	add	r4,r16,r2
  809810:	240d803a 	cmpltu	r6,r4,r16
  809814:	344d883a 	add	r6,r6,r17
  809818:	2021883a 	mov	r16,r4
  80981c:	3023883a 	mov	r17,r6
  809820:	003f9806 	br	809684 <__muldf3+0x1c0>
  809824:	403fe71e 	bne	r8,zero,8097c4 <__muldf3+0x300>
  809828:	01004004 	movi	r4,256
  80982c:	4904703a 	and	r2,r9,r4
  809830:	10c4b03a 	or	r2,r2,r3
  809834:	103fe31e 	bne	r2,zero,8097c4 <__muldf3+0x300>
  809838:	94c4b03a 	or	r2,r18,r19
  80983c:	103fe126 	beq	r2,zero,8097c4 <__muldf3+0x300>
  809840:	49c5883a 	add	r2,r9,r7
  809844:	1251803a 	cmpltu	r8,r2,r9
  809848:	4291883a 	add	r8,r8,r10
  80984c:	013fc004 	movi	r4,-256
  809850:	1112703a 	and	r9,r2,r4
  809854:	4015883a 	mov	r10,r8
  809858:	003fda06 	br	8097c4 <__muldf3+0x300>
  80985c:	6813883a 	mov	r9,r13
  809860:	003fce06 	br	80979c <__muldf3+0x2d8>
  809864:	143f7c36 	bltu	r2,r16,809658 <__muldf3+0x194>
  809868:	003fdd06 	br	8097e0 <__muldf3+0x31c>
  80986c:	12bf852e 	bgeu	r2,r10,809684 <__muldf3+0x1c0>
  809870:	003fe506 	br	809808 <__muldf3+0x344>
  809874:	00800084 	movi	r2,2
  809878:	20bf351e 	bne	r4,r2,809550 <__muldf3+0x8c>
  80987c:	01002074 	movhi	r4,129
  809880:	213c4d04 	addi	r4,r4,-3788
  809884:	003f3f06 	br	809584 <__muldf3+0xc0>

00809888 <__divdf3>:
  809888:	deffed04 	addi	sp,sp,-76
  80988c:	dcc01115 	stw	r19,68(sp)
  809890:	dcc00404 	addi	r19,sp,16
  809894:	2011883a 	mov	r8,r4
  809898:	2813883a 	mov	r9,r5
  80989c:	dc000e15 	stw	r16,56(sp)
  8098a0:	d809883a 	mov	r4,sp
  8098a4:	980b883a 	mov	r5,r19
  8098a8:	dc000904 	addi	r16,sp,36
  8098ac:	dfc01215 	stw	ra,72(sp)
  8098b0:	da400115 	stw	r9,4(sp)
  8098b4:	d9c00315 	stw	r7,12(sp)
  8098b8:	da000015 	stw	r8,0(sp)
  8098bc:	d9800215 	stw	r6,8(sp)
  8098c0:	dc801015 	stw	r18,64(sp)
  8098c4:	dc400f15 	stw	r17,60(sp)
  8098c8:	080a7280 	call	80a728 <__unpack_d>
  8098cc:	d9000204 	addi	r4,sp,8
  8098d0:	800b883a 	mov	r5,r16
  8098d4:	080a7280 	call	80a728 <__unpack_d>
  8098d8:	d9000417 	ldw	r4,16(sp)
  8098dc:	00800044 	movi	r2,1
  8098e0:	11000b2e 	bgeu	r2,r4,809910 <__divdf3+0x88>
  8098e4:	d9400917 	ldw	r5,36(sp)
  8098e8:	1140762e 	bgeu	r2,r5,809ac4 <__divdf3+0x23c>
  8098ec:	d8800517 	ldw	r2,20(sp)
  8098f0:	d8c00a17 	ldw	r3,40(sp)
  8098f4:	01800104 	movi	r6,4
  8098f8:	10c4f03a 	xor	r2,r2,r3
  8098fc:	d8800515 	stw	r2,20(sp)
  809900:	21800226 	beq	r4,r6,80990c <__divdf3+0x84>
  809904:	00800084 	movi	r2,2
  809908:	2080141e 	bne	r4,r2,80995c <__divdf3+0xd4>
  80990c:	29000926 	beq	r5,r4,809934 <__divdf3+0xac>
  809910:	9809883a 	mov	r4,r19
  809914:	080a4140 	call	80a414 <__pack_d>
  809918:	dfc01217 	ldw	ra,72(sp)
  80991c:	dcc01117 	ldw	r19,68(sp)
  809920:	dc801017 	ldw	r18,64(sp)
  809924:	dc400f17 	ldw	r17,60(sp)
  809928:	dc000e17 	ldw	r16,56(sp)
  80992c:	dec01304 	addi	sp,sp,76
  809930:	f800283a 	ret
  809934:	01002074 	movhi	r4,129
  809938:	213c4d04 	addi	r4,r4,-3788
  80993c:	080a4140 	call	80a414 <__pack_d>
  809940:	dfc01217 	ldw	ra,72(sp)
  809944:	dcc01117 	ldw	r19,68(sp)
  809948:	dc801017 	ldw	r18,64(sp)
  80994c:	dc400f17 	ldw	r17,60(sp)
  809950:	dc000e17 	ldw	r16,56(sp)
  809954:	dec01304 	addi	sp,sp,76
  809958:	f800283a 	ret
  80995c:	29805b26 	beq	r5,r6,809acc <__divdf3+0x244>
  809960:	28802d26 	beq	r5,r2,809a18 <__divdf3+0x190>
  809964:	d8c00617 	ldw	r3,24(sp)
  809968:	d8800b17 	ldw	r2,44(sp)
  80996c:	d9c00817 	ldw	r7,32(sp)
  809970:	dc400d17 	ldw	r17,52(sp)
  809974:	188bc83a 	sub	r5,r3,r2
  809978:	d9800717 	ldw	r6,28(sp)
  80997c:	dc000c17 	ldw	r16,48(sp)
  809980:	d9400615 	stw	r5,24(sp)
  809984:	3c403836 	bltu	r7,r17,809a68 <__divdf3+0x1e0>
  809988:	89c03626 	beq	r17,r7,809a64 <__divdf3+0x1dc>
  80998c:	0015883a 	mov	r10,zero
  809990:	001d883a 	mov	r14,zero
  809994:	02c40034 	movhi	r11,4096
  809998:	001f883a 	mov	r15,zero
  80999c:	003f883a 	mov	ra,zero
  8099a0:	04800f44 	movi	r18,61
  8099a4:	00000f06 	br	8099e4 <__divdf3+0x15c>
  8099a8:	601d883a 	mov	r14,r12
  8099ac:	681f883a 	mov	r15,r13
  8099b0:	400d883a 	mov	r6,r8
  8099b4:	100f883a 	mov	r7,r2
  8099b8:	3191883a 	add	r8,r6,r6
  8099bc:	5808d07a 	srli	r4,r11,1
  8099c0:	4185803a 	cmpltu	r2,r8,r6
  8099c4:	39d3883a 	add	r9,r7,r7
  8099c8:	28c6b03a 	or	r3,r5,r3
  8099cc:	1245883a 	add	r2,r2,r9
  8099d0:	1815883a 	mov	r10,r3
  8099d4:	2017883a 	mov	r11,r4
  8099d8:	400d883a 	mov	r6,r8
  8099dc:	100f883a 	mov	r7,r2
  8099e0:	fc801726 	beq	ra,r18,809a40 <__divdf3+0x1b8>
  8099e4:	580a97fa 	slli	r5,r11,31
  8099e8:	5006d07a 	srli	r3,r10,1
  8099ec:	ffc00044 	addi	ra,ra,1
  8099f0:	3c7ff136 	bltu	r7,r17,8099b8 <__divdf3+0x130>
  8099f4:	3411c83a 	sub	r8,r6,r16
  8099f8:	3205803a 	cmpltu	r2,r6,r8
  8099fc:	3c53c83a 	sub	r9,r7,r17
  809a00:	7298b03a 	or	r12,r14,r10
  809a04:	7adab03a 	or	r13,r15,r11
  809a08:	4885c83a 	sub	r2,r9,r2
  809a0c:	89ffe61e 	bne	r17,r7,8099a8 <__divdf3+0x120>
  809a10:	343fe936 	bltu	r6,r16,8099b8 <__divdf3+0x130>
  809a14:	003fe406 	br	8099a8 <__divdf3+0x120>
  809a18:	9809883a 	mov	r4,r19
  809a1c:	d9800415 	stw	r6,16(sp)
  809a20:	080a4140 	call	80a414 <__pack_d>
  809a24:	dfc01217 	ldw	ra,72(sp)
  809a28:	dcc01117 	ldw	r19,68(sp)
  809a2c:	dc801017 	ldw	r18,64(sp)
  809a30:	dc400f17 	ldw	r17,60(sp)
  809a34:	dc000e17 	ldw	r16,56(sp)
  809a38:	dec01304 	addi	sp,sp,76
  809a3c:	f800283a 	ret
  809a40:	00803fc4 	movi	r2,255
  809a44:	7090703a 	and	r8,r14,r2
  809a48:	00802004 	movi	r2,128
  809a4c:	0007883a 	mov	r3,zero
  809a50:	0013883a 	mov	r9,zero
  809a54:	40800d26 	beq	r8,r2,809a8c <__divdf3+0x204>
  809a58:	dbc00815 	stw	r15,32(sp)
  809a5c:	db800715 	stw	r14,28(sp)
  809a60:	003fab06 	br	809910 <__divdf3+0x88>
  809a64:	343fc92e 	bgeu	r6,r16,80998c <__divdf3+0x104>
  809a68:	3185883a 	add	r2,r6,r6
  809a6c:	1189803a 	cmpltu	r4,r2,r6
  809a70:	39c7883a 	add	r3,r7,r7
  809a74:	20c9883a 	add	r4,r4,r3
  809a78:	297fffc4 	addi	r5,r5,-1
  809a7c:	100d883a 	mov	r6,r2
  809a80:	200f883a 	mov	r7,r4
  809a84:	d9400615 	stw	r5,24(sp)
  809a88:	003fc006 	br	80998c <__divdf3+0x104>
  809a8c:	483ff21e 	bne	r9,zero,809a58 <__divdf3+0x1d0>
  809a90:	01004004 	movi	r4,256
  809a94:	7104703a 	and	r2,r14,r4
  809a98:	10c4b03a 	or	r2,r2,r3
  809a9c:	103fee1e 	bne	r2,zero,809a58 <__divdf3+0x1d0>
  809aa0:	31c4b03a 	or	r2,r6,r7
  809aa4:	103fec26 	beq	r2,zero,809a58 <__divdf3+0x1d0>
  809aa8:	7205883a 	add	r2,r14,r8
  809aac:	1391803a 	cmpltu	r8,r2,r14
  809ab0:	43d1883a 	add	r8,r8,r15
  809ab4:	013fc004 	movi	r4,-256
  809ab8:	111c703a 	and	r14,r2,r4
  809abc:	401f883a 	mov	r15,r8
  809ac0:	003fe506 	br	809a58 <__divdf3+0x1d0>
  809ac4:	8009883a 	mov	r4,r16
  809ac8:	003f9206 	br	809914 <__divdf3+0x8c>
  809acc:	9809883a 	mov	r4,r19
  809ad0:	d8000715 	stw	zero,28(sp)
  809ad4:	d8000815 	stw	zero,32(sp)
  809ad8:	d8000615 	stw	zero,24(sp)
  809adc:	003f8d06 	br	809914 <__divdf3+0x8c>

00809ae0 <__eqdf2>:
  809ae0:	deffef04 	addi	sp,sp,-68
  809ae4:	dc400f15 	stw	r17,60(sp)
  809ae8:	dc400404 	addi	r17,sp,16
  809aec:	2005883a 	mov	r2,r4
  809af0:	2807883a 	mov	r3,r5
  809af4:	dc000e15 	stw	r16,56(sp)
  809af8:	d809883a 	mov	r4,sp
  809afc:	880b883a 	mov	r5,r17
  809b00:	dc000904 	addi	r16,sp,36
  809b04:	d8c00115 	stw	r3,4(sp)
  809b08:	d8800015 	stw	r2,0(sp)
  809b0c:	d9800215 	stw	r6,8(sp)
  809b10:	dfc01015 	stw	ra,64(sp)
  809b14:	d9c00315 	stw	r7,12(sp)
  809b18:	080a7280 	call	80a728 <__unpack_d>
  809b1c:	d9000204 	addi	r4,sp,8
  809b20:	800b883a 	mov	r5,r16
  809b24:	080a7280 	call	80a728 <__unpack_d>
  809b28:	d8800417 	ldw	r2,16(sp)
  809b2c:	00c00044 	movi	r3,1
  809b30:	180d883a 	mov	r6,r3
  809b34:	1880062e 	bgeu	r3,r2,809b50 <__eqdf2+0x70>
  809b38:	d8800917 	ldw	r2,36(sp)
  809b3c:	8809883a 	mov	r4,r17
  809b40:	800b883a 	mov	r5,r16
  809b44:	1880022e 	bgeu	r3,r2,809b50 <__eqdf2+0x70>
  809b48:	080a8600 	call	80a860 <__fpcmp_parts_d>
  809b4c:	100d883a 	mov	r6,r2
  809b50:	3005883a 	mov	r2,r6
  809b54:	dfc01017 	ldw	ra,64(sp)
  809b58:	dc400f17 	ldw	r17,60(sp)
  809b5c:	dc000e17 	ldw	r16,56(sp)
  809b60:	dec01104 	addi	sp,sp,68
  809b64:	f800283a 	ret

00809b68 <__nedf2>:
  809b68:	deffef04 	addi	sp,sp,-68
  809b6c:	dc400f15 	stw	r17,60(sp)
  809b70:	dc400404 	addi	r17,sp,16
  809b74:	2005883a 	mov	r2,r4
  809b78:	2807883a 	mov	r3,r5
  809b7c:	dc000e15 	stw	r16,56(sp)
  809b80:	d809883a 	mov	r4,sp
  809b84:	880b883a 	mov	r5,r17
  809b88:	dc000904 	addi	r16,sp,36
  809b8c:	d8c00115 	stw	r3,4(sp)
  809b90:	d8800015 	stw	r2,0(sp)
  809b94:	d9800215 	stw	r6,8(sp)
  809b98:	dfc01015 	stw	ra,64(sp)
  809b9c:	d9c00315 	stw	r7,12(sp)
  809ba0:	080a7280 	call	80a728 <__unpack_d>
  809ba4:	d9000204 	addi	r4,sp,8
  809ba8:	800b883a 	mov	r5,r16
  809bac:	080a7280 	call	80a728 <__unpack_d>
  809bb0:	d8800417 	ldw	r2,16(sp)
  809bb4:	00c00044 	movi	r3,1
  809bb8:	180d883a 	mov	r6,r3
  809bbc:	1880062e 	bgeu	r3,r2,809bd8 <__nedf2+0x70>
  809bc0:	d8800917 	ldw	r2,36(sp)
  809bc4:	8809883a 	mov	r4,r17
  809bc8:	800b883a 	mov	r5,r16
  809bcc:	1880022e 	bgeu	r3,r2,809bd8 <__nedf2+0x70>
  809bd0:	080a8600 	call	80a860 <__fpcmp_parts_d>
  809bd4:	100d883a 	mov	r6,r2
  809bd8:	3005883a 	mov	r2,r6
  809bdc:	dfc01017 	ldw	ra,64(sp)
  809be0:	dc400f17 	ldw	r17,60(sp)
  809be4:	dc000e17 	ldw	r16,56(sp)
  809be8:	dec01104 	addi	sp,sp,68
  809bec:	f800283a 	ret

00809bf0 <__gtdf2>:
  809bf0:	deffef04 	addi	sp,sp,-68
  809bf4:	dc400f15 	stw	r17,60(sp)
  809bf8:	dc400404 	addi	r17,sp,16
  809bfc:	2005883a 	mov	r2,r4
  809c00:	2807883a 	mov	r3,r5
  809c04:	dc000e15 	stw	r16,56(sp)
  809c08:	d809883a 	mov	r4,sp
  809c0c:	880b883a 	mov	r5,r17
  809c10:	dc000904 	addi	r16,sp,36
  809c14:	d8c00115 	stw	r3,4(sp)
  809c18:	d8800015 	stw	r2,0(sp)
  809c1c:	d9800215 	stw	r6,8(sp)
  809c20:	dfc01015 	stw	ra,64(sp)
  809c24:	d9c00315 	stw	r7,12(sp)
  809c28:	080a7280 	call	80a728 <__unpack_d>
  809c2c:	d9000204 	addi	r4,sp,8
  809c30:	800b883a 	mov	r5,r16
  809c34:	080a7280 	call	80a728 <__unpack_d>
  809c38:	d8800417 	ldw	r2,16(sp)
  809c3c:	00c00044 	movi	r3,1
  809c40:	01bfffc4 	movi	r6,-1
  809c44:	1880062e 	bgeu	r3,r2,809c60 <__gtdf2+0x70>
  809c48:	d8800917 	ldw	r2,36(sp)
  809c4c:	8809883a 	mov	r4,r17
  809c50:	800b883a 	mov	r5,r16
  809c54:	1880022e 	bgeu	r3,r2,809c60 <__gtdf2+0x70>
  809c58:	080a8600 	call	80a860 <__fpcmp_parts_d>
  809c5c:	100d883a 	mov	r6,r2
  809c60:	3005883a 	mov	r2,r6
  809c64:	dfc01017 	ldw	ra,64(sp)
  809c68:	dc400f17 	ldw	r17,60(sp)
  809c6c:	dc000e17 	ldw	r16,56(sp)
  809c70:	dec01104 	addi	sp,sp,68
  809c74:	f800283a 	ret

00809c78 <__gedf2>:
  809c78:	deffef04 	addi	sp,sp,-68
  809c7c:	dc400f15 	stw	r17,60(sp)
  809c80:	dc400404 	addi	r17,sp,16
  809c84:	2005883a 	mov	r2,r4
  809c88:	2807883a 	mov	r3,r5
  809c8c:	dc000e15 	stw	r16,56(sp)
  809c90:	d809883a 	mov	r4,sp
  809c94:	880b883a 	mov	r5,r17
  809c98:	dc000904 	addi	r16,sp,36
  809c9c:	d8c00115 	stw	r3,4(sp)
  809ca0:	d8800015 	stw	r2,0(sp)
  809ca4:	d9800215 	stw	r6,8(sp)
  809ca8:	dfc01015 	stw	ra,64(sp)
  809cac:	d9c00315 	stw	r7,12(sp)
  809cb0:	080a7280 	call	80a728 <__unpack_d>
  809cb4:	d9000204 	addi	r4,sp,8
  809cb8:	800b883a 	mov	r5,r16
  809cbc:	080a7280 	call	80a728 <__unpack_d>
  809cc0:	d8800417 	ldw	r2,16(sp)
  809cc4:	00c00044 	movi	r3,1
  809cc8:	01bfffc4 	movi	r6,-1
  809ccc:	1880062e 	bgeu	r3,r2,809ce8 <__gedf2+0x70>
  809cd0:	d8800917 	ldw	r2,36(sp)
  809cd4:	8809883a 	mov	r4,r17
  809cd8:	800b883a 	mov	r5,r16
  809cdc:	1880022e 	bgeu	r3,r2,809ce8 <__gedf2+0x70>
  809ce0:	080a8600 	call	80a860 <__fpcmp_parts_d>
  809ce4:	100d883a 	mov	r6,r2
  809ce8:	3005883a 	mov	r2,r6
  809cec:	dfc01017 	ldw	ra,64(sp)
  809cf0:	dc400f17 	ldw	r17,60(sp)
  809cf4:	dc000e17 	ldw	r16,56(sp)
  809cf8:	dec01104 	addi	sp,sp,68
  809cfc:	f800283a 	ret

00809d00 <__ltdf2>:
  809d00:	deffef04 	addi	sp,sp,-68
  809d04:	dc400f15 	stw	r17,60(sp)
  809d08:	dc400404 	addi	r17,sp,16
  809d0c:	2005883a 	mov	r2,r4
  809d10:	2807883a 	mov	r3,r5
  809d14:	dc000e15 	stw	r16,56(sp)
  809d18:	d809883a 	mov	r4,sp
  809d1c:	880b883a 	mov	r5,r17
  809d20:	dc000904 	addi	r16,sp,36
  809d24:	d8c00115 	stw	r3,4(sp)
  809d28:	d8800015 	stw	r2,0(sp)
  809d2c:	d9800215 	stw	r6,8(sp)
  809d30:	dfc01015 	stw	ra,64(sp)
  809d34:	d9c00315 	stw	r7,12(sp)
  809d38:	080a7280 	call	80a728 <__unpack_d>
  809d3c:	d9000204 	addi	r4,sp,8
  809d40:	800b883a 	mov	r5,r16
  809d44:	080a7280 	call	80a728 <__unpack_d>
  809d48:	d8800417 	ldw	r2,16(sp)
  809d4c:	00c00044 	movi	r3,1
  809d50:	180d883a 	mov	r6,r3
  809d54:	1880062e 	bgeu	r3,r2,809d70 <__ltdf2+0x70>
  809d58:	d8800917 	ldw	r2,36(sp)
  809d5c:	8809883a 	mov	r4,r17
  809d60:	800b883a 	mov	r5,r16
  809d64:	1880022e 	bgeu	r3,r2,809d70 <__ltdf2+0x70>
  809d68:	080a8600 	call	80a860 <__fpcmp_parts_d>
  809d6c:	100d883a 	mov	r6,r2
  809d70:	3005883a 	mov	r2,r6
  809d74:	dfc01017 	ldw	ra,64(sp)
  809d78:	dc400f17 	ldw	r17,60(sp)
  809d7c:	dc000e17 	ldw	r16,56(sp)
  809d80:	dec01104 	addi	sp,sp,68
  809d84:	f800283a 	ret

00809d88 <__floatsidf>:
  809d88:	2006d7fa 	srli	r3,r4,31
  809d8c:	defff604 	addi	sp,sp,-40
  809d90:	008000c4 	movi	r2,3
  809d94:	dfc00915 	stw	ra,36(sp)
  809d98:	dcc00815 	stw	r19,32(sp)
  809d9c:	dc800715 	stw	r18,28(sp)
  809da0:	dc400615 	stw	r17,24(sp)
  809da4:	dc000515 	stw	r16,20(sp)
  809da8:	d8800015 	stw	r2,0(sp)
  809dac:	d8c00115 	stw	r3,4(sp)
  809db0:	20000f1e 	bne	r4,zero,809df0 <__floatsidf+0x68>
  809db4:	00800084 	movi	r2,2
  809db8:	d8800015 	stw	r2,0(sp)
  809dbc:	d809883a 	mov	r4,sp
  809dc0:	080a4140 	call	80a414 <__pack_d>
  809dc4:	1009883a 	mov	r4,r2
  809dc8:	180b883a 	mov	r5,r3
  809dcc:	2005883a 	mov	r2,r4
  809dd0:	2807883a 	mov	r3,r5
  809dd4:	dfc00917 	ldw	ra,36(sp)
  809dd8:	dcc00817 	ldw	r19,32(sp)
  809ddc:	dc800717 	ldw	r18,28(sp)
  809de0:	dc400617 	ldw	r17,24(sp)
  809de4:	dc000517 	ldw	r16,20(sp)
  809de8:	dec00a04 	addi	sp,sp,40
  809dec:	f800283a 	ret
  809df0:	00800f04 	movi	r2,60
  809df4:	1807003a 	cmpeq	r3,r3,zero
  809df8:	d8800215 	stw	r2,8(sp)
  809dfc:	18001126 	beq	r3,zero,809e44 <__floatsidf+0xbc>
  809e00:	0027883a 	mov	r19,zero
  809e04:	2025883a 	mov	r18,r4
  809e08:	d9000315 	stw	r4,12(sp)
  809e0c:	dcc00415 	stw	r19,16(sp)
  809e10:	080a3940 	call	80a394 <__clzsi2>
  809e14:	11000744 	addi	r4,r2,29
  809e18:	013fe80e 	bge	zero,r4,809dbc <__floatsidf+0x34>
  809e1c:	10bfff44 	addi	r2,r2,-3
  809e20:	10000c16 	blt	r2,zero,809e54 <__floatsidf+0xcc>
  809e24:	90a2983a 	sll	r17,r18,r2
  809e28:	0021883a 	mov	r16,zero
  809e2c:	d8800217 	ldw	r2,8(sp)
  809e30:	dc400415 	stw	r17,16(sp)
  809e34:	dc000315 	stw	r16,12(sp)
  809e38:	1105c83a 	sub	r2,r2,r4
  809e3c:	d8800215 	stw	r2,8(sp)
  809e40:	003fde06 	br	809dbc <__floatsidf+0x34>
  809e44:	00a00034 	movhi	r2,32768
  809e48:	20800a26 	beq	r4,r2,809e74 <__floatsidf+0xec>
  809e4c:	0109c83a 	sub	r4,zero,r4
  809e50:	003feb06 	br	809e00 <__floatsidf+0x78>
  809e54:	9006d07a 	srli	r3,r18,1
  809e58:	008007c4 	movi	r2,31
  809e5c:	1105c83a 	sub	r2,r2,r4
  809e60:	1886d83a 	srl	r3,r3,r2
  809e64:	9922983a 	sll	r17,r19,r4
  809e68:	9120983a 	sll	r16,r18,r4
  809e6c:	1c62b03a 	or	r17,r3,r17
  809e70:	003fee06 	br	809e2c <__floatsidf+0xa4>
  809e74:	0009883a 	mov	r4,zero
  809e78:	01707834 	movhi	r5,49632
  809e7c:	003fd306 	br	809dcc <__floatsidf+0x44>

00809e80 <__fixdfsi>:
  809e80:	defff804 	addi	sp,sp,-32
  809e84:	2005883a 	mov	r2,r4
  809e88:	2807883a 	mov	r3,r5
  809e8c:	d809883a 	mov	r4,sp
  809e90:	d9400204 	addi	r5,sp,8
  809e94:	d8c00115 	stw	r3,4(sp)
  809e98:	d8800015 	stw	r2,0(sp)
  809e9c:	dfc00715 	stw	ra,28(sp)
  809ea0:	080a7280 	call	80a728 <__unpack_d>
  809ea4:	d8c00217 	ldw	r3,8(sp)
  809ea8:	00800084 	movi	r2,2
  809eac:	1880051e 	bne	r3,r2,809ec4 <__fixdfsi+0x44>
  809eb0:	0007883a 	mov	r3,zero
  809eb4:	1805883a 	mov	r2,r3
  809eb8:	dfc00717 	ldw	ra,28(sp)
  809ebc:	dec00804 	addi	sp,sp,32
  809ec0:	f800283a 	ret
  809ec4:	00800044 	movi	r2,1
  809ec8:	10fff92e 	bgeu	r2,r3,809eb0 <__fixdfsi+0x30>
  809ecc:	00800104 	movi	r2,4
  809ed0:	18800426 	beq	r3,r2,809ee4 <__fixdfsi+0x64>
  809ed4:	d8c00417 	ldw	r3,16(sp)
  809ed8:	183ff516 	blt	r3,zero,809eb0 <__fixdfsi+0x30>
  809edc:	00800784 	movi	r2,30
  809ee0:	10c0080e 	bge	r2,r3,809f04 <__fixdfsi+0x84>
  809ee4:	d8800317 	ldw	r2,12(sp)
  809ee8:	1000121e 	bne	r2,zero,809f34 <__fixdfsi+0xb4>
  809eec:	00e00034 	movhi	r3,32768
  809ef0:	18ffffc4 	addi	r3,r3,-1
  809ef4:	1805883a 	mov	r2,r3
  809ef8:	dfc00717 	ldw	ra,28(sp)
  809efc:	dec00804 	addi	sp,sp,32
  809f00:	f800283a 	ret
  809f04:	00800f04 	movi	r2,60
  809f08:	10d1c83a 	sub	r8,r2,r3
  809f0c:	40bff804 	addi	r2,r8,-32
  809f10:	d9800517 	ldw	r6,20(sp)
  809f14:	d9c00617 	ldw	r7,24(sp)
  809f18:	10000816 	blt	r2,zero,809f3c <__fixdfsi+0xbc>
  809f1c:	3888d83a 	srl	r4,r7,r2
  809f20:	d8800317 	ldw	r2,12(sp)
  809f24:	2007883a 	mov	r3,r4
  809f28:	103fe226 	beq	r2,zero,809eb4 <__fixdfsi+0x34>
  809f2c:	0107c83a 	sub	r3,zero,r4
  809f30:	003fe006 	br	809eb4 <__fixdfsi+0x34>
  809f34:	00e00034 	movhi	r3,32768
  809f38:	003fde06 	br	809eb4 <__fixdfsi+0x34>
  809f3c:	39c7883a 	add	r3,r7,r7
  809f40:	008007c4 	movi	r2,31
  809f44:	1205c83a 	sub	r2,r2,r8
  809f48:	1886983a 	sll	r3,r3,r2
  809f4c:	3208d83a 	srl	r4,r6,r8
  809f50:	1908b03a 	or	r4,r3,r4
  809f54:	003ff206 	br	809f20 <__fixdfsi+0xa0>

00809f58 <__floatunsidf>:
  809f58:	defff204 	addi	sp,sp,-56
  809f5c:	dfc00d15 	stw	ra,52(sp)
  809f60:	ddc00c15 	stw	r23,48(sp)
  809f64:	dd800b15 	stw	r22,44(sp)
  809f68:	dd400a15 	stw	r21,40(sp)
  809f6c:	dd000915 	stw	r20,36(sp)
  809f70:	dcc00815 	stw	r19,32(sp)
  809f74:	dc800715 	stw	r18,28(sp)
  809f78:	dc400615 	stw	r17,24(sp)
  809f7c:	dc000515 	stw	r16,20(sp)
  809f80:	d8000115 	stw	zero,4(sp)
  809f84:	20000f1e 	bne	r4,zero,809fc4 <__floatunsidf+0x6c>
  809f88:	00800084 	movi	r2,2
  809f8c:	d8800015 	stw	r2,0(sp)
  809f90:	d809883a 	mov	r4,sp
  809f94:	080a4140 	call	80a414 <__pack_d>
  809f98:	dfc00d17 	ldw	ra,52(sp)
  809f9c:	ddc00c17 	ldw	r23,48(sp)
  809fa0:	dd800b17 	ldw	r22,44(sp)
  809fa4:	dd400a17 	ldw	r21,40(sp)
  809fa8:	dd000917 	ldw	r20,36(sp)
  809fac:	dcc00817 	ldw	r19,32(sp)
  809fb0:	dc800717 	ldw	r18,28(sp)
  809fb4:	dc400617 	ldw	r17,24(sp)
  809fb8:	dc000517 	ldw	r16,20(sp)
  809fbc:	dec00e04 	addi	sp,sp,56
  809fc0:	f800283a 	ret
  809fc4:	008000c4 	movi	r2,3
  809fc8:	00c00f04 	movi	r3,60
  809fcc:	002f883a 	mov	r23,zero
  809fd0:	202d883a 	mov	r22,r4
  809fd4:	d8800015 	stw	r2,0(sp)
  809fd8:	d8c00215 	stw	r3,8(sp)
  809fdc:	d9000315 	stw	r4,12(sp)
  809fe0:	ddc00415 	stw	r23,16(sp)
  809fe4:	080a3940 	call	80a394 <__clzsi2>
  809fe8:	12400744 	addi	r9,r2,29
  809fec:	48000b16 	blt	r9,zero,80a01c <__floatunsidf+0xc4>
  809ff0:	483fe726 	beq	r9,zero,809f90 <__floatunsidf+0x38>
  809ff4:	10bfff44 	addi	r2,r2,-3
  809ff8:	10002e16 	blt	r2,zero,80a0b4 <__floatunsidf+0x15c>
  809ffc:	b0a2983a 	sll	r17,r22,r2
  80a000:	0021883a 	mov	r16,zero
  80a004:	d8800217 	ldw	r2,8(sp)
  80a008:	dc400415 	stw	r17,16(sp)
  80a00c:	dc000315 	stw	r16,12(sp)
  80a010:	1245c83a 	sub	r2,r2,r9
  80a014:	d8800215 	stw	r2,8(sp)
  80a018:	003fdd06 	br	809f90 <__floatunsidf+0x38>
  80a01c:	0255c83a 	sub	r10,zero,r9
  80a020:	51bff804 	addi	r6,r10,-32
  80a024:	30001b16 	blt	r6,zero,80a094 <__floatunsidf+0x13c>
  80a028:	b9a8d83a 	srl	r20,r23,r6
  80a02c:	002b883a 	mov	r21,zero
  80a030:	000f883a 	mov	r7,zero
  80a034:	01000044 	movi	r4,1
  80a038:	0011883a 	mov	r8,zero
  80a03c:	30002516 	blt	r6,zero,80a0d4 <__floatunsidf+0x17c>
  80a040:	21a6983a 	sll	r19,r4,r6
  80a044:	0025883a 	mov	r18,zero
  80a048:	00bfffc4 	movi	r2,-1
  80a04c:	9089883a 	add	r4,r18,r2
  80a050:	988b883a 	add	r5,r19,r2
  80a054:	248d803a 	cmpltu	r6,r4,r18
  80a058:	314b883a 	add	r5,r6,r5
  80a05c:	b104703a 	and	r2,r22,r4
  80a060:	b946703a 	and	r3,r23,r5
  80a064:	10c4b03a 	or	r2,r2,r3
  80a068:	10000226 	beq	r2,zero,80a074 <__floatunsidf+0x11c>
  80a06c:	01c00044 	movi	r7,1
  80a070:	0011883a 	mov	r8,zero
  80a074:	d9000217 	ldw	r4,8(sp)
  80a078:	a1c4b03a 	or	r2,r20,r7
  80a07c:	aa06b03a 	or	r3,r21,r8
  80a080:	2249c83a 	sub	r4,r4,r9
  80a084:	d8c00415 	stw	r3,16(sp)
  80a088:	d9000215 	stw	r4,8(sp)
  80a08c:	d8800315 	stw	r2,12(sp)
  80a090:	003fbf06 	br	809f90 <__floatunsidf+0x38>
  80a094:	bdc7883a 	add	r3,r23,r23
  80a098:	008007c4 	movi	r2,31
  80a09c:	1285c83a 	sub	r2,r2,r10
  80a0a0:	1886983a 	sll	r3,r3,r2
  80a0a4:	b2a8d83a 	srl	r20,r22,r10
  80a0a8:	baaad83a 	srl	r21,r23,r10
  80a0ac:	1d28b03a 	or	r20,r3,r20
  80a0b0:	003fdf06 	br	80a030 <__floatunsidf+0xd8>
  80a0b4:	b006d07a 	srli	r3,r22,1
  80a0b8:	008007c4 	movi	r2,31
  80a0bc:	1245c83a 	sub	r2,r2,r9
  80a0c0:	1886d83a 	srl	r3,r3,r2
  80a0c4:	ba62983a 	sll	r17,r23,r9
  80a0c8:	b260983a 	sll	r16,r22,r9
  80a0cc:	1c62b03a 	or	r17,r3,r17
  80a0d0:	003fcc06 	br	80a004 <__floatunsidf+0xac>
  80a0d4:	2006d07a 	srli	r3,r4,1
  80a0d8:	008007c4 	movi	r2,31
  80a0dc:	1285c83a 	sub	r2,r2,r10
  80a0e0:	18a6d83a 	srl	r19,r3,r2
  80a0e4:	22a4983a 	sll	r18,r4,r10
  80a0e8:	003fd706 	br	80a048 <__floatunsidf+0xf0>

0080a0ec <udivmodsi4>:
  80a0ec:	29001b2e 	bgeu	r5,r4,80a15c <udivmodsi4+0x70>
  80a0f0:	28001a16 	blt	r5,zero,80a15c <udivmodsi4+0x70>
  80a0f4:	00800044 	movi	r2,1
  80a0f8:	0007883a 	mov	r3,zero
  80a0fc:	01c007c4 	movi	r7,31
  80a100:	00000306 	br	80a110 <udivmodsi4+0x24>
  80a104:	19c01326 	beq	r3,r7,80a154 <udivmodsi4+0x68>
  80a108:	18c00044 	addi	r3,r3,1
  80a10c:	28000416 	blt	r5,zero,80a120 <udivmodsi4+0x34>
  80a110:	294b883a 	add	r5,r5,r5
  80a114:	1085883a 	add	r2,r2,r2
  80a118:	293ffa36 	bltu	r5,r4,80a104 <udivmodsi4+0x18>
  80a11c:	10000d26 	beq	r2,zero,80a154 <udivmodsi4+0x68>
  80a120:	0007883a 	mov	r3,zero
  80a124:	21400236 	bltu	r4,r5,80a130 <udivmodsi4+0x44>
  80a128:	2149c83a 	sub	r4,r4,r5
  80a12c:	1886b03a 	or	r3,r3,r2
  80a130:	1004d07a 	srli	r2,r2,1
  80a134:	280ad07a 	srli	r5,r5,1
  80a138:	103ffa1e 	bne	r2,zero,80a124 <udivmodsi4+0x38>
  80a13c:	30000226 	beq	r6,zero,80a148 <udivmodsi4+0x5c>
  80a140:	2005883a 	mov	r2,r4
  80a144:	f800283a 	ret
  80a148:	1809883a 	mov	r4,r3
  80a14c:	2005883a 	mov	r2,r4
  80a150:	f800283a 	ret
  80a154:	0007883a 	mov	r3,zero
  80a158:	003ff806 	br	80a13c <udivmodsi4+0x50>
  80a15c:	00800044 	movi	r2,1
  80a160:	0007883a 	mov	r3,zero
  80a164:	003fef06 	br	80a124 <udivmodsi4+0x38>

0080a168 <__divsi3>:
  80a168:	defffe04 	addi	sp,sp,-8
  80a16c:	dc000015 	stw	r16,0(sp)
  80a170:	dfc00115 	stw	ra,4(sp)
  80a174:	0021883a 	mov	r16,zero
  80a178:	20000c16 	blt	r4,zero,80a1ac <__divsi3+0x44>
  80a17c:	000d883a 	mov	r6,zero
  80a180:	28000e16 	blt	r5,zero,80a1bc <__divsi3+0x54>
  80a184:	080a0ec0 	call	80a0ec <udivmodsi4>
  80a188:	1007883a 	mov	r3,r2
  80a18c:	8005003a 	cmpeq	r2,r16,zero
  80a190:	1000011e 	bne	r2,zero,80a198 <__divsi3+0x30>
  80a194:	00c7c83a 	sub	r3,zero,r3
  80a198:	1805883a 	mov	r2,r3
  80a19c:	dfc00117 	ldw	ra,4(sp)
  80a1a0:	dc000017 	ldw	r16,0(sp)
  80a1a4:	dec00204 	addi	sp,sp,8
  80a1a8:	f800283a 	ret
  80a1ac:	0109c83a 	sub	r4,zero,r4
  80a1b0:	04000044 	movi	r16,1
  80a1b4:	000d883a 	mov	r6,zero
  80a1b8:	283ff20e 	bge	r5,zero,80a184 <__divsi3+0x1c>
  80a1bc:	014bc83a 	sub	r5,zero,r5
  80a1c0:	8021003a 	cmpeq	r16,r16,zero
  80a1c4:	003fef06 	br	80a184 <__divsi3+0x1c>

0080a1c8 <__modsi3>:
  80a1c8:	deffff04 	addi	sp,sp,-4
  80a1cc:	dfc00015 	stw	ra,0(sp)
  80a1d0:	01800044 	movi	r6,1
  80a1d4:	2807883a 	mov	r3,r5
  80a1d8:	20000416 	blt	r4,zero,80a1ec <__modsi3+0x24>
  80a1dc:	28000c16 	blt	r5,zero,80a210 <__modsi3+0x48>
  80a1e0:	dfc00017 	ldw	ra,0(sp)
  80a1e4:	dec00104 	addi	sp,sp,4
  80a1e8:	080a0ec1 	jmpi	80a0ec <udivmodsi4>
  80a1ec:	0109c83a 	sub	r4,zero,r4
  80a1f0:	28000b16 	blt	r5,zero,80a220 <__modsi3+0x58>
  80a1f4:	180b883a 	mov	r5,r3
  80a1f8:	01800044 	movi	r6,1
  80a1fc:	080a0ec0 	call	80a0ec <udivmodsi4>
  80a200:	0085c83a 	sub	r2,zero,r2
  80a204:	dfc00017 	ldw	ra,0(sp)
  80a208:	dec00104 	addi	sp,sp,4
  80a20c:	f800283a 	ret
  80a210:	014bc83a 	sub	r5,zero,r5
  80a214:	dfc00017 	ldw	ra,0(sp)
  80a218:	dec00104 	addi	sp,sp,4
  80a21c:	080a0ec1 	jmpi	80a0ec <udivmodsi4>
  80a220:	0147c83a 	sub	r3,zero,r5
  80a224:	003ff306 	br	80a1f4 <__modsi3+0x2c>

0080a228 <__udivsi3>:
  80a228:	000d883a 	mov	r6,zero
  80a22c:	080a0ec1 	jmpi	80a0ec <udivmodsi4>

0080a230 <__umodsi3>:
  80a230:	01800044 	movi	r6,1
  80a234:	080a0ec1 	jmpi	80a0ec <udivmodsi4>

0080a238 <__mulsi3>:
  80a238:	20000a26 	beq	r4,zero,80a264 <__mulsi3+0x2c>
  80a23c:	0007883a 	mov	r3,zero
  80a240:	2080004c 	andi	r2,r4,1
  80a244:	1005003a 	cmpeq	r2,r2,zero
  80a248:	2008d07a 	srli	r4,r4,1
  80a24c:	1000011e 	bne	r2,zero,80a254 <__mulsi3+0x1c>
  80a250:	1947883a 	add	r3,r3,r5
  80a254:	294b883a 	add	r5,r5,r5
  80a258:	203ff91e 	bne	r4,zero,80a240 <__mulsi3+0x8>
  80a25c:	1805883a 	mov	r2,r3
  80a260:	f800283a 	ret
  80a264:	0007883a 	mov	r3,zero
  80a268:	1805883a 	mov	r2,r3
  80a26c:	f800283a 	ret

0080a270 <__muldi3>:
  80a270:	defff204 	addi	sp,sp,-56
  80a274:	df000c15 	stw	fp,48(sp)
  80a278:	3038d43a 	srli	fp,r6,16
  80a27c:	dd000815 	stw	r20,32(sp)
  80a280:	dc400515 	stw	r17,20(sp)
  80a284:	2028d43a 	srli	r20,r4,16
  80a288:	247fffcc 	andi	r17,r4,65535
  80a28c:	dc000415 	stw	r16,16(sp)
  80a290:	343fffcc 	andi	r16,r6,65535
  80a294:	dcc00715 	stw	r19,28(sp)
  80a298:	d9000015 	stw	r4,0(sp)
  80a29c:	2827883a 	mov	r19,r5
  80a2a0:	8809883a 	mov	r4,r17
  80a2a4:	d9400115 	stw	r5,4(sp)
  80a2a8:	800b883a 	mov	r5,r16
  80a2ac:	d9800215 	stw	r6,8(sp)
  80a2b0:	dfc00d15 	stw	ra,52(sp)
  80a2b4:	d9c00315 	stw	r7,12(sp)
  80a2b8:	dd800a15 	stw	r22,40(sp)
  80a2bc:	dd400915 	stw	r21,36(sp)
  80a2c0:	302d883a 	mov	r22,r6
  80a2c4:	ddc00b15 	stw	r23,44(sp)
  80a2c8:	dc800615 	stw	r18,24(sp)
  80a2cc:	080a2380 	call	80a238 <__mulsi3>
  80a2d0:	8809883a 	mov	r4,r17
  80a2d4:	e00b883a 	mov	r5,fp
  80a2d8:	102b883a 	mov	r21,r2
  80a2dc:	080a2380 	call	80a238 <__mulsi3>
  80a2e0:	800b883a 	mov	r5,r16
  80a2e4:	a009883a 	mov	r4,r20
  80a2e8:	1023883a 	mov	r17,r2
  80a2ec:	080a2380 	call	80a238 <__mulsi3>
  80a2f0:	a009883a 	mov	r4,r20
  80a2f4:	e00b883a 	mov	r5,fp
  80a2f8:	1021883a 	mov	r16,r2
  80a2fc:	080a2380 	call	80a238 <__mulsi3>
  80a300:	a8ffffcc 	andi	r3,r21,65535
  80a304:	a82ad43a 	srli	r21,r21,16
  80a308:	8c23883a 	add	r17,r17,r16
  80a30c:	1011883a 	mov	r8,r2
  80a310:	ac6b883a 	add	r21,r21,r17
  80a314:	a804943a 	slli	r2,r21,16
  80a318:	b009883a 	mov	r4,r22
  80a31c:	980b883a 	mov	r5,r19
  80a320:	10c7883a 	add	r3,r2,r3
  80a324:	a812d43a 	srli	r9,r21,16
  80a328:	180d883a 	mov	r6,r3
  80a32c:	ac00022e 	bgeu	r21,r16,80a338 <__muldi3+0xc8>
  80a330:	00800074 	movhi	r2,1
  80a334:	4091883a 	add	r8,r8,r2
  80a338:	4267883a 	add	r19,r8,r9
  80a33c:	302d883a 	mov	r22,r6
  80a340:	080a2380 	call	80a238 <__mulsi3>
  80a344:	d9400317 	ldw	r5,12(sp)
  80a348:	d9000017 	ldw	r4,0(sp)
  80a34c:	1023883a 	mov	r17,r2
  80a350:	080a2380 	call	80a238 <__mulsi3>
  80a354:	14cb883a 	add	r5,r2,r19
  80a358:	894b883a 	add	r5,r17,r5
  80a35c:	b005883a 	mov	r2,r22
  80a360:	2807883a 	mov	r3,r5
  80a364:	dfc00d17 	ldw	ra,52(sp)
  80a368:	df000c17 	ldw	fp,48(sp)
  80a36c:	ddc00b17 	ldw	r23,44(sp)
  80a370:	dd800a17 	ldw	r22,40(sp)
  80a374:	dd400917 	ldw	r21,36(sp)
  80a378:	dd000817 	ldw	r20,32(sp)
  80a37c:	dcc00717 	ldw	r19,28(sp)
  80a380:	dc800617 	ldw	r18,24(sp)
  80a384:	dc400517 	ldw	r17,20(sp)
  80a388:	dc000417 	ldw	r16,16(sp)
  80a38c:	dec00e04 	addi	sp,sp,56
  80a390:	f800283a 	ret

0080a394 <__clzsi2>:
  80a394:	00bfffd4 	movui	r2,65535
  80a398:	11000e36 	bltu	r2,r4,80a3d4 <__clzsi2+0x40>
  80a39c:	00803fc4 	movi	r2,255
  80a3a0:	01400204 	movi	r5,8
  80a3a4:	0007883a 	mov	r3,zero
  80a3a8:	11001036 	bltu	r2,r4,80a3ec <__clzsi2+0x58>
  80a3ac:	000b883a 	mov	r5,zero
  80a3b0:	20c6d83a 	srl	r3,r4,r3
  80a3b4:	00802074 	movhi	r2,129
  80a3b8:	10bc5204 	addi	r2,r2,-3768
  80a3bc:	1887883a 	add	r3,r3,r2
  80a3c0:	18800003 	ldbu	r2,0(r3)
  80a3c4:	00c00804 	movi	r3,32
  80a3c8:	2885883a 	add	r2,r5,r2
  80a3cc:	1885c83a 	sub	r2,r3,r2
  80a3d0:	f800283a 	ret
  80a3d4:	01400404 	movi	r5,16
  80a3d8:	00804034 	movhi	r2,256
  80a3dc:	10bfffc4 	addi	r2,r2,-1
  80a3e0:	2807883a 	mov	r3,r5
  80a3e4:	113ff22e 	bgeu	r2,r4,80a3b0 <__clzsi2+0x1c>
  80a3e8:	01400604 	movi	r5,24
  80a3ec:	2807883a 	mov	r3,r5
  80a3f0:	20c6d83a 	srl	r3,r4,r3
  80a3f4:	00802074 	movhi	r2,129
  80a3f8:	10bc5204 	addi	r2,r2,-3768
  80a3fc:	1887883a 	add	r3,r3,r2
  80a400:	18800003 	ldbu	r2,0(r3)
  80a404:	00c00804 	movi	r3,32
  80a408:	2885883a 	add	r2,r5,r2
  80a40c:	1885c83a 	sub	r2,r3,r2
  80a410:	f800283a 	ret

0080a414 <__pack_d>:
  80a414:	20c00017 	ldw	r3,0(r4)
  80a418:	defffd04 	addi	sp,sp,-12
  80a41c:	dc000015 	stw	r16,0(sp)
  80a420:	dc800215 	stw	r18,8(sp)
  80a424:	dc400115 	stw	r17,4(sp)
  80a428:	00800044 	movi	r2,1
  80a42c:	22000317 	ldw	r8,12(r4)
  80a430:	001f883a 	mov	r15,zero
  80a434:	22400417 	ldw	r9,16(r4)
  80a438:	24000117 	ldw	r16,4(r4)
  80a43c:	10c0552e 	bgeu	r2,r3,80a594 <__pack_d+0x180>
  80a440:	00800104 	movi	r2,4
  80a444:	18804f26 	beq	r3,r2,80a584 <__pack_d+0x170>
  80a448:	00800084 	movi	r2,2
  80a44c:	18800226 	beq	r3,r2,80a458 <__pack_d+0x44>
  80a450:	4244b03a 	or	r2,r8,r9
  80a454:	10001a1e 	bne	r2,zero,80a4c0 <__pack_d+0xac>
  80a458:	000d883a 	mov	r6,zero
  80a45c:	000f883a 	mov	r7,zero
  80a460:	0011883a 	mov	r8,zero
  80a464:	00800434 	movhi	r2,16
  80a468:	10bfffc4 	addi	r2,r2,-1
  80a46c:	301d883a 	mov	r14,r6
  80a470:	3884703a 	and	r2,r7,r2
  80a474:	400a953a 	slli	r5,r8,20
  80a478:	79bffc2c 	andhi	r6,r15,65520
  80a47c:	308cb03a 	or	r6,r6,r2
  80a480:	00e00434 	movhi	r3,32784
  80a484:	18ffffc4 	addi	r3,r3,-1
  80a488:	800497fa 	slli	r2,r16,31
  80a48c:	30c6703a 	and	r3,r6,r3
  80a490:	1946b03a 	or	r3,r3,r5
  80a494:	01600034 	movhi	r5,32768
  80a498:	297fffc4 	addi	r5,r5,-1
  80a49c:	194a703a 	and	r5,r3,r5
  80a4a0:	288ab03a 	or	r5,r5,r2
  80a4a4:	2807883a 	mov	r3,r5
  80a4a8:	7005883a 	mov	r2,r14
  80a4ac:	dc800217 	ldw	r18,8(sp)
  80a4b0:	dc400117 	ldw	r17,4(sp)
  80a4b4:	dc000017 	ldw	r16,0(sp)
  80a4b8:	dec00304 	addi	sp,sp,12
  80a4bc:	f800283a 	ret
  80a4c0:	21000217 	ldw	r4,8(r4)
  80a4c4:	00bf0084 	movi	r2,-1022
  80a4c8:	20803f16 	blt	r4,r2,80a5c8 <__pack_d+0x1b4>
  80a4cc:	0080ffc4 	movi	r2,1023
  80a4d0:	11002c16 	blt	r2,r4,80a584 <__pack_d+0x170>
  80a4d4:	00803fc4 	movi	r2,255
  80a4d8:	408c703a 	and	r6,r8,r2
  80a4dc:	00802004 	movi	r2,128
  80a4e0:	0007883a 	mov	r3,zero
  80a4e4:	000f883a 	mov	r7,zero
  80a4e8:	2280ffc4 	addi	r10,r4,1023
  80a4ec:	30801e26 	beq	r6,r2,80a568 <__pack_d+0x154>
  80a4f0:	00801fc4 	movi	r2,127
  80a4f4:	4089883a 	add	r4,r8,r2
  80a4f8:	220d803a 	cmpltu	r6,r4,r8
  80a4fc:	324d883a 	add	r6,r6,r9
  80a500:	2011883a 	mov	r8,r4
  80a504:	3013883a 	mov	r9,r6
  80a508:	00880034 	movhi	r2,8192
  80a50c:	10bfffc4 	addi	r2,r2,-1
  80a510:	12400d36 	bltu	r2,r9,80a548 <__pack_d+0x134>
  80a514:	4804963a 	slli	r2,r9,24
  80a518:	400cd23a 	srli	r6,r8,8
  80a51c:	480ed23a 	srli	r7,r9,8
  80a520:	013fffc4 	movi	r4,-1
  80a524:	118cb03a 	or	r6,r2,r6
  80a528:	01400434 	movhi	r5,16
  80a52c:	297fffc4 	addi	r5,r5,-1
  80a530:	3104703a 	and	r2,r6,r4
  80a534:	3946703a 	and	r3,r7,r5
  80a538:	5201ffcc 	andi	r8,r10,2047
  80a53c:	100d883a 	mov	r6,r2
  80a540:	180f883a 	mov	r7,r3
  80a544:	003fc706 	br	80a464 <__pack_d+0x50>
  80a548:	480897fa 	slli	r4,r9,31
  80a54c:	4004d07a 	srli	r2,r8,1
  80a550:	4806d07a 	srli	r3,r9,1
  80a554:	52800044 	addi	r10,r10,1
  80a558:	2084b03a 	or	r2,r4,r2
  80a55c:	1011883a 	mov	r8,r2
  80a560:	1813883a 	mov	r9,r3
  80a564:	003feb06 	br	80a514 <__pack_d+0x100>
  80a568:	383fe11e 	bne	r7,zero,80a4f0 <__pack_d+0xdc>
  80a56c:	01004004 	movi	r4,256
  80a570:	4104703a 	and	r2,r8,r4
  80a574:	10c4b03a 	or	r2,r2,r3
  80a578:	103fe326 	beq	r2,zero,80a508 <__pack_d+0xf4>
  80a57c:	3005883a 	mov	r2,r6
  80a580:	003fdc06 	br	80a4f4 <__pack_d+0xe0>
  80a584:	000d883a 	mov	r6,zero
  80a588:	000f883a 	mov	r7,zero
  80a58c:	0201ffc4 	movi	r8,2047
  80a590:	003fb406 	br	80a464 <__pack_d+0x50>
  80a594:	0005883a 	mov	r2,zero
  80a598:	00c00234 	movhi	r3,8
  80a59c:	408cb03a 	or	r6,r8,r2
  80a5a0:	48ceb03a 	or	r7,r9,r3
  80a5a4:	013fffc4 	movi	r4,-1
  80a5a8:	01400434 	movhi	r5,16
  80a5ac:	297fffc4 	addi	r5,r5,-1
  80a5b0:	3104703a 	and	r2,r6,r4
  80a5b4:	3946703a 	and	r3,r7,r5
  80a5b8:	100d883a 	mov	r6,r2
  80a5bc:	180f883a 	mov	r7,r3
  80a5c0:	0201ffc4 	movi	r8,2047
  80a5c4:	003fa706 	br	80a464 <__pack_d+0x50>
  80a5c8:	1109c83a 	sub	r4,r2,r4
  80a5cc:	00800e04 	movi	r2,56
  80a5d0:	11004316 	blt	r2,r4,80a6e0 <__pack_d+0x2cc>
  80a5d4:	21fff804 	addi	r7,r4,-32
  80a5d8:	38004516 	blt	r7,zero,80a6f0 <__pack_d+0x2dc>
  80a5dc:	49d8d83a 	srl	r12,r9,r7
  80a5e0:	001b883a 	mov	r13,zero
  80a5e4:	0023883a 	mov	r17,zero
  80a5e8:	01400044 	movi	r5,1
  80a5ec:	0025883a 	mov	r18,zero
  80a5f0:	38004716 	blt	r7,zero,80a710 <__pack_d+0x2fc>
  80a5f4:	29d6983a 	sll	r11,r5,r7
  80a5f8:	0015883a 	mov	r10,zero
  80a5fc:	00bfffc4 	movi	r2,-1
  80a600:	5089883a 	add	r4,r10,r2
  80a604:	588b883a 	add	r5,r11,r2
  80a608:	228d803a 	cmpltu	r6,r4,r10
  80a60c:	314b883a 	add	r5,r6,r5
  80a610:	4104703a 	and	r2,r8,r4
  80a614:	4946703a 	and	r3,r9,r5
  80a618:	10c4b03a 	or	r2,r2,r3
  80a61c:	10000226 	beq	r2,zero,80a628 <__pack_d+0x214>
  80a620:	04400044 	movi	r17,1
  80a624:	0025883a 	mov	r18,zero
  80a628:	00803fc4 	movi	r2,255
  80a62c:	644eb03a 	or	r7,r12,r17
  80a630:	3892703a 	and	r9,r7,r2
  80a634:	00802004 	movi	r2,128
  80a638:	6c90b03a 	or	r8,r13,r18
  80a63c:	0015883a 	mov	r10,zero
  80a640:	48801626 	beq	r9,r2,80a69c <__pack_d+0x288>
  80a644:	01001fc4 	movi	r4,127
  80a648:	3905883a 	add	r2,r7,r4
  80a64c:	11cd803a 	cmpltu	r6,r2,r7
  80a650:	320d883a 	add	r6,r6,r8
  80a654:	100f883a 	mov	r7,r2
  80a658:	00840034 	movhi	r2,4096
  80a65c:	10bfffc4 	addi	r2,r2,-1
  80a660:	3011883a 	mov	r8,r6
  80a664:	0007883a 	mov	r3,zero
  80a668:	11801b36 	bltu	r2,r6,80a6d8 <__pack_d+0x2c4>
  80a66c:	4004963a 	slli	r2,r8,24
  80a670:	3808d23a 	srli	r4,r7,8
  80a674:	400ad23a 	srli	r5,r8,8
  80a678:	1813883a 	mov	r9,r3
  80a67c:	1108b03a 	or	r4,r2,r4
  80a680:	00bfffc4 	movi	r2,-1
  80a684:	00c00434 	movhi	r3,16
  80a688:	18ffffc4 	addi	r3,r3,-1
  80a68c:	208c703a 	and	r6,r4,r2
  80a690:	28ce703a 	and	r7,r5,r3
  80a694:	4a01ffcc 	andi	r8,r9,2047
  80a698:	003f7206 	br	80a464 <__pack_d+0x50>
  80a69c:	503fe91e 	bne	r10,zero,80a644 <__pack_d+0x230>
  80a6a0:	01004004 	movi	r4,256
  80a6a4:	3904703a 	and	r2,r7,r4
  80a6a8:	0007883a 	mov	r3,zero
  80a6ac:	10c4b03a 	or	r2,r2,r3
  80a6b0:	10000626 	beq	r2,zero,80a6cc <__pack_d+0x2b8>
  80a6b4:	3a45883a 	add	r2,r7,r9
  80a6b8:	11cd803a 	cmpltu	r6,r2,r7
  80a6bc:	320d883a 	add	r6,r6,r8
  80a6c0:	100f883a 	mov	r7,r2
  80a6c4:	3011883a 	mov	r8,r6
  80a6c8:	0007883a 	mov	r3,zero
  80a6cc:	00840034 	movhi	r2,4096
  80a6d0:	10bfffc4 	addi	r2,r2,-1
  80a6d4:	123fe52e 	bgeu	r2,r8,80a66c <__pack_d+0x258>
  80a6d8:	00c00044 	movi	r3,1
  80a6dc:	003fe306 	br	80a66c <__pack_d+0x258>
  80a6e0:	0009883a 	mov	r4,zero
  80a6e4:	0013883a 	mov	r9,zero
  80a6e8:	000b883a 	mov	r5,zero
  80a6ec:	003fe406 	br	80a680 <__pack_d+0x26c>
  80a6f0:	4a47883a 	add	r3,r9,r9
  80a6f4:	008007c4 	movi	r2,31
  80a6f8:	1105c83a 	sub	r2,r2,r4
  80a6fc:	1886983a 	sll	r3,r3,r2
  80a700:	4118d83a 	srl	r12,r8,r4
  80a704:	491ad83a 	srl	r13,r9,r4
  80a708:	1b18b03a 	or	r12,r3,r12
  80a70c:	003fb506 	br	80a5e4 <__pack_d+0x1d0>
  80a710:	2806d07a 	srli	r3,r5,1
  80a714:	008007c4 	movi	r2,31
  80a718:	1105c83a 	sub	r2,r2,r4
  80a71c:	1896d83a 	srl	r11,r3,r2
  80a720:	2914983a 	sll	r10,r5,r4
  80a724:	003fb506 	br	80a5fc <__pack_d+0x1e8>

0080a728 <__unpack_d>:
  80a728:	20c00117 	ldw	r3,4(r4)
  80a72c:	22400017 	ldw	r9,0(r4)
  80a730:	00800434 	movhi	r2,16
  80a734:	10bfffc4 	addi	r2,r2,-1
  80a738:	1808d53a 	srli	r4,r3,20
  80a73c:	180cd7fa 	srli	r6,r3,31
  80a740:	1894703a 	and	r10,r3,r2
  80a744:	2201ffcc 	andi	r8,r4,2047
  80a748:	281b883a 	mov	r13,r5
  80a74c:	4817883a 	mov	r11,r9
  80a750:	29800115 	stw	r6,4(r5)
  80a754:	5019883a 	mov	r12,r10
  80a758:	40001e1e 	bne	r8,zero,80a7d4 <__unpack_d+0xac>
  80a75c:	4a84b03a 	or	r2,r9,r10
  80a760:	10001926 	beq	r2,zero,80a7c8 <__unpack_d+0xa0>
  80a764:	4804d63a 	srli	r2,r9,24
  80a768:	500c923a 	slli	r6,r10,8
  80a76c:	013f0084 	movi	r4,-1022
  80a770:	00c40034 	movhi	r3,4096
  80a774:	18ffffc4 	addi	r3,r3,-1
  80a778:	118cb03a 	or	r6,r2,r6
  80a77c:	008000c4 	movi	r2,3
  80a780:	480a923a 	slli	r5,r9,8
  80a784:	68800015 	stw	r2,0(r13)
  80a788:	69000215 	stw	r4,8(r13)
  80a78c:	19800b36 	bltu	r3,r6,80a7bc <__unpack_d+0x94>
  80a790:	200f883a 	mov	r7,r4
  80a794:	1811883a 	mov	r8,r3
  80a798:	2945883a 	add	r2,r5,r5
  80a79c:	1149803a 	cmpltu	r4,r2,r5
  80a7a0:	3187883a 	add	r3,r6,r6
  80a7a4:	20c9883a 	add	r4,r4,r3
  80a7a8:	100b883a 	mov	r5,r2
  80a7ac:	200d883a 	mov	r6,r4
  80a7b0:	39ffffc4 	addi	r7,r7,-1
  80a7b4:	413ff82e 	bgeu	r8,r4,80a798 <__unpack_d+0x70>
  80a7b8:	69c00215 	stw	r7,8(r13)
  80a7bc:	69800415 	stw	r6,16(r13)
  80a7c0:	69400315 	stw	r5,12(r13)
  80a7c4:	f800283a 	ret
  80a7c8:	00800084 	movi	r2,2
  80a7cc:	28800015 	stw	r2,0(r5)
  80a7d0:	f800283a 	ret
  80a7d4:	0081ffc4 	movi	r2,2047
  80a7d8:	40800f26 	beq	r8,r2,80a818 <__unpack_d+0xf0>
  80a7dc:	480cd63a 	srli	r6,r9,24
  80a7e0:	5006923a 	slli	r3,r10,8
  80a7e4:	4804923a 	slli	r2,r9,8
  80a7e8:	0009883a 	mov	r4,zero
  80a7ec:	30c6b03a 	or	r3,r6,r3
  80a7f0:	01440034 	movhi	r5,4096
  80a7f4:	110cb03a 	or	r6,r2,r4
  80a7f8:	423f0044 	addi	r8,r8,-1023
  80a7fc:	194eb03a 	or	r7,r3,r5
  80a800:	008000c4 	movi	r2,3
  80a804:	69c00415 	stw	r7,16(r13)
  80a808:	6a000215 	stw	r8,8(r13)
  80a80c:	68800015 	stw	r2,0(r13)
  80a810:	69800315 	stw	r6,12(r13)
  80a814:	f800283a 	ret
  80a818:	4a84b03a 	or	r2,r9,r10
  80a81c:	1000031e 	bne	r2,zero,80a82c <__unpack_d+0x104>
  80a820:	00800104 	movi	r2,4
  80a824:	28800015 	stw	r2,0(r5)
  80a828:	f800283a 	ret
  80a82c:	0009883a 	mov	r4,zero
  80a830:	01400234 	movhi	r5,8
  80a834:	4904703a 	and	r2,r9,r4
  80a838:	5146703a 	and	r3,r10,r5
  80a83c:	10c4b03a 	or	r2,r2,r3
  80a840:	10000526 	beq	r2,zero,80a858 <__unpack_d+0x130>
  80a844:	00800044 	movi	r2,1
  80a848:	68800015 	stw	r2,0(r13)
  80a84c:	6b000415 	stw	r12,16(r13)
  80a850:	6ac00315 	stw	r11,12(r13)
  80a854:	f800283a 	ret
  80a858:	68000015 	stw	zero,0(r13)
  80a85c:	003ffb06 	br	80a84c <__unpack_d+0x124>

0080a860 <__fpcmp_parts_d>:
  80a860:	21800017 	ldw	r6,0(r4)
  80a864:	00c00044 	movi	r3,1
  80a868:	19800a2e 	bgeu	r3,r6,80a894 <__fpcmp_parts_d+0x34>
  80a86c:	28800017 	ldw	r2,0(r5)
  80a870:	1880082e 	bgeu	r3,r2,80a894 <__fpcmp_parts_d+0x34>
  80a874:	00c00104 	movi	r3,4
  80a878:	30c02626 	beq	r6,r3,80a914 <__fpcmp_parts_d+0xb4>
  80a87c:	10c02226 	beq	r2,r3,80a908 <__fpcmp_parts_d+0xa8>
  80a880:	00c00084 	movi	r3,2
  80a884:	30c00526 	beq	r6,r3,80a89c <__fpcmp_parts_d+0x3c>
  80a888:	10c0071e 	bne	r2,r3,80a8a8 <__fpcmp_parts_d+0x48>
  80a88c:	20800117 	ldw	r2,4(r4)
  80a890:	1000091e 	bne	r2,zero,80a8b8 <__fpcmp_parts_d+0x58>
  80a894:	00800044 	movi	r2,1
  80a898:	f800283a 	ret
  80a89c:	10c01a1e 	bne	r2,r3,80a908 <__fpcmp_parts_d+0xa8>
  80a8a0:	0005883a 	mov	r2,zero
  80a8a4:	f800283a 	ret
  80a8a8:	22000117 	ldw	r8,4(r4)
  80a8ac:	28800117 	ldw	r2,4(r5)
  80a8b0:	40800326 	beq	r8,r2,80a8c0 <__fpcmp_parts_d+0x60>
  80a8b4:	403ff726 	beq	r8,zero,80a894 <__fpcmp_parts_d+0x34>
  80a8b8:	00bfffc4 	movi	r2,-1
  80a8bc:	f800283a 	ret
  80a8c0:	20c00217 	ldw	r3,8(r4)
  80a8c4:	28800217 	ldw	r2,8(r5)
  80a8c8:	10fffa16 	blt	r2,r3,80a8b4 <__fpcmp_parts_d+0x54>
  80a8cc:	18800916 	blt	r3,r2,80a8f4 <__fpcmp_parts_d+0x94>
  80a8d0:	21c00417 	ldw	r7,16(r4)
  80a8d4:	28c00417 	ldw	r3,16(r5)
  80a8d8:	21800317 	ldw	r6,12(r4)
  80a8dc:	28800317 	ldw	r2,12(r5)
  80a8e0:	19fff436 	bltu	r3,r7,80a8b4 <__fpcmp_parts_d+0x54>
  80a8e4:	38c00526 	beq	r7,r3,80a8fc <__fpcmp_parts_d+0x9c>
  80a8e8:	38c00236 	bltu	r7,r3,80a8f4 <__fpcmp_parts_d+0x94>
  80a8ec:	19ffec1e 	bne	r3,r7,80a8a0 <__fpcmp_parts_d+0x40>
  80a8f0:	30bfeb2e 	bgeu	r6,r2,80a8a0 <__fpcmp_parts_d+0x40>
  80a8f4:	403fe71e 	bne	r8,zero,80a894 <__fpcmp_parts_d+0x34>
  80a8f8:	003fef06 	br	80a8b8 <__fpcmp_parts_d+0x58>
  80a8fc:	11bffa2e 	bgeu	r2,r6,80a8e8 <__fpcmp_parts_d+0x88>
  80a900:	403fe426 	beq	r8,zero,80a894 <__fpcmp_parts_d+0x34>
  80a904:	003fec06 	br	80a8b8 <__fpcmp_parts_d+0x58>
  80a908:	28800117 	ldw	r2,4(r5)
  80a90c:	103fe11e 	bne	r2,zero,80a894 <__fpcmp_parts_d+0x34>
  80a910:	003fe906 	br	80a8b8 <__fpcmp_parts_d+0x58>
  80a914:	11bfdd1e 	bne	r2,r6,80a88c <__fpcmp_parts_d+0x2c>
  80a918:	28c00117 	ldw	r3,4(r5)
  80a91c:	20800117 	ldw	r2,4(r4)
  80a920:	1885c83a 	sub	r2,r3,r2
  80a924:	f800283a 	ret

0080a928 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a928:	defff804 	addi	sp,sp,-32
  80a92c:	dfc00715 	stw	ra,28(sp)
  80a930:	df000615 	stw	fp,24(sp)
  80a934:	df000604 	addi	fp,sp,24
  80a938:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a93c:	e0bffc17 	ldw	r2,-16(fp)
  80a940:	1004803a 	cmplt	r2,r2,zero
  80a944:	1000091e 	bne	r2,zero,80a96c <close+0x44>
  80a948:	e13ffc17 	ldw	r4,-16(fp)
  80a94c:	01400304 	movi	r5,12
  80a950:	080a2380 	call	80a238 <__mulsi3>
  80a954:	1007883a 	mov	r3,r2
  80a958:	00802074 	movhi	r2,129
  80a95c:	10bf5604 	addi	r2,r2,-680
  80a960:	1887883a 	add	r3,r3,r2
  80a964:	e0ffff15 	stw	r3,-4(fp)
  80a968:	00000106 	br	80a970 <close+0x48>
  80a96c:	e03fff15 	stw	zero,-4(fp)
  80a970:	e0bfff17 	ldw	r2,-4(fp)
  80a974:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a978:	e0bffb17 	ldw	r2,-20(fp)
  80a97c:	1005003a 	cmpeq	r2,r2,zero
  80a980:	10001d1e 	bne	r2,zero,80a9f8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a984:	e0bffb17 	ldw	r2,-20(fp)
  80a988:	10800017 	ldw	r2,0(r2)
  80a98c:	10800417 	ldw	r2,16(r2)
  80a990:	1005003a 	cmpeq	r2,r2,zero
  80a994:	1000071e 	bne	r2,zero,80a9b4 <close+0x8c>
  80a998:	e0bffb17 	ldw	r2,-20(fp)
  80a99c:	10800017 	ldw	r2,0(r2)
  80a9a0:	10800417 	ldw	r2,16(r2)
  80a9a4:	e13ffb17 	ldw	r4,-20(fp)
  80a9a8:	103ee83a 	callr	r2
  80a9ac:	e0bffe15 	stw	r2,-8(fp)
  80a9b0:	00000106 	br	80a9b8 <close+0x90>
  80a9b4:	e03ffe15 	stw	zero,-8(fp)
  80a9b8:	e0bffe17 	ldw	r2,-8(fp)
  80a9bc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a9c0:	e13ffc17 	ldw	r4,-16(fp)
  80a9c4:	080b4640 	call	80b464 <alt_release_fd>
    if (rval < 0)
  80a9c8:	e0bffa17 	ldw	r2,-24(fp)
  80a9cc:	1004403a 	cmpge	r2,r2,zero
  80a9d0:	1000071e 	bne	r2,zero,80a9f0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80a9d4:	080aa280 	call	80aa28 <alt_get_errno>
  80a9d8:	e0fffa17 	ldw	r3,-24(fp)
  80a9dc:	00c7c83a 	sub	r3,zero,r3
  80a9e0:	10c00015 	stw	r3,0(r2)
      return -1;
  80a9e4:	00bfffc4 	movi	r2,-1
  80a9e8:	e0bffd15 	stw	r2,-12(fp)
  80a9ec:	00000806 	br	80aa10 <close+0xe8>
    }
    return 0;
  80a9f0:	e03ffd15 	stw	zero,-12(fp)
  80a9f4:	00000606 	br	80aa10 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a9f8:	080aa280 	call	80aa28 <alt_get_errno>
  80a9fc:	1007883a 	mov	r3,r2
  80aa00:	00801444 	movi	r2,81
  80aa04:	18800015 	stw	r2,0(r3)
    return -1;
  80aa08:	00bfffc4 	movi	r2,-1
  80aa0c:	e0bffd15 	stw	r2,-12(fp)
  80aa10:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80aa14:	e037883a 	mov	sp,fp
  80aa18:	dfc00117 	ldw	ra,4(sp)
  80aa1c:	df000017 	ldw	fp,0(sp)
  80aa20:	dec00204 	addi	sp,sp,8
  80aa24:	f800283a 	ret

0080aa28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aa28:	defffd04 	addi	sp,sp,-12
  80aa2c:	dfc00215 	stw	ra,8(sp)
  80aa30:	df000115 	stw	fp,4(sp)
  80aa34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80aa38:	00802074 	movhi	r2,129
  80aa3c:	10845204 	addi	r2,r2,4424
  80aa40:	10800017 	ldw	r2,0(r2)
  80aa44:	1005003a 	cmpeq	r2,r2,zero
  80aa48:	1000061e 	bne	r2,zero,80aa64 <alt_get_errno+0x3c>
  80aa4c:	00802074 	movhi	r2,129
  80aa50:	10845204 	addi	r2,r2,4424
  80aa54:	10800017 	ldw	r2,0(r2)
  80aa58:	103ee83a 	callr	r2
  80aa5c:	e0bfff15 	stw	r2,-4(fp)
  80aa60:	00000306 	br	80aa70 <alt_get_errno+0x48>
  80aa64:	00802074 	movhi	r2,129
  80aa68:	108b6b04 	addi	r2,r2,11692
  80aa6c:	e0bfff15 	stw	r2,-4(fp)
  80aa70:	e0bfff17 	ldw	r2,-4(fp)
}
  80aa74:	e037883a 	mov	sp,fp
  80aa78:	dfc00117 	ldw	ra,4(sp)
  80aa7c:	df000017 	ldw	fp,0(sp)
  80aa80:	dec00204 	addi	sp,sp,8
  80aa84:	f800283a 	ret

0080aa88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80aa88:	defffc04 	addi	sp,sp,-16
  80aa8c:	df000315 	stw	fp,12(sp)
  80aa90:	df000304 	addi	fp,sp,12
  80aa94:	e13ffd15 	stw	r4,-12(fp)
  80aa98:	e17ffe15 	stw	r5,-8(fp)
  80aa9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80aaa0:	e0bfff17 	ldw	r2,-4(fp)
}
  80aaa4:	e037883a 	mov	sp,fp
  80aaa8:	df000017 	ldw	fp,0(sp)
  80aaac:	dec00104 	addi	sp,sp,4
  80aab0:	f800283a 	ret

0080aab4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80aab4:	defff904 	addi	sp,sp,-28
  80aab8:	dfc00615 	stw	ra,24(sp)
  80aabc:	df000515 	stw	fp,20(sp)
  80aac0:	df000504 	addi	fp,sp,20
  80aac4:	e13ffc15 	stw	r4,-16(fp)
  80aac8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aacc:	e0bffc17 	ldw	r2,-16(fp)
  80aad0:	1004803a 	cmplt	r2,r2,zero
  80aad4:	1000091e 	bne	r2,zero,80aafc <fstat+0x48>
  80aad8:	e13ffc17 	ldw	r4,-16(fp)
  80aadc:	01400304 	movi	r5,12
  80aae0:	080a2380 	call	80a238 <__mulsi3>
  80aae4:	1007883a 	mov	r3,r2
  80aae8:	00802074 	movhi	r2,129
  80aaec:	10bf5604 	addi	r2,r2,-680
  80aaf0:	1887883a 	add	r3,r3,r2
  80aaf4:	e0ffff15 	stw	r3,-4(fp)
  80aaf8:	00000106 	br	80ab00 <fstat+0x4c>
  80aafc:	e03fff15 	stw	zero,-4(fp)
  80ab00:	e0bfff17 	ldw	r2,-4(fp)
  80ab04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ab08:	e0bffb17 	ldw	r2,-20(fp)
  80ab0c:	1005003a 	cmpeq	r2,r2,zero
  80ab10:	1000121e 	bne	r2,zero,80ab5c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ab14:	e0bffb17 	ldw	r2,-20(fp)
  80ab18:	10800017 	ldw	r2,0(r2)
  80ab1c:	10800817 	ldw	r2,32(r2)
  80ab20:	1005003a 	cmpeq	r2,r2,zero
  80ab24:	1000081e 	bne	r2,zero,80ab48 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80ab28:	e0bffb17 	ldw	r2,-20(fp)
  80ab2c:	10800017 	ldw	r2,0(r2)
  80ab30:	10800817 	ldw	r2,32(r2)
  80ab34:	e13ffb17 	ldw	r4,-20(fp)
  80ab38:	e17ffd17 	ldw	r5,-12(fp)
  80ab3c:	103ee83a 	callr	r2
  80ab40:	e0bffe15 	stw	r2,-8(fp)
  80ab44:	00000b06 	br	80ab74 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ab48:	e0fffd17 	ldw	r3,-12(fp)
  80ab4c:	00880004 	movi	r2,8192
  80ab50:	18800115 	stw	r2,4(r3)
      return 0;
  80ab54:	e03ffe15 	stw	zero,-8(fp)
  80ab58:	00000606 	br	80ab74 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ab5c:	080ab8c0 	call	80ab8c <alt_get_errno>
  80ab60:	1007883a 	mov	r3,r2
  80ab64:	00801444 	movi	r2,81
  80ab68:	18800015 	stw	r2,0(r3)
    return -1;
  80ab6c:	00bfffc4 	movi	r2,-1
  80ab70:	e0bffe15 	stw	r2,-8(fp)
  80ab74:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ab78:	e037883a 	mov	sp,fp
  80ab7c:	dfc00117 	ldw	ra,4(sp)
  80ab80:	df000017 	ldw	fp,0(sp)
  80ab84:	dec00204 	addi	sp,sp,8
  80ab88:	f800283a 	ret

0080ab8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ab8c:	defffd04 	addi	sp,sp,-12
  80ab90:	dfc00215 	stw	ra,8(sp)
  80ab94:	df000115 	stw	fp,4(sp)
  80ab98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ab9c:	00802074 	movhi	r2,129
  80aba0:	10845204 	addi	r2,r2,4424
  80aba4:	10800017 	ldw	r2,0(r2)
  80aba8:	1005003a 	cmpeq	r2,r2,zero
  80abac:	1000061e 	bne	r2,zero,80abc8 <alt_get_errno+0x3c>
  80abb0:	00802074 	movhi	r2,129
  80abb4:	10845204 	addi	r2,r2,4424
  80abb8:	10800017 	ldw	r2,0(r2)
  80abbc:	103ee83a 	callr	r2
  80abc0:	e0bfff15 	stw	r2,-4(fp)
  80abc4:	00000306 	br	80abd4 <alt_get_errno+0x48>
  80abc8:	00802074 	movhi	r2,129
  80abcc:	108b6b04 	addi	r2,r2,11692
  80abd0:	e0bfff15 	stw	r2,-4(fp)
  80abd4:	e0bfff17 	ldw	r2,-4(fp)
}
  80abd8:	e037883a 	mov	sp,fp
  80abdc:	dfc00117 	ldw	ra,4(sp)
  80abe0:	df000017 	ldw	fp,0(sp)
  80abe4:	dec00204 	addi	sp,sp,8
  80abe8:	f800283a 	ret

0080abec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80abec:	deffeb04 	addi	sp,sp,-84
  80abf0:	dfc01415 	stw	ra,80(sp)
  80abf4:	df001315 	stw	fp,76(sp)
  80abf8:	df001304 	addi	fp,sp,76
  80abfc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ac00:	e0bffd17 	ldw	r2,-12(fp)
  80ac04:	1004803a 	cmplt	r2,r2,zero
  80ac08:	1000091e 	bne	r2,zero,80ac30 <isatty+0x44>
  80ac0c:	e13ffd17 	ldw	r4,-12(fp)
  80ac10:	01400304 	movi	r5,12
  80ac14:	080a2380 	call	80a238 <__mulsi3>
  80ac18:	1007883a 	mov	r3,r2
  80ac1c:	00802074 	movhi	r2,129
  80ac20:	10bf5604 	addi	r2,r2,-680
  80ac24:	1887883a 	add	r3,r3,r2
  80ac28:	e0ffff15 	stw	r3,-4(fp)
  80ac2c:	00000106 	br	80ac34 <isatty+0x48>
  80ac30:	e03fff15 	stw	zero,-4(fp)
  80ac34:	e0bfff17 	ldw	r2,-4(fp)
  80ac38:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80ac3c:	e0bfed17 	ldw	r2,-76(fp)
  80ac40:	1005003a 	cmpeq	r2,r2,zero
  80ac44:	10000f1e 	bne	r2,zero,80ac84 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80ac48:	e0bfed17 	ldw	r2,-76(fp)
  80ac4c:	10800017 	ldw	r2,0(r2)
  80ac50:	10800817 	ldw	r2,32(r2)
  80ac54:	1004c03a 	cmpne	r2,r2,zero
  80ac58:	1000031e 	bne	r2,zero,80ac68 <isatty+0x7c>
    {
      return 1;
  80ac5c:	00800044 	movi	r2,1
  80ac60:	e0bffe15 	stw	r2,-8(fp)
  80ac64:	00000c06 	br	80ac98 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ac68:	e17fee04 	addi	r5,fp,-72
  80ac6c:	e13ffd17 	ldw	r4,-12(fp)
  80ac70:	080aab40 	call	80aab4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80ac74:	e0bfef17 	ldw	r2,-68(fp)
  80ac78:	10880020 	cmpeqi	r2,r2,8192
  80ac7c:	e0bffe15 	stw	r2,-8(fp)
  80ac80:	00000506 	br	80ac98 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ac84:	080acb00 	call	80acb0 <alt_get_errno>
  80ac88:	1007883a 	mov	r3,r2
  80ac8c:	00801444 	movi	r2,81
  80ac90:	18800015 	stw	r2,0(r3)
    return 0;
  80ac94:	e03ffe15 	stw	zero,-8(fp)
  80ac98:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ac9c:	e037883a 	mov	sp,fp
  80aca0:	dfc00117 	ldw	ra,4(sp)
  80aca4:	df000017 	ldw	fp,0(sp)
  80aca8:	dec00204 	addi	sp,sp,8
  80acac:	f800283a 	ret

0080acb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80acb0:	defffd04 	addi	sp,sp,-12
  80acb4:	dfc00215 	stw	ra,8(sp)
  80acb8:	df000115 	stw	fp,4(sp)
  80acbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80acc0:	00802074 	movhi	r2,129
  80acc4:	10845204 	addi	r2,r2,4424
  80acc8:	10800017 	ldw	r2,0(r2)
  80accc:	1005003a 	cmpeq	r2,r2,zero
  80acd0:	1000061e 	bne	r2,zero,80acec <alt_get_errno+0x3c>
  80acd4:	00802074 	movhi	r2,129
  80acd8:	10845204 	addi	r2,r2,4424
  80acdc:	10800017 	ldw	r2,0(r2)
  80ace0:	103ee83a 	callr	r2
  80ace4:	e0bfff15 	stw	r2,-4(fp)
  80ace8:	00000306 	br	80acf8 <alt_get_errno+0x48>
  80acec:	00802074 	movhi	r2,129
  80acf0:	108b6b04 	addi	r2,r2,11692
  80acf4:	e0bfff15 	stw	r2,-4(fp)
  80acf8:	e0bfff17 	ldw	r2,-4(fp)
}
  80acfc:	e037883a 	mov	sp,fp
  80ad00:	dfc00117 	ldw	ra,4(sp)
  80ad04:	df000017 	ldw	fp,0(sp)
  80ad08:	dec00204 	addi	sp,sp,8
  80ad0c:	f800283a 	ret

0080ad10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80ad10:	defffe04 	addi	sp,sp,-8
  80ad14:	dfc00115 	stw	ra,4(sp)
  80ad18:	df000015 	stw	fp,0(sp)
  80ad1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80ad20:	01002074 	movhi	r4,129
  80ad24:	21045904 	addi	r4,r4,4452
  80ad28:	01402074 	movhi	r5,129
  80ad2c:	297d4704 	addi	r5,r5,-2788
  80ad30:	01802074 	movhi	r6,129
  80ad34:	31845904 	addi	r6,r6,4452
  80ad38:	080ad900 	call	80ad90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ad3c:	01002034 	movhi	r4,128
  80ad40:	21000804 	addi	r4,r4,32
  80ad44:	01402034 	movhi	r5,128
  80ad48:	29400804 	addi	r5,r5,32
  80ad4c:	01802034 	movhi	r6,128
  80ad50:	31806d04 	addi	r6,r6,436
  80ad54:	080ad900 	call	80ad90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ad58:	01002074 	movhi	r4,129
  80ad5c:	213b6704 	addi	r4,r4,-4708
  80ad60:	01402074 	movhi	r5,129
  80ad64:	297b6704 	addi	r5,r5,-4708
  80ad68:	01802074 	movhi	r6,129
  80ad6c:	31bd4704 	addi	r6,r6,-2788
  80ad70:	080ad900 	call	80ad90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ad74:	080dd8c0 	call	80dd8c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ad78:	080e2080 	call	80e208 <alt_icache_flush_all>
}
  80ad7c:	e037883a 	mov	sp,fp
  80ad80:	dfc00117 	ldw	ra,4(sp)
  80ad84:	df000017 	ldw	fp,0(sp)
  80ad88:	dec00204 	addi	sp,sp,8
  80ad8c:	f800283a 	ret

0080ad90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ad90:	defffc04 	addi	sp,sp,-16
  80ad94:	df000315 	stw	fp,12(sp)
  80ad98:	df000304 	addi	fp,sp,12
  80ad9c:	e13ffd15 	stw	r4,-12(fp)
  80ada0:	e17ffe15 	stw	r5,-8(fp)
  80ada4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80ada8:	e0fffe17 	ldw	r3,-8(fp)
  80adac:	e0bffd17 	ldw	r2,-12(fp)
  80adb0:	18800e26 	beq	r3,r2,80adec <alt_load_section+0x5c>
  {
    while( to != end )
  80adb4:	00000a06 	br	80ade0 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80adb8:	e0bffd17 	ldw	r2,-12(fp)
  80adbc:	10c00017 	ldw	r3,0(r2)
  80adc0:	e0bffe17 	ldw	r2,-8(fp)
  80adc4:	10c00015 	stw	r3,0(r2)
  80adc8:	e0bffe17 	ldw	r2,-8(fp)
  80adcc:	10800104 	addi	r2,r2,4
  80add0:	e0bffe15 	stw	r2,-8(fp)
  80add4:	e0bffd17 	ldw	r2,-12(fp)
  80add8:	10800104 	addi	r2,r2,4
  80addc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80ade0:	e0fffe17 	ldw	r3,-8(fp)
  80ade4:	e0bfff17 	ldw	r2,-4(fp)
  80ade8:	18bff31e 	bne	r3,r2,80adb8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80adec:	e037883a 	mov	sp,fp
  80adf0:	df000017 	ldw	fp,0(sp)
  80adf4:	dec00104 	addi	sp,sp,4
  80adf8:	f800283a 	ret

0080adfc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80adfc:	defff804 	addi	sp,sp,-32
  80ae00:	dfc00715 	stw	ra,28(sp)
  80ae04:	df000615 	stw	fp,24(sp)
  80ae08:	df000604 	addi	fp,sp,24
  80ae0c:	e13ffc15 	stw	r4,-16(fp)
  80ae10:	e17ffd15 	stw	r5,-12(fp)
  80ae14:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80ae18:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ae1c:	e0bffc17 	ldw	r2,-16(fp)
  80ae20:	1004803a 	cmplt	r2,r2,zero
  80ae24:	1000091e 	bne	r2,zero,80ae4c <lseek+0x50>
  80ae28:	e13ffc17 	ldw	r4,-16(fp)
  80ae2c:	01400304 	movi	r5,12
  80ae30:	080a2380 	call	80a238 <__mulsi3>
  80ae34:	1007883a 	mov	r3,r2
  80ae38:	00802074 	movhi	r2,129
  80ae3c:	10bf5604 	addi	r2,r2,-680
  80ae40:	1887883a 	add	r3,r3,r2
  80ae44:	e0ffff15 	stw	r3,-4(fp)
  80ae48:	00000106 	br	80ae50 <lseek+0x54>
  80ae4c:	e03fff15 	stw	zero,-4(fp)
  80ae50:	e0bfff17 	ldw	r2,-4(fp)
  80ae54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80ae58:	e0bffb17 	ldw	r2,-20(fp)
  80ae5c:	1005003a 	cmpeq	r2,r2,zero
  80ae60:	1000111e 	bne	r2,zero,80aea8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ae64:	e0bffb17 	ldw	r2,-20(fp)
  80ae68:	10800017 	ldw	r2,0(r2)
  80ae6c:	10800717 	ldw	r2,28(r2)
  80ae70:	1005003a 	cmpeq	r2,r2,zero
  80ae74:	1000091e 	bne	r2,zero,80ae9c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ae78:	e0bffb17 	ldw	r2,-20(fp)
  80ae7c:	10800017 	ldw	r2,0(r2)
  80ae80:	10800717 	ldw	r2,28(r2)
  80ae84:	e13ffb17 	ldw	r4,-20(fp)
  80ae88:	e17ffd17 	ldw	r5,-12(fp)
  80ae8c:	e1bffe17 	ldw	r6,-8(fp)
  80ae90:	103ee83a 	callr	r2
  80ae94:	e0bffa15 	stw	r2,-24(fp)
  80ae98:	00000506 	br	80aeb0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ae9c:	00bfde84 	movi	r2,-134
  80aea0:	e0bffa15 	stw	r2,-24(fp)
  80aea4:	00000206 	br	80aeb0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80aea8:	00bfebc4 	movi	r2,-81
  80aeac:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80aeb0:	e0bffa17 	ldw	r2,-24(fp)
  80aeb4:	1004403a 	cmpge	r2,r2,zero
  80aeb8:	1000071e 	bne	r2,zero,80aed8 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80aebc:	080aef00 	call	80aef0 <alt_get_errno>
  80aec0:	1007883a 	mov	r3,r2
  80aec4:	e0bffa17 	ldw	r2,-24(fp)
  80aec8:	0085c83a 	sub	r2,zero,r2
  80aecc:	18800015 	stw	r2,0(r3)
    rc = -1;
  80aed0:	00bfffc4 	movi	r2,-1
  80aed4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80aed8:	e0bffa17 	ldw	r2,-24(fp)
}
  80aedc:	e037883a 	mov	sp,fp
  80aee0:	dfc00117 	ldw	ra,4(sp)
  80aee4:	df000017 	ldw	fp,0(sp)
  80aee8:	dec00204 	addi	sp,sp,8
  80aeec:	f800283a 	ret

0080aef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aef0:	defffd04 	addi	sp,sp,-12
  80aef4:	dfc00215 	stw	ra,8(sp)
  80aef8:	df000115 	stw	fp,4(sp)
  80aefc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80af00:	00802074 	movhi	r2,129
  80af04:	10845204 	addi	r2,r2,4424
  80af08:	10800017 	ldw	r2,0(r2)
  80af0c:	1005003a 	cmpeq	r2,r2,zero
  80af10:	1000061e 	bne	r2,zero,80af2c <alt_get_errno+0x3c>
  80af14:	00802074 	movhi	r2,129
  80af18:	10845204 	addi	r2,r2,4424
  80af1c:	10800017 	ldw	r2,0(r2)
  80af20:	103ee83a 	callr	r2
  80af24:	e0bfff15 	stw	r2,-4(fp)
  80af28:	00000306 	br	80af38 <alt_get_errno+0x48>
  80af2c:	00802074 	movhi	r2,129
  80af30:	108b6b04 	addi	r2,r2,11692
  80af34:	e0bfff15 	stw	r2,-4(fp)
  80af38:	e0bfff17 	ldw	r2,-4(fp)
}
  80af3c:	e037883a 	mov	sp,fp
  80af40:	dfc00117 	ldw	ra,4(sp)
  80af44:	df000017 	ldw	fp,0(sp)
  80af48:	dec00204 	addi	sp,sp,8
  80af4c:	f800283a 	ret

0080af50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80af50:	defffd04 	addi	sp,sp,-12
  80af54:	dfc00215 	stw	ra,8(sp)
  80af58:	df000115 	stw	fp,4(sp)
  80af5c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80af60:	0009883a 	mov	r4,zero
  80af64:	080b71c0 	call	80b71c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80af68:	080b7500 	call	80b750 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80af6c:	01002074 	movhi	r4,129
  80af70:	213c9504 	addi	r4,r4,-3500
  80af74:	01402074 	movhi	r5,129
  80af78:	297c9504 	addi	r5,r5,-3500
  80af7c:	01802074 	movhi	r6,129
  80af80:	31bc9504 	addi	r6,r6,-3500
  80af84:	080e5c80 	call	80e5c8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80af88:	080debc0 	call	80debc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80af8c:	01002074 	movhi	r4,129
  80af90:	2137c804 	addi	r4,r4,-8416
  80af94:	080e9900 	call	80e990 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80af98:	d1272b17 	ldw	r4,-25428(gp)
  80af9c:	d1672c17 	ldw	r5,-25424(gp)
  80afa0:	d1a72d17 	ldw	r6,-25420(gp)
  80afa4:	08003240 	call	800324 <main>
  80afa8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80afac:	01000044 	movi	r4,1
  80afb0:	080a9280 	call	80a928 <close>
  exit (result);
  80afb4:	e13fff17 	ldw	r4,-4(fp)
  80afb8:	080e9a40 	call	80e9a4 <exit>

0080afbc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80afbc:	defffe04 	addi	sp,sp,-8
  80afc0:	df000115 	stw	fp,4(sp)
  80afc4:	df000104 	addi	fp,sp,4
  80afc8:	e13fff15 	stw	r4,-4(fp)
}
  80afcc:	e037883a 	mov	sp,fp
  80afd0:	df000017 	ldw	fp,0(sp)
  80afd4:	dec00104 	addi	sp,sp,4
  80afd8:	f800283a 	ret

0080afdc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80afdc:	defffe04 	addi	sp,sp,-8
  80afe0:	df000115 	stw	fp,4(sp)
  80afe4:	df000104 	addi	fp,sp,4
  80afe8:	e13fff15 	stw	r4,-4(fp)
}
  80afec:	e037883a 	mov	sp,fp
  80aff0:	df000017 	ldw	fp,0(sp)
  80aff4:	dec00104 	addi	sp,sp,4
  80aff8:	f800283a 	ret

0080affc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80affc:	defffa04 	addi	sp,sp,-24
  80b000:	dfc00515 	stw	ra,20(sp)
  80b004:	df000415 	stw	fp,16(sp)
  80b008:	dc000315 	stw	r16,12(sp)
  80b00c:	df000304 	addi	fp,sp,12
  80b010:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80b014:	e0bffe17 	ldw	r2,-8(fp)
  80b018:	10800217 	ldw	r2,8(r2)
  80b01c:	10d00034 	orhi	r3,r2,16384
  80b020:	e0bffe17 	ldw	r2,-8(fp)
  80b024:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b028:	e03ffd15 	stw	zero,-12(fp)
  80b02c:	00002306 	br	80b0bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80b030:	e13ffd17 	ldw	r4,-12(fp)
  80b034:	04002074 	movhi	r16,129
  80b038:	843f5604 	addi	r16,r16,-680
  80b03c:	01400304 	movi	r5,12
  80b040:	080a2380 	call	80a238 <__mulsi3>
  80b044:	1405883a 	add	r2,r2,r16
  80b048:	10c00017 	ldw	r3,0(r2)
  80b04c:	e0bffe17 	ldw	r2,-8(fp)
  80b050:	10800017 	ldw	r2,0(r2)
  80b054:	1880161e 	bne	r3,r2,80b0b0 <alt_file_locked+0xb4>
  80b058:	e13ffd17 	ldw	r4,-12(fp)
  80b05c:	04002074 	movhi	r16,129
  80b060:	843f5604 	addi	r16,r16,-680
  80b064:	01400304 	movi	r5,12
  80b068:	080a2380 	call	80a238 <__mulsi3>
  80b06c:	1405883a 	add	r2,r2,r16
  80b070:	10800204 	addi	r2,r2,8
  80b074:	10800017 	ldw	r2,0(r2)
  80b078:	1004403a 	cmpge	r2,r2,zero
  80b07c:	10000c1e 	bne	r2,zero,80b0b0 <alt_file_locked+0xb4>
  80b080:	e13ffd17 	ldw	r4,-12(fp)
  80b084:	01400304 	movi	r5,12
  80b088:	080a2380 	call	80a238 <__mulsi3>
  80b08c:	1007883a 	mov	r3,r2
  80b090:	00802074 	movhi	r2,129
  80b094:	10bf5604 	addi	r2,r2,-680
  80b098:	1887883a 	add	r3,r3,r2
  80b09c:	e0bffe17 	ldw	r2,-8(fp)
  80b0a0:	18800326 	beq	r3,r2,80b0b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80b0a4:	00bffcc4 	movi	r2,-13
  80b0a8:	e0bfff15 	stw	r2,-4(fp)
  80b0ac:	00000a06 	br	80b0d8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b0b0:	e0bffd17 	ldw	r2,-12(fp)
  80b0b4:	10800044 	addi	r2,r2,1
  80b0b8:	e0bffd15 	stw	r2,-12(fp)
  80b0bc:	00802074 	movhi	r2,129
  80b0c0:	10845104 	addi	r2,r2,4420
  80b0c4:	10800017 	ldw	r2,0(r2)
  80b0c8:	1007883a 	mov	r3,r2
  80b0cc:	e0bffd17 	ldw	r2,-12(fp)
  80b0d0:	18bfd72e 	bgeu	r3,r2,80b030 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80b0d4:	e03fff15 	stw	zero,-4(fp)
  80b0d8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b0dc:	e037883a 	mov	sp,fp
  80b0e0:	dfc00217 	ldw	ra,8(sp)
  80b0e4:	df000117 	ldw	fp,4(sp)
  80b0e8:	dc000017 	ldw	r16,0(sp)
  80b0ec:	dec00304 	addi	sp,sp,12
  80b0f0:	f800283a 	ret

0080b0f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80b0f4:	defff404 	addi	sp,sp,-48
  80b0f8:	dfc00b15 	stw	ra,44(sp)
  80b0fc:	df000a15 	stw	fp,40(sp)
  80b100:	df000a04 	addi	fp,sp,40
  80b104:	e13ffb15 	stw	r4,-20(fp)
  80b108:	e17ffc15 	stw	r5,-16(fp)
  80b10c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80b110:	00bfffc4 	movi	r2,-1
  80b114:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80b118:	00bffb44 	movi	r2,-19
  80b11c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80b120:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80b124:	e13ffb17 	ldw	r4,-20(fp)
  80b128:	01402074 	movhi	r5,129
  80b12c:	29444f04 	addi	r5,r5,4412
  80b130:	080df840 	call	80df84 <alt_find_dev>
  80b134:	e0bffa15 	stw	r2,-24(fp)
  80b138:	e0bffa17 	ldw	r2,-24(fp)
  80b13c:	1004c03a 	cmpne	r2,r2,zero
  80b140:	1000051e 	bne	r2,zero,80b158 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80b144:	e13ffb17 	ldw	r4,-20(fp)
  80b148:	080e0180 	call	80e018 <alt_find_file>
  80b14c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80b150:	00800044 	movi	r2,1
  80b154:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80b158:	e0bffa17 	ldw	r2,-24(fp)
  80b15c:	1005003a 	cmpeq	r2,r2,zero
  80b160:	1000311e 	bne	r2,zero,80b228 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80b164:	e13ffa17 	ldw	r4,-24(fp)
  80b168:	080e1380 	call	80e138 <alt_get_fd>
  80b16c:	e0bff815 	stw	r2,-32(fp)
  80b170:	e0bff817 	ldw	r2,-32(fp)
  80b174:	1004403a 	cmpge	r2,r2,zero
  80b178:	1000031e 	bne	r2,zero,80b188 <open+0x94>
    {
      status = index;
  80b17c:	e0bff817 	ldw	r2,-32(fp)
  80b180:	e0bff715 	stw	r2,-36(fp)
  80b184:	00002a06 	br	80b230 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80b188:	e13ff817 	ldw	r4,-32(fp)
  80b18c:	01400304 	movi	r5,12
  80b190:	080a2380 	call	80a238 <__mulsi3>
  80b194:	1007883a 	mov	r3,r2
  80b198:	00802074 	movhi	r2,129
  80b19c:	10bf5604 	addi	r2,r2,-680
  80b1a0:	1885883a 	add	r2,r3,r2
  80b1a4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80b1a8:	e0fffc17 	ldw	r3,-16(fp)
  80b1ac:	00900034 	movhi	r2,16384
  80b1b0:	10bfffc4 	addi	r2,r2,-1
  80b1b4:	1886703a 	and	r3,r3,r2
  80b1b8:	e0bff917 	ldw	r2,-28(fp)
  80b1bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80b1c0:	e0bff617 	ldw	r2,-40(fp)
  80b1c4:	1004c03a 	cmpne	r2,r2,zero
  80b1c8:	1000061e 	bne	r2,zero,80b1e4 <open+0xf0>
  80b1cc:	e13ff917 	ldw	r4,-28(fp)
  80b1d0:	080affc0 	call	80affc <alt_file_locked>
  80b1d4:	e0bff715 	stw	r2,-36(fp)
  80b1d8:	e0bff717 	ldw	r2,-36(fp)
  80b1dc:	1004803a 	cmplt	r2,r2,zero
  80b1e0:	1000131e 	bne	r2,zero,80b230 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80b1e4:	e0bffa17 	ldw	r2,-24(fp)
  80b1e8:	10800317 	ldw	r2,12(r2)
  80b1ec:	1005003a 	cmpeq	r2,r2,zero
  80b1f0:	1000091e 	bne	r2,zero,80b218 <open+0x124>
  80b1f4:	e0bffa17 	ldw	r2,-24(fp)
  80b1f8:	10800317 	ldw	r2,12(r2)
  80b1fc:	e13ff917 	ldw	r4,-28(fp)
  80b200:	e17ffb17 	ldw	r5,-20(fp)
  80b204:	e1bffc17 	ldw	r6,-16(fp)
  80b208:	e1fffd17 	ldw	r7,-12(fp)
  80b20c:	103ee83a 	callr	r2
  80b210:	e0bfff15 	stw	r2,-4(fp)
  80b214:	00000106 	br	80b21c <open+0x128>
  80b218:	e03fff15 	stw	zero,-4(fp)
  80b21c:	e0bfff17 	ldw	r2,-4(fp)
  80b220:	e0bff715 	stw	r2,-36(fp)
  80b224:	00000206 	br	80b230 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80b228:	00bffb44 	movi	r2,-19
  80b22c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80b230:	e0bff717 	ldw	r2,-36(fp)
  80b234:	1004403a 	cmpge	r2,r2,zero
  80b238:	1000091e 	bne	r2,zero,80b260 <open+0x16c>
  {
    alt_release_fd (index);  
  80b23c:	e13ff817 	ldw	r4,-32(fp)
  80b240:	080b4640 	call	80b464 <alt_release_fd>
    ALT_ERRNO = -status;
  80b244:	080b2800 	call	80b280 <alt_get_errno>
  80b248:	e0fff717 	ldw	r3,-36(fp)
  80b24c:	00c7c83a 	sub	r3,zero,r3
  80b250:	10c00015 	stw	r3,0(r2)
    return -1;
  80b254:	00bfffc4 	movi	r2,-1
  80b258:	e0bffe15 	stw	r2,-8(fp)
  80b25c:	00000206 	br	80b268 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80b260:	e0bff817 	ldw	r2,-32(fp)
  80b264:	e0bffe15 	stw	r2,-8(fp)
  80b268:	e0bffe17 	ldw	r2,-8(fp)
}
  80b26c:	e037883a 	mov	sp,fp
  80b270:	dfc00117 	ldw	ra,4(sp)
  80b274:	df000017 	ldw	fp,0(sp)
  80b278:	dec00204 	addi	sp,sp,8
  80b27c:	f800283a 	ret

0080b280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b280:	defffd04 	addi	sp,sp,-12
  80b284:	dfc00215 	stw	ra,8(sp)
  80b288:	df000115 	stw	fp,4(sp)
  80b28c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b290:	00802074 	movhi	r2,129
  80b294:	10845204 	addi	r2,r2,4424
  80b298:	10800017 	ldw	r2,0(r2)
  80b29c:	1005003a 	cmpeq	r2,r2,zero
  80b2a0:	1000061e 	bne	r2,zero,80b2bc <alt_get_errno+0x3c>
  80b2a4:	00802074 	movhi	r2,129
  80b2a8:	10845204 	addi	r2,r2,4424
  80b2ac:	10800017 	ldw	r2,0(r2)
  80b2b0:	103ee83a 	callr	r2
  80b2b4:	e0bfff15 	stw	r2,-4(fp)
  80b2b8:	00000306 	br	80b2c8 <alt_get_errno+0x48>
  80b2bc:	00802074 	movhi	r2,129
  80b2c0:	108b6b04 	addi	r2,r2,11692
  80b2c4:	e0bfff15 	stw	r2,-4(fp)
  80b2c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b2cc:	e037883a 	mov	sp,fp
  80b2d0:	dfc00117 	ldw	ra,4(sp)
  80b2d4:	df000017 	ldw	fp,0(sp)
  80b2d8:	dec00204 	addi	sp,sp,8
  80b2dc:	f800283a 	ret

0080b2e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b2e0:	defff704 	addi	sp,sp,-36
  80b2e4:	dfc00815 	stw	ra,32(sp)
  80b2e8:	df000715 	stw	fp,28(sp)
  80b2ec:	df000704 	addi	fp,sp,28
  80b2f0:	e13ffb15 	stw	r4,-20(fp)
  80b2f4:	e17ffc15 	stw	r5,-16(fp)
  80b2f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b2fc:	e0bffb17 	ldw	r2,-20(fp)
  80b300:	1004803a 	cmplt	r2,r2,zero
  80b304:	1000091e 	bne	r2,zero,80b32c <read+0x4c>
  80b308:	e13ffb17 	ldw	r4,-20(fp)
  80b30c:	01400304 	movi	r5,12
  80b310:	080a2380 	call	80a238 <__mulsi3>
  80b314:	1007883a 	mov	r3,r2
  80b318:	00802074 	movhi	r2,129
  80b31c:	10bf5604 	addi	r2,r2,-680
  80b320:	1887883a 	add	r3,r3,r2
  80b324:	e0ffff15 	stw	r3,-4(fp)
  80b328:	00000106 	br	80b330 <read+0x50>
  80b32c:	e03fff15 	stw	zero,-4(fp)
  80b330:	e0bfff17 	ldw	r2,-4(fp)
  80b334:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b338:	e0bffa17 	ldw	r2,-24(fp)
  80b33c:	1005003a 	cmpeq	r2,r2,zero
  80b340:	1000241e 	bne	r2,zero,80b3d4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b344:	e0bffa17 	ldw	r2,-24(fp)
  80b348:	10800217 	ldw	r2,8(r2)
  80b34c:	108000cc 	andi	r2,r2,3
  80b350:	10800060 	cmpeqi	r2,r2,1
  80b354:	10001a1e 	bne	r2,zero,80b3c0 <read+0xe0>
  80b358:	e0bffa17 	ldw	r2,-24(fp)
  80b35c:	10800017 	ldw	r2,0(r2)
  80b360:	10800517 	ldw	r2,20(r2)
  80b364:	1005003a 	cmpeq	r2,r2,zero
  80b368:	1000151e 	bne	r2,zero,80b3c0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b36c:	e0bffa17 	ldw	r2,-24(fp)
  80b370:	10800017 	ldw	r2,0(r2)
  80b374:	10800517 	ldw	r2,20(r2)
  80b378:	e17ffc17 	ldw	r5,-16(fp)
  80b37c:	e1bffd17 	ldw	r6,-12(fp)
  80b380:	e13ffa17 	ldw	r4,-24(fp)
  80b384:	103ee83a 	callr	r2
  80b388:	e0bff915 	stw	r2,-28(fp)
  80b38c:	e0bff917 	ldw	r2,-28(fp)
  80b390:	1004403a 	cmpge	r2,r2,zero
  80b394:	1000071e 	bne	r2,zero,80b3b4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80b398:	080b4040 	call	80b404 <alt_get_errno>
  80b39c:	e0fff917 	ldw	r3,-28(fp)
  80b3a0:	00c7c83a 	sub	r3,zero,r3
  80b3a4:	10c00015 	stw	r3,0(r2)
          return -1;
  80b3a8:	00bfffc4 	movi	r2,-1
  80b3ac:	e0bffe15 	stw	r2,-8(fp)
  80b3b0:	00000e06 	br	80b3ec <read+0x10c>
        }
        return rval;
  80b3b4:	e0bff917 	ldw	r2,-28(fp)
  80b3b8:	e0bffe15 	stw	r2,-8(fp)
  80b3bc:	00000b06 	br	80b3ec <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80b3c0:	080b4040 	call	80b404 <alt_get_errno>
  80b3c4:	1007883a 	mov	r3,r2
  80b3c8:	00800344 	movi	r2,13
  80b3cc:	18800015 	stw	r2,0(r3)
  80b3d0:	00000406 	br	80b3e4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80b3d4:	080b4040 	call	80b404 <alt_get_errno>
  80b3d8:	1007883a 	mov	r3,r2
  80b3dc:	00801444 	movi	r2,81
  80b3e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b3e4:	00bfffc4 	movi	r2,-1
  80b3e8:	e0bffe15 	stw	r2,-8(fp)
  80b3ec:	e0bffe17 	ldw	r2,-8(fp)
}
  80b3f0:	e037883a 	mov	sp,fp
  80b3f4:	dfc00117 	ldw	ra,4(sp)
  80b3f8:	df000017 	ldw	fp,0(sp)
  80b3fc:	dec00204 	addi	sp,sp,8
  80b400:	f800283a 	ret

0080b404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b404:	defffd04 	addi	sp,sp,-12
  80b408:	dfc00215 	stw	ra,8(sp)
  80b40c:	df000115 	stw	fp,4(sp)
  80b410:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b414:	00802074 	movhi	r2,129
  80b418:	10845204 	addi	r2,r2,4424
  80b41c:	10800017 	ldw	r2,0(r2)
  80b420:	1005003a 	cmpeq	r2,r2,zero
  80b424:	1000061e 	bne	r2,zero,80b440 <alt_get_errno+0x3c>
  80b428:	00802074 	movhi	r2,129
  80b42c:	10845204 	addi	r2,r2,4424
  80b430:	10800017 	ldw	r2,0(r2)
  80b434:	103ee83a 	callr	r2
  80b438:	e0bfff15 	stw	r2,-4(fp)
  80b43c:	00000306 	br	80b44c <alt_get_errno+0x48>
  80b440:	00802074 	movhi	r2,129
  80b444:	108b6b04 	addi	r2,r2,11692
  80b448:	e0bfff15 	stw	r2,-4(fp)
  80b44c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b450:	e037883a 	mov	sp,fp
  80b454:	dfc00117 	ldw	ra,4(sp)
  80b458:	df000017 	ldw	fp,0(sp)
  80b45c:	dec00204 	addi	sp,sp,8
  80b460:	f800283a 	ret

0080b464 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b464:	defffc04 	addi	sp,sp,-16
  80b468:	dfc00315 	stw	ra,12(sp)
  80b46c:	df000215 	stw	fp,8(sp)
  80b470:	dc000115 	stw	r16,4(sp)
  80b474:	df000104 	addi	fp,sp,4
  80b478:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80b47c:	e0bfff17 	ldw	r2,-4(fp)
  80b480:	108000d0 	cmplti	r2,r2,3
  80b484:	10000f1e 	bne	r2,zero,80b4c4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b488:	e13fff17 	ldw	r4,-4(fp)
  80b48c:	04002074 	movhi	r16,129
  80b490:	843f5604 	addi	r16,r16,-680
  80b494:	01400304 	movi	r5,12
  80b498:	080a2380 	call	80a238 <__mulsi3>
  80b49c:	1405883a 	add	r2,r2,r16
  80b4a0:	10800204 	addi	r2,r2,8
  80b4a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b4a8:	e13fff17 	ldw	r4,-4(fp)
  80b4ac:	04002074 	movhi	r16,129
  80b4b0:	843f5604 	addi	r16,r16,-680
  80b4b4:	01400304 	movi	r5,12
  80b4b8:	080a2380 	call	80a238 <__mulsi3>
  80b4bc:	1405883a 	add	r2,r2,r16
  80b4c0:	10000015 	stw	zero,0(r2)
  }
}
  80b4c4:	e037883a 	mov	sp,fp
  80b4c8:	dfc00217 	ldw	ra,8(sp)
  80b4cc:	df000117 	ldw	fp,4(sp)
  80b4d0:	dc000017 	ldw	r16,0(sp)
  80b4d4:	dec00304 	addi	sp,sp,12
  80b4d8:	f800283a 	ret

0080b4dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80b4dc:	defff804 	addi	sp,sp,-32
  80b4e0:	df000715 	stw	fp,28(sp)
  80b4e4:	df000704 	addi	fp,sp,28
  80b4e8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b4ec:	0005303a 	rdctl	r2,status
  80b4f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b4f4:	e0fffb17 	ldw	r3,-20(fp)
  80b4f8:	00bfff84 	movi	r2,-2
  80b4fc:	1884703a 	and	r2,r3,r2
  80b500:	1001703a 	wrctl	status,r2
  
  return context;
  80b504:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80b508:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b50c:	d0a00c17 	ldw	r2,-32720(gp)
  80b510:	10c000c4 	addi	r3,r2,3
  80b514:	00bfff04 	movi	r2,-4
  80b518:	1884703a 	and	r2,r3,r2
  80b51c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b520:	d0e00c17 	ldw	r3,-32720(gp)
  80b524:	e0bffe17 	ldw	r2,-8(fp)
  80b528:	1887883a 	add	r3,r3,r2
  80b52c:	00804034 	movhi	r2,256
  80b530:	10800004 	addi	r2,r2,0
  80b534:	10c0072e 	bgeu	r2,r3,80b554 <sbrk+0x78>
  80b538:	e0bffd17 	ldw	r2,-12(fp)
  80b53c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b540:	e0bffa17 	ldw	r2,-24(fp)
  80b544:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80b548:	00bfffc4 	movi	r2,-1
  80b54c:	e0bfff15 	stw	r2,-4(fp)
  80b550:	00000c06 	br	80b584 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80b554:	d0a00c17 	ldw	r2,-32720(gp)
  80b558:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80b55c:	d0e00c17 	ldw	r3,-32720(gp)
  80b560:	e0bffe17 	ldw	r2,-8(fp)
  80b564:	1885883a 	add	r2,r3,r2
  80b568:	d0a00c15 	stw	r2,-32720(gp)
  80b56c:	e0bffd17 	ldw	r2,-12(fp)
  80b570:	e0bff915 	stw	r2,-28(fp)
  80b574:	e0bff917 	ldw	r2,-28(fp)
  80b578:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80b57c:	e0bffc17 	ldw	r2,-16(fp)
  80b580:	e0bfff15 	stw	r2,-4(fp)
  80b584:	e0bfff17 	ldw	r2,-4(fp)
} 
  80b588:	e037883a 	mov	sp,fp
  80b58c:	df000017 	ldw	fp,0(sp)
  80b590:	dec00104 	addi	sp,sp,4
  80b594:	f800283a 	ret

0080b598 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80b598:	defff704 	addi	sp,sp,-36
  80b59c:	dfc00815 	stw	ra,32(sp)
  80b5a0:	df000715 	stw	fp,28(sp)
  80b5a4:	df000704 	addi	fp,sp,28
  80b5a8:	e13ffb15 	stw	r4,-20(fp)
  80b5ac:	e17ffc15 	stw	r5,-16(fp)
  80b5b0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b5b4:	e0bffb17 	ldw	r2,-20(fp)
  80b5b8:	1004803a 	cmplt	r2,r2,zero
  80b5bc:	1000091e 	bne	r2,zero,80b5e4 <write+0x4c>
  80b5c0:	e13ffb17 	ldw	r4,-20(fp)
  80b5c4:	01400304 	movi	r5,12
  80b5c8:	080a2380 	call	80a238 <__mulsi3>
  80b5cc:	1007883a 	mov	r3,r2
  80b5d0:	00802074 	movhi	r2,129
  80b5d4:	10bf5604 	addi	r2,r2,-680
  80b5d8:	1887883a 	add	r3,r3,r2
  80b5dc:	e0ffff15 	stw	r3,-4(fp)
  80b5e0:	00000106 	br	80b5e8 <write+0x50>
  80b5e4:	e03fff15 	stw	zero,-4(fp)
  80b5e8:	e0bfff17 	ldw	r2,-4(fp)
  80b5ec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b5f0:	e0bffa17 	ldw	r2,-24(fp)
  80b5f4:	1005003a 	cmpeq	r2,r2,zero
  80b5f8:	1000241e 	bne	r2,zero,80b68c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80b5fc:	e0bffa17 	ldw	r2,-24(fp)
  80b600:	10800217 	ldw	r2,8(r2)
  80b604:	108000cc 	andi	r2,r2,3
  80b608:	1005003a 	cmpeq	r2,r2,zero
  80b60c:	10001a1e 	bne	r2,zero,80b678 <write+0xe0>
  80b610:	e0bffa17 	ldw	r2,-24(fp)
  80b614:	10800017 	ldw	r2,0(r2)
  80b618:	10800617 	ldw	r2,24(r2)
  80b61c:	1005003a 	cmpeq	r2,r2,zero
  80b620:	1000151e 	bne	r2,zero,80b678 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b624:	e0bffa17 	ldw	r2,-24(fp)
  80b628:	10800017 	ldw	r2,0(r2)
  80b62c:	10800617 	ldw	r2,24(r2)
  80b630:	e17ffc17 	ldw	r5,-16(fp)
  80b634:	e1bffd17 	ldw	r6,-12(fp)
  80b638:	e13ffa17 	ldw	r4,-24(fp)
  80b63c:	103ee83a 	callr	r2
  80b640:	e0bff915 	stw	r2,-28(fp)
  80b644:	e0bff917 	ldw	r2,-28(fp)
  80b648:	1004403a 	cmpge	r2,r2,zero
  80b64c:	1000071e 	bne	r2,zero,80b66c <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80b650:	080b6bc0 	call	80b6bc <alt_get_errno>
  80b654:	e0fff917 	ldw	r3,-28(fp)
  80b658:	00c7c83a 	sub	r3,zero,r3
  80b65c:	10c00015 	stw	r3,0(r2)
        return -1;
  80b660:	00bfffc4 	movi	r2,-1
  80b664:	e0bffe15 	stw	r2,-8(fp)
  80b668:	00000e06 	br	80b6a4 <write+0x10c>
      }
      return rval;
  80b66c:	e0bff917 	ldw	r2,-28(fp)
  80b670:	e0bffe15 	stw	r2,-8(fp)
  80b674:	00000b06 	br	80b6a4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b678:	080b6bc0 	call	80b6bc <alt_get_errno>
  80b67c:	1007883a 	mov	r3,r2
  80b680:	00800344 	movi	r2,13
  80b684:	18800015 	stw	r2,0(r3)
  80b688:	00000406 	br	80b69c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b68c:	080b6bc0 	call	80b6bc <alt_get_errno>
  80b690:	1007883a 	mov	r3,r2
  80b694:	00801444 	movi	r2,81
  80b698:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b69c:	00bfffc4 	movi	r2,-1
  80b6a0:	e0bffe15 	stw	r2,-8(fp)
  80b6a4:	e0bffe17 	ldw	r2,-8(fp)
}
  80b6a8:	e037883a 	mov	sp,fp
  80b6ac:	dfc00117 	ldw	ra,4(sp)
  80b6b0:	df000017 	ldw	fp,0(sp)
  80b6b4:	dec00204 	addi	sp,sp,8
  80b6b8:	f800283a 	ret

0080b6bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b6bc:	defffd04 	addi	sp,sp,-12
  80b6c0:	dfc00215 	stw	ra,8(sp)
  80b6c4:	df000115 	stw	fp,4(sp)
  80b6c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b6cc:	00802074 	movhi	r2,129
  80b6d0:	10845204 	addi	r2,r2,4424
  80b6d4:	10800017 	ldw	r2,0(r2)
  80b6d8:	1005003a 	cmpeq	r2,r2,zero
  80b6dc:	1000061e 	bne	r2,zero,80b6f8 <alt_get_errno+0x3c>
  80b6e0:	00802074 	movhi	r2,129
  80b6e4:	10845204 	addi	r2,r2,4424
  80b6e8:	10800017 	ldw	r2,0(r2)
  80b6ec:	103ee83a 	callr	r2
  80b6f0:	e0bfff15 	stw	r2,-4(fp)
  80b6f4:	00000306 	br	80b704 <alt_get_errno+0x48>
  80b6f8:	00802074 	movhi	r2,129
  80b6fc:	108b6b04 	addi	r2,r2,11692
  80b700:	e0bfff15 	stw	r2,-4(fp)
  80b704:	e0bfff17 	ldw	r2,-4(fp)
}
  80b708:	e037883a 	mov	sp,fp
  80b70c:	dfc00117 	ldw	ra,4(sp)
  80b710:	df000017 	ldw	fp,0(sp)
  80b714:	dec00204 	addi	sp,sp,8
  80b718:	f800283a 	ret

0080b71c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b71c:	defffd04 	addi	sp,sp,-12
  80b720:	dfc00215 	stw	ra,8(sp)
  80b724:	df000115 	stw	fp,4(sp)
  80b728:	df000104 	addi	fp,sp,4
  80b72c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_NIOS, cpu_nios);
  80b730:	080e8140 	call	80e814 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b734:	00800044 	movi	r2,1
  80b738:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b73c:	e037883a 	mov	sp,fp
  80b740:	dfc00117 	ldw	ra,4(sp)
  80b744:	df000017 	ldw	fp,0(sp)
  80b748:	dec00204 	addi	sp,sp,8
  80b74c:	f800283a 	ret

0080b750 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b750:	defffe04 	addi	sp,sp,-8
  80b754:	dfc00115 	stw	ra,4(sp)
  80b758:	df000015 	stw	fp,0(sp)
  80b75c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80b760:	01002074 	movhi	r4,129
  80b764:	213fc004 	addi	r4,r4,-256
  80b768:	000b883a 	mov	r5,zero
  80b76c:	000d883a 	mov	r6,zero
  80b770:	080b94c0 	call	80b94c <altera_avalon_jtag_uart_init>
  80b774:	01002074 	movhi	r4,129
  80b778:	213fb604 	addi	r4,r4,-296
  80b77c:	080b7cc0 	call	80b7cc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  80b780:	01002074 	movhi	r4,129
  80b784:	2103d804 	addi	r4,r4,3936
  80b788:	080d0f40 	call	80d0f4 <altera_avalon_lcd_16207_init>
  80b78c:	01002074 	movhi	r4,129
  80b790:	2103ce04 	addi	r4,r4,3896
  80b794:	080b7cc0 	call	80b7cc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_RS232, uart_RS232);
  80b798:	01002074 	movhi	r4,129
  80b79c:	21042004 	addi	r4,r4,4224
  80b7a0:	000b883a 	mov	r5,zero
  80b7a4:	01800044 	movi	r6,1
  80b7a8:	080d3800 	call	80d380 <altera_avalon_uart_init>
  80b7ac:	01002074 	movhi	r4,129
  80b7b0:	21041604 	addi	r4,r4,4184
  80b7b4:	080b7cc0 	call	80b7cc <alt_dev_reg>
}
  80b7b8:	e037883a 	mov	sp,fp
  80b7bc:	dfc00117 	ldw	ra,4(sp)
  80b7c0:	df000017 	ldw	fp,0(sp)
  80b7c4:	dec00204 	addi	sp,sp,8
  80b7c8:	f800283a 	ret

0080b7cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b7cc:	defffd04 	addi	sp,sp,-12
  80b7d0:	dfc00215 	stw	ra,8(sp)
  80b7d4:	df000115 	stw	fp,4(sp)
  80b7d8:	df000104 	addi	fp,sp,4
  80b7dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b7e0:	e13fff17 	ldw	r4,-4(fp)
  80b7e4:	01402074 	movhi	r5,129
  80b7e8:	29444f04 	addi	r5,r5,4412
  80b7ec:	080dda80 	call	80dda8 <alt_dev_llist_insert>
}
  80b7f0:	e037883a 	mov	sp,fp
  80b7f4:	dfc00117 	ldw	ra,4(sp)
  80b7f8:	df000017 	ldw	fp,0(sp)
  80b7fc:	dec00204 	addi	sp,sp,8
  80b800:	f800283a 	ret

0080b804 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b804:	defffa04 	addi	sp,sp,-24
  80b808:	dfc00515 	stw	ra,20(sp)
  80b80c:	df000415 	stw	fp,16(sp)
  80b810:	df000404 	addi	fp,sp,16
  80b814:	e13ffd15 	stw	r4,-12(fp)
  80b818:	e17ffe15 	stw	r5,-8(fp)
  80b81c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b820:	e0bffd17 	ldw	r2,-12(fp)
  80b824:	10800017 	ldw	r2,0(r2)
  80b828:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b82c:	e0bffc17 	ldw	r2,-16(fp)
  80b830:	11000a04 	addi	r4,r2,40
  80b834:	e0bffd17 	ldw	r2,-12(fp)
  80b838:	11c00217 	ldw	r7,8(r2)
  80b83c:	e17ffe17 	ldw	r5,-8(fp)
  80b840:	e1bfff17 	ldw	r6,-4(fp)
  80b844:	080be4c0 	call	80be4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b848:	e037883a 	mov	sp,fp
  80b84c:	dfc00117 	ldw	ra,4(sp)
  80b850:	df000017 	ldw	fp,0(sp)
  80b854:	dec00204 	addi	sp,sp,8
  80b858:	f800283a 	ret

0080b85c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b85c:	defffa04 	addi	sp,sp,-24
  80b860:	dfc00515 	stw	ra,20(sp)
  80b864:	df000415 	stw	fp,16(sp)
  80b868:	df000404 	addi	fp,sp,16
  80b86c:	e13ffd15 	stw	r4,-12(fp)
  80b870:	e17ffe15 	stw	r5,-8(fp)
  80b874:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b878:	e0bffd17 	ldw	r2,-12(fp)
  80b87c:	10800017 	ldw	r2,0(r2)
  80b880:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b884:	e0bffc17 	ldw	r2,-16(fp)
  80b888:	11000a04 	addi	r4,r2,40
  80b88c:	e0bffd17 	ldw	r2,-12(fp)
  80b890:	11c00217 	ldw	r7,8(r2)
  80b894:	e17ffe17 	ldw	r5,-8(fp)
  80b898:	e1bfff17 	ldw	r6,-4(fp)
  80b89c:	080c0700 	call	80c070 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b8a0:	e037883a 	mov	sp,fp
  80b8a4:	dfc00117 	ldw	ra,4(sp)
  80b8a8:	df000017 	ldw	fp,0(sp)
  80b8ac:	dec00204 	addi	sp,sp,8
  80b8b0:	f800283a 	ret

0080b8b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b8b4:	defffc04 	addi	sp,sp,-16
  80b8b8:	dfc00315 	stw	ra,12(sp)
  80b8bc:	df000215 	stw	fp,8(sp)
  80b8c0:	df000204 	addi	fp,sp,8
  80b8c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b8c8:	e0bfff17 	ldw	r2,-4(fp)
  80b8cc:	10800017 	ldw	r2,0(r2)
  80b8d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b8d4:	e0bffe17 	ldw	r2,-8(fp)
  80b8d8:	11000a04 	addi	r4,r2,40
  80b8dc:	e0bfff17 	ldw	r2,-4(fp)
  80b8e0:	11400217 	ldw	r5,8(r2)
  80b8e4:	080bce40 	call	80bce4 <altera_avalon_jtag_uart_close>
}
  80b8e8:	e037883a 	mov	sp,fp
  80b8ec:	dfc00117 	ldw	ra,4(sp)
  80b8f0:	df000017 	ldw	fp,0(sp)
  80b8f4:	dec00204 	addi	sp,sp,8
  80b8f8:	f800283a 	ret

0080b8fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80b8fc:	defffa04 	addi	sp,sp,-24
  80b900:	dfc00515 	stw	ra,20(sp)
  80b904:	df000415 	stw	fp,16(sp)
  80b908:	df000404 	addi	fp,sp,16
  80b90c:	e13ffd15 	stw	r4,-12(fp)
  80b910:	e17ffe15 	stw	r5,-8(fp)
  80b914:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80b918:	e0bffd17 	ldw	r2,-12(fp)
  80b91c:	10800017 	ldw	r2,0(r2)
  80b920:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b924:	e0bffc17 	ldw	r2,-16(fp)
  80b928:	11000a04 	addi	r4,r2,40
  80b92c:	e17ffe17 	ldw	r5,-8(fp)
  80b930:	e1bfff17 	ldw	r6,-4(fp)
  80b934:	080bd580 	call	80bd58 <altera_avalon_jtag_uart_ioctl>
}
  80b938:	e037883a 	mov	sp,fp
  80b93c:	dfc00117 	ldw	ra,4(sp)
  80b940:	df000017 	ldw	fp,0(sp)
  80b944:	dec00204 	addi	sp,sp,8
  80b948:	f800283a 	ret

0080b94c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b94c:	defffa04 	addi	sp,sp,-24
  80b950:	dfc00515 	stw	ra,20(sp)
  80b954:	df000415 	stw	fp,16(sp)
  80b958:	df000404 	addi	fp,sp,16
  80b95c:	e13ffd15 	stw	r4,-12(fp)
  80b960:	e17ffe15 	stw	r5,-8(fp)
  80b964:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b968:	e0fffd17 	ldw	r3,-12(fp)
  80b96c:	00800044 	movi	r2,1
  80b970:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b974:	e0bffd17 	ldw	r2,-12(fp)
  80b978:	10800017 	ldw	r2,0(r2)
  80b97c:	11000104 	addi	r4,r2,4
  80b980:	e0bffd17 	ldw	r2,-12(fp)
  80b984:	10800817 	ldw	r2,32(r2)
  80b988:	1007883a 	mov	r3,r2
  80b98c:	2005883a 	mov	r2,r4
  80b990:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80b994:	e13ffe17 	ldw	r4,-8(fp)
  80b998:	e17fff17 	ldw	r5,-4(fp)
  80b99c:	d8000015 	stw	zero,0(sp)
  80b9a0:	01802074 	movhi	r6,129
  80b9a4:	31ae8304 	addi	r6,r6,-17908
  80b9a8:	e1fffd17 	ldw	r7,-12(fp)
  80b9ac:	080e2240 	call	80e224 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b9b0:	e0bffd17 	ldw	r2,-12(fp)
  80b9b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b9b8:	e0bffd17 	ldw	r2,-12(fp)
  80b9bc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b9c0:	00802074 	movhi	r2,129
  80b9c4:	108b7604 	addi	r2,r2,11736
  80b9c8:	10800017 	ldw	r2,0(r2)
  80b9cc:	100b883a 	mov	r5,r2
  80b9d0:	01802074 	movhi	r6,129
  80b9d4:	31af0d04 	addi	r6,r6,-17356
  80b9d8:	e1fffd17 	ldw	r7,-12(fp)
  80b9dc:	080dc380 	call	80dc38 <alt_alarm_start>
  80b9e0:	1004403a 	cmpge	r2,r2,zero
  80b9e4:	1000041e 	bne	r2,zero,80b9f8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80b9e8:	e0fffd17 	ldw	r3,-12(fp)
  80b9ec:	00a00034 	movhi	r2,32768
  80b9f0:	10bfffc4 	addi	r2,r2,-1
  80b9f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80b9f8:	e037883a 	mov	sp,fp
  80b9fc:	dfc00117 	ldw	ra,4(sp)
  80ba00:	df000017 	ldw	fp,0(sp)
  80ba04:	dec00204 	addi	sp,sp,8
  80ba08:	f800283a 	ret

0080ba0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ba0c:	defff804 	addi	sp,sp,-32
  80ba10:	df000715 	stw	fp,28(sp)
  80ba14:	df000704 	addi	fp,sp,28
  80ba18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ba1c:	e0bfff17 	ldw	r2,-4(fp)
  80ba20:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80ba24:	e0bffe17 	ldw	r2,-8(fp)
  80ba28:	10800017 	ldw	r2,0(r2)
  80ba2c:	e0bffd15 	stw	r2,-12(fp)
  80ba30:	00000006 	br	80ba34 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ba34:	e0bffd17 	ldw	r2,-12(fp)
  80ba38:	10800104 	addi	r2,r2,4
  80ba3c:	10800037 	ldwio	r2,0(r2)
  80ba40:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ba44:	e0bffc17 	ldw	r2,-16(fp)
  80ba48:	1080c00c 	andi	r2,r2,768
  80ba4c:	1005003a 	cmpeq	r2,r2,zero
  80ba50:	1000741e 	bne	r2,zero,80bc24 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ba54:	e0bffc17 	ldw	r2,-16(fp)
  80ba58:	1080400c 	andi	r2,r2,256
  80ba5c:	1005003a 	cmpeq	r2,r2,zero
  80ba60:	1000351e 	bne	r2,zero,80bb38 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ba64:	00800074 	movhi	r2,1
  80ba68:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ba6c:	e0bffe17 	ldw	r2,-8(fp)
  80ba70:	10800a17 	ldw	r2,40(r2)
  80ba74:	10800044 	addi	r2,r2,1
  80ba78:	1081ffcc 	andi	r2,r2,2047
  80ba7c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80ba80:	e0bffe17 	ldw	r2,-8(fp)
  80ba84:	10c00b17 	ldw	r3,44(r2)
  80ba88:	e0bffa17 	ldw	r2,-24(fp)
  80ba8c:	18801626 	beq	r3,r2,80bae8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ba90:	e0bffd17 	ldw	r2,-12(fp)
  80ba94:	10800037 	ldwio	r2,0(r2)
  80ba98:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ba9c:	e0bffb17 	ldw	r2,-20(fp)
  80baa0:	10a0000c 	andi	r2,r2,32768
  80baa4:	1005003a 	cmpeq	r2,r2,zero
  80baa8:	10000f1e 	bne	r2,zero,80bae8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80baac:	e0bffe17 	ldw	r2,-8(fp)
  80bab0:	10c00a17 	ldw	r3,40(r2)
  80bab4:	e0bffb17 	ldw	r2,-20(fp)
  80bab8:	1009883a 	mov	r4,r2
  80babc:	e0bffe17 	ldw	r2,-8(fp)
  80bac0:	1885883a 	add	r2,r3,r2
  80bac4:	10800e04 	addi	r2,r2,56
  80bac8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bacc:	e0bffe17 	ldw	r2,-8(fp)
  80bad0:	10800a17 	ldw	r2,40(r2)
  80bad4:	10800044 	addi	r2,r2,1
  80bad8:	10c1ffcc 	andi	r3,r2,2047
  80badc:	e0bffe17 	ldw	r2,-8(fp)
  80bae0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80bae4:	003fe106 	br	80ba6c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80bae8:	e0bffb17 	ldw	r2,-20(fp)
  80baec:	10bfffec 	andhi	r2,r2,65535
  80baf0:	1005003a 	cmpeq	r2,r2,zero
  80baf4:	1000101e 	bne	r2,zero,80bb38 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80baf8:	e0bffe17 	ldw	r2,-8(fp)
  80bafc:	10c00817 	ldw	r3,32(r2)
  80bb00:	00bfff84 	movi	r2,-2
  80bb04:	1886703a 	and	r3,r3,r2
  80bb08:	e0bffe17 	ldw	r2,-8(fp)
  80bb0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80bb10:	e0bffd17 	ldw	r2,-12(fp)
  80bb14:	11000104 	addi	r4,r2,4
  80bb18:	e0bffe17 	ldw	r2,-8(fp)
  80bb1c:	10800817 	ldw	r2,32(r2)
  80bb20:	1007883a 	mov	r3,r2
  80bb24:	2005883a 	mov	r2,r4
  80bb28:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bb2c:	e0bffd17 	ldw	r2,-12(fp)
  80bb30:	10800104 	addi	r2,r2,4
  80bb34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80bb38:	e0bffc17 	ldw	r2,-16(fp)
  80bb3c:	1080800c 	andi	r2,r2,512
  80bb40:	1005003a 	cmpeq	r2,r2,zero
  80bb44:	103fbb1e 	bne	r2,zero,80ba34 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80bb48:	e0bffc17 	ldw	r2,-16(fp)
  80bb4c:	10bfffec 	andhi	r2,r2,65535
  80bb50:	1004d43a 	srli	r2,r2,16
  80bb54:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80bb58:	00001506 	br	80bbb0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80bb5c:	e13ffd17 	ldw	r4,-12(fp)
  80bb60:	e0bffe17 	ldw	r2,-8(fp)
  80bb64:	10c00d17 	ldw	r3,52(r2)
  80bb68:	e0bffe17 	ldw	r2,-8(fp)
  80bb6c:	1885883a 	add	r2,r3,r2
  80bb70:	10820e04 	addi	r2,r2,2104
  80bb74:	10800003 	ldbu	r2,0(r2)
  80bb78:	10c03fcc 	andi	r3,r2,255
  80bb7c:	18c0201c 	xori	r3,r3,128
  80bb80:	18ffe004 	addi	r3,r3,-128
  80bb84:	2005883a 	mov	r2,r4
  80bb88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bb8c:	e0bffe17 	ldw	r2,-8(fp)
  80bb90:	10800d17 	ldw	r2,52(r2)
  80bb94:	10800044 	addi	r2,r2,1
  80bb98:	10c1ffcc 	andi	r3,r2,2047
  80bb9c:	e0bffe17 	ldw	r2,-8(fp)
  80bba0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80bba4:	e0bff917 	ldw	r2,-28(fp)
  80bba8:	10bfffc4 	addi	r2,r2,-1
  80bbac:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80bbb0:	e0bff917 	ldw	r2,-28(fp)
  80bbb4:	1005003a 	cmpeq	r2,r2,zero
  80bbb8:	1000051e 	bne	r2,zero,80bbd0 <altera_avalon_jtag_uart_irq+0x1c4>
  80bbbc:	e0bffe17 	ldw	r2,-8(fp)
  80bbc0:	10c00d17 	ldw	r3,52(r2)
  80bbc4:	e0bffe17 	ldw	r2,-8(fp)
  80bbc8:	10800c17 	ldw	r2,48(r2)
  80bbcc:	18bfe31e 	bne	r3,r2,80bb5c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80bbd0:	e0bff917 	ldw	r2,-28(fp)
  80bbd4:	1005003a 	cmpeq	r2,r2,zero
  80bbd8:	103f961e 	bne	r2,zero,80ba34 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bbdc:	e0bffe17 	ldw	r2,-8(fp)
  80bbe0:	10c00817 	ldw	r3,32(r2)
  80bbe4:	00bfff44 	movi	r2,-3
  80bbe8:	1886703a 	and	r3,r3,r2
  80bbec:	e0bffe17 	ldw	r2,-8(fp)
  80bbf0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bbf4:	e0bffe17 	ldw	r2,-8(fp)
  80bbf8:	10800017 	ldw	r2,0(r2)
  80bbfc:	11000104 	addi	r4,r2,4
  80bc00:	e0bffe17 	ldw	r2,-8(fp)
  80bc04:	10800817 	ldw	r2,32(r2)
  80bc08:	1007883a 	mov	r3,r2
  80bc0c:	2005883a 	mov	r2,r4
  80bc10:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bc14:	e0bffd17 	ldw	r2,-12(fp)
  80bc18:	10800104 	addi	r2,r2,4
  80bc1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80bc20:	003f8406 	br	80ba34 <altera_avalon_jtag_uart_irq+0x28>
}
  80bc24:	e037883a 	mov	sp,fp
  80bc28:	df000017 	ldw	fp,0(sp)
  80bc2c:	dec00104 	addi	sp,sp,4
  80bc30:	f800283a 	ret

0080bc34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80bc34:	defffc04 	addi	sp,sp,-16
  80bc38:	df000315 	stw	fp,12(sp)
  80bc3c:	df000304 	addi	fp,sp,12
  80bc40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80bc44:	e0bfff17 	ldw	r2,-4(fp)
  80bc48:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80bc4c:	e0bffe17 	ldw	r2,-8(fp)
  80bc50:	10800017 	ldw	r2,0(r2)
  80bc54:	10800104 	addi	r2,r2,4
  80bc58:	10800037 	ldwio	r2,0(r2)
  80bc5c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80bc60:	e0bffd17 	ldw	r2,-12(fp)
  80bc64:	1081000c 	andi	r2,r2,1024
  80bc68:	1005003a 	cmpeq	r2,r2,zero
  80bc6c:	10000c1e 	bne	r2,zero,80bca0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80bc70:	e0bffe17 	ldw	r2,-8(fp)
  80bc74:	10800017 	ldw	r2,0(r2)
  80bc78:	11000104 	addi	r4,r2,4
  80bc7c:	e0bffe17 	ldw	r2,-8(fp)
  80bc80:	10800817 	ldw	r2,32(r2)
  80bc84:	10810014 	ori	r2,r2,1024
  80bc88:	1007883a 	mov	r3,r2
  80bc8c:	2005883a 	mov	r2,r4
  80bc90:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80bc94:	e0bffe17 	ldw	r2,-8(fp)
  80bc98:	10000915 	stw	zero,36(r2)
  80bc9c:	00000a06 	br	80bcc8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80bca0:	e0bffe17 	ldw	r2,-8(fp)
  80bca4:	10c00917 	ldw	r3,36(r2)
  80bca8:	00a00034 	movhi	r2,32768
  80bcac:	10bfff04 	addi	r2,r2,-4
  80bcb0:	10c00536 	bltu	r2,r3,80bcc8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80bcb4:	e0bffe17 	ldw	r2,-8(fp)
  80bcb8:	10800917 	ldw	r2,36(r2)
  80bcbc:	10c00044 	addi	r3,r2,1
  80bcc0:	e0bffe17 	ldw	r2,-8(fp)
  80bcc4:	10c00915 	stw	r3,36(r2)
  80bcc8:	00802074 	movhi	r2,129
  80bccc:	108b7604 	addi	r2,r2,11736
  80bcd0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80bcd4:	e037883a 	mov	sp,fp
  80bcd8:	df000017 	ldw	fp,0(sp)
  80bcdc:	dec00104 	addi	sp,sp,4
  80bce0:	f800283a 	ret

0080bce4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80bce4:	defffc04 	addi	sp,sp,-16
  80bce8:	df000315 	stw	fp,12(sp)
  80bcec:	df000304 	addi	fp,sp,12
  80bcf0:	e13ffd15 	stw	r4,-12(fp)
  80bcf4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80bcf8:	00000706 	br	80bd18 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80bcfc:	e0bffe17 	ldw	r2,-8(fp)
  80bd00:	1090000c 	andi	r2,r2,16384
  80bd04:	1005003a 	cmpeq	r2,r2,zero
  80bd08:	1000031e 	bne	r2,zero,80bd18 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80bd0c:	00bffd44 	movi	r2,-11
  80bd10:	e0bfff15 	stw	r2,-4(fp)
  80bd14:	00000b06 	br	80bd44 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80bd18:	e0bffd17 	ldw	r2,-12(fp)
  80bd1c:	10c00d17 	ldw	r3,52(r2)
  80bd20:	e0bffd17 	ldw	r2,-12(fp)
  80bd24:	10800c17 	ldw	r2,48(r2)
  80bd28:	18800526 	beq	r3,r2,80bd40 <altera_avalon_jtag_uart_close+0x5c>
  80bd2c:	e0bffd17 	ldw	r2,-12(fp)
  80bd30:	10c00917 	ldw	r3,36(r2)
  80bd34:	e0bffd17 	ldw	r2,-12(fp)
  80bd38:	10800117 	ldw	r2,4(r2)
  80bd3c:	18bfef36 	bltu	r3,r2,80bcfc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80bd40:	e03fff15 	stw	zero,-4(fp)
  80bd44:	e0bfff17 	ldw	r2,-4(fp)
}
  80bd48:	e037883a 	mov	sp,fp
  80bd4c:	df000017 	ldw	fp,0(sp)
  80bd50:	dec00104 	addi	sp,sp,4
  80bd54:	f800283a 	ret

0080bd58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80bd58:	defff804 	addi	sp,sp,-32
  80bd5c:	df000715 	stw	fp,28(sp)
  80bd60:	df000704 	addi	fp,sp,28
  80bd64:	e13ffb15 	stw	r4,-20(fp)
  80bd68:	e17ffc15 	stw	r5,-16(fp)
  80bd6c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80bd70:	00bff9c4 	movi	r2,-25
  80bd74:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80bd78:	e0bffc17 	ldw	r2,-16(fp)
  80bd7c:	e0bfff15 	stw	r2,-4(fp)
  80bd80:	e0ffff17 	ldw	r3,-4(fp)
  80bd84:	189a8060 	cmpeqi	r2,r3,27137
  80bd88:	1000041e 	bne	r2,zero,80bd9c <altera_avalon_jtag_uart_ioctl+0x44>
  80bd8c:	e0ffff17 	ldw	r3,-4(fp)
  80bd90:	189a80a0 	cmpeqi	r2,r3,27138
  80bd94:	10001b1e 	bne	r2,zero,80be04 <altera_avalon_jtag_uart_ioctl+0xac>
  80bd98:	00002706 	br	80be38 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80bd9c:	e0bffb17 	ldw	r2,-20(fp)
  80bda0:	10c00117 	ldw	r3,4(r2)
  80bda4:	00a00034 	movhi	r2,32768
  80bda8:	10bfffc4 	addi	r2,r2,-1
  80bdac:	18802226 	beq	r3,r2,80be38 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80bdb0:	e0bffd17 	ldw	r2,-12(fp)
  80bdb4:	10800017 	ldw	r2,0(r2)
  80bdb8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80bdbc:	e0bff917 	ldw	r2,-28(fp)
  80bdc0:	10800090 	cmplti	r2,r2,2
  80bdc4:	1000071e 	bne	r2,zero,80bde4 <altera_avalon_jtag_uart_ioctl+0x8c>
  80bdc8:	e0fff917 	ldw	r3,-28(fp)
  80bdcc:	00a00034 	movhi	r2,32768
  80bdd0:	10bfffc4 	addi	r2,r2,-1
  80bdd4:	18800326 	beq	r3,r2,80bde4 <altera_avalon_jtag_uart_ioctl+0x8c>
  80bdd8:	e0bff917 	ldw	r2,-28(fp)
  80bddc:	e0bffe15 	stw	r2,-8(fp)
  80bde0:	00000306 	br	80bdf0 <altera_avalon_jtag_uart_ioctl+0x98>
  80bde4:	00e00034 	movhi	r3,32768
  80bde8:	18ffff84 	addi	r3,r3,-2
  80bdec:	e0fffe15 	stw	r3,-8(fp)
  80bdf0:	e0bffb17 	ldw	r2,-20(fp)
  80bdf4:	e0fffe17 	ldw	r3,-8(fp)
  80bdf8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80bdfc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80be00:	00000d06 	br	80be38 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80be04:	e0bffb17 	ldw	r2,-20(fp)
  80be08:	10c00117 	ldw	r3,4(r2)
  80be0c:	00a00034 	movhi	r2,32768
  80be10:	10bfffc4 	addi	r2,r2,-1
  80be14:	18800826 	beq	r3,r2,80be38 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80be18:	e13ffd17 	ldw	r4,-12(fp)
  80be1c:	e0bffb17 	ldw	r2,-20(fp)
  80be20:	10c00917 	ldw	r3,36(r2)
  80be24:	e0bffb17 	ldw	r2,-20(fp)
  80be28:	10800117 	ldw	r2,4(r2)
  80be2c:	1885803a 	cmpltu	r2,r3,r2
  80be30:	20800015 	stw	r2,0(r4)
      rc = 0;
  80be34:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80be38:	e0bffa17 	ldw	r2,-24(fp)
}
  80be3c:	e037883a 	mov	sp,fp
  80be40:	df000017 	ldw	fp,0(sp)
  80be44:	dec00104 	addi	sp,sp,4
  80be48:	f800283a 	ret

0080be4c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80be4c:	defff204 	addi	sp,sp,-56
  80be50:	dfc00d15 	stw	ra,52(sp)
  80be54:	df000c15 	stw	fp,48(sp)
  80be58:	df000c04 	addi	fp,sp,48
  80be5c:	e13ffb15 	stw	r4,-20(fp)
  80be60:	e17ffc15 	stw	r5,-16(fp)
  80be64:	e1bffd15 	stw	r6,-12(fp)
  80be68:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80be6c:	e0bffc17 	ldw	r2,-16(fp)
  80be70:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80be74:	00004806 	br	80bf98 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80be78:	e0bffb17 	ldw	r2,-20(fp)
  80be7c:	10800a17 	ldw	r2,40(r2)
  80be80:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80be84:	e0bffb17 	ldw	r2,-20(fp)
  80be88:	10800b17 	ldw	r2,44(r2)
  80be8c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80be90:	e0fff717 	ldw	r3,-36(fp)
  80be94:	e0bff617 	ldw	r2,-40(fp)
  80be98:	18800536 	bltu	r3,r2,80beb0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80be9c:	e0bff717 	ldw	r2,-36(fp)
  80bea0:	e0fff617 	ldw	r3,-40(fp)
  80bea4:	10c5c83a 	sub	r2,r2,r3
  80bea8:	e0bff815 	stw	r2,-32(fp)
  80beac:	00000406 	br	80bec0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80beb0:	00820004 	movi	r2,2048
  80beb4:	e0fff617 	ldw	r3,-40(fp)
  80beb8:	10c5c83a 	sub	r2,r2,r3
  80bebc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80bec0:	e0bff817 	ldw	r2,-32(fp)
  80bec4:	1005003a 	cmpeq	r2,r2,zero
  80bec8:	10001f1e 	bne	r2,zero,80bf48 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80becc:	e0fffd17 	ldw	r3,-12(fp)
  80bed0:	e0bff817 	ldw	r2,-32(fp)
  80bed4:	1880022e 	bgeu	r3,r2,80bee0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80bed8:	e0bffd17 	ldw	r2,-12(fp)
  80bedc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80bee0:	e0bffb17 	ldw	r2,-20(fp)
  80bee4:	10c00e04 	addi	r3,r2,56
  80bee8:	e0bff617 	ldw	r2,-40(fp)
  80beec:	1887883a 	add	r3,r3,r2
  80bef0:	e0bffa17 	ldw	r2,-24(fp)
  80bef4:	1009883a 	mov	r4,r2
  80bef8:	180b883a 	mov	r5,r3
  80befc:	e1bff817 	ldw	r6,-32(fp)
  80bf00:	08068880 	call	806888 <memcpy>
      ptr   += n;
  80bf04:	e0fff817 	ldw	r3,-32(fp)
  80bf08:	e0bffa17 	ldw	r2,-24(fp)
  80bf0c:	10c5883a 	add	r2,r2,r3
  80bf10:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80bf14:	e0fffd17 	ldw	r3,-12(fp)
  80bf18:	e0bff817 	ldw	r2,-32(fp)
  80bf1c:	1885c83a 	sub	r2,r3,r2
  80bf20:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bf24:	e0fff617 	ldw	r3,-40(fp)
  80bf28:	e0bff817 	ldw	r2,-32(fp)
  80bf2c:	1885883a 	add	r2,r3,r2
  80bf30:	10c1ffcc 	andi	r3,r2,2047
  80bf34:	e0bffb17 	ldw	r2,-20(fp)
  80bf38:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80bf3c:	e0bffd17 	ldw	r2,-12(fp)
  80bf40:	10800048 	cmpgei	r2,r2,1
  80bf44:	103fcc1e 	bne	r2,zero,80be78 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80bf48:	e0fffa17 	ldw	r3,-24(fp)
  80bf4c:	e0bffc17 	ldw	r2,-16(fp)
  80bf50:	1880141e 	bne	r3,r2,80bfa4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80bf54:	e0bffe17 	ldw	r2,-8(fp)
  80bf58:	1090000c 	andi	r2,r2,16384
  80bf5c:	1004c03a 	cmpne	r2,r2,zero
  80bf60:	1000101e 	bne	r2,zero,80bfa4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80bf64:	e0bffb17 	ldw	r2,-20(fp)
  80bf68:	10c00a17 	ldw	r3,40(r2)
  80bf6c:	e0bff717 	ldw	r2,-36(fp)
  80bf70:	1880051e 	bne	r3,r2,80bf88 <altera_avalon_jtag_uart_read+0x13c>
  80bf74:	e0bffb17 	ldw	r2,-20(fp)
  80bf78:	10c00917 	ldw	r3,36(r2)
  80bf7c:	e0bffb17 	ldw	r2,-20(fp)
  80bf80:	10800117 	ldw	r2,4(r2)
  80bf84:	18bff736 	bltu	r3,r2,80bf64 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80bf88:	e0bffb17 	ldw	r2,-20(fp)
  80bf8c:	10c00a17 	ldw	r3,40(r2)
  80bf90:	e0bff717 	ldw	r2,-36(fp)
  80bf94:	18800326 	beq	r3,r2,80bfa4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80bf98:	e0bffd17 	ldw	r2,-12(fp)
  80bf9c:	10800048 	cmpgei	r2,r2,1
  80bfa0:	103fb51e 	bne	r2,zero,80be78 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80bfa4:	e0fffa17 	ldw	r3,-24(fp)
  80bfa8:	e0bffc17 	ldw	r2,-16(fp)
  80bfac:	18801926 	beq	r3,r2,80c014 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bfb0:	0005303a 	rdctl	r2,status
  80bfb4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bfb8:	e0fff517 	ldw	r3,-44(fp)
  80bfbc:	00bfff84 	movi	r2,-2
  80bfc0:	1884703a 	and	r2,r3,r2
  80bfc4:	1001703a 	wrctl	status,r2
  
  return context;
  80bfc8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80bfcc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80bfd0:	e0bffb17 	ldw	r2,-20(fp)
  80bfd4:	10800817 	ldw	r2,32(r2)
  80bfd8:	10c00054 	ori	r3,r2,1
  80bfdc:	e0bffb17 	ldw	r2,-20(fp)
  80bfe0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bfe4:	e0bffb17 	ldw	r2,-20(fp)
  80bfe8:	10800017 	ldw	r2,0(r2)
  80bfec:	11000104 	addi	r4,r2,4
  80bff0:	e0bffb17 	ldw	r2,-20(fp)
  80bff4:	10800817 	ldw	r2,32(r2)
  80bff8:	1007883a 	mov	r3,r2
  80bffc:	2005883a 	mov	r2,r4
  80c000:	10c00035 	stwio	r3,0(r2)
  80c004:	e0bff917 	ldw	r2,-28(fp)
  80c008:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c00c:	e0bff417 	ldw	r2,-48(fp)
  80c010:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c014:	e0fffa17 	ldw	r3,-24(fp)
  80c018:	e0bffc17 	ldw	r2,-16(fp)
  80c01c:	18800526 	beq	r3,r2,80c034 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80c020:	e0fffa17 	ldw	r3,-24(fp)
  80c024:	e0bffc17 	ldw	r2,-16(fp)
  80c028:	1887c83a 	sub	r3,r3,r2
  80c02c:	e0ffff15 	stw	r3,-4(fp)
  80c030:	00000906 	br	80c058 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80c034:	e0bffe17 	ldw	r2,-8(fp)
  80c038:	1090000c 	andi	r2,r2,16384
  80c03c:	1005003a 	cmpeq	r2,r2,zero
  80c040:	1000031e 	bne	r2,zero,80c050 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c044:	00bffd44 	movi	r2,-11
  80c048:	e0bfff15 	stw	r2,-4(fp)
  80c04c:	00000206 	br	80c058 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80c050:	00bffec4 	movi	r2,-5
  80c054:	e0bfff15 	stw	r2,-4(fp)
  80c058:	e0bfff17 	ldw	r2,-4(fp)
}
  80c05c:	e037883a 	mov	sp,fp
  80c060:	dfc00117 	ldw	ra,4(sp)
  80c064:	df000017 	ldw	fp,0(sp)
  80c068:	dec00204 	addi	sp,sp,8
  80c06c:	f800283a 	ret

0080c070 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c070:	defff204 	addi	sp,sp,-56
  80c074:	dfc00d15 	stw	ra,52(sp)
  80c078:	df000c15 	stw	fp,48(sp)
  80c07c:	df000c04 	addi	fp,sp,48
  80c080:	e13ffb15 	stw	r4,-20(fp)
  80c084:	e17ffc15 	stw	r5,-16(fp)
  80c088:	e1bffd15 	stw	r6,-12(fp)
  80c08c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c090:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c094:	e0bffc17 	ldw	r2,-16(fp)
  80c098:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c09c:	00003a06 	br	80c188 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c0a0:	e0bffb17 	ldw	r2,-20(fp)
  80c0a4:	10800c17 	ldw	r2,48(r2)
  80c0a8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80c0ac:	e0bffb17 	ldw	r2,-20(fp)
  80c0b0:	10800d17 	ldw	r2,52(r2)
  80c0b4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80c0b8:	e0fffa17 	ldw	r3,-24(fp)
  80c0bc:	e0bff917 	ldw	r2,-28(fp)
  80c0c0:	1880062e 	bgeu	r3,r2,80c0dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c0c4:	e0fff917 	ldw	r3,-28(fp)
  80c0c8:	e0bffa17 	ldw	r2,-24(fp)
  80c0cc:	1885c83a 	sub	r2,r3,r2
  80c0d0:	10bfffc4 	addi	r2,r2,-1
  80c0d4:	e0bff815 	stw	r2,-32(fp)
  80c0d8:	00000c06 	br	80c10c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80c0dc:	e0bff917 	ldw	r2,-28(fp)
  80c0e0:	1005003a 	cmpeq	r2,r2,zero
  80c0e4:	1000051e 	bne	r2,zero,80c0fc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c0e8:	00820004 	movi	r2,2048
  80c0ec:	e0fffa17 	ldw	r3,-24(fp)
  80c0f0:	10c5c83a 	sub	r2,r2,r3
  80c0f4:	e0bff815 	stw	r2,-32(fp)
  80c0f8:	00000406 	br	80c10c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c0fc:	0081ffc4 	movi	r2,2047
  80c100:	e0fffa17 	ldw	r3,-24(fp)
  80c104:	10c5c83a 	sub	r2,r2,r3
  80c108:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c10c:	e0bff817 	ldw	r2,-32(fp)
  80c110:	1005003a 	cmpeq	r2,r2,zero
  80c114:	10001f1e 	bne	r2,zero,80c194 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80c118:	e0fffd17 	ldw	r3,-12(fp)
  80c11c:	e0bff817 	ldw	r2,-32(fp)
  80c120:	1880022e 	bgeu	r3,r2,80c12c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80c124:	e0bffd17 	ldw	r2,-12(fp)
  80c128:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c12c:	e0bffb17 	ldw	r2,-20(fp)
  80c130:	10c20e04 	addi	r3,r2,2104
  80c134:	e0bffa17 	ldw	r2,-24(fp)
  80c138:	1885883a 	add	r2,r3,r2
  80c13c:	e0fffc17 	ldw	r3,-16(fp)
  80c140:	1009883a 	mov	r4,r2
  80c144:	180b883a 	mov	r5,r3
  80c148:	e1bff817 	ldw	r6,-32(fp)
  80c14c:	08068880 	call	806888 <memcpy>
      ptr   += n;
  80c150:	e0fff817 	ldw	r3,-32(fp)
  80c154:	e0bffc17 	ldw	r2,-16(fp)
  80c158:	10c5883a 	add	r2,r2,r3
  80c15c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80c160:	e0fffd17 	ldw	r3,-12(fp)
  80c164:	e0bff817 	ldw	r2,-32(fp)
  80c168:	1885c83a 	sub	r2,r3,r2
  80c16c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c170:	e0fffa17 	ldw	r3,-24(fp)
  80c174:	e0bff817 	ldw	r2,-32(fp)
  80c178:	1885883a 	add	r2,r3,r2
  80c17c:	10c1ffcc 	andi	r3,r2,2047
  80c180:	e0bffb17 	ldw	r2,-20(fp)
  80c184:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c188:	e0bffd17 	ldw	r2,-12(fp)
  80c18c:	10800048 	cmpgei	r2,r2,1
  80c190:	103fc31e 	bne	r2,zero,80c0a0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c194:	0005303a 	rdctl	r2,status
  80c198:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c19c:	e0fff517 	ldw	r3,-44(fp)
  80c1a0:	00bfff84 	movi	r2,-2
  80c1a4:	1884703a 	and	r2,r3,r2
  80c1a8:	1001703a 	wrctl	status,r2
  
  return context;
  80c1ac:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c1b0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c1b4:	e0bffb17 	ldw	r2,-20(fp)
  80c1b8:	10800817 	ldw	r2,32(r2)
  80c1bc:	10c00094 	ori	r3,r2,2
  80c1c0:	e0bffb17 	ldw	r2,-20(fp)
  80c1c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c1c8:	e0bffb17 	ldw	r2,-20(fp)
  80c1cc:	10800017 	ldw	r2,0(r2)
  80c1d0:	11000104 	addi	r4,r2,4
  80c1d4:	e0bffb17 	ldw	r2,-20(fp)
  80c1d8:	10800817 	ldw	r2,32(r2)
  80c1dc:	1007883a 	mov	r3,r2
  80c1e0:	2005883a 	mov	r2,r4
  80c1e4:	10c00035 	stwio	r3,0(r2)
  80c1e8:	e0bff717 	ldw	r2,-36(fp)
  80c1ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c1f0:	e0bff417 	ldw	r2,-48(fp)
  80c1f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80c1f8:	e0bffd17 	ldw	r2,-12(fp)
  80c1fc:	10800050 	cmplti	r2,r2,1
  80c200:	1000111e 	bne	r2,zero,80c248 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80c204:	e0bffe17 	ldw	r2,-8(fp)
  80c208:	1090000c 	andi	r2,r2,16384
  80c20c:	1004c03a 	cmpne	r2,r2,zero
  80c210:	1000101e 	bne	r2,zero,80c254 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80c214:	e0bffb17 	ldw	r2,-20(fp)
  80c218:	10c00d17 	ldw	r3,52(r2)
  80c21c:	e0bff917 	ldw	r2,-28(fp)
  80c220:	1880051e 	bne	r3,r2,80c238 <altera_avalon_jtag_uart_write+0x1c8>
  80c224:	e0bffb17 	ldw	r2,-20(fp)
  80c228:	10c00917 	ldw	r3,36(r2)
  80c22c:	e0bffb17 	ldw	r2,-20(fp)
  80c230:	10800117 	ldw	r2,4(r2)
  80c234:	18bff736 	bltu	r3,r2,80c214 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80c238:	e0bffb17 	ldw	r2,-20(fp)
  80c23c:	10c00d17 	ldw	r3,52(r2)
  80c240:	e0bff917 	ldw	r2,-28(fp)
  80c244:	18800326 	beq	r3,r2,80c254 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80c248:	e0bffd17 	ldw	r2,-12(fp)
  80c24c:	10800048 	cmpgei	r2,r2,1
  80c250:	103fcd1e 	bne	r2,zero,80c188 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80c254:	e0fffc17 	ldw	r3,-16(fp)
  80c258:	e0bff617 	ldw	r2,-40(fp)
  80c25c:	18800526 	beq	r3,r2,80c274 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80c260:	e0fffc17 	ldw	r3,-16(fp)
  80c264:	e0bff617 	ldw	r2,-40(fp)
  80c268:	1887c83a 	sub	r3,r3,r2
  80c26c:	e0ffff15 	stw	r3,-4(fp)
  80c270:	00000906 	br	80c298 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80c274:	e0bffe17 	ldw	r2,-8(fp)
  80c278:	1090000c 	andi	r2,r2,16384
  80c27c:	1005003a 	cmpeq	r2,r2,zero
  80c280:	1000031e 	bne	r2,zero,80c290 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80c284:	00bffd44 	movi	r2,-11
  80c288:	e0bfff15 	stw	r2,-4(fp)
  80c28c:	00000206 	br	80c298 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80c290:	00bffec4 	movi	r2,-5
  80c294:	e0bfff15 	stw	r2,-4(fp)
  80c298:	e0bfff17 	ldw	r2,-4(fp)
}
  80c29c:	e037883a 	mov	sp,fp
  80c2a0:	dfc00117 	ldw	ra,4(sp)
  80c2a4:	df000017 	ldw	fp,0(sp)
  80c2a8:	dec00204 	addi	sp,sp,8
  80c2ac:	f800283a 	ret

0080c2b0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80c2b0:	defffa04 	addi	sp,sp,-24
  80c2b4:	dfc00515 	stw	ra,20(sp)
  80c2b8:	df000415 	stw	fp,16(sp)
  80c2bc:	df000404 	addi	fp,sp,16
  80c2c0:	e13ffe15 	stw	r4,-8(fp)
  80c2c4:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80c2c8:	e0bffe17 	ldw	r2,-8(fp)
  80c2cc:	10800017 	ldw	r2,0(r2)
  80c2d0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80c2d4:	008003f4 	movhi	r2,15
  80c2d8:	10909004 	addi	r2,r2,16960
  80c2dc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80c2e0:	e0bffe17 	ldw	r2,-8(fp)
  80c2e4:	10800803 	ldbu	r2,32(r2)
  80c2e8:	10803fcc 	andi	r2,r2,255
  80c2ec:	1080201c 	xori	r2,r2,128
  80c2f0:	10bfe004 	addi	r2,r2,-128
  80c2f4:	1004c03a 	cmpne	r2,r2,zero
  80c2f8:	1000161e 	bne	r2,zero,80c354 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c2fc:	00000a06 	br	80c328 <lcd_write_command+0x78>
    if (--i == 0)
  80c300:	e0bffc17 	ldw	r2,-16(fp)
  80c304:	10bfffc4 	addi	r2,r2,-1
  80c308:	e0bffc15 	stw	r2,-16(fp)
  80c30c:	e0bffc17 	ldw	r2,-16(fp)
  80c310:	1004c03a 	cmpne	r2,r2,zero
  80c314:	1000041e 	bne	r2,zero,80c328 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80c318:	e0fffe17 	ldw	r3,-8(fp)
  80c31c:	00800044 	movi	r2,1
  80c320:	18800805 	stb	r2,32(r3)
      return;
  80c324:	00000b06 	br	80c354 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c328:	e0bffd17 	ldw	r2,-12(fp)
  80c32c:	10800104 	addi	r2,r2,4
  80c330:	10800037 	ldwio	r2,0(r2)
  80c334:	1080200c 	andi	r2,r2,128
  80c338:	1004c03a 	cmpne	r2,r2,zero
  80c33c:	103ff01e 	bne	r2,zero,80c300 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80c340:	01001904 	movi	r4,100
  80c344:	080e7e40 	call	80e7e4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80c348:	e0bffd17 	ldw	r2,-12(fp)
  80c34c:	e0ffff03 	ldbu	r3,-4(fp)
  80c350:	10c00035 	stwio	r3,0(r2)
}
  80c354:	e037883a 	mov	sp,fp
  80c358:	dfc00117 	ldw	ra,4(sp)
  80c35c:	df000017 	ldw	fp,0(sp)
  80c360:	dec00204 	addi	sp,sp,8
  80c364:	f800283a 	ret

0080c368 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80c368:	defffa04 	addi	sp,sp,-24
  80c36c:	dfc00515 	stw	ra,20(sp)
  80c370:	df000415 	stw	fp,16(sp)
  80c374:	df000404 	addi	fp,sp,16
  80c378:	e13ffe15 	stw	r4,-8(fp)
  80c37c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80c380:	e0bffe17 	ldw	r2,-8(fp)
  80c384:	10800017 	ldw	r2,0(r2)
  80c388:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80c38c:	008003f4 	movhi	r2,15
  80c390:	10909004 	addi	r2,r2,16960
  80c394:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80c398:	e0bffe17 	ldw	r2,-8(fp)
  80c39c:	10800803 	ldbu	r2,32(r2)
  80c3a0:	10803fcc 	andi	r2,r2,255
  80c3a4:	1080201c 	xori	r2,r2,128
  80c3a8:	10bfe004 	addi	r2,r2,-128
  80c3ac:	1004c03a 	cmpne	r2,r2,zero
  80c3b0:	10001d1e 	bne	r2,zero,80c428 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c3b4:	00000a06 	br	80c3e0 <lcd_write_data+0x78>
    if (--i == 0)
  80c3b8:	e0bffc17 	ldw	r2,-16(fp)
  80c3bc:	10bfffc4 	addi	r2,r2,-1
  80c3c0:	e0bffc15 	stw	r2,-16(fp)
  80c3c4:	e0bffc17 	ldw	r2,-16(fp)
  80c3c8:	1004c03a 	cmpne	r2,r2,zero
  80c3cc:	1000041e 	bne	r2,zero,80c3e0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80c3d0:	e0fffe17 	ldw	r3,-8(fp)
  80c3d4:	00800044 	movi	r2,1
  80c3d8:	18800805 	stb	r2,32(r3)
      return;
  80c3dc:	00001206 	br	80c428 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c3e0:	e0bffd17 	ldw	r2,-12(fp)
  80c3e4:	10800104 	addi	r2,r2,4
  80c3e8:	10800037 	ldwio	r2,0(r2)
  80c3ec:	1080200c 	andi	r2,r2,128
  80c3f0:	1004c03a 	cmpne	r2,r2,zero
  80c3f4:	103ff01e 	bne	r2,zero,80c3b8 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80c3f8:	01001904 	movi	r4,100
  80c3fc:	080e7e40 	call	80e7e4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80c400:	e0bffd17 	ldw	r2,-12(fp)
  80c404:	10800204 	addi	r2,r2,8
  80c408:	e0ffff03 	ldbu	r3,-4(fp)
  80c40c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80c410:	e0bffe17 	ldw	r2,-8(fp)
  80c414:	108008c3 	ldbu	r2,35(r2)
  80c418:	10800044 	addi	r2,r2,1
  80c41c:	1007883a 	mov	r3,r2
  80c420:	e0bffe17 	ldw	r2,-8(fp)
  80c424:	10c008c5 	stb	r3,35(r2)
}
  80c428:	e037883a 	mov	sp,fp
  80c42c:	dfc00117 	ldw	ra,4(sp)
  80c430:	df000017 	ldw	fp,0(sp)
  80c434:	dec00204 	addi	sp,sp,8
  80c438:	f800283a 	ret

0080c43c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80c43c:	defffb04 	addi	sp,sp,-20
  80c440:	dfc00415 	stw	ra,16(sp)
  80c444:	df000315 	stw	fp,12(sp)
  80c448:	dc000215 	stw	r16,8(sp)
  80c44c:	df000204 	addi	fp,sp,8
  80c450:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80c454:	e13fff17 	ldw	r4,-4(fp)
  80c458:	01400044 	movi	r5,1
  80c45c:	080c2b00 	call	80c2b0 <lcd_write_command>

  sp->x = 0;
  80c460:	e0bfff17 	ldw	r2,-4(fp)
  80c464:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80c468:	e0bfff17 	ldw	r2,-4(fp)
  80c46c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80c470:	e0bfff17 	ldw	r2,-4(fp)
  80c474:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c478:	e03ffe15 	stw	zero,-8(fp)
  80c47c:	00001c06 	br	80c4f0 <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80c480:	e13ffe17 	ldw	r4,-8(fp)
  80c484:	014018c4 	movi	r5,99
  80c488:	080a2380 	call	80a238 <__mulsi3>
  80c48c:	10c01004 	addi	r3,r2,64
  80c490:	e0bfff17 	ldw	r2,-4(fp)
  80c494:	1889883a 	add	r4,r3,r2
  80c498:	01400804 	movi	r5,32
  80c49c:	01801444 	movi	r6,81
  80c4a0:	08021140 	call	802114 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80c4a4:	e13ffe17 	ldw	r4,-8(fp)
  80c4a8:	014018c4 	movi	r5,99
  80c4ac:	080a2380 	call	80a238 <__mulsi3>
  80c4b0:	10c00c04 	addi	r3,r2,48
  80c4b4:	e0bfff17 	ldw	r2,-4(fp)
  80c4b8:	1889883a 	add	r4,r3,r2
  80c4bc:	01400804 	movi	r5,32
  80c4c0:	01800404 	movi	r6,16
  80c4c4:	08021140 	call	802114 <memset>
    sp->line[y].width = 0;
  80c4c8:	e13ffe17 	ldw	r4,-8(fp)
  80c4cc:	e43fff17 	ldw	r16,-4(fp)
  80c4d0:	014018c4 	movi	r5,99
  80c4d4:	080a2380 	call	80a238 <__mulsi3>
  80c4d8:	1405883a 	add	r2,r2,r16
  80c4dc:	10802404 	addi	r2,r2,144
  80c4e0:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c4e4:	e0bffe17 	ldw	r2,-8(fp)
  80c4e8:	10800044 	addi	r2,r2,1
  80c4ec:	e0bffe15 	stw	r2,-8(fp)
  80c4f0:	e0bffe17 	ldw	r2,-8(fp)
  80c4f4:	10800090 	cmplti	r2,r2,2
  80c4f8:	103fe11e 	bne	r2,zero,80c480 <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80c4fc:	e037883a 	mov	sp,fp
  80c500:	dfc00217 	ldw	ra,8(sp)
  80c504:	df000117 	ldw	fp,4(sp)
  80c508:	dc000017 	ldw	r16,0(sp)
  80c50c:	dec00304 	addi	sp,sp,12
  80c510:	f800283a 	ret

0080c514 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80c514:	defff404 	addi	sp,sp,-48
  80c518:	dfc00b15 	stw	ra,44(sp)
  80c51c:	df000a15 	stw	fp,40(sp)
  80c520:	dc800915 	stw	r18,36(sp)
  80c524:	dc400815 	stw	r17,32(sp)
  80c528:	dc000715 	stw	r16,28(sp)
  80c52c:	df000704 	addi	fp,sp,28
  80c530:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80c534:	e0bfff17 	ldw	r2,-4(fp)
  80c538:	10800943 	ldbu	r2,37(r2)
  80c53c:	10803fcc 	andi	r2,r2,255
  80c540:	1080201c 	xori	r2,r2,128
  80c544:	10bfe004 	addi	r2,r2,-128
  80c548:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c54c:	e03ffe15 	stw	zero,-8(fp)
  80c550:	00006a06 	br	80c6fc <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
  80c554:	e13ffe17 	ldw	r4,-8(fp)
  80c558:	e43fff17 	ldw	r16,-4(fp)
  80c55c:	014018c4 	movi	r5,99
  80c560:	080a2380 	call	80a238 <__mulsi3>
  80c564:	1405883a 	add	r2,r2,r16
  80c568:	10802404 	addi	r2,r2,144
  80c56c:	10800043 	ldbu	r2,1(r2)
  80c570:	10803fcc 	andi	r2,r2,255
  80c574:	1080201c 	xori	r2,r2,128
  80c578:	10bfe004 	addi	r2,r2,-128
  80c57c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80c580:	e13ffe17 	ldw	r4,-8(fp)
  80c584:	e43fff17 	ldw	r16,-4(fp)
  80c588:	014018c4 	movi	r5,99
  80c58c:	080a2380 	call	80a238 <__mulsi3>
  80c590:	1405883a 	add	r2,r2,r16
  80c594:	10802404 	addi	r2,r2,144
  80c598:	10800083 	ldbu	r2,2(r2)
  80c59c:	11003fcc 	andi	r4,r2,255
  80c5a0:	e17ffc17 	ldw	r5,-16(fp)
  80c5a4:	080a2380 	call	80a238 <__mulsi3>
  80c5a8:	1005d23a 	srai	r2,r2,8
  80c5ac:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  80c5b0:	e0fffa17 	ldw	r3,-24(fp)
  80c5b4:	e0bffb17 	ldw	r2,-20(fp)
  80c5b8:	18800116 	blt	r3,r2,80c5c0 <lcd_repaint_screen+0xac>
      offset = 0;
  80c5bc:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80c5c0:	e03ffd15 	stw	zero,-12(fp)
  80c5c4:	00004706 	br	80c6e4 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80c5c8:	e47ffe17 	ldw	r17,-8(fp)
  80c5cc:	e0fffd17 	ldw	r3,-12(fp)
  80c5d0:	e0bffa17 	ldw	r2,-24(fp)
  80c5d4:	1889883a 	add	r4,r3,r2
  80c5d8:	e17ffb17 	ldw	r5,-20(fp)
  80c5dc:	080a1c80 	call	80a1c8 <__modsi3>
  80c5e0:	1025883a 	mov	r18,r2
  80c5e4:	e43fff17 	ldw	r16,-4(fp)
  80c5e8:	8809883a 	mov	r4,r17
  80c5ec:	014018c4 	movi	r5,99
  80c5f0:	080a2380 	call	80a238 <__mulsi3>
  80c5f4:	1405883a 	add	r2,r2,r16
  80c5f8:	1485883a 	add	r2,r2,r18
  80c5fc:	10801004 	addi	r2,r2,64
  80c600:	10800003 	ldbu	r2,0(r2)
  80c604:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80c608:	e13ffe17 	ldw	r4,-8(fp)
  80c60c:	e47ffd17 	ldw	r17,-12(fp)
  80c610:	e43fff17 	ldw	r16,-4(fp)
  80c614:	014018c4 	movi	r5,99
  80c618:	080a2380 	call	80a238 <__mulsi3>
  80c61c:	1405883a 	add	r2,r2,r16
  80c620:	1445883a 	add	r2,r2,r17
  80c624:	10800c04 	addi	r2,r2,48
  80c628:	10800003 	ldbu	r2,0(r2)
  80c62c:	10c03fcc 	andi	r3,r2,255
  80c630:	18c0201c 	xori	r3,r3,128
  80c634:	18ffe004 	addi	r3,r3,-128
  80c638:	e0bff947 	ldb	r2,-27(fp)
  80c63c:	18802626 	beq	r3,r2,80c6d8 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
  80c640:	e0fffe17 	ldw	r3,-8(fp)
  80c644:	d0a00d04 	addi	r2,gp,-32716
  80c648:	1885883a 	add	r2,r3,r2
  80c64c:	10800003 	ldbu	r2,0(r2)
  80c650:	1007883a 	mov	r3,r2
  80c654:	e0bffd17 	ldw	r2,-12(fp)
  80c658:	1885883a 	add	r2,r3,r2
  80c65c:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80c660:	e0fff903 	ldbu	r3,-28(fp)
  80c664:	e0bfff17 	ldw	r2,-4(fp)
  80c668:	108008c3 	ldbu	r2,35(r2)
  80c66c:	10803fcc 	andi	r2,r2,255
  80c670:	1080201c 	xori	r2,r2,128
  80c674:	10bfe004 	addi	r2,r2,-128
  80c678:	18800926 	beq	r3,r2,80c6a0 <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80c67c:	e0fff903 	ldbu	r3,-28(fp)
  80c680:	00bfe004 	movi	r2,-128
  80c684:	1884b03a 	or	r2,r3,r2
  80c688:	11403fcc 	andi	r5,r2,255
  80c68c:	e13fff17 	ldw	r4,-4(fp)
  80c690:	080c2b00 	call	80c2b0 <lcd_write_command>
          sp->address = address;
  80c694:	e0fff903 	ldbu	r3,-28(fp)
  80c698:	e0bfff17 	ldw	r2,-4(fp)
  80c69c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80c6a0:	e0bff943 	ldbu	r2,-27(fp)
  80c6a4:	11403fcc 	andi	r5,r2,255
  80c6a8:	e13fff17 	ldw	r4,-4(fp)
  80c6ac:	080c3680 	call	80c368 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80c6b0:	e13ffe17 	ldw	r4,-8(fp)
  80c6b4:	e47ffd17 	ldw	r17,-12(fp)
  80c6b8:	e43fff17 	ldw	r16,-4(fp)
  80c6bc:	014018c4 	movi	r5,99
  80c6c0:	080a2380 	call	80a238 <__mulsi3>
  80c6c4:	1405883a 	add	r2,r2,r16
  80c6c8:	1445883a 	add	r2,r2,r17
  80c6cc:	10c00c04 	addi	r3,r2,48
  80c6d0:	e0bff943 	ldbu	r2,-27(fp)
  80c6d4:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80c6d8:	e0bffd17 	ldw	r2,-12(fp)
  80c6dc:	10800044 	addi	r2,r2,1
  80c6e0:	e0bffd15 	stw	r2,-12(fp)
  80c6e4:	e0bffd17 	ldw	r2,-12(fp)
  80c6e8:	10800410 	cmplti	r2,r2,16
  80c6ec:	103fb61e 	bne	r2,zero,80c5c8 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c6f0:	e0bffe17 	ldw	r2,-8(fp)
  80c6f4:	10800044 	addi	r2,r2,1
  80c6f8:	e0bffe15 	stw	r2,-8(fp)
  80c6fc:	e0bffe17 	ldw	r2,-8(fp)
  80c700:	10800090 	cmplti	r2,r2,2
  80c704:	103f931e 	bne	r2,zero,80c554 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80c708:	e037883a 	mov	sp,fp
  80c70c:	dfc00417 	ldw	ra,16(sp)
  80c710:	df000317 	ldw	fp,12(sp)
  80c714:	dc800217 	ldw	r18,8(sp)
  80c718:	dc400117 	ldw	r17,4(sp)
  80c71c:	dc000017 	ldw	r16,0(sp)
  80c720:	dec00504 	addi	sp,sp,20
  80c724:	f800283a 	ret

0080c728 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80c728:	defffb04 	addi	sp,sp,-20
  80c72c:	dfc00415 	stw	ra,16(sp)
  80c730:	df000315 	stw	fp,12(sp)
  80c734:	dc000215 	stw	r16,8(sp)
  80c738:	df000204 	addi	fp,sp,8
  80c73c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c740:	e03ffe15 	stw	zero,-8(fp)
  80c744:	00002106 	br	80c7cc <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80c748:	e0bffe17 	ldw	r2,-8(fp)
  80c74c:	10800048 	cmpgei	r2,r2,1
  80c750:	1000121e 	bne	r2,zero,80c79c <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80c754:	e13ffe17 	ldw	r4,-8(fp)
  80c758:	014018c4 	movi	r5,99
  80c75c:	080a2380 	call	80a238 <__mulsi3>
  80c760:	10c01004 	addi	r3,r2,64
  80c764:	e0bfff17 	ldw	r2,-4(fp)
  80c768:	18a1883a 	add	r16,r3,r2
  80c76c:	e0bffe17 	ldw	r2,-8(fp)
  80c770:	11000044 	addi	r4,r2,1
  80c774:	014018c4 	movi	r5,99
  80c778:	080a2380 	call	80a238 <__mulsi3>
  80c77c:	10c01004 	addi	r3,r2,64
  80c780:	e0bfff17 	ldw	r2,-4(fp)
  80c784:	1885883a 	add	r2,r3,r2
  80c788:	8009883a 	mov	r4,r16
  80c78c:	100b883a 	mov	r5,r2
  80c790:	01801404 	movi	r6,80
  80c794:	08068880 	call	806888 <memcpy>
  80c798:	00000906 	br	80c7c0 <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80c79c:	e13ffe17 	ldw	r4,-8(fp)
  80c7a0:	014018c4 	movi	r5,99
  80c7a4:	080a2380 	call	80a238 <__mulsi3>
  80c7a8:	10c01004 	addi	r3,r2,64
  80c7ac:	e0bfff17 	ldw	r2,-4(fp)
  80c7b0:	1889883a 	add	r4,r3,r2
  80c7b4:	01400804 	movi	r5,32
  80c7b8:	01801404 	movi	r6,80
  80c7bc:	08021140 	call	802114 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c7c0:	e0bffe17 	ldw	r2,-8(fp)
  80c7c4:	10800044 	addi	r2,r2,1
  80c7c8:	e0bffe15 	stw	r2,-8(fp)
  80c7cc:	e0bffe17 	ldw	r2,-8(fp)
  80c7d0:	10800090 	cmplti	r2,r2,2
  80c7d4:	103fdc1e 	bne	r2,zero,80c748 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80c7d8:	e0bfff17 	ldw	r2,-4(fp)
  80c7dc:	10800883 	ldbu	r2,34(r2)
  80c7e0:	10bfffc4 	addi	r2,r2,-1
  80c7e4:	1007883a 	mov	r3,r2
  80c7e8:	e0bfff17 	ldw	r2,-4(fp)
  80c7ec:	10c00885 	stb	r3,34(r2)
}
  80c7f0:	e037883a 	mov	sp,fp
  80c7f4:	dfc00217 	ldw	ra,8(sp)
  80c7f8:	df000117 	ldw	fp,4(sp)
  80c7fc:	dc000017 	ldw	r16,0(sp)
  80c800:	dec00304 	addi	sp,sp,12
  80c804:	f800283a 	ret

0080c808 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80c808:	defff804 	addi	sp,sp,-32
  80c80c:	dfc00715 	stw	ra,28(sp)
  80c810:	df000615 	stw	fp,24(sp)
  80c814:	df000604 	addi	fp,sp,24
  80c818:	e13ffd15 	stw	r4,-12(fp)
  80c81c:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80c820:	e03ffc15 	stw	zero,-16(fp)
  80c824:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  80c828:	e0bffd17 	ldw	r2,-12(fp)
  80c82c:	10800a03 	ldbu	r2,40(r2)
  80c830:	10803fcc 	andi	r2,r2,255
  80c834:	1080201c 	xori	r2,r2,128
  80c838:	10bfe004 	addi	r2,r2,-128
  80c83c:	108016d8 	cmpnei	r2,r2,91
  80c840:	10004d1e 	bne	r2,zero,80c978 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
  80c844:	e0bffd17 	ldw	r2,-12(fp)
  80c848:	10800a04 	addi	r2,r2,40
  80c84c:	10800044 	addi	r2,r2,1
  80c850:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80c854:	00000f06 	br	80c894 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80c858:	e13ffc17 	ldw	r4,-16(fp)
  80c85c:	01400284 	movi	r5,10
  80c860:	080a2380 	call	80a238 <__mulsi3>
  80c864:	1007883a 	mov	r3,r2
  80c868:	e0bffa17 	ldw	r2,-24(fp)
  80c86c:	10800003 	ldbu	r2,0(r2)
  80c870:	10803fcc 	andi	r2,r2,255
  80c874:	1080201c 	xori	r2,r2,128
  80c878:	10bfe004 	addi	r2,r2,-128
  80c87c:	1885883a 	add	r2,r3,r2
  80c880:	10bff404 	addi	r2,r2,-48
  80c884:	e0bffc15 	stw	r2,-16(fp)
  80c888:	e0bffa17 	ldw	r2,-24(fp)
  80c88c:	10800044 	addi	r2,r2,1
  80c890:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80c894:	e0bffa17 	ldw	r2,-24(fp)
  80c898:	10800003 	ldbu	r2,0(r2)
  80c89c:	10803fcc 	andi	r2,r2,255
  80c8a0:	1080201c 	xori	r2,r2,128
  80c8a4:	10bfe004 	addi	r2,r2,-128
  80c8a8:	1007883a 	mov	r3,r2
  80c8ac:	00802074 	movhi	r2,129
  80c8b0:	10845804 	addi	r2,r2,4448
  80c8b4:	10800017 	ldw	r2,0(r2)
  80c8b8:	1885883a 	add	r2,r3,r2
  80c8bc:	10800003 	ldbu	r2,0(r2)
  80c8c0:	10803fcc 	andi	r2,r2,255
  80c8c4:	1080010c 	andi	r2,r2,4
  80c8c8:	1004c03a 	cmpne	r2,r2,zero
  80c8cc:	103fe21e 	bne	r2,zero,80c858 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80c8d0:	e0bffa17 	ldw	r2,-24(fp)
  80c8d4:	10800003 	ldbu	r2,0(r2)
  80c8d8:	10803fcc 	andi	r2,r2,255
  80c8dc:	1080201c 	xori	r2,r2,128
  80c8e0:	10bfe004 	addi	r2,r2,-128
  80c8e4:	10800ed8 	cmpnei	r2,r2,59
  80c8e8:	1000251e 	bne	r2,zero,80c980 <lcd_handle_escape+0x178>
    {
      ptr++;
  80c8ec:	e0bffa17 	ldw	r2,-24(fp)
  80c8f0:	10800044 	addi	r2,r2,1
  80c8f4:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  80c8f8:	00000f06 	br	80c938 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80c8fc:	e13ffb17 	ldw	r4,-20(fp)
  80c900:	01400284 	movi	r5,10
  80c904:	080a2380 	call	80a238 <__mulsi3>
  80c908:	1007883a 	mov	r3,r2
  80c90c:	e0bffa17 	ldw	r2,-24(fp)
  80c910:	10800003 	ldbu	r2,0(r2)
  80c914:	10803fcc 	andi	r2,r2,255
  80c918:	1080201c 	xori	r2,r2,128
  80c91c:	10bfe004 	addi	r2,r2,-128
  80c920:	1885883a 	add	r2,r3,r2
  80c924:	10bff404 	addi	r2,r2,-48
  80c928:	e0bffb15 	stw	r2,-20(fp)
  80c92c:	e0bffa17 	ldw	r2,-24(fp)
  80c930:	10800044 	addi	r2,r2,1
  80c934:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80c938:	e0bffa17 	ldw	r2,-24(fp)
  80c93c:	10800003 	ldbu	r2,0(r2)
  80c940:	10803fcc 	andi	r2,r2,255
  80c944:	1080201c 	xori	r2,r2,128
  80c948:	10bfe004 	addi	r2,r2,-128
  80c94c:	1007883a 	mov	r3,r2
  80c950:	00802074 	movhi	r2,129
  80c954:	10845804 	addi	r2,r2,4448
  80c958:	10800017 	ldw	r2,0(r2)
  80c95c:	1885883a 	add	r2,r3,r2
  80c960:	10800003 	ldbu	r2,0(r2)
  80c964:	10803fcc 	andi	r2,r2,255
  80c968:	1080010c 	andi	r2,r2,4
  80c96c:	1004c03a 	cmpne	r2,r2,zero
  80c970:	103fe21e 	bne	r2,zero,80c8fc <lcd_handle_escape+0xf4>
  80c974:	00000206 	br	80c980 <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80c978:	00bfffc4 	movi	r2,-1
  80c97c:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80c980:	e0bffe07 	ldb	r2,-8(fp)
  80c984:	e0bfff15 	stw	r2,-4(fp)
  80c988:	e0ffff17 	ldw	r3,-4(fp)
  80c98c:	188012a0 	cmpeqi	r2,r3,74
  80c990:	10002f1e 	bne	r2,zero,80ca50 <lcd_handle_escape+0x248>
  80c994:	e0ffff17 	ldw	r3,-4(fp)
  80c998:	188012c8 	cmpgei	r2,r3,75
  80c99c:	1000041e 	bne	r2,zero,80c9b0 <lcd_handle_escape+0x1a8>
  80c9a0:	e0ffff17 	ldw	r3,-4(fp)
  80c9a4:	18801220 	cmpeqi	r2,r3,72
  80c9a8:	1000081e 	bne	r2,zero,80c9cc <lcd_handle_escape+0x1c4>
  80c9ac:	00004a06 	br	80cad8 <lcd_handle_escape+0x2d0>
  80c9b0:	e0ffff17 	ldw	r3,-4(fp)
  80c9b4:	188012e0 	cmpeqi	r2,r3,75
  80c9b8:	10002b1e 	bne	r2,zero,80ca68 <lcd_handle_escape+0x260>
  80c9bc:	e0ffff17 	ldw	r3,-4(fp)
  80c9c0:	188019a0 	cmpeqi	r2,r3,102
  80c9c4:	1000011e 	bne	r2,zero,80c9cc <lcd_handle_escape+0x1c4>
  80c9c8:	00004306 	br	80cad8 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80c9cc:	e0bffb17 	ldw	r2,-20(fp)
  80c9d0:	10800050 	cmplti	r2,r2,1
  80c9d4:	1000051e 	bne	r2,zero,80c9ec <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
  80c9d8:	e0bffb17 	ldw	r2,-20(fp)
  80c9dc:	10bfffc4 	addi	r2,r2,-1
  80c9e0:	1007883a 	mov	r3,r2
  80c9e4:	e0bffd17 	ldw	r2,-12(fp)
  80c9e8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80c9ec:	e0bffc17 	ldw	r2,-16(fp)
  80c9f0:	10800050 	cmplti	r2,r2,1
  80c9f4:	1000381e 	bne	r2,zero,80cad8 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
  80c9f8:	e0bffc17 	ldw	r2,-16(fp)
  80c9fc:	10bfffc4 	addi	r2,r2,-1
  80ca00:	1007883a 	mov	r3,r2
  80ca04:	e0bffd17 	ldw	r2,-12(fp)
  80ca08:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80ca0c:	e0bffd17 	ldw	r2,-12(fp)
  80ca10:	10800883 	ldbu	r2,34(r2)
  80ca14:	10803fcc 	andi	r2,r2,255
  80ca18:	10800170 	cmpltui	r2,r2,5
  80ca1c:	1000061e 	bne	r2,zero,80ca38 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
  80ca20:	e0fffd17 	ldw	r3,-12(fp)
  80ca24:	00800104 	movi	r2,4
  80ca28:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  80ca2c:	00000206 	br	80ca38 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
  80ca30:	e13ffd17 	ldw	r4,-12(fp)
  80ca34:	080c7280 	call	80c728 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80ca38:	e0bffd17 	ldw	r2,-12(fp)
  80ca3c:	10800883 	ldbu	r2,34(r2)
  80ca40:	10803fcc 	andi	r2,r2,255
  80ca44:	108000e8 	cmpgeui	r2,r2,3
  80ca48:	103ff91e 	bne	r2,zero,80ca30 <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
  80ca4c:	00002206 	br	80cad8 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80ca50:	e0bffc17 	ldw	r2,-16(fp)
  80ca54:	10800098 	cmpnei	r2,r2,2
  80ca58:	10001f1e 	bne	r2,zero,80cad8 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
  80ca5c:	e13ffd17 	ldw	r4,-12(fp)
  80ca60:	080c43c0 	call	80c43c <lcd_clear_screen>
    break;
  80ca64:	00001c06 	br	80cad8 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80ca68:	e0bffc17 	ldw	r2,-16(fp)
  80ca6c:	10800048 	cmpgei	r2,r2,1
  80ca70:	1000191e 	bne	r2,zero,80cad8 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80ca74:	e0bffd17 	ldw	r2,-12(fp)
  80ca78:	10800843 	ldbu	r2,33(r2)
  80ca7c:	10803fcc 	andi	r2,r2,255
  80ca80:	10801428 	cmpgeui	r2,r2,80
  80ca84:	1000141e 	bne	r2,zero,80cad8 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80ca88:	e0bffd17 	ldw	r2,-12(fp)
  80ca8c:	10800883 	ldbu	r2,34(r2)
  80ca90:	11003fcc 	andi	r4,r2,255
  80ca94:	014018c4 	movi	r5,99
  80ca98:	080a2380 	call	80a238 <__mulsi3>
  80ca9c:	10c01004 	addi	r3,r2,64
  80caa0:	e0bffd17 	ldw	r2,-12(fp)
  80caa4:	1887883a 	add	r3,r3,r2
  80caa8:	e0bffd17 	ldw	r2,-12(fp)
  80caac:	10800843 	ldbu	r2,33(r2)
  80cab0:	10803fcc 	andi	r2,r2,255
  80cab4:	1889883a 	add	r4,r3,r2
  80cab8:	e0bffd17 	ldw	r2,-12(fp)
  80cabc:	10800843 	ldbu	r2,33(r2)
  80cac0:	10c03fcc 	andi	r3,r2,255
  80cac4:	00801404 	movi	r2,80
  80cac8:	10c5c83a 	sub	r2,r2,r3
  80cacc:	100d883a 	mov	r6,r2
  80cad0:	01400804 	movi	r5,32
  80cad4:	08021140 	call	802114 <memset>
    }
    break;
  }
}
  80cad8:	e037883a 	mov	sp,fp
  80cadc:	dfc00117 	ldw	ra,4(sp)
  80cae0:	df000017 	ldw	fp,0(sp)
  80cae4:	dec00204 	addi	sp,sp,8
  80cae8:	f800283a 	ret

0080caec <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80caec:	defff004 	addi	sp,sp,-64
  80caf0:	dfc00f15 	stw	ra,60(sp)
  80caf4:	df000e15 	stw	fp,56(sp)
  80caf8:	dc800d15 	stw	r18,52(sp)
  80cafc:	dc400c15 	stw	r17,48(sp)
  80cb00:	dc000b15 	stw	r16,44(sp)
  80cb04:	df000b04 	addi	fp,sp,44
  80cb08:	e13ffc15 	stw	r4,-16(fp)
  80cb0c:	e17ffd15 	stw	r5,-12(fp)
  80cb10:	e1bffe15 	stw	r6,-8(fp)
  80cb14:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80cb18:	e0bffe17 	ldw	r2,-8(fp)
  80cb1c:	1007883a 	mov	r3,r2
  80cb20:	e0bffd17 	ldw	r2,-12(fp)
  80cb24:	10c5883a 	add	r2,r2,r3
  80cb28:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80cb2c:	e0fffc17 	ldw	r3,-16(fp)
  80cb30:	00800044 	movi	r2,1
  80cb34:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  80cb38:	0000a306 	br	80cdc8 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
  80cb3c:	e0bffd17 	ldw	r2,-12(fp)
  80cb40:	10800003 	ldbu	r2,0(r2)
  80cb44:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  80cb48:	e0bffc17 	ldw	r2,-16(fp)
  80cb4c:	10800903 	ldbu	r2,36(r2)
  80cb50:	10803fcc 	andi	r2,r2,255
  80cb54:	1080201c 	xori	r2,r2,128
  80cb58:	10bfe004 	addi	r2,r2,-128
  80cb5c:	1004803a 	cmplt	r2,r2,zero
  80cb60:	10003b1e 	bne	r2,zero,80cc50 <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
  80cb64:	e0bffc17 	ldw	r2,-16(fp)
  80cb68:	10800903 	ldbu	r2,36(r2)
  80cb6c:	10803fcc 	andi	r2,r2,255
  80cb70:	1080201c 	xori	r2,r2,128
  80cb74:	10bfe004 	addi	r2,r2,-128
  80cb78:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80cb7c:	e0bff717 	ldw	r2,-36(fp)
  80cb80:	1004c03a 	cmpne	r2,r2,zero
  80cb84:	1000031e 	bne	r2,zero,80cb94 <altera_avalon_lcd_16207_write+0xa8>
  80cb88:	e0bff807 	ldb	r2,-32(fp)
  80cb8c:	108016d8 	cmpnei	r2,r2,91
  80cb90:	1000111e 	bne	r2,zero,80cbd8 <altera_avalon_lcd_16207_write+0xec>
  80cb94:	e0bff717 	ldw	r2,-36(fp)
  80cb98:	1005003a 	cmpeq	r2,r2,zero
  80cb9c:	10001a1e 	bne	r2,zero,80cc08 <altera_avalon_lcd_16207_write+0x11c>
  80cba0:	e0bff807 	ldb	r2,-32(fp)
  80cba4:	1007883a 	mov	r3,r2
  80cba8:	00802074 	movhi	r2,129
  80cbac:	10845804 	addi	r2,r2,4448
  80cbb0:	10800017 	ldw	r2,0(r2)
  80cbb4:	1885883a 	add	r2,r3,r2
  80cbb8:	10800003 	ldbu	r2,0(r2)
  80cbbc:	10803fcc 	andi	r2,r2,255
  80cbc0:	1080010c 	andi	r2,r2,4
  80cbc4:	1004c03a 	cmpne	r2,r2,zero
  80cbc8:	10000f1e 	bne	r2,zero,80cc08 <altera_avalon_lcd_16207_write+0x11c>
  80cbcc:	e0bff807 	ldb	r2,-32(fp)
  80cbd0:	10800ee0 	cmpeqi	r2,r2,59
  80cbd4:	10000c1e 	bne	r2,zero,80cc08 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  80cbd8:	e0fff717 	ldw	r3,-36(fp)
  80cbdc:	e0bffc17 	ldw	r2,-16(fp)
  80cbe0:	1885883a 	add	r2,r3,r2
  80cbe4:	10800a04 	addi	r2,r2,40
  80cbe8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80cbec:	e17ff807 	ldb	r5,-32(fp)
  80cbf0:	e13ffc17 	ldw	r4,-16(fp)
  80cbf4:	080c8080 	call	80c808 <lcd_handle_escape>

        sp->esccount = -1;
  80cbf8:	e0fffc17 	ldw	r3,-16(fp)
  80cbfc:	00bfffc4 	movi	r2,-1
  80cc00:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80cc04:	00006d06 	br	80cdbc <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80cc08:	e0bffc17 	ldw	r2,-16(fp)
  80cc0c:	10800903 	ldbu	r2,36(r2)
  80cc10:	10803fcc 	andi	r2,r2,255
  80cc14:	108001e8 	cmpgeui	r2,r2,7
  80cc18:	1000681e 	bne	r2,zero,80cdbc <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
  80cc1c:	e0fff717 	ldw	r3,-36(fp)
  80cc20:	e0bffc17 	ldw	r2,-16(fp)
  80cc24:	1885883a 	add	r2,r3,r2
  80cc28:	10c00a04 	addi	r3,r2,40
  80cc2c:	e0bff803 	ldbu	r2,-32(fp)
  80cc30:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  80cc34:	e0bffc17 	ldw	r2,-16(fp)
  80cc38:	10800903 	ldbu	r2,36(r2)
  80cc3c:	10800044 	addi	r2,r2,1
  80cc40:	1007883a 	mov	r3,r2
  80cc44:	e0bffc17 	ldw	r2,-16(fp)
  80cc48:	10c00905 	stb	r3,36(r2)
  80cc4c:	00005b06 	br	80cdbc <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
  80cc50:	e0bff807 	ldb	r2,-32(fp)
  80cc54:	108006d8 	cmpnei	r2,r2,27
  80cc58:	1000031e 	bne	r2,zero,80cc68 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
  80cc5c:	e0bffc17 	ldw	r2,-16(fp)
  80cc60:	10000905 	stb	zero,36(r2)
  80cc64:	00005506 	br	80cdbc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
  80cc68:	e0bff807 	ldb	r2,-32(fp)
  80cc6c:	10800358 	cmpnei	r2,r2,13
  80cc70:	1000031e 	bne	r2,zero,80cc80 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
  80cc74:	e0bffc17 	ldw	r2,-16(fp)
  80cc78:	10000845 	stb	zero,33(r2)
  80cc7c:	00004f06 	br	80cdbc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
  80cc80:	e0bff807 	ldb	r2,-32(fp)
  80cc84:	10800298 	cmpnei	r2,r2,10
  80cc88:	1000101e 	bne	r2,zero,80cccc <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
  80cc8c:	e0bffc17 	ldw	r2,-16(fp)
  80cc90:	10000845 	stb	zero,33(r2)
      sp->y++;
  80cc94:	e0bffc17 	ldw	r2,-16(fp)
  80cc98:	10800883 	ldbu	r2,34(r2)
  80cc9c:	10800044 	addi	r2,r2,1
  80cca0:	1007883a 	mov	r3,r2
  80cca4:	e0bffc17 	ldw	r2,-16(fp)
  80cca8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80ccac:	e0bffc17 	ldw	r2,-16(fp)
  80ccb0:	10800883 	ldbu	r2,34(r2)
  80ccb4:	10803fcc 	andi	r2,r2,255
  80ccb8:	108000f0 	cmpltui	r2,r2,3
  80ccbc:	10003f1e 	bne	r2,zero,80cdbc <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
  80ccc0:	e13ffc17 	ldw	r4,-16(fp)
  80ccc4:	080c7280 	call	80c728 <lcd_scroll_up>
  80ccc8:	00003c06 	br	80cdbc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
  80cccc:	e0bff807 	ldb	r2,-32(fp)
  80ccd0:	10800218 	cmpnei	r2,r2,8
  80ccd4:	10000c1e 	bne	r2,zero,80cd08 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
  80ccd8:	e0bffc17 	ldw	r2,-16(fp)
  80ccdc:	10800843 	ldbu	r2,33(r2)
  80cce0:	10803fcc 	andi	r2,r2,255
  80cce4:	1005003a 	cmpeq	r2,r2,zero
  80cce8:	1000341e 	bne	r2,zero,80cdbc <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
  80ccec:	e0bffc17 	ldw	r2,-16(fp)
  80ccf0:	10800843 	ldbu	r2,33(r2)
  80ccf4:	10bfffc4 	addi	r2,r2,-1
  80ccf8:	1007883a 	mov	r3,r2
  80ccfc:	e0bffc17 	ldw	r2,-16(fp)
  80cd00:	10c00845 	stb	r3,33(r2)
  80cd04:	00002d06 	br	80cdbc <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
  80cd08:	e0bff807 	ldb	r2,-32(fp)
  80cd0c:	1007883a 	mov	r3,r2
  80cd10:	00802074 	movhi	r2,129
  80cd14:	10845804 	addi	r2,r2,4448
  80cd18:	10800017 	ldw	r2,0(r2)
  80cd1c:	1885883a 	add	r2,r3,r2
  80cd20:	10800003 	ldbu	r2,0(r2)
  80cd24:	10803fcc 	andi	r2,r2,255
  80cd28:	1080201c 	xori	r2,r2,128
  80cd2c:	10bfe004 	addi	r2,r2,-128
  80cd30:	108025cc 	andi	r2,r2,151
  80cd34:	1005003a 	cmpeq	r2,r2,zero
  80cd38:	1000201e 	bne	r2,zero,80cdbc <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80cd3c:	e0bffc17 	ldw	r2,-16(fp)
  80cd40:	10800883 	ldbu	r2,34(r2)
  80cd44:	10803fcc 	andi	r2,r2,255
  80cd48:	108000b0 	cmpltui	r2,r2,2
  80cd4c:	1000021e 	bne	r2,zero,80cd58 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
  80cd50:	e13ffc17 	ldw	r4,-16(fp)
  80cd54:	080c7280 	call	80c728 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80cd58:	e0bffc17 	ldw	r2,-16(fp)
  80cd5c:	10800843 	ldbu	r2,33(r2)
  80cd60:	10803fcc 	andi	r2,r2,255
  80cd64:	10801428 	cmpgeui	r2,r2,80
  80cd68:	10000e1e 	bne	r2,zero,80cda4 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
  80cd6c:	e0bffc17 	ldw	r2,-16(fp)
  80cd70:	10800883 	ldbu	r2,34(r2)
  80cd74:	11003fcc 	andi	r4,r2,255
  80cd78:	e0bffc17 	ldw	r2,-16(fp)
  80cd7c:	10800843 	ldbu	r2,33(r2)
  80cd80:	14403fcc 	andi	r17,r2,255
  80cd84:	e43ffc17 	ldw	r16,-16(fp)
  80cd88:	014018c4 	movi	r5,99
  80cd8c:	080a2380 	call	80a238 <__mulsi3>
  80cd90:	1405883a 	add	r2,r2,r16
  80cd94:	1445883a 	add	r2,r2,r17
  80cd98:	10c01004 	addi	r3,r2,64
  80cd9c:	e0bff803 	ldbu	r2,-32(fp)
  80cda0:	18800005 	stb	r2,0(r3)

      sp->x++;
  80cda4:	e0bffc17 	ldw	r2,-16(fp)
  80cda8:	10800843 	ldbu	r2,33(r2)
  80cdac:	10800044 	addi	r2,r2,1
  80cdb0:	1007883a 	mov	r3,r2
  80cdb4:	e0bffc17 	ldw	r2,-16(fp)
  80cdb8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80cdbc:	e0bffd17 	ldw	r2,-12(fp)
  80cdc0:	10800044 	addi	r2,r2,1
  80cdc4:	e0bffd15 	stw	r2,-12(fp)
  80cdc8:	e0fffd17 	ldw	r3,-12(fp)
  80cdcc:	e0bffb17 	ldw	r2,-20(fp)
  80cdd0:	18bf5a36 	bltu	r3,r2,80cb3c <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80cdd4:	00800404 	movi	r2,16
  80cdd8:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cddc:	e03ffa15 	stw	zero,-24(fp)
  80cde0:	00003906 	br	80cec8 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80cde4:	00801404 	movi	r2,80
  80cde8:	e0bff615 	stw	r2,-40(fp)
  80cdec:	00001206 	br	80ce38 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
  80cdf0:	e13ffa17 	ldw	r4,-24(fp)
  80cdf4:	e0bff617 	ldw	r2,-40(fp)
  80cdf8:	147fffc4 	addi	r17,r2,-1
  80cdfc:	e43ffc17 	ldw	r16,-16(fp)
  80ce00:	014018c4 	movi	r5,99
  80ce04:	080a2380 	call	80a238 <__mulsi3>
  80ce08:	1405883a 	add	r2,r2,r16
  80ce0c:	1445883a 	add	r2,r2,r17
  80ce10:	10801004 	addi	r2,r2,64
  80ce14:	10800003 	ldbu	r2,0(r2)
  80ce18:	10803fcc 	andi	r2,r2,255
  80ce1c:	1080201c 	xori	r2,r2,128
  80ce20:	10bfe004 	addi	r2,r2,-128
  80ce24:	10800818 	cmpnei	r2,r2,32
  80ce28:	1000061e 	bne	r2,zero,80ce44 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80ce2c:	e0bff617 	ldw	r2,-40(fp)
  80ce30:	10bfffc4 	addi	r2,r2,-1
  80ce34:	e0bff615 	stw	r2,-40(fp)
  80ce38:	e0bff617 	ldw	r2,-40(fp)
  80ce3c:	10800048 	cmpgei	r2,r2,1
  80ce40:	103feb1e 	bne	r2,zero,80cdf0 <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80ce44:	e0bff617 	ldw	r2,-40(fp)
  80ce48:	10800448 	cmpgei	r2,r2,17
  80ce4c:	1000031e 	bne	r2,zero,80ce5c <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
  80ce50:	00800404 	movi	r2,16
  80ce54:	e0bff615 	stw	r2,-40(fp)
  80ce58:	00000306 	br	80ce68 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
  80ce5c:	e0bff617 	ldw	r2,-40(fp)
  80ce60:	10800044 	addi	r2,r2,1
  80ce64:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  80ce68:	e13ffa17 	ldw	r4,-24(fp)
  80ce6c:	e0bff617 	ldw	r2,-40(fp)
  80ce70:	1023883a 	mov	r17,r2
  80ce74:	e43ffc17 	ldw	r16,-16(fp)
  80ce78:	014018c4 	movi	r5,99
  80ce7c:	080a2380 	call	80a238 <__mulsi3>
  80ce80:	1405883a 	add	r2,r2,r16
  80ce84:	10802404 	addi	r2,r2,144
  80ce88:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
  80ce8c:	e0fff917 	ldw	r3,-28(fp)
  80ce90:	e0bff617 	ldw	r2,-40(fp)
  80ce94:	1880020e 	bge	r3,r2,80cea0 <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
  80ce98:	e0bff617 	ldw	r2,-40(fp)
  80ce9c:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80cea0:	e13ffa17 	ldw	r4,-24(fp)
  80cea4:	e43ffc17 	ldw	r16,-16(fp)
  80cea8:	014018c4 	movi	r5,99
  80ceac:	080a2380 	call	80a238 <__mulsi3>
  80ceb0:	1405883a 	add	r2,r2,r16
  80ceb4:	10802404 	addi	r2,r2,144
  80ceb8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cebc:	e0bffa17 	ldw	r2,-24(fp)
  80cec0:	10800044 	addi	r2,r2,1
  80cec4:	e0bffa15 	stw	r2,-24(fp)
  80cec8:	e0bffa17 	ldw	r2,-24(fp)
  80cecc:	10800090 	cmplti	r2,r2,2
  80ced0:	103fc41e 	bne	r2,zero,80cde4 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80ced4:	e0bff917 	ldw	r2,-28(fp)
  80ced8:	10800448 	cmpgei	r2,r2,17
  80cedc:	1000031e 	bne	r2,zero,80ceec <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
  80cee0:	e0bffc17 	ldw	r2,-16(fp)
  80cee4:	10000985 	stb	zero,38(r2)
  80cee8:	00003106 	br	80cfb0 <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
  80ceec:	e0bff917 	ldw	r2,-28(fp)
  80cef0:	1085883a 	add	r2,r2,r2
  80cef4:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  80cef8:	e0bff917 	ldw	r2,-28(fp)
  80cefc:	1007883a 	mov	r3,r2
  80cf00:	e0bffc17 	ldw	r2,-16(fp)
  80cf04:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cf08:	e03ffa15 	stw	zero,-24(fp)
  80cf0c:	00002506 	br	80cfa4 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80cf10:	e13ffa17 	ldw	r4,-24(fp)
  80cf14:	e43ffc17 	ldw	r16,-16(fp)
  80cf18:	014018c4 	movi	r5,99
  80cf1c:	080a2380 	call	80a238 <__mulsi3>
  80cf20:	1405883a 	add	r2,r2,r16
  80cf24:	10802404 	addi	r2,r2,144
  80cf28:	10800043 	ldbu	r2,1(r2)
  80cf2c:	10803fcc 	andi	r2,r2,255
  80cf30:	1080201c 	xori	r2,r2,128
  80cf34:	10bfe004 	addi	r2,r2,-128
  80cf38:	10800450 	cmplti	r2,r2,17
  80cf3c:	1000161e 	bne	r2,zero,80cf98 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80cf40:	e4bffa17 	ldw	r18,-24(fp)
  80cf44:	e13ffa17 	ldw	r4,-24(fp)
  80cf48:	e43ffc17 	ldw	r16,-16(fp)
  80cf4c:	014018c4 	movi	r5,99
  80cf50:	080a2380 	call	80a238 <__mulsi3>
  80cf54:	1405883a 	add	r2,r2,r16
  80cf58:	10802404 	addi	r2,r2,144
  80cf5c:	10800043 	ldbu	r2,1(r2)
  80cf60:	10803fcc 	andi	r2,r2,255
  80cf64:	1080201c 	xori	r2,r2,128
  80cf68:	10bfe004 	addi	r2,r2,-128
  80cf6c:	1008923a 	slli	r4,r2,8
  80cf70:	e17ff917 	ldw	r5,-28(fp)
  80cf74:	080a1680 	call	80a168 <__divsi3>
  80cf78:	1023883a 	mov	r17,r2
  80cf7c:	e43ffc17 	ldw	r16,-16(fp)
  80cf80:	9009883a 	mov	r4,r18
  80cf84:	014018c4 	movi	r5,99
  80cf88:	080a2380 	call	80a238 <__mulsi3>
  80cf8c:	1405883a 	add	r2,r2,r16
  80cf90:	10802404 	addi	r2,r2,144
  80cf94:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cf98:	e0bffa17 	ldw	r2,-24(fp)
  80cf9c:	10800044 	addi	r2,r2,1
  80cfa0:	e0bffa15 	stw	r2,-24(fp)
  80cfa4:	e0bffa17 	ldw	r2,-24(fp)
  80cfa8:	10800090 	cmplti	r2,r2,2
  80cfac:	103fd81e 	bne	r2,zero,80cf10 <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80cfb0:	e0bffc17 	ldw	r2,-16(fp)
  80cfb4:	10800943 	ldbu	r2,37(r2)
  80cfb8:	10803fcc 	andi	r2,r2,255
  80cfbc:	1080201c 	xori	r2,r2,128
  80cfc0:	10bfe004 	addi	r2,r2,-128
  80cfc4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  80cfc8:	e13ffc17 	ldw	r4,-16(fp)
  80cfcc:	080c5140 	call	80c514 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80cfd0:	e0bffc17 	ldw	r2,-16(fp)
  80cfd4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80cfd8:	e0bffc17 	ldw	r2,-16(fp)
  80cfdc:	10800943 	ldbu	r2,37(r2)
  80cfe0:	10c03fcc 	andi	r3,r2,255
  80cfe4:	18c0201c 	xori	r3,r3,128
  80cfe8:	18ffe004 	addi	r3,r3,-128
  80cfec:	e0bff517 	ldw	r2,-44(fp)
  80cff0:	18800426 	beq	r3,r2,80d004 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80cff4:	e0fffc17 	ldw	r3,-16(fp)
  80cff8:	00800044 	movi	r2,1
  80cffc:	188009c5 	stb	r2,39(r3)
  }
  80d000:	003feb06 	br	80cfb0 <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80d004:	e0bffe17 	ldw	r2,-8(fp)
}
  80d008:	e037883a 	mov	sp,fp
  80d00c:	dfc00417 	ldw	ra,16(sp)
  80d010:	df000317 	ldw	fp,12(sp)
  80d014:	dc800217 	ldw	r18,8(sp)
  80d018:	dc400117 	ldw	r17,4(sp)
  80d01c:	dc000017 	ldw	r16,0(sp)
  80d020:	dec00504 	addi	sp,sp,20
  80d024:	f800283a 	ret

0080d028 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80d028:	defffc04 	addi	sp,sp,-16
  80d02c:	dfc00315 	stw	ra,12(sp)
  80d030:	df000215 	stw	fp,8(sp)
  80d034:	df000204 	addi	fp,sp,8
  80d038:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80d03c:	e0bfff17 	ldw	r2,-4(fp)
  80d040:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80d044:	e0bffe17 	ldw	r2,-8(fp)
  80d048:	10800943 	ldbu	r2,37(r2)
  80d04c:	10803fcc 	andi	r2,r2,255
  80d050:	1080201c 	xori	r2,r2,128
  80d054:	10bfe004 	addi	r2,r2,-128
  80d058:	10c00044 	addi	r3,r2,1
  80d05c:	e0bffe17 	ldw	r2,-8(fp)
  80d060:	10800983 	ldbu	r2,38(r2)
  80d064:	10803fcc 	andi	r2,r2,255
  80d068:	1080201c 	xori	r2,r2,128
  80d06c:	10bfe004 	addi	r2,r2,-128
  80d070:	18800316 	blt	r3,r2,80d080 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  80d074:	e0bffe17 	ldw	r2,-8(fp)
  80d078:	10000945 	stb	zero,37(r2)
  80d07c:	00000606 	br	80d098 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80d080:	e0bffe17 	ldw	r2,-8(fp)
  80d084:	10800943 	ldbu	r2,37(r2)
  80d088:	10800044 	addi	r2,r2,1
  80d08c:	1007883a 	mov	r3,r2
  80d090:	e0bffe17 	ldw	r2,-8(fp)
  80d094:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80d098:	e0bffe17 	ldw	r2,-8(fp)
  80d09c:	10800983 	ldbu	r2,38(r2)
  80d0a0:	10803fcc 	andi	r2,r2,255
  80d0a4:	1080201c 	xori	r2,r2,128
  80d0a8:	10bfe004 	addi	r2,r2,-128
  80d0ac:	10800050 	cmplti	r2,r2,1
  80d0b0:	1000091e 	bne	r2,zero,80d0d8 <alt_lcd_16207_timeout+0xb0>
  80d0b4:	e0bffe17 	ldw	r2,-8(fp)
  80d0b8:	108009c3 	ldbu	r2,39(r2)
  80d0bc:	10803fcc 	andi	r2,r2,255
  80d0c0:	1080201c 	xori	r2,r2,128
  80d0c4:	10bfe004 	addi	r2,r2,-128
  80d0c8:	1004c03a 	cmpne	r2,r2,zero
  80d0cc:	1000021e 	bne	r2,zero,80d0d8 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  80d0d0:	e13ffe17 	ldw	r4,-8(fp)
  80d0d4:	080c5140 	call	80c514 <lcd_repaint_screen>

  return sp->period;
  80d0d8:	e0bffe17 	ldw	r2,-8(fp)
  80d0dc:	10800717 	ldw	r2,28(r2)
}
  80d0e0:	e037883a 	mov	sp,fp
  80d0e4:	dfc00117 	ldw	ra,4(sp)
  80d0e8:	df000017 	ldw	fp,0(sp)
  80d0ec:	dec00204 	addi	sp,sp,8
  80d0f0:	f800283a 	ret

0080d0f4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80d0f4:	defffc04 	addi	sp,sp,-16
  80d0f8:	dfc00315 	stw	ra,12(sp)
  80d0fc:	df000215 	stw	fp,8(sp)
  80d100:	df000204 	addi	fp,sp,8
  80d104:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80d108:	e0bfff17 	ldw	r2,-4(fp)
  80d10c:	10800017 	ldw	r2,0(r2)
  80d110:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80d114:	e0bfff17 	ldw	r2,-4(fp)
  80d118:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80d11c:	010ea604 	movi	r4,15000
  80d120:	080e7e40 	call	80e7e4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d124:	e0bffe17 	ldw	r2,-8(fp)
  80d128:	1007883a 	mov	r3,r2
  80d12c:	00800c04 	movi	r2,48
  80d130:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80d134:	01040104 	movi	r4,4100
  80d138:	080e7e40 	call	80e7e4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d13c:	e0bffe17 	ldw	r2,-8(fp)
  80d140:	1007883a 	mov	r3,r2
  80d144:	00800c04 	movi	r2,48
  80d148:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80d14c:	0100fa04 	movi	r4,1000
  80d150:	080e7e40 	call	80e7e4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d154:	e0bffe17 	ldw	r2,-8(fp)
  80d158:	1007883a 	mov	r3,r2
  80d15c:	00800c04 	movi	r2,48
  80d160:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80d164:	e13fff17 	ldw	r4,-4(fp)
  80d168:	01400e04 	movi	r5,56
  80d16c:	080c2b00 	call	80c2b0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80d170:	e13fff17 	ldw	r4,-4(fp)
  80d174:	01400204 	movi	r5,8
  80d178:	080c2b00 	call	80c2b0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80d17c:	e13fff17 	ldw	r4,-4(fp)
  80d180:	080c43c0 	call	80c43c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80d184:	e13fff17 	ldw	r4,-4(fp)
  80d188:	01400184 	movi	r5,6
  80d18c:	080c2b00 	call	80c2b0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80d190:	e13fff17 	ldw	r4,-4(fp)
  80d194:	01400304 	movi	r5,12
  80d198:	080c2b00 	call	80c2b0 <lcd_write_command>

  sp->esccount = -1;
  80d19c:	e0ffff17 	ldw	r3,-4(fp)
  80d1a0:	00bfffc4 	movi	r2,-1
  80d1a4:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  80d1a8:	e0bfff17 	ldw	r2,-4(fp)
  80d1ac:	11000a04 	addi	r4,r2,40
  80d1b0:	000b883a 	mov	r5,zero
  80d1b4:	01800204 	movi	r6,8
  80d1b8:	08021140 	call	802114 <memset>

  sp->scrollpos = 0;
  80d1bc:	e0bfff17 	ldw	r2,-4(fp)
  80d1c0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80d1c4:	e0bfff17 	ldw	r2,-4(fp)
  80d1c8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80d1cc:	e0bfff17 	ldw	r2,-4(fp)
  80d1d0:	100009c5 	stb	zero,39(r2)
  80d1d4:	00802074 	movhi	r2,129
  80d1d8:	108b7604 	addi	r2,r2,11736
  80d1dc:	10800017 	ldw	r2,0(r2)
  80d1e0:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80d1e4:	01400284 	movi	r5,10
  80d1e8:	080a2280 	call	80a228 <__udivsi3>
  80d1ec:	1007883a 	mov	r3,r2
  80d1f0:	e0bfff17 	ldw	r2,-4(fp)
  80d1f4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80d1f8:	e0bfff17 	ldw	r2,-4(fp)
  80d1fc:	11000104 	addi	r4,r2,4
  80d200:	e0bfff17 	ldw	r2,-4(fp)
  80d204:	10800717 	ldw	r2,28(r2)
  80d208:	100b883a 	mov	r5,r2
  80d20c:	01802074 	movhi	r6,129
  80d210:	31b40a04 	addi	r6,r6,-12248
  80d214:	e1ffff17 	ldw	r7,-4(fp)
  80d218:	080dc380 	call	80dc38 <alt_alarm_start>
}
  80d21c:	e037883a 	mov	sp,fp
  80d220:	dfc00117 	ldw	ra,4(sp)
  80d224:	df000017 	ldw	fp,0(sp)
  80d228:	dec00204 	addi	sp,sp,8
  80d22c:	f800283a 	ret

0080d230 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d230:	defffa04 	addi	sp,sp,-24
  80d234:	dfc00515 	stw	ra,20(sp)
  80d238:	df000415 	stw	fp,16(sp)
  80d23c:	df000404 	addi	fp,sp,16
  80d240:	e13ffd15 	stw	r4,-12(fp)
  80d244:	e17ffe15 	stw	r5,-8(fp)
  80d248:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80d24c:	e0bffd17 	ldw	r2,-12(fp)
  80d250:	10800017 	ldw	r2,0(r2)
  80d254:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80d258:	e0bffc17 	ldw	r2,-16(fp)
  80d25c:	11000a04 	addi	r4,r2,40
  80d260:	e0bffd17 	ldw	r2,-12(fp)
  80d264:	11c00217 	ldw	r7,8(r2)
  80d268:	e17ffe17 	ldw	r5,-8(fp)
  80d26c:	e1bfff17 	ldw	r6,-4(fp)
  80d270:	080caec0 	call	80caec <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80d274:	e037883a 	mov	sp,fp
  80d278:	dfc00117 	ldw	ra,4(sp)
  80d27c:	df000017 	ldw	fp,0(sp)
  80d280:	dec00204 	addi	sp,sp,8
  80d284:	f800283a 	ret

0080d288 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d288:	defffa04 	addi	sp,sp,-24
  80d28c:	dfc00515 	stw	ra,20(sp)
  80d290:	df000415 	stw	fp,16(sp)
  80d294:	df000404 	addi	fp,sp,16
  80d298:	e13ffd15 	stw	r4,-12(fp)
  80d29c:	e17ffe15 	stw	r5,-8(fp)
  80d2a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d2a4:	e0bffd17 	ldw	r2,-12(fp)
  80d2a8:	10800017 	ldw	r2,0(r2)
  80d2ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80d2b0:	e0bffc17 	ldw	r2,-16(fp)
  80d2b4:	11000a04 	addi	r4,r2,40
  80d2b8:	e0bffd17 	ldw	r2,-12(fp)
  80d2bc:	11c00217 	ldw	r7,8(r2)
  80d2c0:	e17ffe17 	ldw	r5,-8(fp)
  80d2c4:	e1bfff17 	ldw	r6,-4(fp)
  80d2c8:	080d7800 	call	80d780 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80d2cc:	e037883a 	mov	sp,fp
  80d2d0:	dfc00117 	ldw	ra,4(sp)
  80d2d4:	df000017 	ldw	fp,0(sp)
  80d2d8:	dec00204 	addi	sp,sp,8
  80d2dc:	f800283a 	ret

0080d2e0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d2e0:	defffa04 	addi	sp,sp,-24
  80d2e4:	dfc00515 	stw	ra,20(sp)
  80d2e8:	df000415 	stw	fp,16(sp)
  80d2ec:	df000404 	addi	fp,sp,16
  80d2f0:	e13ffd15 	stw	r4,-12(fp)
  80d2f4:	e17ffe15 	stw	r5,-8(fp)
  80d2f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d2fc:	e0bffd17 	ldw	r2,-12(fp)
  80d300:	10800017 	ldw	r2,0(r2)
  80d304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80d308:	e0bffc17 	ldw	r2,-16(fp)
  80d30c:	11000a04 	addi	r4,r2,40
  80d310:	e0bffd17 	ldw	r2,-12(fp)
  80d314:	11c00217 	ldw	r7,8(r2)
  80d318:	e17ffe17 	ldw	r5,-8(fp)
  80d31c:	e1bfff17 	ldw	r6,-4(fp)
  80d320:	080da100 	call	80da10 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80d324:	e037883a 	mov	sp,fp
  80d328:	dfc00117 	ldw	ra,4(sp)
  80d32c:	df000017 	ldw	fp,0(sp)
  80d330:	dec00204 	addi	sp,sp,8
  80d334:	f800283a 	ret

0080d338 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80d338:	defffc04 	addi	sp,sp,-16
  80d33c:	dfc00315 	stw	ra,12(sp)
  80d340:	df000215 	stw	fp,8(sp)
  80d344:	df000204 	addi	fp,sp,8
  80d348:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d34c:	e0bfff17 	ldw	r2,-4(fp)
  80d350:	10800017 	ldw	r2,0(r2)
  80d354:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80d358:	e0bffe17 	ldw	r2,-8(fp)
  80d35c:	11000a04 	addi	r4,r2,40
  80d360:	e0bfff17 	ldw	r2,-4(fp)
  80d364:	11400217 	ldw	r5,8(r2)
  80d368:	080d7200 	call	80d720 <altera_avalon_uart_close>
}
  80d36c:	e037883a 	mov	sp,fp
  80d370:	dfc00117 	ldw	ra,4(sp)
  80d374:	df000017 	ldw	fp,0(sp)
  80d378:	dec00204 	addi	sp,sp,8
  80d37c:	f800283a 	ret

0080d380 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80d380:	defff704 	addi	sp,sp,-36
  80d384:	dfc00815 	stw	ra,32(sp)
  80d388:	df000715 	stw	fp,28(sp)
  80d38c:	df000704 	addi	fp,sp,28
  80d390:	e13ffc15 	stw	r4,-16(fp)
  80d394:	e17ffd15 	stw	r5,-12(fp)
  80d398:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  80d39c:	e0bffc17 	ldw	r2,-16(fp)
  80d3a0:	10800017 	ldw	r2,0(r2)
  80d3a4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80d3a8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80d3ac:	1004c03a 	cmpne	r2,r2,zero
  80d3b0:	1000061e 	bne	r2,zero,80d3cc <altera_avalon_uart_init+0x4c>
  80d3b4:	0005883a 	mov	r2,zero
  80d3b8:	1004c03a 	cmpne	r2,r2,zero
  80d3bc:	1000031e 	bne	r2,zero,80d3cc <altera_avalon_uart_init+0x4c>
  80d3c0:	0005883a 	mov	r2,zero
  80d3c4:	1005003a 	cmpeq	r2,r2,zero
  80d3c8:	1000031e 	bne	r2,zero,80d3d8 <altera_avalon_uart_init+0x58>
  80d3cc:	00800044 	movi	r2,1
  80d3d0:	e0bfff15 	stw	r2,-4(fp)
  80d3d4:	00000106 	br	80d3dc <altera_avalon_uart_init+0x5c>
  80d3d8:	e03fff15 	stw	zero,-4(fp)
  80d3dc:	e0bfff17 	ldw	r2,-4(fp)
  80d3e0:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80d3e4:	e0bffa17 	ldw	r2,-24(fp)
  80d3e8:	1004c03a 	cmpne	r2,r2,zero
  80d3ec:	1000111e 	bne	r2,zero,80d434 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80d3f0:	e0fffc17 	ldw	r3,-16(fp)
  80d3f4:	00832004 	movi	r2,3200
  80d3f8:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80d3fc:	e0bffb17 	ldw	r2,-20(fp)
  80d400:	11000304 	addi	r4,r2,12
  80d404:	e0bffc17 	ldw	r2,-16(fp)
  80d408:	10800117 	ldw	r2,4(r2)
  80d40c:	1007883a 	mov	r3,r2
  80d410:	2005883a 	mov	r2,r4
  80d414:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80d418:	d8000015 	stw	zero,0(sp)
  80d41c:	e13ffd17 	ldw	r4,-12(fp)
  80d420:	e17ffe17 	ldw	r5,-8(fp)
  80d424:	01802074 	movhi	r6,129
  80d428:	31b51204 	addi	r6,r6,-11192
  80d42c:	e1fffc17 	ldw	r7,-16(fp)
  80d430:	080e2240 	call	80e224 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80d434:	e037883a 	mov	sp,fp
  80d438:	dfc00117 	ldw	ra,4(sp)
  80d43c:	df000017 	ldw	fp,0(sp)
  80d440:	dec00204 	addi	sp,sp,8
  80d444:	f800283a 	ret

0080d448 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80d448:	defffa04 	addi	sp,sp,-24
  80d44c:	dfc00515 	stw	ra,20(sp)
  80d450:	df000415 	stw	fp,16(sp)
  80d454:	df000404 	addi	fp,sp,16
  80d458:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80d45c:	e0bfff17 	ldw	r2,-4(fp)
  80d460:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80d464:	e0bffd17 	ldw	r2,-12(fp)
  80d468:	10800017 	ldw	r2,0(r2)
  80d46c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80d470:	e0bffc17 	ldw	r2,-16(fp)
  80d474:	10800204 	addi	r2,r2,8
  80d478:	10800037 	ldwio	r2,0(r2)
  80d47c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80d480:	e0bffc17 	ldw	r2,-16(fp)
  80d484:	10800204 	addi	r2,r2,8
  80d488:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80d48c:	e0bffc17 	ldw	r2,-16(fp)
  80d490:	10800204 	addi	r2,r2,8
  80d494:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80d498:	e0bffe17 	ldw	r2,-8(fp)
  80d49c:	1080200c 	andi	r2,r2,128
  80d4a0:	1005003a 	cmpeq	r2,r2,zero
  80d4a4:	1000031e 	bne	r2,zero,80d4b4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80d4a8:	e13ffd17 	ldw	r4,-12(fp)
  80d4ac:	e17ffe17 	ldw	r5,-8(fp)
  80d4b0:	080d4e40 	call	80d4e4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80d4b4:	e0bffe17 	ldw	r2,-8(fp)
  80d4b8:	1081100c 	andi	r2,r2,1088
  80d4bc:	1005003a 	cmpeq	r2,r2,zero
  80d4c0:	1000031e 	bne	r2,zero,80d4d0 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80d4c4:	e13ffd17 	ldw	r4,-12(fp)
  80d4c8:	e17ffe17 	ldw	r5,-8(fp)
  80d4cc:	080d5c40 	call	80d5c4 <altera_avalon_uart_txirq>
  }
  

}
  80d4d0:	e037883a 	mov	sp,fp
  80d4d4:	dfc00117 	ldw	ra,4(sp)
  80d4d8:	df000017 	ldw	fp,0(sp)
  80d4dc:	dec00204 	addi	sp,sp,8
  80d4e0:	f800283a 	ret

0080d4e4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d4e4:	defffc04 	addi	sp,sp,-16
  80d4e8:	df000315 	stw	fp,12(sp)
  80d4ec:	df000304 	addi	fp,sp,12
  80d4f0:	e13ffe15 	stw	r4,-8(fp)
  80d4f4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80d4f8:	e0bfff17 	ldw	r2,-4(fp)
  80d4fc:	108000cc 	andi	r2,r2,3
  80d500:	1004c03a 	cmpne	r2,r2,zero
  80d504:	10002b1e 	bne	r2,zero,80d5b4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80d508:	e0bffe17 	ldw	r2,-8(fp)
  80d50c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d510:	e0bffe17 	ldw	r2,-8(fp)
  80d514:	10800317 	ldw	r2,12(r2)
  80d518:	10800044 	addi	r2,r2,1
  80d51c:	10800fcc 	andi	r2,r2,63
  80d520:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80d524:	e0bffe17 	ldw	r2,-8(fp)
  80d528:	11000317 	ldw	r4,12(r2)
  80d52c:	e0bffe17 	ldw	r2,-8(fp)
  80d530:	10800017 	ldw	r2,0(r2)
  80d534:	10800037 	ldwio	r2,0(r2)
  80d538:	1007883a 	mov	r3,r2
  80d53c:	e0bffe17 	ldw	r2,-8(fp)
  80d540:	2085883a 	add	r2,r4,r2
  80d544:	10800704 	addi	r2,r2,28
  80d548:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  80d54c:	e0fffe17 	ldw	r3,-8(fp)
  80d550:	e0bffd17 	ldw	r2,-12(fp)
  80d554:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d558:	e0bffe17 	ldw	r2,-8(fp)
  80d55c:	10800317 	ldw	r2,12(r2)
  80d560:	10800044 	addi	r2,r2,1
  80d564:	10800fcc 	andi	r2,r2,63
  80d568:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80d56c:	e0bffe17 	ldw	r2,-8(fp)
  80d570:	10c00217 	ldw	r3,8(r2)
  80d574:	e0bffd17 	ldw	r2,-12(fp)
  80d578:	18800e1e 	bne	r3,r2,80d5b4 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d57c:	e0bffe17 	ldw	r2,-8(fp)
  80d580:	10c00117 	ldw	r3,4(r2)
  80d584:	00bfdfc4 	movi	r2,-129
  80d588:	1886703a 	and	r3,r3,r2
  80d58c:	e0bffe17 	ldw	r2,-8(fp)
  80d590:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80d594:	e0bffe17 	ldw	r2,-8(fp)
  80d598:	10800017 	ldw	r2,0(r2)
  80d59c:	11000304 	addi	r4,r2,12
  80d5a0:	e0bffe17 	ldw	r2,-8(fp)
  80d5a4:	10800117 	ldw	r2,4(r2)
  80d5a8:	1007883a 	mov	r3,r2
  80d5ac:	2005883a 	mov	r2,r4
  80d5b0:	10c00035 	stwio	r3,0(r2)
  }   
}
  80d5b4:	e037883a 	mov	sp,fp
  80d5b8:	df000017 	ldw	fp,0(sp)
  80d5bc:	dec00104 	addi	sp,sp,4
  80d5c0:	f800283a 	ret

0080d5c4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d5c4:	defffd04 	addi	sp,sp,-12
  80d5c8:	df000215 	stw	fp,8(sp)
  80d5cc:	df000204 	addi	fp,sp,8
  80d5d0:	e13ffe15 	stw	r4,-8(fp)
  80d5d4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80d5d8:	e0bffe17 	ldw	r2,-8(fp)
  80d5dc:	10c00417 	ldw	r3,16(r2)
  80d5e0:	e0bffe17 	ldw	r2,-8(fp)
  80d5e4:	10800517 	ldw	r2,20(r2)
  80d5e8:	18803626 	beq	r3,r2,80d6c4 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d5ec:	e0bffe17 	ldw	r2,-8(fp)
  80d5f0:	10800617 	ldw	r2,24(r2)
  80d5f4:	1080008c 	andi	r2,r2,2
  80d5f8:	1005003a 	cmpeq	r2,r2,zero
  80d5fc:	1000041e 	bne	r2,zero,80d610 <altera_avalon_uart_txirq+0x4c>
  80d600:	e0bfff17 	ldw	r2,-4(fp)
  80d604:	1082000c 	andi	r2,r2,2048
  80d608:	1005003a 	cmpeq	r2,r2,zero
  80d60c:	10001e1e 	bne	r2,zero,80d688 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80d610:	e0bffe17 	ldw	r2,-8(fp)
  80d614:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80d618:	e0bffe17 	ldw	r2,-8(fp)
  80d61c:	10800017 	ldw	r2,0(r2)
  80d620:	11000104 	addi	r4,r2,4
  80d624:	e0bffe17 	ldw	r2,-8(fp)
  80d628:	10c00417 	ldw	r3,16(r2)
  80d62c:	e0bffe17 	ldw	r2,-8(fp)
  80d630:	1885883a 	add	r2,r3,r2
  80d634:	10801704 	addi	r2,r2,92
  80d638:	10800003 	ldbu	r2,0(r2)
  80d63c:	10c03fcc 	andi	r3,r2,255
  80d640:	2005883a 	mov	r2,r4
  80d644:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80d648:	e0bffe17 	ldw	r2,-8(fp)
  80d64c:	10800417 	ldw	r2,16(r2)
  80d650:	10c00044 	addi	r3,r2,1
  80d654:	e0bffe17 	ldw	r2,-8(fp)
  80d658:	10c00415 	stw	r3,16(r2)
  80d65c:	e0bffe17 	ldw	r2,-8(fp)
  80d660:	10800417 	ldw	r2,16(r2)
  80d664:	10c00fcc 	andi	r3,r2,63
  80d668:	e0bffe17 	ldw	r2,-8(fp)
  80d66c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d670:	e0bffe17 	ldw	r2,-8(fp)
  80d674:	10800117 	ldw	r2,4(r2)
  80d678:	10c01014 	ori	r3,r2,64
  80d67c:	e0bffe17 	ldw	r2,-8(fp)
  80d680:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d684:	00000f06 	br	80d6c4 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80d688:	e0bffe17 	ldw	r2,-8(fp)
  80d68c:	10800017 	ldw	r2,0(r2)
  80d690:	10800204 	addi	r2,r2,8
  80d694:	10800037 	ldwio	r2,0(r2)
  80d698:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80d69c:	e0bfff17 	ldw	r2,-4(fp)
  80d6a0:	1082000c 	andi	r2,r2,2048
  80d6a4:	1004c03a 	cmpne	r2,r2,zero
  80d6a8:	1000061e 	bne	r2,zero,80d6c4 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d6ac:	e0bffe17 	ldw	r2,-8(fp)
  80d6b0:	10c00117 	ldw	r3,4(r2)
  80d6b4:	00bfefc4 	movi	r2,-65
  80d6b8:	1886703a 	and	r3,r3,r2
  80d6bc:	e0bffe17 	ldw	r2,-8(fp)
  80d6c0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80d6c4:	e0bffe17 	ldw	r2,-8(fp)
  80d6c8:	10c00417 	ldw	r3,16(r2)
  80d6cc:	e0bffe17 	ldw	r2,-8(fp)
  80d6d0:	10800517 	ldw	r2,20(r2)
  80d6d4:	1880061e 	bne	r3,r2,80d6f0 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d6d8:	e0bffe17 	ldw	r2,-8(fp)
  80d6dc:	10c00117 	ldw	r3,4(r2)
  80d6e0:	00beefc4 	movi	r2,-1089
  80d6e4:	1886703a 	and	r3,r3,r2
  80d6e8:	e0bffe17 	ldw	r2,-8(fp)
  80d6ec:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d6f0:	e0bffe17 	ldw	r2,-8(fp)
  80d6f4:	10800017 	ldw	r2,0(r2)
  80d6f8:	11000304 	addi	r4,r2,12
  80d6fc:	e0bffe17 	ldw	r2,-8(fp)
  80d700:	10800117 	ldw	r2,4(r2)
  80d704:	1007883a 	mov	r3,r2
  80d708:	2005883a 	mov	r2,r4
  80d70c:	10c00035 	stwio	r3,0(r2)
}
  80d710:	e037883a 	mov	sp,fp
  80d714:	df000017 	ldw	fp,0(sp)
  80d718:	dec00104 	addi	sp,sp,4
  80d71c:	f800283a 	ret

0080d720 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80d720:	defffc04 	addi	sp,sp,-16
  80d724:	df000315 	stw	fp,12(sp)
  80d728:	df000304 	addi	fp,sp,12
  80d72c:	e13ffd15 	stw	r4,-12(fp)
  80d730:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d734:	00000706 	br	80d754 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d738:	e0bffe17 	ldw	r2,-8(fp)
  80d73c:	1090000c 	andi	r2,r2,16384
  80d740:	1005003a 	cmpeq	r2,r2,zero
  80d744:	1000031e 	bne	r2,zero,80d754 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d748:	00bffd44 	movi	r2,-11
  80d74c:	e0bfff15 	stw	r2,-4(fp)
  80d750:	00000606 	br	80d76c <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d754:	e0bffd17 	ldw	r2,-12(fp)
  80d758:	10c00417 	ldw	r3,16(r2)
  80d75c:	e0bffd17 	ldw	r2,-12(fp)
  80d760:	10800517 	ldw	r2,20(r2)
  80d764:	18bff41e 	bne	r3,r2,80d738 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d768:	e03fff15 	stw	zero,-4(fp)
  80d76c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d770:	e037883a 	mov	sp,fp
  80d774:	df000017 	ldw	fp,0(sp)
  80d778:	dec00104 	addi	sp,sp,4
  80d77c:	f800283a 	ret

0080d780 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80d780:	defff004 	addi	sp,sp,-64
  80d784:	dfc00f15 	stw	ra,60(sp)
  80d788:	df000e15 	stw	fp,56(sp)
  80d78c:	df000e04 	addi	fp,sp,56
  80d790:	e13ffb15 	stw	r4,-20(fp)
  80d794:	e17ffc15 	stw	r5,-16(fp)
  80d798:	e1bffd15 	stw	r6,-12(fp)
  80d79c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80d7a0:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80d7a4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80d7a8:	e0bffe17 	ldw	r2,-8(fp)
  80d7ac:	1090000c 	andi	r2,r2,16384
  80d7b0:	1005003a 	cmpeq	r2,r2,zero
  80d7b4:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80d7b8:	e0bffb17 	ldw	r2,-20(fp)
  80d7bc:	10800217 	ldw	r2,8(r2)
  80d7c0:	10800044 	addi	r2,r2,1
  80d7c4:	10800fcc 	andi	r2,r2,63
  80d7c8:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d7cc:	00001906 	br	80d834 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80d7d0:	e0bff617 	ldw	r2,-40(fp)
  80d7d4:	10800044 	addi	r2,r2,1
  80d7d8:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80d7dc:	e0bffb17 	ldw	r2,-20(fp)
  80d7e0:	10c00217 	ldw	r3,8(r2)
  80d7e4:	e0bffb17 	ldw	r2,-20(fp)
  80d7e8:	1885883a 	add	r2,r3,r2
  80d7ec:	10800704 	addi	r2,r2,28
  80d7f0:	10800003 	ldbu	r2,0(r2)
  80d7f4:	1007883a 	mov	r3,r2
  80d7f8:	e0bffc17 	ldw	r2,-16(fp)
  80d7fc:	10c00005 	stb	r3,0(r2)
  80d800:	e0bffc17 	ldw	r2,-16(fp)
  80d804:	10800044 	addi	r2,r2,1
  80d808:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  80d80c:	e0bffb17 	ldw	r2,-20(fp)
  80d810:	10800217 	ldw	r2,8(r2)
  80d814:	10c00044 	addi	r3,r2,1
  80d818:	e0bffb17 	ldw	r2,-20(fp)
  80d81c:	10c00215 	stw	r3,8(r2)
  80d820:	e0bffb17 	ldw	r2,-20(fp)
  80d824:	10800217 	ldw	r2,8(r2)
  80d828:	10c00fcc 	andi	r3,r2,63
  80d82c:	e0bffb17 	ldw	r2,-20(fp)
  80d830:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d834:	e0fff617 	ldw	r3,-40(fp)
  80d838:	e0bffd17 	ldw	r2,-12(fp)
  80d83c:	1880050e 	bge	r3,r2,80d854 <altera_avalon_uart_read+0xd4>
  80d840:	e0bffb17 	ldw	r2,-20(fp)
  80d844:	10c00217 	ldw	r3,8(r2)
  80d848:	e0bffb17 	ldw	r2,-20(fp)
  80d84c:	10800317 	ldw	r2,12(r2)
  80d850:	18bfdf1e 	bne	r3,r2,80d7d0 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80d854:	e0bff617 	ldw	r2,-40(fp)
  80d858:	1004c03a 	cmpne	r2,r2,zero
  80d85c:	1000271e 	bne	r2,zero,80d8fc <altera_avalon_uart_read+0x17c>
  80d860:	e0bffb17 	ldw	r2,-20(fp)
  80d864:	10c00217 	ldw	r3,8(r2)
  80d868:	e0bffb17 	ldw	r2,-20(fp)
  80d86c:	10800317 	ldw	r2,12(r2)
  80d870:	1880221e 	bne	r3,r2,80d8fc <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80d874:	e0bff917 	ldw	r2,-28(fp)
  80d878:	1004c03a 	cmpne	r2,r2,zero
  80d87c:	1000061e 	bne	r2,zero,80d898 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80d880:	080d9b00 	call	80d9b0 <alt_get_errno>
  80d884:	00c002c4 	movi	r3,11
  80d888:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  80d88c:	00800044 	movi	r2,1
  80d890:	e0bff705 	stb	r2,-36(fp)
        break;
  80d894:	00001f06 	br	80d914 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d898:	0005303a 	rdctl	r2,status
  80d89c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d8a0:	e0fff517 	ldw	r3,-44(fp)
  80d8a4:	00bfff84 	movi	r2,-2
  80d8a8:	1884703a 	and	r2,r3,r2
  80d8ac:	1001703a 	wrctl	status,r2
  
  return context;
  80d8b0:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80d8b4:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d8b8:	e0bffb17 	ldw	r2,-20(fp)
  80d8bc:	10800117 	ldw	r2,4(r2)
  80d8c0:	10c02014 	ori	r3,r2,128
  80d8c4:	e0bffb17 	ldw	r2,-20(fp)
  80d8c8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d8cc:	e0bffb17 	ldw	r2,-20(fp)
  80d8d0:	10800017 	ldw	r2,0(r2)
  80d8d4:	11000304 	addi	r4,r2,12
  80d8d8:	e0bffb17 	ldw	r2,-20(fp)
  80d8dc:	10800117 	ldw	r2,4(r2)
  80d8e0:	1007883a 	mov	r3,r2
  80d8e4:	2005883a 	mov	r2,r4
  80d8e8:	10c00035 	stwio	r3,0(r2)
  80d8ec:	e0bffa17 	ldw	r2,-24(fp)
  80d8f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d8f4:	e0bff417 	ldw	r2,-48(fp)
  80d8f8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80d8fc:	e0bff617 	ldw	r2,-40(fp)
  80d900:	1004c03a 	cmpne	r2,r2,zero
  80d904:	1000031e 	bne	r2,zero,80d914 <altera_avalon_uart_read+0x194>
  80d908:	e0bffd17 	ldw	r2,-12(fp)
  80d90c:	1004c03a 	cmpne	r2,r2,zero
  80d910:	103fc81e 	bne	r2,zero,80d834 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d914:	0005303a 	rdctl	r2,status
  80d918:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d91c:	e0fff317 	ldw	r3,-52(fp)
  80d920:	00bfff84 	movi	r2,-2
  80d924:	1884703a 	and	r2,r3,r2
  80d928:	1001703a 	wrctl	status,r2
  
  return context;
  80d92c:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80d930:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d934:	e0bffb17 	ldw	r2,-20(fp)
  80d938:	10800117 	ldw	r2,4(r2)
  80d93c:	10c02014 	ori	r3,r2,128
  80d940:	e0bffb17 	ldw	r2,-20(fp)
  80d944:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d948:	e0bffb17 	ldw	r2,-20(fp)
  80d94c:	10800017 	ldw	r2,0(r2)
  80d950:	11000304 	addi	r4,r2,12
  80d954:	e0bffb17 	ldw	r2,-20(fp)
  80d958:	10800117 	ldw	r2,4(r2)
  80d95c:	1007883a 	mov	r3,r2
  80d960:	2005883a 	mov	r2,r4
  80d964:	10c00035 	stwio	r3,0(r2)
  80d968:	e0bffa17 	ldw	r2,-24(fp)
  80d96c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d970:	e0bff217 	ldw	r2,-56(fp)
  80d974:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80d978:	e0bff703 	ldbu	r2,-36(fp)
  80d97c:	1005003a 	cmpeq	r2,r2,zero
  80d980:	1000031e 	bne	r2,zero,80d990 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80d984:	00bffd04 	movi	r2,-12
  80d988:	e0bfff15 	stw	r2,-4(fp)
  80d98c:	00000206 	br	80d998 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80d990:	e0bff617 	ldw	r2,-40(fp)
  80d994:	e0bfff15 	stw	r2,-4(fp)
  80d998:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80d99c:	e037883a 	mov	sp,fp
  80d9a0:	dfc00117 	ldw	ra,4(sp)
  80d9a4:	df000017 	ldw	fp,0(sp)
  80d9a8:	dec00204 	addi	sp,sp,8
  80d9ac:	f800283a 	ret

0080d9b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d9b0:	defffd04 	addi	sp,sp,-12
  80d9b4:	dfc00215 	stw	ra,8(sp)
  80d9b8:	df000115 	stw	fp,4(sp)
  80d9bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d9c0:	00802074 	movhi	r2,129
  80d9c4:	10845204 	addi	r2,r2,4424
  80d9c8:	10800017 	ldw	r2,0(r2)
  80d9cc:	1005003a 	cmpeq	r2,r2,zero
  80d9d0:	1000061e 	bne	r2,zero,80d9ec <alt_get_errno+0x3c>
  80d9d4:	00802074 	movhi	r2,129
  80d9d8:	10845204 	addi	r2,r2,4424
  80d9dc:	10800017 	ldw	r2,0(r2)
  80d9e0:	103ee83a 	callr	r2
  80d9e4:	e0bfff15 	stw	r2,-4(fp)
  80d9e8:	00000306 	br	80d9f8 <alt_get_errno+0x48>
  80d9ec:	00802074 	movhi	r2,129
  80d9f0:	108b6b04 	addi	r2,r2,11692
  80d9f4:	e0bfff15 	stw	r2,-4(fp)
  80d9f8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d9fc:	e037883a 	mov	sp,fp
  80da00:	dfc00117 	ldw	ra,4(sp)
  80da04:	df000017 	ldw	fp,0(sp)
  80da08:	dec00204 	addi	sp,sp,8
  80da0c:	f800283a 	ret

0080da10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80da10:	defff204 	addi	sp,sp,-56
  80da14:	dfc00d15 	stw	ra,52(sp)
  80da18:	df000c15 	stw	fp,48(sp)
  80da1c:	df000c04 	addi	fp,sp,48
  80da20:	e13ffc15 	stw	r4,-16(fp)
  80da24:	e17ffd15 	stw	r5,-12(fp)
  80da28:	e1bffe15 	stw	r6,-8(fp)
  80da2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80da30:	e0bffe17 	ldw	r2,-8(fp)
  80da34:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80da38:	e0bfff17 	ldw	r2,-4(fp)
  80da3c:	1090000c 	andi	r2,r2,16384
  80da40:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80da44:	00004006 	br	80db48 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80da48:	e0bffc17 	ldw	r2,-16(fp)
  80da4c:	10800517 	ldw	r2,20(r2)
  80da50:	10800044 	addi	r2,r2,1
  80da54:	10800fcc 	andi	r2,r2,63
  80da58:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80da5c:	e0bffc17 	ldw	r2,-16(fp)
  80da60:	10c00417 	ldw	r3,16(r2)
  80da64:	e0bff917 	ldw	r2,-28(fp)
  80da68:	1880251e 	bne	r3,r2,80db00 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80da6c:	e0bffa17 	ldw	r2,-24(fp)
  80da70:	1005003a 	cmpeq	r2,r2,zero
  80da74:	1000051e 	bne	r2,zero,80da8c <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80da78:	080dbd80 	call	80dbd8 <alt_get_errno>
  80da7c:	1007883a 	mov	r3,r2
  80da80:	008002c4 	movi	r2,11
  80da84:	18800015 	stw	r2,0(r3)
        break;
  80da88:	00003206 	br	80db54 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da8c:	0005303a 	rdctl	r2,status
  80da90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da94:	e0fff717 	ldw	r3,-36(fp)
  80da98:	00bfff84 	movi	r2,-2
  80da9c:	1884703a 	and	r2,r3,r2
  80daa0:	1001703a 	wrctl	status,r2
  
  return context;
  80daa4:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80daa8:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80daac:	e0bffc17 	ldw	r2,-16(fp)
  80dab0:	10800117 	ldw	r2,4(r2)
  80dab4:	10c11014 	ori	r3,r2,1088
  80dab8:	e0bffc17 	ldw	r2,-16(fp)
  80dabc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80dac0:	e0bffc17 	ldw	r2,-16(fp)
  80dac4:	10800017 	ldw	r2,0(r2)
  80dac8:	11000304 	addi	r4,r2,12
  80dacc:	e0bffc17 	ldw	r2,-16(fp)
  80dad0:	10800117 	ldw	r2,4(r2)
  80dad4:	1007883a 	mov	r3,r2
  80dad8:	2005883a 	mov	r2,r4
  80dadc:	10c00035 	stwio	r3,0(r2)
  80dae0:	e0bffb17 	ldw	r2,-20(fp)
  80dae4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dae8:	e0bff617 	ldw	r2,-40(fp)
  80daec:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80daf0:	e0bffc17 	ldw	r2,-16(fp)
  80daf4:	10c00417 	ldw	r3,16(r2)
  80daf8:	e0bff917 	ldw	r2,-28(fp)
  80dafc:	18bffc26 	beq	r3,r2,80daf0 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80db00:	e0bff817 	ldw	r2,-32(fp)
  80db04:	10bfffc4 	addi	r2,r2,-1
  80db08:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80db0c:	e0bffc17 	ldw	r2,-16(fp)
  80db10:	10c00517 	ldw	r3,20(r2)
  80db14:	e0bffd17 	ldw	r2,-12(fp)
  80db18:	10800003 	ldbu	r2,0(r2)
  80db1c:	1009883a 	mov	r4,r2
  80db20:	e0bffc17 	ldw	r2,-16(fp)
  80db24:	1885883a 	add	r2,r3,r2
  80db28:	10801704 	addi	r2,r2,92
  80db2c:	11000005 	stb	r4,0(r2)
  80db30:	e0bffd17 	ldw	r2,-12(fp)
  80db34:	10800044 	addi	r2,r2,1
  80db38:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80db3c:	e0fffc17 	ldw	r3,-16(fp)
  80db40:	e0bff917 	ldw	r2,-28(fp)
  80db44:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80db48:	e0bff817 	ldw	r2,-32(fp)
  80db4c:	1004c03a 	cmpne	r2,r2,zero
  80db50:	103fbd1e 	bne	r2,zero,80da48 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80db54:	0005303a 	rdctl	r2,status
  80db58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80db5c:	e0fff517 	ldw	r3,-44(fp)
  80db60:	00bfff84 	movi	r2,-2
  80db64:	1884703a 	and	r2,r3,r2
  80db68:	1001703a 	wrctl	status,r2
  
  return context;
  80db6c:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80db70:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80db74:	e0bffc17 	ldw	r2,-16(fp)
  80db78:	10800117 	ldw	r2,4(r2)
  80db7c:	10c11014 	ori	r3,r2,1088
  80db80:	e0bffc17 	ldw	r2,-16(fp)
  80db84:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80db88:	e0bffc17 	ldw	r2,-16(fp)
  80db8c:	10800017 	ldw	r2,0(r2)
  80db90:	11000304 	addi	r4,r2,12
  80db94:	e0bffc17 	ldw	r2,-16(fp)
  80db98:	10800117 	ldw	r2,4(r2)
  80db9c:	1007883a 	mov	r3,r2
  80dba0:	2005883a 	mov	r2,r4
  80dba4:	10c00035 	stwio	r3,0(r2)
  80dba8:	e0bffb17 	ldw	r2,-20(fp)
  80dbac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dbb0:	e0bff417 	ldw	r2,-48(fp)
  80dbb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80dbb8:	e0fffe17 	ldw	r3,-8(fp)
  80dbbc:	e0bff817 	ldw	r2,-32(fp)
  80dbc0:	1885c83a 	sub	r2,r3,r2
}
  80dbc4:	e037883a 	mov	sp,fp
  80dbc8:	dfc00117 	ldw	ra,4(sp)
  80dbcc:	df000017 	ldw	fp,0(sp)
  80dbd0:	dec00204 	addi	sp,sp,8
  80dbd4:	f800283a 	ret

0080dbd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dbd8:	defffd04 	addi	sp,sp,-12
  80dbdc:	dfc00215 	stw	ra,8(sp)
  80dbe0:	df000115 	stw	fp,4(sp)
  80dbe4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dbe8:	00802074 	movhi	r2,129
  80dbec:	10845204 	addi	r2,r2,4424
  80dbf0:	10800017 	ldw	r2,0(r2)
  80dbf4:	1005003a 	cmpeq	r2,r2,zero
  80dbf8:	1000061e 	bne	r2,zero,80dc14 <alt_get_errno+0x3c>
  80dbfc:	00802074 	movhi	r2,129
  80dc00:	10845204 	addi	r2,r2,4424
  80dc04:	10800017 	ldw	r2,0(r2)
  80dc08:	103ee83a 	callr	r2
  80dc0c:	e0bfff15 	stw	r2,-4(fp)
  80dc10:	00000306 	br	80dc20 <alt_get_errno+0x48>
  80dc14:	00802074 	movhi	r2,129
  80dc18:	108b6b04 	addi	r2,r2,11692
  80dc1c:	e0bfff15 	stw	r2,-4(fp)
  80dc20:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc24:	e037883a 	mov	sp,fp
  80dc28:	dfc00117 	ldw	ra,4(sp)
  80dc2c:	df000017 	ldw	fp,0(sp)
  80dc30:	dec00204 	addi	sp,sp,8
  80dc34:	f800283a 	ret

0080dc38 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80dc38:	defff404 	addi	sp,sp,-48
  80dc3c:	df000b15 	stw	fp,44(sp)
  80dc40:	df000b04 	addi	fp,sp,44
  80dc44:	e13ffb15 	stw	r4,-20(fp)
  80dc48:	e17ffc15 	stw	r5,-16(fp)
  80dc4c:	e1bffd15 	stw	r6,-12(fp)
  80dc50:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80dc54:	e03ff915 	stw	zero,-28(fp)
  80dc58:	00802074 	movhi	r2,129
  80dc5c:	108b7604 	addi	r2,r2,11736
  80dc60:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80dc64:	1005003a 	cmpeq	r2,r2,zero
  80dc68:	1000411e 	bne	r2,zero,80dd70 <alt_alarm_start+0x138>
  {
    if (alarm)
  80dc6c:	e0bffb17 	ldw	r2,-20(fp)
  80dc70:	1005003a 	cmpeq	r2,r2,zero
  80dc74:	10003b1e 	bne	r2,zero,80dd64 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80dc78:	e0fffb17 	ldw	r3,-20(fp)
  80dc7c:	e0bffd17 	ldw	r2,-12(fp)
  80dc80:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80dc84:	e0fffb17 	ldw	r3,-20(fp)
  80dc88:	e0bffe17 	ldw	r2,-8(fp)
  80dc8c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc90:	0005303a 	rdctl	r2,status
  80dc94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc98:	e0fff817 	ldw	r3,-32(fp)
  80dc9c:	00bfff84 	movi	r2,-2
  80dca0:	1884703a 	and	r2,r3,r2
  80dca4:	1001703a 	wrctl	status,r2
  
  return context;
  80dca8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80dcac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80dcb0:	00802074 	movhi	r2,129
  80dcb4:	108b7704 	addi	r2,r2,11740
  80dcb8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80dcbc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80dcc0:	e0fffc17 	ldw	r3,-16(fp)
  80dcc4:	e0bff917 	ldw	r2,-28(fp)
  80dcc8:	1885883a 	add	r2,r3,r2
  80dccc:	10c00044 	addi	r3,r2,1
  80dcd0:	e0bffb17 	ldw	r2,-20(fp)
  80dcd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80dcd8:	e0bffb17 	ldw	r2,-20(fp)
  80dcdc:	10c00217 	ldw	r3,8(r2)
  80dce0:	e0bff917 	ldw	r2,-28(fp)
  80dce4:	1880042e 	bgeu	r3,r2,80dcf8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80dce8:	e0fffb17 	ldw	r3,-20(fp)
  80dcec:	00800044 	movi	r2,1
  80dcf0:	18800405 	stb	r2,16(r3)
  80dcf4:	00000206 	br	80dd00 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80dcf8:	e0bffb17 	ldw	r2,-20(fp)
  80dcfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80dd00:	e0fffb17 	ldw	r3,-20(fp)
  80dd04:	00802074 	movhi	r2,129
  80dd08:	10845604 	addi	r2,r2,4440
  80dd0c:	e0bff615 	stw	r2,-40(fp)
  80dd10:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80dd14:	e0fff717 	ldw	r3,-36(fp)
  80dd18:	e0bff617 	ldw	r2,-40(fp)
  80dd1c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80dd20:	e0bff617 	ldw	r2,-40(fp)
  80dd24:	10c00017 	ldw	r3,0(r2)
  80dd28:	e0bff717 	ldw	r2,-36(fp)
  80dd2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80dd30:	e0bff617 	ldw	r2,-40(fp)
  80dd34:	10c00017 	ldw	r3,0(r2)
  80dd38:	e0bff717 	ldw	r2,-36(fp)
  80dd3c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80dd40:	e0fff617 	ldw	r3,-40(fp)
  80dd44:	e0bff717 	ldw	r2,-36(fp)
  80dd48:	18800015 	stw	r2,0(r3)
  80dd4c:	e0bffa17 	ldw	r2,-24(fp)
  80dd50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dd54:	e0bff517 	ldw	r2,-44(fp)
  80dd58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80dd5c:	e03fff15 	stw	zero,-4(fp)
  80dd60:	00000506 	br	80dd78 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80dd64:	00bffa84 	movi	r2,-22
  80dd68:	e0bfff15 	stw	r2,-4(fp)
  80dd6c:	00000206 	br	80dd78 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80dd70:	00bfde84 	movi	r2,-134
  80dd74:	e0bfff15 	stw	r2,-4(fp)
  80dd78:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80dd7c:	e037883a 	mov	sp,fp
  80dd80:	df000017 	ldw	fp,0(sp)
  80dd84:	dec00104 	addi	sp,sp,4
  80dd88:	f800283a 	ret

0080dd8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80dd8c:	deffff04 	addi	sp,sp,-4
  80dd90:	df000015 	stw	fp,0(sp)
  80dd94:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80dd98:	e037883a 	mov	sp,fp
  80dd9c:	df000017 	ldw	fp,0(sp)
  80dda0:	dec00104 	addi	sp,sp,4
  80dda4:	f800283a 	ret

0080dda8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80dda8:	defff904 	addi	sp,sp,-28
  80ddac:	dfc00615 	stw	ra,24(sp)
  80ddb0:	df000515 	stw	fp,20(sp)
  80ddb4:	df000504 	addi	fp,sp,20
  80ddb8:	e13ffd15 	stw	r4,-12(fp)
  80ddbc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80ddc0:	e0bffd17 	ldw	r2,-12(fp)
  80ddc4:	1005003a 	cmpeq	r2,r2,zero
  80ddc8:	1000041e 	bne	r2,zero,80dddc <alt_dev_llist_insert+0x34>
  80ddcc:	e0bffd17 	ldw	r2,-12(fp)
  80ddd0:	10800217 	ldw	r2,8(r2)
  80ddd4:	1004c03a 	cmpne	r2,r2,zero
  80ddd8:	1000071e 	bne	r2,zero,80ddf8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80dddc:	080de5c0 	call	80de5c <alt_get_errno>
  80dde0:	1007883a 	mov	r3,r2
  80dde4:	00800584 	movi	r2,22
  80dde8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80ddec:	00bffa84 	movi	r2,-22
  80ddf0:	e0bfff15 	stw	r2,-4(fp)
  80ddf4:	00001306 	br	80de44 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80ddf8:	e0fffd17 	ldw	r3,-12(fp)
  80ddfc:	e0bffe17 	ldw	r2,-8(fp)
  80de00:	e0bffb15 	stw	r2,-20(fp)
  80de04:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80de08:	e0fffc17 	ldw	r3,-16(fp)
  80de0c:	e0bffb17 	ldw	r2,-20(fp)
  80de10:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80de14:	e0bffb17 	ldw	r2,-20(fp)
  80de18:	10c00017 	ldw	r3,0(r2)
  80de1c:	e0bffc17 	ldw	r2,-16(fp)
  80de20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80de24:	e0bffb17 	ldw	r2,-20(fp)
  80de28:	10c00017 	ldw	r3,0(r2)
  80de2c:	e0bffc17 	ldw	r2,-16(fp)
  80de30:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80de34:	e0fffb17 	ldw	r3,-20(fp)
  80de38:	e0bffc17 	ldw	r2,-16(fp)
  80de3c:	18800015 	stw	r2,0(r3)

  return 0;  
  80de40:	e03fff15 	stw	zero,-4(fp)
  80de44:	e0bfff17 	ldw	r2,-4(fp)
}
  80de48:	e037883a 	mov	sp,fp
  80de4c:	dfc00117 	ldw	ra,4(sp)
  80de50:	df000017 	ldw	fp,0(sp)
  80de54:	dec00204 	addi	sp,sp,8
  80de58:	f800283a 	ret

0080de5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80de5c:	defffd04 	addi	sp,sp,-12
  80de60:	dfc00215 	stw	ra,8(sp)
  80de64:	df000115 	stw	fp,4(sp)
  80de68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80de6c:	00802074 	movhi	r2,129
  80de70:	10845204 	addi	r2,r2,4424
  80de74:	10800017 	ldw	r2,0(r2)
  80de78:	1005003a 	cmpeq	r2,r2,zero
  80de7c:	1000061e 	bne	r2,zero,80de98 <alt_get_errno+0x3c>
  80de80:	00802074 	movhi	r2,129
  80de84:	10845204 	addi	r2,r2,4424
  80de88:	10800017 	ldw	r2,0(r2)
  80de8c:	103ee83a 	callr	r2
  80de90:	e0bfff15 	stw	r2,-4(fp)
  80de94:	00000306 	br	80dea4 <alt_get_errno+0x48>
  80de98:	00802074 	movhi	r2,129
  80de9c:	108b6b04 	addi	r2,r2,11692
  80dea0:	e0bfff15 	stw	r2,-4(fp)
  80dea4:	e0bfff17 	ldw	r2,-4(fp)
}
  80dea8:	e037883a 	mov	sp,fp
  80deac:	dfc00117 	ldw	ra,4(sp)
  80deb0:	df000017 	ldw	fp,0(sp)
  80deb4:	dec00204 	addi	sp,sp,8
  80deb8:	f800283a 	ret

0080debc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80debc:	defffd04 	addi	sp,sp,-12
  80dec0:	dfc00215 	stw	ra,8(sp)
  80dec4:	df000115 	stw	fp,4(sp)
  80dec8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80decc:	00bfff04 	movi	r2,-4
  80ded0:	00c02074 	movhi	r3,129
  80ded4:	18fb6704 	addi	r3,r3,-4708
  80ded8:	1885883a 	add	r2,r3,r2
  80dedc:	e0bfff15 	stw	r2,-4(fp)
  80dee0:	00000606 	br	80defc <_do_ctors+0x40>
        (*ctor) (); 
  80dee4:	e0bfff17 	ldw	r2,-4(fp)
  80dee8:	10800017 	ldw	r2,0(r2)
  80deec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80def0:	e0bfff17 	ldw	r2,-4(fp)
  80def4:	10bfff04 	addi	r2,r2,-4
  80def8:	e0bfff15 	stw	r2,-4(fp)
  80defc:	e0ffff17 	ldw	r3,-4(fp)
  80df00:	00802074 	movhi	r2,129
  80df04:	10bb6604 	addi	r2,r2,-4712
  80df08:	18bff62e 	bgeu	r3,r2,80dee4 <_do_ctors+0x28>
        (*ctor) (); 
}
  80df0c:	e037883a 	mov	sp,fp
  80df10:	dfc00117 	ldw	ra,4(sp)
  80df14:	df000017 	ldw	fp,0(sp)
  80df18:	dec00204 	addi	sp,sp,8
  80df1c:	f800283a 	ret

0080df20 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80df20:	defffd04 	addi	sp,sp,-12
  80df24:	dfc00215 	stw	ra,8(sp)
  80df28:	df000115 	stw	fp,4(sp)
  80df2c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80df30:	00bfff04 	movi	r2,-4
  80df34:	00c02074 	movhi	r3,129
  80df38:	18fb6704 	addi	r3,r3,-4708
  80df3c:	1885883a 	add	r2,r3,r2
  80df40:	e0bfff15 	stw	r2,-4(fp)
  80df44:	00000606 	br	80df60 <_do_dtors+0x40>
        (*dtor) (); 
  80df48:	e0bfff17 	ldw	r2,-4(fp)
  80df4c:	10800017 	ldw	r2,0(r2)
  80df50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80df54:	e0bfff17 	ldw	r2,-4(fp)
  80df58:	10bfff04 	addi	r2,r2,-4
  80df5c:	e0bfff15 	stw	r2,-4(fp)
  80df60:	e0ffff17 	ldw	r3,-4(fp)
  80df64:	00802074 	movhi	r2,129
  80df68:	10bb6704 	addi	r2,r2,-4708
  80df6c:	18bff62e 	bgeu	r3,r2,80df48 <_do_dtors+0x28>
        (*dtor) (); 
}
  80df70:	e037883a 	mov	sp,fp
  80df74:	dfc00117 	ldw	ra,4(sp)
  80df78:	df000017 	ldw	fp,0(sp)
  80df7c:	dec00204 	addi	sp,sp,8
  80df80:	f800283a 	ret

0080df84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80df84:	defff904 	addi	sp,sp,-28
  80df88:	dfc00615 	stw	ra,24(sp)
  80df8c:	df000515 	stw	fp,20(sp)
  80df90:	df000504 	addi	fp,sp,20
  80df94:	e13ffd15 	stw	r4,-12(fp)
  80df98:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80df9c:	e0bffe17 	ldw	r2,-8(fp)
  80dfa0:	10800017 	ldw	r2,0(r2)
  80dfa4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80dfa8:	e13ffd17 	ldw	r4,-12(fp)
  80dfac:	08026ec0 	call	8026ec <strlen>
  80dfb0:	10800044 	addi	r2,r2,1
  80dfb4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80dfb8:	00000d06 	br	80dff0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80dfbc:	e0bffc17 	ldw	r2,-16(fp)
  80dfc0:	11000217 	ldw	r4,8(r2)
  80dfc4:	e1bffb17 	ldw	r6,-20(fp)
  80dfc8:	e17ffd17 	ldw	r5,-12(fp)
  80dfcc:	080e9dc0 	call	80e9dc <memcmp>
  80dfd0:	1004c03a 	cmpne	r2,r2,zero
  80dfd4:	1000031e 	bne	r2,zero,80dfe4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80dfd8:	e0bffc17 	ldw	r2,-16(fp)
  80dfdc:	e0bfff15 	stw	r2,-4(fp)
  80dfe0:	00000706 	br	80e000 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80dfe4:	e0bffc17 	ldw	r2,-16(fp)
  80dfe8:	10800017 	ldw	r2,0(r2)
  80dfec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80dff0:	e0fffe17 	ldw	r3,-8(fp)
  80dff4:	e0bffc17 	ldw	r2,-16(fp)
  80dff8:	10fff01e 	bne	r2,r3,80dfbc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80dffc:	e03fff15 	stw	zero,-4(fp)
  80e000:	e0bfff17 	ldw	r2,-4(fp)
}
  80e004:	e037883a 	mov	sp,fp
  80e008:	dfc00117 	ldw	ra,4(sp)
  80e00c:	df000017 	ldw	fp,0(sp)
  80e010:	dec00204 	addi	sp,sp,8
  80e014:	f800283a 	ret

0080e018 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80e018:	defffa04 	addi	sp,sp,-24
  80e01c:	dfc00515 	stw	ra,20(sp)
  80e020:	df000415 	stw	fp,16(sp)
  80e024:	df000404 	addi	fp,sp,16
  80e028:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80e02c:	00802074 	movhi	r2,129
  80e030:	10844d04 	addi	r2,r2,4404
  80e034:	10800017 	ldw	r2,0(r2)
  80e038:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e03c:	00003306 	br	80e10c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80e040:	e0bffd17 	ldw	r2,-12(fp)
  80e044:	11000217 	ldw	r4,8(r2)
  80e048:	08026ec0 	call	8026ec <strlen>
  80e04c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80e050:	e0bffd17 	ldw	r2,-12(fp)
  80e054:	10c00217 	ldw	r3,8(r2)
  80e058:	e0bffc17 	ldw	r2,-16(fp)
  80e05c:	1885883a 	add	r2,r3,r2
  80e060:	10bfffc4 	addi	r2,r2,-1
  80e064:	10800003 	ldbu	r2,0(r2)
  80e068:	10803fcc 	andi	r2,r2,255
  80e06c:	1080201c 	xori	r2,r2,128
  80e070:	10bfe004 	addi	r2,r2,-128
  80e074:	10800bd8 	cmpnei	r2,r2,47
  80e078:	1000031e 	bne	r2,zero,80e088 <alt_find_file+0x70>
    {
      len -= 1;
  80e07c:	e0bffc17 	ldw	r2,-16(fp)
  80e080:	10bfffc4 	addi	r2,r2,-1
  80e084:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e088:	e0bffc17 	ldw	r2,-16(fp)
  80e08c:	1007883a 	mov	r3,r2
  80e090:	e0bffe17 	ldw	r2,-8(fp)
  80e094:	1885883a 	add	r2,r3,r2
  80e098:	10800003 	ldbu	r2,0(r2)
  80e09c:	10803fcc 	andi	r2,r2,255
  80e0a0:	1080201c 	xori	r2,r2,128
  80e0a4:	10bfe004 	addi	r2,r2,-128
  80e0a8:	10800be0 	cmpeqi	r2,r2,47
  80e0ac:	10000a1e 	bne	r2,zero,80e0d8 <alt_find_file+0xc0>
  80e0b0:	e0bffc17 	ldw	r2,-16(fp)
  80e0b4:	1007883a 	mov	r3,r2
  80e0b8:	e0bffe17 	ldw	r2,-8(fp)
  80e0bc:	1885883a 	add	r2,r3,r2
  80e0c0:	10800003 	ldbu	r2,0(r2)
  80e0c4:	10803fcc 	andi	r2,r2,255
  80e0c8:	1080201c 	xori	r2,r2,128
  80e0cc:	10bfe004 	addi	r2,r2,-128
  80e0d0:	1004c03a 	cmpne	r2,r2,zero
  80e0d4:	10000a1e 	bne	r2,zero,80e100 <alt_find_file+0xe8>
  80e0d8:	e0bffd17 	ldw	r2,-12(fp)
  80e0dc:	11000217 	ldw	r4,8(r2)
  80e0e0:	e1bffc17 	ldw	r6,-16(fp)
  80e0e4:	e17ffe17 	ldw	r5,-8(fp)
  80e0e8:	080e9dc0 	call	80e9dc <memcmp>
  80e0ec:	1004c03a 	cmpne	r2,r2,zero
  80e0f0:	1000031e 	bne	r2,zero,80e100 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80e0f4:	e0bffd17 	ldw	r2,-12(fp)
  80e0f8:	e0bfff15 	stw	r2,-4(fp)
  80e0fc:	00000806 	br	80e120 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80e100:	e0bffd17 	ldw	r2,-12(fp)
  80e104:	10800017 	ldw	r2,0(r2)
  80e108:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e10c:	00c02074 	movhi	r3,129
  80e110:	18c44d04 	addi	r3,r3,4404
  80e114:	e0bffd17 	ldw	r2,-12(fp)
  80e118:	10ffc91e 	bne	r2,r3,80e040 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80e11c:	e03fff15 	stw	zero,-4(fp)
  80e120:	e0bfff17 	ldw	r2,-4(fp)
}
  80e124:	e037883a 	mov	sp,fp
  80e128:	dfc00117 	ldw	ra,4(sp)
  80e12c:	df000017 	ldw	fp,0(sp)
  80e130:	dec00204 	addi	sp,sp,8
  80e134:	f800283a 	ret

0080e138 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80e138:	defffa04 	addi	sp,sp,-24
  80e13c:	dfc00515 	stw	ra,20(sp)
  80e140:	df000415 	stw	fp,16(sp)
  80e144:	dc000315 	stw	r16,12(sp)
  80e148:	df000304 	addi	fp,sp,12
  80e14c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80e150:	00bffa04 	movi	r2,-24
  80e154:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e158:	e03ffe15 	stw	zero,-8(fp)
  80e15c:	00002006 	br	80e1e0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80e160:	e13ffe17 	ldw	r4,-8(fp)
  80e164:	04002074 	movhi	r16,129
  80e168:	843f5604 	addi	r16,r16,-680
  80e16c:	01400304 	movi	r5,12
  80e170:	080a2380 	call	80a238 <__mulsi3>
  80e174:	1405883a 	add	r2,r2,r16
  80e178:	10800017 	ldw	r2,0(r2)
  80e17c:	1004c03a 	cmpne	r2,r2,zero
  80e180:	1000141e 	bne	r2,zero,80e1d4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  80e184:	e13ffe17 	ldw	r4,-8(fp)
  80e188:	04002074 	movhi	r16,129
  80e18c:	843f5604 	addi	r16,r16,-680
  80e190:	01400304 	movi	r5,12
  80e194:	080a2380 	call	80a238 <__mulsi3>
  80e198:	1407883a 	add	r3,r2,r16
  80e19c:	e0bfff17 	ldw	r2,-4(fp)
  80e1a0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80e1a4:	00802074 	movhi	r2,129
  80e1a8:	10845104 	addi	r2,r2,4420
  80e1ac:	10c00017 	ldw	r3,0(r2)
  80e1b0:	e0bffe17 	ldw	r2,-8(fp)
  80e1b4:	1880040e 	bge	r3,r2,80e1c8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  80e1b8:	00c02074 	movhi	r3,129
  80e1bc:	18c45104 	addi	r3,r3,4420
  80e1c0:	e0bffe17 	ldw	r2,-8(fp)
  80e1c4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80e1c8:	e0bffe17 	ldw	r2,-8(fp)
  80e1cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80e1d0:	00000606 	br	80e1ec <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e1d4:	e0bffe17 	ldw	r2,-8(fp)
  80e1d8:	10800044 	addi	r2,r2,1
  80e1dc:	e0bffe15 	stw	r2,-8(fp)
  80e1e0:	e0bffe17 	ldw	r2,-8(fp)
  80e1e4:	10800810 	cmplti	r2,r2,32
  80e1e8:	103fdd1e 	bne	r2,zero,80e160 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80e1ec:	e0bffd17 	ldw	r2,-12(fp)
}
  80e1f0:	e037883a 	mov	sp,fp
  80e1f4:	dfc00217 	ldw	ra,8(sp)
  80e1f8:	df000117 	ldw	fp,4(sp)
  80e1fc:	dc000017 	ldw	r16,0(sp)
  80e200:	dec00304 	addi	sp,sp,12
  80e204:	f800283a 	ret

0080e208 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80e208:	deffff04 	addi	sp,sp,-4
  80e20c:	df000015 	stw	fp,0(sp)
  80e210:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80e214:	e037883a 	mov	sp,fp
  80e218:	df000017 	ldw	fp,0(sp)
  80e21c:	dec00104 	addi	sp,sp,4
  80e220:	f800283a 	ret

0080e224 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e224:	defff904 	addi	sp,sp,-28
  80e228:	dfc00615 	stw	ra,24(sp)
  80e22c:	df000515 	stw	fp,20(sp)
  80e230:	df000504 	addi	fp,sp,20
  80e234:	e13ffc15 	stw	r4,-16(fp)
  80e238:	e17ffd15 	stw	r5,-12(fp)
  80e23c:	e1bffe15 	stw	r6,-8(fp)
  80e240:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e244:	e0800217 	ldw	r2,8(fp)
  80e248:	d8800015 	stw	r2,0(sp)
  80e24c:	e13ffc17 	ldw	r4,-16(fp)
  80e250:	e17ffd17 	ldw	r5,-12(fp)
  80e254:	e1bffe17 	ldw	r6,-8(fp)
  80e258:	e1ffff17 	ldw	r7,-4(fp)
  80e25c:	080e3f80 	call	80e3f8 <alt_iic_isr_register>
}  
  80e260:	e037883a 	mov	sp,fp
  80e264:	dfc00117 	ldw	ra,4(sp)
  80e268:	df000017 	ldw	fp,0(sp)
  80e26c:	dec00204 	addi	sp,sp,8
  80e270:	f800283a 	ret

0080e274 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e274:	defff904 	addi	sp,sp,-28
  80e278:	df000615 	stw	fp,24(sp)
  80e27c:	df000604 	addi	fp,sp,24
  80e280:	e13ffe15 	stw	r4,-8(fp)
  80e284:	e17fff15 	stw	r5,-4(fp)
  80e288:	e0bfff17 	ldw	r2,-4(fp)
  80e28c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e290:	0005303a 	rdctl	r2,status
  80e294:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e298:	e0fffb17 	ldw	r3,-20(fp)
  80e29c:	00bfff84 	movi	r2,-2
  80e2a0:	1884703a 	and	r2,r3,r2
  80e2a4:	1001703a 	wrctl	status,r2
  
  return context;
  80e2a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e2ac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80e2b0:	e0fffc17 	ldw	r3,-16(fp)
  80e2b4:	00800044 	movi	r2,1
  80e2b8:	10c4983a 	sll	r2,r2,r3
  80e2bc:	1007883a 	mov	r3,r2
  80e2c0:	00802074 	movhi	r2,129
  80e2c4:	108b7504 	addi	r2,r2,11732
  80e2c8:	10800017 	ldw	r2,0(r2)
  80e2cc:	1886b03a 	or	r3,r3,r2
  80e2d0:	00802074 	movhi	r2,129
  80e2d4:	108b7504 	addi	r2,r2,11732
  80e2d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e2dc:	00802074 	movhi	r2,129
  80e2e0:	108b7504 	addi	r2,r2,11732
  80e2e4:	10800017 	ldw	r2,0(r2)
  80e2e8:	100170fa 	wrctl	ienable,r2
  80e2ec:	e0bffd17 	ldw	r2,-12(fp)
  80e2f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e2f4:	e0bffa17 	ldw	r2,-24(fp)
  80e2f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e2fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80e300:	e037883a 	mov	sp,fp
  80e304:	df000017 	ldw	fp,0(sp)
  80e308:	dec00104 	addi	sp,sp,4
  80e30c:	f800283a 	ret

0080e310 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e310:	defff904 	addi	sp,sp,-28
  80e314:	df000615 	stw	fp,24(sp)
  80e318:	df000604 	addi	fp,sp,24
  80e31c:	e13ffe15 	stw	r4,-8(fp)
  80e320:	e17fff15 	stw	r5,-4(fp)
  80e324:	e0bfff17 	ldw	r2,-4(fp)
  80e328:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e32c:	0005303a 	rdctl	r2,status
  80e330:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e334:	e0fffb17 	ldw	r3,-20(fp)
  80e338:	00bfff84 	movi	r2,-2
  80e33c:	1884703a 	and	r2,r3,r2
  80e340:	1001703a 	wrctl	status,r2
  
  return context;
  80e344:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e348:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80e34c:	e0fffc17 	ldw	r3,-16(fp)
  80e350:	00800044 	movi	r2,1
  80e354:	10c4983a 	sll	r2,r2,r3
  80e358:	0084303a 	nor	r2,zero,r2
  80e35c:	1007883a 	mov	r3,r2
  80e360:	00802074 	movhi	r2,129
  80e364:	108b7504 	addi	r2,r2,11732
  80e368:	10800017 	ldw	r2,0(r2)
  80e36c:	1886703a 	and	r3,r3,r2
  80e370:	00802074 	movhi	r2,129
  80e374:	108b7504 	addi	r2,r2,11732
  80e378:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e37c:	00802074 	movhi	r2,129
  80e380:	108b7504 	addi	r2,r2,11732
  80e384:	10800017 	ldw	r2,0(r2)
  80e388:	100170fa 	wrctl	ienable,r2
  80e38c:	e0bffd17 	ldw	r2,-12(fp)
  80e390:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e394:	e0bffa17 	ldw	r2,-24(fp)
  80e398:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e39c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80e3a0:	e037883a 	mov	sp,fp
  80e3a4:	df000017 	ldw	fp,0(sp)
  80e3a8:	dec00104 	addi	sp,sp,4
  80e3ac:	f800283a 	ret

0080e3b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e3b0:	defffc04 	addi	sp,sp,-16
  80e3b4:	df000315 	stw	fp,12(sp)
  80e3b8:	df000304 	addi	fp,sp,12
  80e3bc:	e13ffe15 	stw	r4,-8(fp)
  80e3c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e3c4:	000530fa 	rdctl	r2,ienable
  80e3c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e3cc:	e0ffff17 	ldw	r3,-4(fp)
  80e3d0:	00800044 	movi	r2,1
  80e3d4:	10c4983a 	sll	r2,r2,r3
  80e3d8:	1007883a 	mov	r3,r2
  80e3dc:	e0bffd17 	ldw	r2,-12(fp)
  80e3e0:	1884703a 	and	r2,r3,r2
  80e3e4:	1004c03a 	cmpne	r2,r2,zero
}
  80e3e8:	e037883a 	mov	sp,fp
  80e3ec:	df000017 	ldw	fp,0(sp)
  80e3f0:	dec00104 	addi	sp,sp,4
  80e3f4:	f800283a 	ret

0080e3f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e3f8:	defff404 	addi	sp,sp,-48
  80e3fc:	dfc00b15 	stw	ra,44(sp)
  80e400:	df000a15 	stw	fp,40(sp)
  80e404:	df000a04 	addi	fp,sp,40
  80e408:	e13ffb15 	stw	r4,-20(fp)
  80e40c:	e17ffc15 	stw	r5,-16(fp)
  80e410:	e1bffd15 	stw	r6,-12(fp)
  80e414:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80e418:	00bffa84 	movi	r2,-22
  80e41c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e420:	e0bffc17 	ldw	r2,-16(fp)
  80e424:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e428:	e0bff917 	ldw	r2,-28(fp)
  80e42c:	10800808 	cmpgei	r2,r2,32
  80e430:	1000291e 	bne	r2,zero,80e4d8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e434:	0005303a 	rdctl	r2,status
  80e438:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e43c:	e0fff717 	ldw	r3,-36(fp)
  80e440:	00bfff84 	movi	r2,-2
  80e444:	1884703a 	and	r2,r3,r2
  80e448:	1001703a 	wrctl	status,r2
  
  return context;
  80e44c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e450:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80e454:	e0bff917 	ldw	r2,-28(fp)
  80e458:	00c02074 	movhi	r3,129
  80e45c:	18cb8204 	addi	r3,r3,11784
  80e460:	100490fa 	slli	r2,r2,3
  80e464:	10c7883a 	add	r3,r2,r3
  80e468:	e0bffd17 	ldw	r2,-12(fp)
  80e46c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80e470:	e0bff917 	ldw	r2,-28(fp)
  80e474:	00c02074 	movhi	r3,129
  80e478:	18cb8204 	addi	r3,r3,11784
  80e47c:	100490fa 	slli	r2,r2,3
  80e480:	10c5883a 	add	r2,r2,r3
  80e484:	10c00104 	addi	r3,r2,4
  80e488:	e0bffe17 	ldw	r2,-8(fp)
  80e48c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80e490:	e0bffd17 	ldw	r2,-12(fp)
  80e494:	1005003a 	cmpeq	r2,r2,zero
  80e498:	1000051e 	bne	r2,zero,80e4b0 <alt_iic_isr_register+0xb8>
  80e49c:	e17ff917 	ldw	r5,-28(fp)
  80e4a0:	e13ffb17 	ldw	r4,-20(fp)
  80e4a4:	080e2740 	call	80e274 <alt_ic_irq_enable>
  80e4a8:	e0bfff15 	stw	r2,-4(fp)
  80e4ac:	00000406 	br	80e4c0 <alt_iic_isr_register+0xc8>
  80e4b0:	e17ff917 	ldw	r5,-28(fp)
  80e4b4:	e13ffb17 	ldw	r4,-20(fp)
  80e4b8:	080e3100 	call	80e310 <alt_ic_irq_disable>
  80e4bc:	e0bfff15 	stw	r2,-4(fp)
  80e4c0:	e0bfff17 	ldw	r2,-4(fp)
  80e4c4:	e0bffa15 	stw	r2,-24(fp)
  80e4c8:	e0bff817 	ldw	r2,-32(fp)
  80e4cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e4d0:	e0bff617 	ldw	r2,-40(fp)
  80e4d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80e4d8:	e0bffa17 	ldw	r2,-24(fp)
}
  80e4dc:	e037883a 	mov	sp,fp
  80e4e0:	dfc00117 	ldw	ra,4(sp)
  80e4e4:	df000017 	ldw	fp,0(sp)
  80e4e8:	dec00204 	addi	sp,sp,8
  80e4ec:	f800283a 	ret

0080e4f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80e4f0:	defff804 	addi	sp,sp,-32
  80e4f4:	dfc00715 	stw	ra,28(sp)
  80e4f8:	df000615 	stw	fp,24(sp)
  80e4fc:	dc000515 	stw	r16,20(sp)
  80e500:	df000504 	addi	fp,sp,20
  80e504:	e13ffc15 	stw	r4,-16(fp)
  80e508:	e17ffd15 	stw	r5,-12(fp)
  80e50c:	e1bffe15 	stw	r6,-8(fp)
  80e510:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80e514:	e13ffd17 	ldw	r4,-12(fp)
  80e518:	e17ffe17 	ldw	r5,-8(fp)
  80e51c:	e1bfff17 	ldw	r6,-4(fp)
  80e520:	080b0f40 	call	80b0f4 <open>
  80e524:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80e528:	e0bffb17 	ldw	r2,-20(fp)
  80e52c:	1004803a 	cmplt	r2,r2,zero
  80e530:	10001f1e 	bne	r2,zero,80e5b0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80e534:	e13ffb17 	ldw	r4,-20(fp)
  80e538:	04002074 	movhi	r16,129
  80e53c:	843f5604 	addi	r16,r16,-680
  80e540:	01400304 	movi	r5,12
  80e544:	080a2380 	call	80a238 <__mulsi3>
  80e548:	1405883a 	add	r2,r2,r16
  80e54c:	10c00017 	ldw	r3,0(r2)
  80e550:	e0bffc17 	ldw	r2,-16(fp)
  80e554:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80e558:	e13ffb17 	ldw	r4,-20(fp)
  80e55c:	04002074 	movhi	r16,129
  80e560:	843f5604 	addi	r16,r16,-680
  80e564:	01400304 	movi	r5,12
  80e568:	080a2380 	call	80a238 <__mulsi3>
  80e56c:	1405883a 	add	r2,r2,r16
  80e570:	10800104 	addi	r2,r2,4
  80e574:	10c00017 	ldw	r3,0(r2)
  80e578:	e0bffc17 	ldw	r2,-16(fp)
  80e57c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80e580:	e13ffb17 	ldw	r4,-20(fp)
  80e584:	04002074 	movhi	r16,129
  80e588:	843f5604 	addi	r16,r16,-680
  80e58c:	01400304 	movi	r5,12
  80e590:	080a2380 	call	80a238 <__mulsi3>
  80e594:	1405883a 	add	r2,r2,r16
  80e598:	10800204 	addi	r2,r2,8
  80e59c:	10c00017 	ldw	r3,0(r2)
  80e5a0:	e0bffc17 	ldw	r2,-16(fp)
  80e5a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80e5a8:	e13ffb17 	ldw	r4,-20(fp)
  80e5ac:	080b4640 	call	80b464 <alt_release_fd>
  }
} 
  80e5b0:	e037883a 	mov	sp,fp
  80e5b4:	dfc00217 	ldw	ra,8(sp)
  80e5b8:	df000117 	ldw	fp,4(sp)
  80e5bc:	dc000017 	ldw	r16,0(sp)
  80e5c0:	dec00304 	addi	sp,sp,12
  80e5c4:	f800283a 	ret

0080e5c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80e5c8:	defffb04 	addi	sp,sp,-20
  80e5cc:	dfc00415 	stw	ra,16(sp)
  80e5d0:	df000315 	stw	fp,12(sp)
  80e5d4:	df000304 	addi	fp,sp,12
  80e5d8:	e13ffd15 	stw	r4,-12(fp)
  80e5dc:	e17ffe15 	stw	r5,-8(fp)
  80e5e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80e5e4:	01002074 	movhi	r4,129
  80e5e8:	213f5904 	addi	r4,r4,-668
  80e5ec:	e17ffd17 	ldw	r5,-12(fp)
  80e5f0:	01800044 	movi	r6,1
  80e5f4:	01c07fc4 	movi	r7,511
  80e5f8:	080e4f00 	call	80e4f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80e5fc:	01002074 	movhi	r4,129
  80e600:	213f5604 	addi	r4,r4,-680
  80e604:	e17ffe17 	ldw	r5,-8(fp)
  80e608:	000d883a 	mov	r6,zero
  80e60c:	01c07fc4 	movi	r7,511
  80e610:	080e4f00 	call	80e4f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80e614:	01002074 	movhi	r4,129
  80e618:	213f5c04 	addi	r4,r4,-656
  80e61c:	e17fff17 	ldw	r5,-4(fp)
  80e620:	01800044 	movi	r6,1
  80e624:	01c07fc4 	movi	r7,511
  80e628:	080e4f00 	call	80e4f0 <alt_open_fd>
}  
  80e62c:	e037883a 	mov	sp,fp
  80e630:	dfc00117 	ldw	ra,4(sp)
  80e634:	df000017 	ldw	fp,0(sp)
  80e638:	dec00204 	addi	sp,sp,8
  80e63c:	f800283a 	ret

0080e640 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80e640:	defffa04 	addi	sp,sp,-24
  80e644:	df000515 	stw	fp,20(sp)
  80e648:	df000504 	addi	fp,sp,20
  80e64c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e650:	0005303a 	rdctl	r2,status
  80e654:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e658:	e0fffd17 	ldw	r3,-12(fp)
  80e65c:	00bfff84 	movi	r2,-2
  80e660:	1884703a 	and	r2,r3,r2
  80e664:	1001703a 	wrctl	status,r2
  
  return context;
  80e668:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80e66c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80e670:	e0bfff17 	ldw	r2,-4(fp)
  80e674:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80e678:	e0bffc17 	ldw	r2,-16(fp)
  80e67c:	10c00017 	ldw	r3,0(r2)
  80e680:	e0bffc17 	ldw	r2,-16(fp)
  80e684:	10800117 	ldw	r2,4(r2)
  80e688:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80e68c:	e0bffc17 	ldw	r2,-16(fp)
  80e690:	10c00117 	ldw	r3,4(r2)
  80e694:	e0bffc17 	ldw	r2,-16(fp)
  80e698:	10800017 	ldw	r2,0(r2)
  80e69c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e6a0:	e0fffc17 	ldw	r3,-16(fp)
  80e6a4:	e0bffc17 	ldw	r2,-16(fp)
  80e6a8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80e6ac:	e0fffc17 	ldw	r3,-16(fp)
  80e6b0:	e0bffc17 	ldw	r2,-16(fp)
  80e6b4:	18800015 	stw	r2,0(r3)
  80e6b8:	e0bffe17 	ldw	r2,-8(fp)
  80e6bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e6c0:	e0bffb17 	ldw	r2,-20(fp)
  80e6c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80e6c8:	e037883a 	mov	sp,fp
  80e6cc:	df000017 	ldw	fp,0(sp)
  80e6d0:	dec00104 	addi	sp,sp,4
  80e6d4:	f800283a 	ret

0080e6d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80e6d8:	defffb04 	addi	sp,sp,-20
  80e6dc:	dfc00415 	stw	ra,16(sp)
  80e6e0:	df000315 	stw	fp,12(sp)
  80e6e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80e6e8:	d0a00f17 	ldw	r2,-32708(gp)
  80e6ec:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80e6f0:	d0a73017 	ldw	r2,-25408(gp)
  80e6f4:	10800044 	addi	r2,r2,1
  80e6f8:	d0a73015 	stw	r2,-25408(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e6fc:	00003106 	br	80e7c4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80e700:	e0bffe17 	ldw	r2,-8(fp)
  80e704:	10800017 	ldw	r2,0(r2)
  80e708:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80e70c:	e0bffe17 	ldw	r2,-8(fp)
  80e710:	10800403 	ldbu	r2,16(r2)
  80e714:	10803fcc 	andi	r2,r2,255
  80e718:	1005003a 	cmpeq	r2,r2,zero
  80e71c:	1000051e 	bne	r2,zero,80e734 <alt_tick+0x5c>
  80e720:	d0a73017 	ldw	r2,-25408(gp)
  80e724:	1004c03a 	cmpne	r2,r2,zero
  80e728:	1000021e 	bne	r2,zero,80e734 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80e72c:	e0bffe17 	ldw	r2,-8(fp)
  80e730:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80e734:	e0bffe17 	ldw	r2,-8(fp)
  80e738:	10c00217 	ldw	r3,8(r2)
  80e73c:	d0a73017 	ldw	r2,-25408(gp)
  80e740:	10c01e36 	bltu	r2,r3,80e7bc <alt_tick+0xe4>
  80e744:	e0bffe17 	ldw	r2,-8(fp)
  80e748:	10800403 	ldbu	r2,16(r2)
  80e74c:	10803fcc 	andi	r2,r2,255
  80e750:	1004c03a 	cmpne	r2,r2,zero
  80e754:	1000191e 	bne	r2,zero,80e7bc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80e758:	e0bffe17 	ldw	r2,-8(fp)
  80e75c:	10c00317 	ldw	r3,12(r2)
  80e760:	e0bffe17 	ldw	r2,-8(fp)
  80e764:	11000517 	ldw	r4,20(r2)
  80e768:	183ee83a 	callr	r3
  80e76c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80e770:	e0bffd17 	ldw	r2,-12(fp)
  80e774:	1004c03a 	cmpne	r2,r2,zero
  80e778:	1000031e 	bne	r2,zero,80e788 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80e77c:	e13ffe17 	ldw	r4,-8(fp)
  80e780:	080e6400 	call	80e640 <alt_alarm_stop>
  80e784:	00000d06 	br	80e7bc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80e788:	e0bffe17 	ldw	r2,-8(fp)
  80e78c:	10c00217 	ldw	r3,8(r2)
  80e790:	e0bffd17 	ldw	r2,-12(fp)
  80e794:	1887883a 	add	r3,r3,r2
  80e798:	e0bffe17 	ldw	r2,-8(fp)
  80e79c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80e7a0:	e0bffe17 	ldw	r2,-8(fp)
  80e7a4:	10c00217 	ldw	r3,8(r2)
  80e7a8:	d0a73017 	ldw	r2,-25408(gp)
  80e7ac:	1880032e 	bgeu	r3,r2,80e7bc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80e7b0:	e0fffe17 	ldw	r3,-8(fp)
  80e7b4:	00800044 	movi	r2,1
  80e7b8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80e7bc:	e0bfff17 	ldw	r2,-4(fp)
  80e7c0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e7c4:	d0e00f04 	addi	r3,gp,-32708
  80e7c8:	e0bffe17 	ldw	r2,-8(fp)
  80e7cc:	10ffcc1e 	bne	r2,r3,80e700 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80e7d0:	e037883a 	mov	sp,fp
  80e7d4:	dfc00117 	ldw	ra,4(sp)
  80e7d8:	df000017 	ldw	fp,0(sp)
  80e7dc:	dec00204 	addi	sp,sp,8
  80e7e0:	f800283a 	ret

0080e7e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80e7e4:	defffd04 	addi	sp,sp,-12
  80e7e8:	dfc00215 	stw	ra,8(sp)
  80e7ec:	df000115 	stw	fp,4(sp)
  80e7f0:	df000104 	addi	fp,sp,4
  80e7f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80e7f8:	e13fff17 	ldw	r4,-4(fp)
  80e7fc:	080e8340 	call	80e834 <alt_busy_sleep>
}
  80e800:	e037883a 	mov	sp,fp
  80e804:	dfc00117 	ldw	ra,4(sp)
  80e808:	df000017 	ldw	fp,0(sp)
  80e80c:	dec00204 	addi	sp,sp,8
  80e810:	f800283a 	ret

0080e814 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80e814:	deffff04 	addi	sp,sp,-4
  80e818:	df000015 	stw	fp,0(sp)
  80e81c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80e820:	000170fa 	wrctl	ienable,zero
}
  80e824:	e037883a 	mov	sp,fp
  80e828:	df000017 	ldw	fp,0(sp)
  80e82c:	dec00104 	addi	sp,sp,4
  80e830:	f800283a 	ret

0080e834 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80e834:	defffa04 	addi	sp,sp,-24
  80e838:	dfc00515 	stw	ra,20(sp)
  80e83c:	df000415 	stw	fp,16(sp)
  80e840:	df000404 	addi	fp,sp,16
  80e844:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  80e848:	00800244 	movi	r2,9
  80e84c:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80e850:	e13ffc17 	ldw	r4,-16(fp)
  80e854:	014003f4 	movhi	r5,15
  80e858:	29509004 	addi	r5,r5,16960
  80e85c:	080a2380 	call	80a238 <__mulsi3>
  80e860:	100b883a 	mov	r5,r2
  80e864:	0100bef4 	movhi	r4,763
  80e868:	213c2004 	addi	r4,r4,-3968
  80e86c:	080a2280 	call	80a228 <__udivsi3>
  80e870:	100b883a 	mov	r5,r2
  80e874:	01200034 	movhi	r4,32768
  80e878:	213fffc4 	addi	r4,r4,-1
  80e87c:	080a2280 	call	80a228 <__udivsi3>
  80e880:	100b883a 	mov	r5,r2
  80e884:	e13fff17 	ldw	r4,-4(fp)
  80e888:	080a2280 	call	80a228 <__udivsi3>
  80e88c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80e890:	e0bffd17 	ldw	r2,-12(fp)
  80e894:	1005003a 	cmpeq	r2,r2,zero
  80e898:	10002a1e 	bne	r2,zero,80e944 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  80e89c:	e03ffe15 	stw	zero,-8(fp)
  80e8a0:	00001706 	br	80e900 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80e8a4:	00a00034 	movhi	r2,32768
  80e8a8:	10bfffc4 	addi	r2,r2,-1
  80e8ac:	10bfffc4 	addi	r2,r2,-1
  80e8b0:	103ffe1e 	bne	r2,zero,80e8ac <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80e8b4:	e13ffc17 	ldw	r4,-16(fp)
  80e8b8:	014003f4 	movhi	r5,15
  80e8bc:	29509004 	addi	r5,r5,16960
  80e8c0:	080a2380 	call	80a238 <__mulsi3>
  80e8c4:	100b883a 	mov	r5,r2
  80e8c8:	0100bef4 	movhi	r4,763
  80e8cc:	213c2004 	addi	r4,r4,-3968
  80e8d0:	080a2280 	call	80a228 <__udivsi3>
  80e8d4:	100b883a 	mov	r5,r2
  80e8d8:	01200034 	movhi	r4,32768
  80e8dc:	213fffc4 	addi	r4,r4,-1
  80e8e0:	080a2280 	call	80a228 <__udivsi3>
  80e8e4:	1007883a 	mov	r3,r2
  80e8e8:	e0bfff17 	ldw	r2,-4(fp)
  80e8ec:	10c5c83a 	sub	r2,r2,r3
  80e8f0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80e8f4:	e0bffe17 	ldw	r2,-8(fp)
  80e8f8:	10800044 	addi	r2,r2,1
  80e8fc:	e0bffe15 	stw	r2,-8(fp)
  80e900:	e0fffe17 	ldw	r3,-8(fp)
  80e904:	e0bffd17 	ldw	r2,-12(fp)
  80e908:	18bfe616 	blt	r3,r2,80e8a4 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e90c:	e13ffc17 	ldw	r4,-16(fp)
  80e910:	014003f4 	movhi	r5,15
  80e914:	29509004 	addi	r5,r5,16960
  80e918:	080a2380 	call	80a238 <__mulsi3>
  80e91c:	100b883a 	mov	r5,r2
  80e920:	0100bef4 	movhi	r4,763
  80e924:	213c2004 	addi	r4,r4,-3968
  80e928:	080a2280 	call	80a228 <__udivsi3>
  80e92c:	1009883a 	mov	r4,r2
  80e930:	e17fff17 	ldw	r5,-4(fp)
  80e934:	080a2380 	call	80a238 <__mulsi3>
  80e938:	10bfffc4 	addi	r2,r2,-1
  80e93c:	103ffe1e 	bne	r2,zero,80e938 <alt_busy_sleep+0x104>
  80e940:	00000d06 	br	80e978 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e944:	e13ffc17 	ldw	r4,-16(fp)
  80e948:	014003f4 	movhi	r5,15
  80e94c:	29509004 	addi	r5,r5,16960
  80e950:	080a2380 	call	80a238 <__mulsi3>
  80e954:	100b883a 	mov	r5,r2
  80e958:	0100bef4 	movhi	r4,763
  80e95c:	213c2004 	addi	r4,r4,-3968
  80e960:	080a2280 	call	80a228 <__udivsi3>
  80e964:	1009883a 	mov	r4,r2
  80e968:	e17fff17 	ldw	r5,-4(fp)
  80e96c:	080a2380 	call	80a238 <__mulsi3>
  80e970:	10bfffc4 	addi	r2,r2,-1
  80e974:	00bffe16 	blt	zero,r2,80e970 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80e978:	0005883a 	mov	r2,zero
}
  80e97c:	e037883a 	mov	sp,fp
  80e980:	dfc00117 	ldw	ra,4(sp)
  80e984:	df000017 	ldw	fp,0(sp)
  80e988:	dec00204 	addi	sp,sp,8
  80e98c:	f800283a 	ret

0080e990 <atexit>:
  80e990:	200b883a 	mov	r5,r4
  80e994:	000d883a 	mov	r6,zero
  80e998:	0009883a 	mov	r4,zero
  80e99c:	000f883a 	mov	r7,zero
  80e9a0:	080ea501 	jmpi	80ea50 <__register_exitproc>

0080e9a4 <exit>:
  80e9a4:	defffe04 	addi	sp,sp,-8
  80e9a8:	000b883a 	mov	r5,zero
  80e9ac:	dc000015 	stw	r16,0(sp)
  80e9b0:	dfc00115 	stw	ra,4(sp)
  80e9b4:	2021883a 	mov	r16,r4
  80e9b8:	080eb880 	call	80eb88 <__call_exitprocs>
  80e9bc:	00802074 	movhi	r2,129
  80e9c0:	10844804 	addi	r2,r2,4384
  80e9c4:	11000017 	ldw	r4,0(r2)
  80e9c8:	20800f17 	ldw	r2,60(r4)
  80e9cc:	10000126 	beq	r2,zero,80e9d4 <exit+0x30>
  80e9d0:	103ee83a 	callr	r2
  80e9d4:	8009883a 	mov	r4,r16
  80e9d8:	080ed780 	call	80ed78 <_exit>

0080e9dc <memcmp>:
  80e9dc:	00c000c4 	movi	r3,3
  80e9e0:	1980032e 	bgeu	r3,r6,80e9f0 <memcmp+0x14>
  80e9e4:	2144b03a 	or	r2,r4,r5
  80e9e8:	10c4703a 	and	r2,r2,r3
  80e9ec:	10000f26 	beq	r2,zero,80ea2c <memcmp+0x50>
  80e9f0:	31ffffc4 	addi	r7,r6,-1
  80e9f4:	3000061e 	bne	r6,zero,80ea10 <memcmp+0x34>
  80e9f8:	00000a06 	br	80ea24 <memcmp+0x48>
  80e9fc:	39ffffc4 	addi	r7,r7,-1
  80ea00:	00bfffc4 	movi	r2,-1
  80ea04:	21000044 	addi	r4,r4,1
  80ea08:	29400044 	addi	r5,r5,1
  80ea0c:	38800526 	beq	r7,r2,80ea24 <memcmp+0x48>
  80ea10:	20c00003 	ldbu	r3,0(r4)
  80ea14:	28800003 	ldbu	r2,0(r5)
  80ea18:	18bff826 	beq	r3,r2,80e9fc <memcmp+0x20>
  80ea1c:	1885c83a 	sub	r2,r3,r2
  80ea20:	f800283a 	ret
  80ea24:	0005883a 	mov	r2,zero
  80ea28:	f800283a 	ret
  80ea2c:	180f883a 	mov	r7,r3
  80ea30:	20c00017 	ldw	r3,0(r4)
  80ea34:	28800017 	ldw	r2,0(r5)
  80ea38:	18bfed1e 	bne	r3,r2,80e9f0 <memcmp+0x14>
  80ea3c:	31bfff04 	addi	r6,r6,-4
  80ea40:	21000104 	addi	r4,r4,4
  80ea44:	29400104 	addi	r5,r5,4
  80ea48:	39bff936 	bltu	r7,r6,80ea30 <memcmp+0x54>
  80ea4c:	003fe806 	br	80e9f0 <memcmp+0x14>

0080ea50 <__register_exitproc>:
  80ea50:	defffa04 	addi	sp,sp,-24
  80ea54:	00802074 	movhi	r2,129
  80ea58:	10844804 	addi	r2,r2,4384
  80ea5c:	dc000015 	stw	r16,0(sp)
  80ea60:	14000017 	ldw	r16,0(r2)
  80ea64:	dd000415 	stw	r20,16(sp)
  80ea68:	2829883a 	mov	r20,r5
  80ea6c:	81405217 	ldw	r5,328(r16)
  80ea70:	dcc00315 	stw	r19,12(sp)
  80ea74:	dc800215 	stw	r18,8(sp)
  80ea78:	dc400115 	stw	r17,4(sp)
  80ea7c:	dfc00515 	stw	ra,20(sp)
  80ea80:	2023883a 	mov	r17,r4
  80ea84:	3027883a 	mov	r19,r6
  80ea88:	3825883a 	mov	r18,r7
  80ea8c:	28002526 	beq	r5,zero,80eb24 <__register_exitproc+0xd4>
  80ea90:	29000117 	ldw	r4,4(r5)
  80ea94:	008007c4 	movi	r2,31
  80ea98:	11002716 	blt	r2,r4,80eb38 <__register_exitproc+0xe8>
  80ea9c:	8800101e 	bne	r17,zero,80eae0 <__register_exitproc+0x90>
  80eaa0:	2105883a 	add	r2,r4,r4
  80eaa4:	1085883a 	add	r2,r2,r2
  80eaa8:	20c00044 	addi	r3,r4,1
  80eaac:	1145883a 	add	r2,r2,r5
  80eab0:	0009883a 	mov	r4,zero
  80eab4:	15000215 	stw	r20,8(r2)
  80eab8:	28c00115 	stw	r3,4(r5)
  80eabc:	2005883a 	mov	r2,r4
  80eac0:	dfc00517 	ldw	ra,20(sp)
  80eac4:	dd000417 	ldw	r20,16(sp)
  80eac8:	dcc00317 	ldw	r19,12(sp)
  80eacc:	dc800217 	ldw	r18,8(sp)
  80ead0:	dc400117 	ldw	r17,4(sp)
  80ead4:	dc000017 	ldw	r16,0(sp)
  80ead8:	dec00604 	addi	sp,sp,24
  80eadc:	f800283a 	ret
  80eae0:	29802204 	addi	r6,r5,136
  80eae4:	00800044 	movi	r2,1
  80eae8:	110e983a 	sll	r7,r2,r4
  80eaec:	30c04017 	ldw	r3,256(r6)
  80eaf0:	2105883a 	add	r2,r4,r4
  80eaf4:	1085883a 	add	r2,r2,r2
  80eaf8:	1185883a 	add	r2,r2,r6
  80eafc:	19c6b03a 	or	r3,r3,r7
  80eb00:	14802015 	stw	r18,128(r2)
  80eb04:	14c00015 	stw	r19,0(r2)
  80eb08:	00800084 	movi	r2,2
  80eb0c:	30c04015 	stw	r3,256(r6)
  80eb10:	88bfe31e 	bne	r17,r2,80eaa0 <__register_exitproc+0x50>
  80eb14:	30804117 	ldw	r2,260(r6)
  80eb18:	11c4b03a 	or	r2,r2,r7
  80eb1c:	30804115 	stw	r2,260(r6)
  80eb20:	003fdf06 	br	80eaa0 <__register_exitproc+0x50>
  80eb24:	00802074 	movhi	r2,129
  80eb28:	108bc204 	addi	r2,r2,12040
  80eb2c:	100b883a 	mov	r5,r2
  80eb30:	80805215 	stw	r2,328(r16)
  80eb34:	003fd606 	br	80ea90 <__register_exitproc+0x40>
  80eb38:	00800034 	movhi	r2,0
  80eb3c:	10800004 	addi	r2,r2,0
  80eb40:	1000021e 	bne	r2,zero,80eb4c <__register_exitproc+0xfc>
  80eb44:	013fffc4 	movi	r4,-1
  80eb48:	003fdc06 	br	80eabc <__register_exitproc+0x6c>
  80eb4c:	01006404 	movi	r4,400
  80eb50:	103ee83a 	callr	r2
  80eb54:	1007883a 	mov	r3,r2
  80eb58:	103ffa26 	beq	r2,zero,80eb44 <__register_exitproc+0xf4>
  80eb5c:	80805217 	ldw	r2,328(r16)
  80eb60:	180b883a 	mov	r5,r3
  80eb64:	18000115 	stw	zero,4(r3)
  80eb68:	18800015 	stw	r2,0(r3)
  80eb6c:	80c05215 	stw	r3,328(r16)
  80eb70:	18006215 	stw	zero,392(r3)
  80eb74:	18006315 	stw	zero,396(r3)
  80eb78:	0009883a 	mov	r4,zero
  80eb7c:	883fc826 	beq	r17,zero,80eaa0 <__register_exitproc+0x50>
  80eb80:	003fd706 	br	80eae0 <__register_exitproc+0x90>

0080eb84 <register_fini>:
  80eb84:	f800283a 	ret

0080eb88 <__call_exitprocs>:
  80eb88:	00802074 	movhi	r2,129
  80eb8c:	10844804 	addi	r2,r2,4384
  80eb90:	10800017 	ldw	r2,0(r2)
  80eb94:	defff304 	addi	sp,sp,-52
  80eb98:	df000b15 	stw	fp,44(sp)
  80eb9c:	d8800115 	stw	r2,4(sp)
  80eba0:	00800034 	movhi	r2,0
  80eba4:	10800004 	addi	r2,r2,0
  80eba8:	1005003a 	cmpeq	r2,r2,zero
  80ebac:	d8800215 	stw	r2,8(sp)
  80ebb0:	d8800117 	ldw	r2,4(sp)
  80ebb4:	dd400815 	stw	r21,32(sp)
  80ebb8:	dd000715 	stw	r20,28(sp)
  80ebbc:	10805204 	addi	r2,r2,328
  80ebc0:	dfc00c15 	stw	ra,48(sp)
  80ebc4:	ddc00a15 	stw	r23,40(sp)
  80ebc8:	dd800915 	stw	r22,36(sp)
  80ebcc:	dcc00615 	stw	r19,24(sp)
  80ebd0:	dc800515 	stw	r18,20(sp)
  80ebd4:	dc400415 	stw	r17,16(sp)
  80ebd8:	dc000315 	stw	r16,12(sp)
  80ebdc:	282b883a 	mov	r21,r5
  80ebe0:	2039883a 	mov	fp,r4
  80ebe4:	d8800015 	stw	r2,0(sp)
  80ebe8:	2829003a 	cmpeq	r20,r5,zero
  80ebec:	d8800117 	ldw	r2,4(sp)
  80ebf0:	14405217 	ldw	r17,328(r2)
  80ebf4:	88001026 	beq	r17,zero,80ec38 <__call_exitprocs+0xb0>
  80ebf8:	ddc00017 	ldw	r23,0(sp)
  80ebfc:	88800117 	ldw	r2,4(r17)
  80ec00:	8c802204 	addi	r18,r17,136
  80ec04:	143fffc4 	addi	r16,r2,-1
  80ec08:	80000916 	blt	r16,zero,80ec30 <__call_exitprocs+0xa8>
  80ec0c:	05bfffc4 	movi	r22,-1
  80ec10:	a000151e 	bne	r20,zero,80ec68 <__call_exitprocs+0xe0>
  80ec14:	8409883a 	add	r4,r16,r16
  80ec18:	2105883a 	add	r2,r4,r4
  80ec1c:	1485883a 	add	r2,r2,r18
  80ec20:	10c02017 	ldw	r3,128(r2)
  80ec24:	a8c01126 	beq	r21,r3,80ec6c <__call_exitprocs+0xe4>
  80ec28:	843fffc4 	addi	r16,r16,-1
  80ec2c:	85bff81e 	bne	r16,r22,80ec10 <__call_exitprocs+0x88>
  80ec30:	d8800217 	ldw	r2,8(sp)
  80ec34:	10003126 	beq	r2,zero,80ecfc <__call_exitprocs+0x174>
  80ec38:	dfc00c17 	ldw	ra,48(sp)
  80ec3c:	df000b17 	ldw	fp,44(sp)
  80ec40:	ddc00a17 	ldw	r23,40(sp)
  80ec44:	dd800917 	ldw	r22,36(sp)
  80ec48:	dd400817 	ldw	r21,32(sp)
  80ec4c:	dd000717 	ldw	r20,28(sp)
  80ec50:	dcc00617 	ldw	r19,24(sp)
  80ec54:	dc800517 	ldw	r18,20(sp)
  80ec58:	dc400417 	ldw	r17,16(sp)
  80ec5c:	dc000317 	ldw	r16,12(sp)
  80ec60:	dec00d04 	addi	sp,sp,52
  80ec64:	f800283a 	ret
  80ec68:	8409883a 	add	r4,r16,r16
  80ec6c:	88c00117 	ldw	r3,4(r17)
  80ec70:	2105883a 	add	r2,r4,r4
  80ec74:	1445883a 	add	r2,r2,r17
  80ec78:	18ffffc4 	addi	r3,r3,-1
  80ec7c:	11800217 	ldw	r6,8(r2)
  80ec80:	1c001526 	beq	r3,r16,80ecd8 <__call_exitprocs+0x150>
  80ec84:	10000215 	stw	zero,8(r2)
  80ec88:	303fe726 	beq	r6,zero,80ec28 <__call_exitprocs+0xa0>
  80ec8c:	00c00044 	movi	r3,1
  80ec90:	1c06983a 	sll	r3,r3,r16
  80ec94:	90804017 	ldw	r2,256(r18)
  80ec98:	8cc00117 	ldw	r19,4(r17)
  80ec9c:	1884703a 	and	r2,r3,r2
  80eca0:	10001426 	beq	r2,zero,80ecf4 <__call_exitprocs+0x16c>
  80eca4:	90804117 	ldw	r2,260(r18)
  80eca8:	1884703a 	and	r2,r3,r2
  80ecac:	10000c1e 	bne	r2,zero,80ece0 <__call_exitprocs+0x158>
  80ecb0:	2105883a 	add	r2,r4,r4
  80ecb4:	1485883a 	add	r2,r2,r18
  80ecb8:	11400017 	ldw	r5,0(r2)
  80ecbc:	e009883a 	mov	r4,fp
  80ecc0:	303ee83a 	callr	r6
  80ecc4:	88800117 	ldw	r2,4(r17)
  80ecc8:	98bfc81e 	bne	r19,r2,80ebec <__call_exitprocs+0x64>
  80eccc:	b8800017 	ldw	r2,0(r23)
  80ecd0:	147fd526 	beq	r2,r17,80ec28 <__call_exitprocs+0xa0>
  80ecd4:	003fc506 	br	80ebec <__call_exitprocs+0x64>
  80ecd8:	8c000115 	stw	r16,4(r17)
  80ecdc:	003fea06 	br	80ec88 <__call_exitprocs+0x100>
  80ece0:	2105883a 	add	r2,r4,r4
  80ece4:	1485883a 	add	r2,r2,r18
  80ece8:	11000017 	ldw	r4,0(r2)
  80ecec:	303ee83a 	callr	r6
  80ecf0:	003ff406 	br	80ecc4 <__call_exitprocs+0x13c>
  80ecf4:	303ee83a 	callr	r6
  80ecf8:	003ff206 	br	80ecc4 <__call_exitprocs+0x13c>
  80ecfc:	88800117 	ldw	r2,4(r17)
  80ed00:	1000081e 	bne	r2,zero,80ed24 <__call_exitprocs+0x19c>
  80ed04:	89000017 	ldw	r4,0(r17)
  80ed08:	20000726 	beq	r4,zero,80ed28 <__call_exitprocs+0x1a0>
  80ed0c:	b9000015 	stw	r4,0(r23)
  80ed10:	8809883a 	mov	r4,r17
  80ed14:	00000000 	call	0 <__reset-0x800000>
  80ed18:	bc400017 	ldw	r17,0(r23)
  80ed1c:	883fb71e 	bne	r17,zero,80ebfc <__call_exitprocs+0x74>
  80ed20:	003fc506 	br	80ec38 <__call_exitprocs+0xb0>
  80ed24:	89000017 	ldw	r4,0(r17)
  80ed28:	882f883a 	mov	r23,r17
  80ed2c:	2023883a 	mov	r17,r4
  80ed30:	883fb21e 	bne	r17,zero,80ebfc <__call_exitprocs+0x74>
  80ed34:	003fc006 	br	80ec38 <__call_exitprocs+0xb0>

0080ed38 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80ed38:	defffd04 	addi	sp,sp,-12
  80ed3c:	df000215 	stw	fp,8(sp)
  80ed40:	df000204 	addi	fp,sp,8
  80ed44:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80ed48:	e0bfff17 	ldw	r2,-4(fp)
  80ed4c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80ed50:	e0bffe17 	ldw	r2,-8(fp)
  80ed54:	1005003a 	cmpeq	r2,r2,zero
  80ed58:	1000021e 	bne	r2,zero,80ed64 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80ed5c:	002af070 	cmpltui	zero,zero,43969
  80ed60:	00000106 	br	80ed68 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80ed64:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80ed68:	e037883a 	mov	sp,fp
  80ed6c:	df000017 	ldw	fp,0(sp)
  80ed70:	dec00104 	addi	sp,sp,4
  80ed74:	f800283a 	ret

0080ed78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80ed78:	defffd04 	addi	sp,sp,-12
  80ed7c:	dfc00215 	stw	ra,8(sp)
  80ed80:	df000115 	stw	fp,4(sp)
  80ed84:	df000104 	addi	fp,sp,4
  80ed88:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80ed8c:	e13fff17 	ldw	r4,-4(fp)
  80ed90:	080ed380 	call	80ed38 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80ed94:	003fff06 	br	80ed94 <_exit+0x1c>
  80ed98:	0080eb84 	movi	r2,942
