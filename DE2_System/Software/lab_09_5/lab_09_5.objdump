
lab_09_5.elf:     file format elf32-littlenios2
lab_09_5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00013b14 memsz 0x00013b14 flags r-x
    LOAD off    0x00014b34 vaddr 0x00813b34 paddr 0x008157a4 align 2**12
         filesz 0x00001c70 memsz 0x00001c70 flags rw-
    LOAD off    0x00017414 vaddr 0x00817414 paddr 0x00817414 align 2**12
         filesz 0x00000000 memsz 0x000014e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013118  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000868  008132cc  008132cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c70  00813b34  008157a4  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000014e0  00817414  00817414  00017414  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000167a4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010f8  00000000  00000000  000167d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001ba0  00000000  00000000  000178c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00032381  00000000  00000000  00019468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ad2f  00000000  00000000  0004b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b2e0  00000000  00000000  00056518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002398  00000000  00000000  000717f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ab1  00000000  00000000  00073b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000107e6  00000000  00000000  00076641  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00086e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a98  00000000  00000000  00086e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008b820  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0008b823  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008b82b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008b82c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0008b82d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0008b836  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0008b83f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0008b848  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0008b851  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005879a  00000000  00000000  0008b885  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
008132cc l    d  .rodata	00000000 .rodata
00813b34 l    d  .rwdata	00000000 .rwdata
00817414 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
008001f0 l     F .text	0000004c handle_button_interrupts
0080023c l     F .text	00000054 init_BUTTONS_PIO
00800290 l     F .text	00000044 lcd_init
008002d4 l     F .text	00000054 initial_message
00800328 l     F .text	00000030 count_led
00817414 l     O .bss	00000001 count
00800358 l     F .text	00000028 clear_led
00800380 l     F .text	00000058 count_lcd
008003d8 l     F .text	0000004c clear_lcd
00800424 l     F .text	0000003c count_all
00800460 l     F .text	00000120 handle_button_press
00000000 l    df *ABS*	00000000 gps.c
00817484 l     O .bss	00000034 empty_gps_log
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 uart_interrupt.c
008015c8 l     F .text	000000d8 handle_uart_interrupts
008016a0 l     F .text	00000068 init_uart
00801708 l     F .text	00000028 clear_led
00000000 l    df *ABS*	00000000 dp-bit.c
00801888 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008023a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00802df0 l     F .text	00000058 std
00802efc l     F .text	00000008 __fp_lock
00802f04 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00813b34 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
008049e0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
00804d00 l     F .text	00000048 match
00814350 l     O .rwdata	00000014 fpi.1950
0081352c l     O .rodata	00000028 tinytens
0081433c l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
008066c8 l     F .text	00000058 __sprint_r
008135c2 l     O .rodata	00000010 blanks.3452
008135b2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
008136d3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0080882c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080a560 l     F .text	00000024 htinit
0080a5ec l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080ae98 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00815774 l     O .rwdata	00000004 charset
00813890 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008139d8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080ec84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ece4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ede8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f0cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080f1ac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f30c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f418 l     F .text	000000f8 alt_file_locked
0080f69c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0080f820 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815794 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080fb08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00814518 l     O .rwdata	00001060 jtag_uart
00815578 l     O .rwdata	00000120 lcd_display
00815698 l     O .rwdata	000000c4 uart_RS232
0080fc2c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080fe6c l     F .text	00000228 altera_avalon_jtag_uart_irq
00810094 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00815798 l     O .rwdata	00000004 colstart
00810710 l     F .text	000000b8 lcd_write_command
008107c8 l     F .text	000000d4 lcd_write_data
0081089c l     F .text	000000d8 lcd_clear_screen
00810974 l     F .text	00000214 lcd_repaint_screen
00810b88 l     F .text	000000e0 lcd_scroll_up
00810c68 l     F .text	000002e4 lcd_handle_escape
00811488 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008116e8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008119a8 l     F .text	0000009c altera_avalon_uart_irq
00811a44 l     F .text	000000e0 altera_avalon_uart_rxirq
00811b24 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00811f10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00812138 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812518 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00812bac l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008130b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00813268 l     F .text	00000040 alt_sim_halt
00804744 g     F .text	0000001c putchar
0080b948 g     F .text	00000094 _mprec_log10
0081741c g     O .bss	00000004 temp_log_type
0080ba34 g     F .text	00000088 __any_on
0080b12c g     F .text	00000070 _isatty_r
008139b0 g     O .rodata	00000028 __mprec_tinytens
0080f36c g     F .text	0000006c alt_main
00804768 g     F .text	000000a0 _puts_r
00818664 g     O .bss	00000100 alt_irq
0080b260 g     F .text	00000078 _lseek_r
008157a4 g       *ABS*	00000000 __flash_rwdata_start
0080a024 g     F .text	000000a0 __sflags
0080e038 g     F .text	00000088 __eqdf2
008188f4 g       *ABS*	00000000 __alt_heap_start
00817420 g     O .bss	00000004 ring_buffer_rd_idx
008046cc g     F .text	00000044 printf
00804b48 g     F .text	00000068 __sseek
00802e58 g     F .text	000000a4 __sinit
0080cf4c g     F .text	00000130 __swbuf_r
0080b1c0 g     F .text	00000084 _setlocale_r
00802f58 g     F .text	0000009c __sfmoreglue
0080f3f8 g     F .text	00000020 __malloc_unlock
00804d48 g     F .text	000015cc _strtod_r
0080b45c g     F .text	000000e0 memmove
00802f48 g     F .text	00000010 _cleanup
0080babc g     F .text	000000bc _Balloc
008174e0 g     O .bss	00000014 GGA_lat
0080e148 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00817418 g     O .bss	00000004 edge_capture
00800020 g       *ABS*	00000000 __flash_exceptions_start
00803af4 g     F .text	00000074 _fstat_r
00817450 g     O .bss	00000004 errno
0080e930 g     F .text	0000002c __make_fp
00817474 g     O .bss	00000004 alt_argv
0081d75c g       *ABS*	00000000 _gp
0080f9b4 g     F .text	00000030 usleep
008174f4 g     O .bss	00000034 temp_log
00814398 g     O .rwdata	00000180 alt_fd_list
00800768 g     F .text	000000cc gps_state_machine_reset
00804760 g     F .text	00000008 _putchar_r
00812640 g     F .text	00000094 alt_find_dev
0080b3bc g     F .text	000000a0 memcpy
0080aee4 g     F .text	00000248 __hexnan
00802f3c g     F .text	0000000c _cleanup_r
0080e368 g     F .text	000000f8 __floatsidf
00812c84 g     F .text	00000078 alt_io_redirect
0080e258 g     F .text	00000088 __ltdf2
008132cc g       *ABS*	00000000 __DTOR_END__
00804808 g     F .text	00000014 puts
0080b898 g     F .text	000000b0 __ratio
008102ac g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804710 g     F .text	00000034 _printf_r
008024e4 g     F .text	00000008 __udivsi3
0080f008 g     F .text	000000c4 isatty
00817424 g     O .bss	00000004 column_char_index
008138c0 g     O .rodata	000000c8 __mprec_tens
0080b19c g     F .text	00000008 __locale_charset
0080d160 g     F .text	000000a4 __fixunsdfsi
00817454 g     O .bss	00000004 __malloc_top_pad
00815770 g     O .rwdata	00000004 __mb_cur_max
0080b1a4 g     F .text	0000000c _localeconv_r
0080c220 g     F .text	0000003c __i2b
0080a0c4 g     F .text	0000049c __sfvwrite_r
008049fc g     F .text	00000070 _sbrk_r
00817528 g     O .bss	00000014 GGA_time
0080c7b4 g     F .text	00000078 _read_r
00814364 g     O .rwdata	0000000c __lc_ctype
00815788 g     O .rwdata	00000004 alt_max_fd
0080292c g     F .text	00000138 __unpack_d
00802a9c g     F .text	00000110 _fclose_r
00802dbc g     F .text	00000034 fflush
00817458 g     O .bss	00000004 __malloc_max_sbrked_mem
0080ee48 g     F .text	000001c0 alt_irq_register
00801d18 g     F .text	00000074 __adddf3
0080ded0 g     F .text	00000078 __nesf2
0080b778 g     F .text	00000120 __b2d
0080d870 g     F .text	00000660 __umoddi3
0080f218 g     F .text	000000f4 lseek
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
00815760 g     O .rwdata	00000004 _global_impure_ptr
0080c82c g     F .text	000005f4 _realloc_r
008188f4 g       *ABS*	00000000 __bss_end
00812ab4 g     F .text	000000f8 alt_iic_isr_register
00812d94 g     F .text	0000010c alt_tick
00817428 g     O .bss	00000004 column_index
00818564 g     O .bss	00000100 __hexdig
0080d204 g     F .text	0000066c __udivdi3
00813988 g     O .rodata	00000028 __mprec_bigtens
0080c4a8 g     F .text	00000120 __s2b
0080e5ac g     F .text	00000194 __floatunsidf
0080b698 g     F .text	00000060 __mcmp
008118e0 g     F .text	000000c8 altera_avalon_uart_init
00800834 g     F .text	0000068c gps_state_machine
0081576c g     O .rwdata	00000004 __ctype_ptr
00802f24 g     F .text	00000018 __fp_lock_all
00812a6c g     F .text	00000048 alt_ic_irq_enabled
0081742c g     O .bss	00000004 state
00812cfc g     F .text	00000098 alt_alarm_stop
008066a4 g     F .text	00000024 strtol
0081746c g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
00814370 g     O .rwdata	00000028 alt_dev_null
0080e7c0 g     F .text	000000c8 __unpack_f
00812448 g     F .text	0000001c alt_dcache_flush_all
0080b564 g     F .text	00000070 __hi0bits
0080e460 g     F .text	000000d8 __fixdfsi
00806438 g     F .text	0000001c strtod
008157a4 g       *ABS*	00000000 __ram_rwdata_end
00815780 g     O .rwdata	00000008 alt_dev_list
0080f9e4 g     F .text	00000124 write
0080c6cc g     F .text	000000e8 _putc_r
0080df48 g     F .text	00000078 __gtsf2
00813b34 g       *ABS*	00000000 __ram_rodata_end
0080ed10 g     F .text	000000d8 fstat
008031f4 g     F .text	0000002c fprintf
0080e2e0 g     F .text	00000088 __ledf2
00801730 g     F .text	00000090 WriteLCD
00817430 g     O .bss	00000003 checksum_str
0081744c g     O .bss	00000004 rxdata
0080c388 g     F .text	00000120 __pow5mult
00817460 g     O .bss	00000004 __nlocale_changed
008024ec g     F .text	00000008 __umodsi3
008188f4 g       *ABS*	00000000 end
0080ea24 g     F .text	00000160 __pack_f
00810f4c g     F .text	0000053c altera_avalon_lcd_16207_write
00811f70 g     F .text	000001c8 altera_avalon_uart_write
00803ad0 g     F .text	00000024 fseek
0080fdac g     F .text	000000c0 altera_avalon_jtag_uart_init
008132c8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00811758 g     F .text	00000090 alt_avalon_timer_sc_init
00811840 g     F .text	00000058 altera_avalon_uart_write_fd
0080e740 g     F .text	00000080 __clzsi2
00811898 g     F .text	00000048 altera_avalon_uart_close_fd
008104d0 g     F .text	00000240 altera_avalon_jtag_uart_write
00802e48 g     F .text	00000004 __sfp_lock_acquire
0080b2d8 g     F .text	000000e4 memchr
00806720 g     F .text	00001ec4 ___vfprintf_internal_r
00804ae0 g     F .text	00000060 _sprintf_r
00803380 g     F .text	00000314 _free_r
008130b8 g     F .text	000001b0 __call_exitprocs
00817464 g     O .bss	00000004 __mlocale_changed
00815768 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
0081747c g     O .bss	00000004 _alt_tick_rate
00801414 g     F .text	00000138 gps_save_string
0080073c g     F .text	0000002c gps_init
0080be80 g     F .text	0000014c __lshift
00817480 g     O .bss	00000004 _alt_nticks
0080f6fc g     F .text	00000124 read
0080fb9c g     F .text	00000090 alt_sys_init
00804654 g     F .text	00000078 _open_r
00812f80 g     F .text	00000134 __register_exitproc
0080bfcc g     F .text	00000254 __multiply
00810144 g     F .text	00000074 altera_avalon_jtag_uart_close
00802a64 g     F .text	00000038 __mulsi3
00813b34 g       *ABS*	00000000 __ram_rwdata_start
008132cc g       *ABS*	00000000 __ram_rodata_start
008174b8 g     O .bss	00000028 __malloc_current_mallinfo
0080bb78 g     F .text	0000017c __d2b
0080fc64 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008127f4 g     F .text	000000d0 alt_get_fd
008122ec g     F .text	0000015c alt_busy_sleep
0080e95c g     F .text	000000c8 __fpcmp_parts_d
00817434 g     O .bss	00000004 checksum_index
008087bc g     F .text	00000070 _close_r
00817438 g     O .bss	00000004 data_good
00812f0c g     F .text	00000074 memcmp
0080fd14 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008188f4 g       *ABS*	00000000 __alt_stack_base
0080fd5c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00800580 g     F .text	000001bc count_binary
00808680 g     F .text	0000013c __swsetup_r
00802150 g     F .text	00000258 __divdf3
00802ff4 g     F .text	000000f0 __sfp
0080b9dc g     F .text	00000058 __copybits
00813f34 g     O .rwdata	00000408 __malloc_av_
00802e54 g     F .text	00000004 __sinit_lock_release
0081743c g     O .bss	00000004 data_set_id
00801d8c g     F .text	000003c4 __muldf3
00804c2c g     F .text	00000060 __sread
008126d4 g     F .text	00000120 alt_find_file
00812464 g     F .text	000000b4 alt_dev_llist_insert
0080f3d8 g     F .text	00000020 __malloc_lock
00803220 g     F .text	00000034 _fprintf_r
0080f8f8 g     F .text	000000bc sbrk
00802bc0 g     F .text	000001fc _fflush_r
0080d098 g     F .text	000000c8 _calloc_r
008031d8 g     F .text	0000001c fopen
00817414 g       *ABS*	00000000 __bss_start
008045bc g     F .text	00000098 memset
0080159c g     F .text	0000002c main
00817478 g     O .bss	00000004 alt_envp
0081745c g     O .bss	00000004 __malloc_max_total_mem
0080fcbc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080d07c g     F .text	0000001c __swbuf
0080dfc0 g     F .text	00000078 __ltsf2
00811554 g     F .text	0000013c altera_avalon_lcd_16207_init
00804b40 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802bac g     F .text	00000014 fclose
00806454 g     F .text	00000250 _strtol_r
0080e538 g     F .text	00000074 __truncdfsf2
00818764 g     O .bss	00000190 _atexit0
00808a70 g     F .text	000015b4 _dtoa_r
00803e7c g     F .text	00000740 _malloc_r
0081578c g     O .rwdata	00000004 alt_errno
00803c30 g     F .text	000000b8 _fwalk
0080c5c8 g     F .text	00000104 putc
00802424 g     F .text	00000060 __divsi3
00813500 g     O .rodata	00000014 __thenan_df
00803254 g     F .text	0000012c _malloc_trim_r
008132cc g       *ABS*	00000000 __CTOR_END__
0080ce90 g     F .text	000000bc strcmp
008132cc g       *ABS*	00000000 __flash_rodata_start
008132cc g       *ABS*	00000000 __DTOR_LIST__
0080e0c0 g     F .text	00000088 __nedf2
0081753c g     O .bss	00000014 GGA_elev
0080fb68 g     F .text	00000034 alt_irq_init
0080f880 g     F .text	00000078 alt_release_fd
00804a6c g     F .text	00000074 sprintf
008139e4 g     O .rodata	00000100 __clz_tab
00817468 g     O .bss	00000004 _PathLocale
00806314 g     F .text	00000124 strtof
00812ec0 g     F .text	00000014 atexit
00808608 g     F .text	00000078 _write_r
0080b244 g     F .text	0000001c setlocale
0081575c g     O .rwdata	00000004 _impure_ptr
00817470 g     O .bss	00000004 alt_argc
008125dc g     F .text	00000064 _do_dtors
00803694 g     F .text	0000043c _fseek_r
0080481c g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0080b6f8 g     F .text	00000080 __ulp
0080ce20 g     F .text	00000040 __isinfd
00802f0c g     F .text	00000018 __fp_unlock_all
00811690 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00815778 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00817440 g     O .bss	00000004 ring_buffer_wr_idx
0080b1b0 g     F .text	00000010 localeconv
008128e0 g     F .text	00000050 alt_ic_isr_register
0080a584 g     F .text	00000068 __hexdig_init
008157a4 g       *ABS*	00000000 _edata
008117e8 g     F .text	00000058 altera_avalon_uart_read_fd
008188f4 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008101b8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080154c g     F .text	00000050 gps_print_error
008129cc g     F .text	000000a0 alt_ic_irq_disable
00804bb0 g     F .text	0000007c __swrite
00815764 g     O .rwdata	00000004 __malloc_trim_threshold
00817444 g     O .bss	00000004 GPGGA_COL
00812ea0 g     F .text	00000020 altera_nios2_qsys_irq_init
00812ed4 g     F .text	00000038 exit
00803b68 g     F .text	000000c8 _fwalk_reent
0080bcf4 g     F .text	0000018c __mdiff
00802484 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00802e4c g     F .text	00000004 __sfp_lock_release
008135d2 g     O .rodata	00000101 _ctype_
00800ec0 g     F .text	00000554 gps_convert_log
00817448 g     O .bss	00000004 checksum
00811c80 g     F .text	00000060 altera_avalon_uart_close
0080e888 g     F .text	000000a8 __fpcmp_parts_f
008017c0 g     F .text	000000c8 uart_interrupts
008030e4 g     F .text	000000f4 _fopen_r
008132a8 g     F .text	00000020 _exit
0080ce60 g     F .text	00000030 __isnand
00812198 g     F .text	00000154 alt_alarm_start
008024f4 g     F .text	00000124 __muldi3
00803ce8 g     F .text	00000194 __smakebuf_r
00804c8c g     F .text	00000074 strlen
0080f510 g     F .text	0000018c open
0080e1d0 g     F .text	00000088 __gedf2
0080a69c g     F .text	000007fc __gethex
00817550 g     O .bss	00000014 GGA_lon
008128c4 g     F .text	0000001c alt_icache_flush_all
00815790 g     O .rwdata	00000004 alt_priority_mask
00812930 g     F .text	0000009c alt_ic_irq_enable
008085e4 g     F .text	00000024 __vfprintf_internal
00811ce0 g     F .text	00000230 altera_avalon_uart_read
00801c98 g     F .text	00000080 __subdf3
0080b5d4 g     F .text	000000c4 __lo0bits
0081579c g     O .rwdata	00000008 alt_alarm_list
00812578 g     F .text	00000064 _do_ctors
0080eb84 g     F .text	00000100 close
00817564 g     O .bss	00001000 ring_buffer
0080f12c g     F .text	00000080 alt_load
00802618 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00802e50 g     F .text	00000004 __sinit_lock_acquire
0080c25c g     F .text	0000012c __multadd
0080b53c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406d14 	ori	at,at,436
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e19904 	addi	r3,r3,-31132
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e19904 	addi	r3,r3,-31132
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6b5d714 	ori	gp,gp,55132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	109d0514 	ori	r2,r2,29716

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18e23d14 	ori	r3,r3,35060

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080f12c0 	call	80f12c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080f36c0 	call	80f36c <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <handle_button_interrupts>:
 * The value stored in *context is used to control program flow    *
 * in the rest of this program's routines.                         *
 ******************************************************************/

static void handle_button_interrupts(void* context, alt_u32 id)
{
  8001f0:	defffc04 	addi	sp,sp,-16
  8001f4:	df000315 	stw	fp,12(sp)
  8001f8:	df000304 	addi	fp,sp,12
  8001fc:	e13ffe15 	stw	r4,-8(fp)
  800200:	e17fff15 	stw	r5,-4(fp)
    /* Cast context to edge_capture's type. It is important that this be 
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
  800204:	e0bffe17 	ldw	r2,-8(fp)
  800208:	e0bffd15 	stw	r2,-12(fp)
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_PIO_BASE);
  80020c:	00800304 	movi	r2,12
  800210:	10c00037 	ldwio	r3,0(r2)
  800214:	e0bffd17 	ldw	r2,-12(fp)
  800218:	10c00015 	stw	r3,0(r2)
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_PIO_BASE, 0);
  80021c:	00800304 	movi	r2,12
  800220:	10000035 	stwio	zero,0(r2)
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_PIO_BASE); //An extra read call to clear of delay through the bridge
  800224:	00800304 	movi	r2,12
  800228:	10800037 	ldwio	r2,0(r2)

}
  80022c:	e037883a 	mov	sp,fp
  800230:	df000017 	ldw	fp,0(sp)
  800234:	dec00104 	addi	sp,sp,4
  800238:	f800283a 	ret

0080023c <init_BUTTONS_PIO>:

/* Initialize the BUTTONS_PIO. */

static void init_BUTTONS_PIO()
{
  80023c:	defffd04 	addi	sp,sp,-12
  800240:	dfc00215 	stw	ra,8(sp)
  800244:	df000115 	stw	fp,4(sp)
  800248:	df000104 	addi	fp,sp,4
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
  80024c:	d0a72f04 	addi	r2,gp,-25412
  800250:	e0bfff15 	stw	r2,-4(fp)
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_PIO_BASE, 0xf);  
  800254:	00c00204 	movi	r3,8
  800258:	008003c4 	movi	r2,15
  80025c:	18800035 	stwio	r2,0(r3)
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_PIO_BASE, 0x0);
  800260:	00800304 	movi	r2,12
  800264:	10000035 	stwio	zero,0(r2)
    /* Register the interrupt handler. */
    alt_irq_register( BUTTONS_PIO_IRQ, edge_capture_ptr, handle_button_interrupts );
  800268:	010000c4 	movi	r4,3
  80026c:	e17fff17 	ldw	r5,-4(fp)
  800270:	01802034 	movhi	r6,128
  800274:	31807c04 	addi	r6,r6,496
  800278:	080ee480 	call	80ee48 <alt_irq_register>
}
  80027c:	e037883a 	mov	sp,fp
  800280:	dfc00117 	ldw	ra,4(sp)
  800284:	df000017 	ldw	fp,0(sp)
  800288:	dec00204 	addi	sp,sp,8
  80028c:	f800283a 	ret

00800290 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
  800290:	defffd04 	addi	sp,sp,-12
  800294:	dfc00215 	stw	ra,8(sp)
  800298:	df000115 	stw	fp,4(sp)
  80029c:	df000104 	addi	fp,sp,4
  8002a0:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
  8002a4:	e13fff17 	ldw	r4,-4(fp)
  8002a8:	01402074 	movhi	r5,129
  8002ac:	294cb304 	addi	r5,r5,13004
  8002b0:	018006c4 	movi	r6,27
  8002b4:	01c02074 	movhi	r7,129
  8002b8:	39ccbe04 	addi	r7,r7,13048
  8002bc:	08031f40 	call	8031f4 <fprintf>
               ESC_TOP_LEFT);
}
  8002c0:	e037883a 	mov	sp,fp
  8002c4:	dfc00117 	ldw	ra,4(sp)
  8002c8:	df000017 	ldw	fp,0(sp)
  8002cc:	dec00204 	addi	sp,sp,8
  8002d0:	f800283a 	ret

008002d4 <initial_message>:

static void initial_message()
{
  8002d4:	defffe04 	addi	sp,sp,-8
  8002d8:	dfc00115 	stw	ra,4(sp)
  8002dc:	df000015 	stw	fp,0(sp)
  8002e0:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
  8002e4:	01002074 	movhi	r4,129
  8002e8:	210cc004 	addi	r4,r4,13056
  8002ec:	08048080 	call	804808 <puts>
    printf("* Hello from Nios II!    *\n");
  8002f0:	01002074 	movhi	r4,129
  8002f4:	210cc804 	addi	r4,r4,13088
  8002f8:	08048080 	call	804808 <puts>
    printf("* Counting from 00 to ff *\n");
  8002fc:	01002074 	movhi	r4,129
  800300:	210ccf04 	addi	r4,r4,13116
  800304:	08048080 	call	804808 <puts>
    printf("**************************\n");
  800308:	01002074 	movhi	r4,129
  80030c:	210cd604 	addi	r4,r4,13144
  800310:	08048080 	call	804808 <puts>
}
  800314:	e037883a 	mov	sp,fp
  800318:	dfc00117 	ldw	ra,4(sp)
  80031c:	df000017 	ldw	fp,0(sp)
  800320:	dec00204 	addi	sp,sp,8
  800324:	f800283a 	ret

00800328 <count_led>:
 * the system.  Specifically:                           *
 * The LEDs will illuminate and the LCD will display the  *
 * hex value as the program loops.                      *
 * *****************************************************/
static void count_led()
{
  800328:	deffff04 	addi	sp,sp,-4
  80032c:	df000015 	stw	fp,0(sp)
  800330:	d839883a 	mov	fp,sp
    /* put the 8 bit count on the LEDs */
    *LEDs = count & 0x000000FF;
  800334:	00804034 	movhi	r2,256
  800338:	10845004 	addi	r2,r2,4416
  80033c:	d0e72e03 	ldbu	r3,-25416(gp)
  800340:	18c03fcc 	andi	r3,r3,255
  800344:	10c00015 	stw	r3,0(r2)

}
  800348:	e037883a 	mov	sp,fp
  80034c:	df000017 	ldw	fp,0(sp)
  800350:	dec00104 	addi	sp,sp,4
  800354:	f800283a 	ret

00800358 <clear_led>:

static void clear_led()
{
  800358:	deffff04 	addi	sp,sp,-4
  80035c:	df000015 	stw	fp,0(sp)
  800360:	d839883a 	mov	fp,sp
	/* turn LEDs off */
    *LEDs = 0x00000000;
  800364:	00804034 	movhi	r2,256
  800368:	10845004 	addi	r2,r2,4416
  80036c:	10000015 	stw	zero,0(r2)
}
  800370:	e037883a 	mov	sp,fp
  800374:	df000017 	ldw	fp,0(sp)
  800378:	dec00104 	addi	sp,sp,4
  80037c:	f800283a 	ret

00800380 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
  800380:	defffb04 	addi	sp,sp,-20
  800384:	dfc00415 	stw	ra,16(sp)
  800388:	df000315 	stw	fp,12(sp)
  80038c:	df000304 	addi	fp,sp,12
  800390:	e13fff15 	stw	r4,-4(fp)
#ifdef LCD_DISPLAY_NAME
    FILE *lcd = (FILE*) arg;
  800394:	e0bfff17 	ldw	r2,-4(fp)
  800398:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
  80039c:	d0a72e03 	ldbu	r2,-25416(gp)
  8003a0:	10803fcc 	andi	r2,r2,255
  8003a4:	d8800015 	stw	r2,0(sp)
  8003a8:	e13ffe17 	ldw	r4,-8(fp)
  8003ac:	01402074 	movhi	r5,129
  8003b0:	294cdd04 	addi	r5,r5,13172
  8003b4:	018006c4 	movi	r6,27
  8003b8:	01c02074 	movhi	r7,129
  8003bc:	39cce004 	addi	r7,r7,13184
  8003c0:	08031f40 	call	8031f4 <fprintf>
#endif
}
  8003c4:	e037883a 	mov	sp,fp
  8003c8:	dfc00117 	ldw	ra,4(sp)
  8003cc:	df000017 	ldw	fp,0(sp)
  8003d0:	dec00204 	addi	sp,sp,8
  8003d4:	f800283a 	ret

008003d8 <clear_lcd>:

static void clear_lcd( void* arg)
{
  8003d8:	defffc04 	addi	sp,sp,-16
  8003dc:	dfc00315 	stw	ra,12(sp)
  8003e0:	df000215 	stw	fp,8(sp)
  8003e4:	df000204 	addi	fp,sp,8
  8003e8:	e13fff15 	stw	r4,-4(fp)
#ifdef LCD_DISPLAY_NAME
    FILE *lcd = (FILE*) arg;
  8003ec:	e0bfff17 	ldw	r2,-4(fp)
  8003f0:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%c\n", ESC, ESC_CLEAR);
  8003f4:	e13ffe17 	ldw	r4,-8(fp)
  8003f8:	01402074 	movhi	r5,129
  8003fc:	294ce204 	addi	r5,r5,13192
  800400:	018006c4 	movi	r6,27
  800404:	01c02074 	movhi	r7,129
  800408:	39cce404 	addi	r7,r7,13200
  80040c:	08031f40 	call	8031f4 <fprintf>
#endif
}
  800410:	e037883a 	mov	sp,fp
  800414:	dfc00117 	ldw	ra,4(sp)
  800418:	df000017 	ldw	fp,0(sp)
  80041c:	dec00204 	addi	sp,sp,8
  800420:	f800283a 	ret

00800424 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
  800424:	defffd04 	addi	sp,sp,-12
  800428:	dfc00215 	stw	ra,8(sp)
  80042c:	df000115 	stw	fp,4(sp)
  800430:	df000104 	addi	fp,sp,4
  800434:	e13fff15 	stw	r4,-4(fp)
    count_led();
  800438:	08003280 	call	800328 <count_led>

    lcd_init( arg );
  80043c:	e13fff17 	ldw	r4,-4(fp)
  800440:	08002900 	call	800290 <lcd_init>
    count_lcd( arg );
  800444:	e13fff17 	ldw	r4,-4(fp)
  800448:	08003800 	call	800380 <count_lcd>

}
  80044c:	e037883a 	mov	sp,fp
  800450:	dfc00117 	ldw	ra,4(sp)
  800454:	df000017 	ldw	fp,0(sp)
  800458:	dec00204 	addi	sp,sp,8
  80045c:	f800283a 	ret

00800460 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
  800460:	defffa04 	addi	sp,sp,-24
  800464:	dfc00515 	stw	ra,20(sp)
  800468:	df000415 	stw	fp,16(sp)
  80046c:	df000404 	addi	fp,sp,16
  800470:	e17ffd15 	stw	r5,-12(fp)
  800474:	e13ffc05 	stb	r4,-16(fp)
    /* Button press actions while counting. */
    if (type == 'c')
  800478:	e0bffc03 	ldbu	r2,-16(fp)
  80047c:	108018d8 	cmpnei	r2,r2,99
  800480:	10001c1e 	bne	r2,zero,8004f4 <handle_button_press+0x94>
    {
        switch (edge_capture) 
  800484:	d0a72f17 	ldw	r2,-25412(gp)
  800488:	e0bfff15 	stw	r2,-4(fp)
  80048c:	e0ffff17 	ldw	r3,-4(fp)
  800490:	188000a0 	cmpeqi	r2,r3,2
  800494:	10000b1e 	bne	r2,zero,8004c4 <handle_button_press+0x64>
  800498:	e0ffff17 	ldw	r3,-4(fp)
  80049c:	18800120 	cmpeqi	r2,r3,4
  8004a0:	10000e1e 	bne	r2,zero,8004dc <handle_button_press+0x7c>
  8004a4:	e0ffff17 	ldw	r3,-4(fp)
  8004a8:	18800060 	cmpeqi	r2,r3,1
  8004ac:	1000011e 	bne	r2,zero,8004b4 <handle_button_press+0x54>
  8004b0:	00000d06 	br	8004e8 <handle_button_press+0x88>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
  8004b4:	08003280 	call	800328 <count_led>
            clear_lcd( lcd );
  8004b8:	e13ffd17 	ldw	r4,-12(fp)
  8004bc:	08003d80 	call	8003d8 <clear_lcd>
            break;
  8004c0:	00002a06 	br	80056c <handle_button_press+0x10c>
        case 0x2:
        	lcd_init( lcd );
  8004c4:	e13ffd17 	ldw	r4,-12(fp)
  8004c8:	08002900 	call	800290 <lcd_init>
            count_lcd( lcd );
  8004cc:	e13ffd17 	ldw	r4,-12(fp)
  8004d0:	08003800 	call	800380 <count_lcd>
            clear_led();
  8004d4:	08003580 	call	800358 <clear_led>
            break;
  8004d8:	00002406 	br	80056c <handle_button_press+0x10c>
            /* Button 4:  Output counting to LED, and D. */ 
        case 0x4:
            count_all( lcd );
  8004dc:	e13ffd17 	ldw	r4,-12(fp)
  8004e0:	08004240 	call	800424 <count_all>
            break;
  8004e4:	00002106 	br	80056c <handle_button_press+0x10c>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
  8004e8:	e13ffd17 	ldw	r4,-12(fp)
  8004ec:	08004240 	call	800424 <count_all>
  8004f0:	00001e06 	br	80056c <handle_button_press+0x10c>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
  8004f4:	d0a72f17 	ldw	r2,-25412(gp)
  8004f8:	e0bffe15 	stw	r2,-8(fp)
  8004fc:	e0fffe17 	ldw	r3,-8(fp)
  800500:	188000a0 	cmpeqi	r2,r3,2
  800504:	10000c1e 	bne	r2,zero,800538 <handle_button_press+0xd8>
  800508:	e0fffe17 	ldw	r3,-8(fp)
  80050c:	18800120 	cmpeqi	r2,r3,4
  800510:	10000e1e 	bne	r2,zero,80054c <handle_button_press+0xec>
  800514:	e0fffe17 	ldw	r3,-8(fp)
  800518:	18800060 	cmpeqi	r2,r3,1
  80051c:	1000011e 	bne	r2,zero,800524 <handle_button_press+0xc4>
  800520:	00000f06 	br	800560 <handle_button_press+0x100>
        {
        case 0x1:
            printf( "Button 2\n");
  800524:	01002074 	movhi	r4,129
  800528:	210ce504 	addi	r4,r4,13204
  80052c:	08048080 	call	804808 <puts>
            edge_capture = 0;
  800530:	d0272f15 	stw	zero,-25412(gp)
            break;
  800534:	00000d06 	br	80056c <handle_button_press+0x10c>
        case 0x2:
            printf( "Button 3\n");
  800538:	01002074 	movhi	r4,129
  80053c:	210ce804 	addi	r4,r4,13216
  800540:	08048080 	call	804808 <puts>
            edge_capture = 0;
  800544:	d0272f15 	stw	zero,-25412(gp)
            break;
  800548:	00000806 	br	80056c <handle_button_press+0x10c>
        case 0x4:
            printf( "Button 4\n");
  80054c:	01002074 	movhi	r4,129
  800550:	210ceb04 	addi	r4,r4,13228
  800554:	08048080 	call	804808 <puts>
            edge_capture = 0;
  800558:	d0272f15 	stw	zero,-25412(gp)
            break;
  80055c:	00000306 	br	80056c <handle_button_press+0x10c>
        default:
            printf( "Button press UNKNOWN!!\n");
  800560:	01002074 	movhi	r4,129
  800564:	210cee04 	addi	r4,r4,13240
  800568:	08048080 	call	804808 <puts>
        }
    }
}
  80056c:	e037883a 	mov	sp,fp
  800570:	dfc00117 	ldw	ra,4(sp)
  800574:	df000017 	ldw	fp,0(sp)
  800578:	dec00204 	addi	sp,sp,8
  80057c:	f800283a 	ret

00800580 <count_binary>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int count_binary(void)
{ 
  800580:	defff704 	addi	sp,sp,-36
  800584:	dfc00815 	stw	ra,32(sp)
  800588:	df000715 	stw	fp,28(sp)
  80058c:	df000704 	addi	fp,sp,28
    int i;
    int wait_time;
    FILE * lcd;

    count = 0;
  800590:	d0272e05 	stb	zero,-25416(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
  800594:	01002074 	movhi	r4,129
  800598:	210cf404 	addi	r4,r4,13264
  80059c:	01402074 	movhi	r5,129
  8005a0:	294cf904 	addi	r5,r5,13284
  8005a4:	08031d80 	call	8031d8 <fopen>
  8005a8:	e0bffd15 	stw	r2,-12(fp)
    if(lcd != NULL) {lcd_init( lcd );}
  8005ac:	e0bffd17 	ldw	r2,-12(fp)
  8005b0:	1005003a 	cmpeq	r2,r2,zero
  8005b4:	1000021e 	bne	r2,zero,8005c0 <count_binary+0x40>
  8005b8:	e13ffd17 	ldw	r4,-12(fp)
  8005bc:	08002900 	call	800290 <lcd_init>
    
    /* Initialize the button pio */
    init_BUTTONS_PIO();
  8005c0:	080023c0 	call	80023c <init_BUTTONS_PIO>


/* Initial message to output. */

    initial_message();
  8005c4:	08002d40 	call	8002d4 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
  8005c8:	010000b4 	movhi	r4,2
  8005cc:	2121a804 	addi	r4,r4,-31072
  8005d0:	080f9b40 	call	80f9b4 <usleep>
        if (edge_capture != 0)
  8005d4:	d0a72f17 	ldw	r2,-25412(gp)
  8005d8:	1005003a 	cmpeq	r2,r2,zero
  8005dc:	1000041e 	bne	r2,zero,8005f0 <count_binary+0x70>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
  8005e0:	010018c4 	movi	r4,99
  8005e4:	e17ffd17 	ldw	r5,-12(fp)
  8005e8:	08004600 	call	800460 <handle_button_press>
  8005ec:	00000206 	br	8005f8 <count_binary+0x78>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
  8005f0:	e13ffd17 	ldw	r4,-12(fp)
  8005f4:	08004240 	call	800424 <count_all>

        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
  8005f8:	d0a72e03 	ldbu	r2,-25416(gp)
  8005fc:	10803fcc 	andi	r2,r2,255
  800600:	10803fd8 	cmpnei	r2,r2,255
  800604:	1000491e 	bne	r2,zero,80072c <count_binary+0x1ac>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
  800608:	008006c4 	movi	r2,27
  80060c:	d8800015 	stw	r2,0(sp)
  800610:	00802074 	movhi	r2,129
  800614:	108ce404 	addi	r2,r2,13200
  800618:	d8800115 	stw	r2,4(sp)
  80061c:	008006c4 	movi	r2,27
  800620:	d8800215 	stw	r2,8(sp)
  800624:	00802074 	movhi	r2,129
  800628:	108d0104 	addi	r2,r2,13316
  80062c:	d8800315 	stw	r2,12(sp)
  800630:	e13ffd17 	ldw	r4,-12(fp)
  800634:	01402074 	movhi	r5,129
  800638:	294cfa04 	addi	r5,r5,13288
  80063c:	018006c4 	movi	r6,27
  800640:	01c02074 	movhi	r7,129
  800644:	39ccbe04 	addi	r7,r7,13048
  800648:	08031f40 	call	8031f4 <fprintf>
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
  80064c:	01002074 	movhi	r4,129
  800650:	210d0304 	addi	r4,r4,13324
  800654:	08046cc0 	call	8046cc <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
  800658:	d0272f15 	stw	zero,-25412(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
  80065c:	008006c4 	movi	r2,27
  800660:	d8800015 	stw	r2,0(sp)
  800664:	00802074 	movhi	r2,129
  800668:	108ce404 	addi	r2,r2,13200
  80066c:	d8800115 	stw	r2,4(sp)
  800670:	e13ffd17 	ldw	r4,-12(fp)
  800674:	01402074 	movhi	r5,129
  800678:	294d0604 	addi	r5,r5,13336
  80067c:	018006c4 	movi	r6,27
  800680:	01c02074 	movhi	r7,129
  800684:	39cce004 	addi	r7,r7,13184
  800688:	08031f40 	call	8031f4 <fprintf>
                       ESC_CLEAR);
            wait_time = 0;
  80068c:	e03ffe15 	stw	zero,-8(fp)
            for (i = 0; i<70; ++i)
  800690:	e03fff15 	stw	zero,-4(fp)
  800694:	00001f06 	br	800714 <count_binary+0x194>
            {
                printf(".");
  800698:	01000b84 	movi	r4,46
  80069c:	08047440 	call	804744 <putchar>
                wait_time = i/10;
  8006a0:	e13fff17 	ldw	r4,-4(fp)
  8006a4:	01400284 	movi	r5,10
  8006a8:	08024240 	call	802424 <__divsi3>
  8006ac:	e0bffe15 	stw	r2,-8(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
  8006b0:	e0bffe17 	ldw	r2,-8(fp)
  8006b4:	10800044 	addi	r2,r2,1
  8006b8:	d8800015 	stw	r2,0(sp)
  8006bc:	e13ffd17 	ldw	r4,-12(fp)
  8006c0:	01402074 	movhi	r5,129
  8006c4:	294d0904 	addi	r5,r5,13348
  8006c8:	018006c4 	movi	r6,27
  8006cc:	01c02074 	movhi	r7,129
  8006d0:	39cce004 	addi	r7,r7,13184
  8006d4:	08031f40 	call	8031f4 <fprintf>
                    wait_time+1);

                if (edge_capture != 0) 
  8006d8:	d0a72f17 	ldw	r2,-25412(gp)
  8006dc:	1005003a 	cmpeq	r2,r2,zero
  8006e0:	1000061e 	bne	r2,zero,8006fc <count_binary+0x17c>
                {
                    printf( "\nYou pushed:  " );
  8006e4:	01002074 	movhi	r4,129
  8006e8:	210d0c04 	addi	r4,r4,13360
  8006ec:	08046cc0 	call	8046cc <printf>
                    handle_button_press('w', lcd);
  8006f0:	01001dc4 	movi	r4,119
  8006f4:	e17ffd17 	ldw	r5,-12(fp)
  8006f8:	08004600 	call	800460 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
  8006fc:	010000b4 	movhi	r4,2
  800700:	2121a804 	addi	r4,r4,-31072
  800704:	080f9b40 	call	80f9b4 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
  800708:	e0bfff17 	ldw	r2,-4(fp)
  80070c:	10800044 	addi	r2,r2,1
  800710:	e0bfff15 	stw	r2,-4(fp)
  800714:	e0bfff17 	ldw	r2,-4(fp)
  800718:	10801190 	cmplti	r2,r2,70
  80071c:	103fde1e 	bne	r2,zero,800698 <count_binary+0x118>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
  800720:	08002d40 	call	8002d4 <initial_message>
            lcd_init( lcd );
  800724:	e13ffd17 	ldw	r4,-12(fp)
  800728:	08002900 	call	800290 <lcd_init>
        }
        count++;
  80072c:	d0a72e03 	ldbu	r2,-25416(gp)
  800730:	10800044 	addi	r2,r2,1
  800734:	d0a72e05 	stb	r2,-25416(gp)
    }
  800738:	003fa306 	br	8005c8 <count_binary+0x48>

0080073c <gps_init>:
 * Returns: 	void
 * Description: This function should be called before using
 * 				the state machine.
 ************************************************************/
void gps_init()
{
  80073c:	defffe04 	addi	sp,sp,-8
  800740:	dfc00115 	stw	ra,4(sp)
  800744:	df000015 	stw	fp,0(sp)
  800748:	d839883a 	mov	fp,sp
	data_good = 0;
  80074c:	d0273715 	stw	zero,-25380(gp)
	gps_state_machine_reset();
  800750:	08007680 	call	800768 <gps_state_machine_reset>

}
  800754:	e037883a 	mov	sp,fp
  800758:	dfc00117 	ldw	ra,4(sp)
  80075c:	df000017 	ldw	fp,0(sp)
  800760:	dec00204 	addi	sp,sp,8
  800764:	f800283a 	ret

00800768 <gps_state_machine_reset>:
 * 				the state machine or to reset the state 
 * 				machine. This function will initialize the 
 * 				the state variables. 
 ************************************************************/
void gps_state_machine_reset()
{
  800768:	deffff04 	addi	sp,sp,-4
  80076c:	df000015 	stw	fp,0(sp)
  800770:	d839883a 	mov	fp,sp
	state = 0;
  800774:	d0273415 	stw	zero,-25392(gp)
	data_set_id[0] = '\0';
  800778:	d0273805 	stb	zero,-25376(gp)
	data_set_id[3] = '\0';
  80077c:	00802074 	movhi	r2,129
  800780:	109d0fc4 	addi	r2,r2,29759
  800784:	10000005 	stb	zero,0(r2)
	
	checksum = 0;
  800788:	d0273b15 	stw	zero,-25364(gp)
	checksum_index = -1;
  80078c:	00bfffc4 	movi	r2,-1
  800790:	d0a73615 	stw	r2,-25384(gp)
	checksum_str[0] = '\0';
  800794:	d0273505 	stb	zero,-25388(gp)
	checksum_str[2] = '\0';
  800798:	00802074 	movhi	r2,129
  80079c:	109d0c84 	addi	r2,r2,29746
  8007a0:	10000005 	stb	zero,0(r2)
	
	column_index = 0;
  8007a4:	d0273315 	stw	zero,-25396(gp)
	column_char_index = 0;
  8007a8:	d0273215 	stw	zero,-25400(gp)
	
	temp_log = empty_gps_log;
  8007ac:	01002074 	movhi	r4,129
  8007b0:	211d3d04 	addi	r4,r4,29940
  8007b4:	00c02074 	movhi	r3,129
  8007b8:	18dd2104 	addi	r3,r3,29828
  8007bc:	18800017 	ldw	r2,0(r3)
  8007c0:	20800015 	stw	r2,0(r4)
  8007c4:	18800117 	ldw	r2,4(r3)
  8007c8:	20800115 	stw	r2,4(r4)
  8007cc:	18800217 	ldw	r2,8(r3)
  8007d0:	20800215 	stw	r2,8(r4)
  8007d4:	18800317 	ldw	r2,12(r3)
  8007d8:	20800315 	stw	r2,12(r4)
  8007dc:	18800417 	ldw	r2,16(r3)
  8007e0:	20800415 	stw	r2,16(r4)
  8007e4:	18800517 	ldw	r2,20(r3)
  8007e8:	20800515 	stw	r2,20(r4)
  8007ec:	18800617 	ldw	r2,24(r3)
  8007f0:	20800615 	stw	r2,24(r4)
  8007f4:	18800717 	ldw	r2,28(r3)
  8007f8:	20800715 	stw	r2,28(r4)
  8007fc:	18800817 	ldw	r2,32(r3)
  800800:	20800815 	stw	r2,32(r4)
  800804:	18800917 	ldw	r2,36(r3)
  800808:	20800915 	stw	r2,36(r4)
  80080c:	18800a17 	ldw	r2,40(r3)
  800810:	20800a15 	stw	r2,40(r4)
  800814:	18800b17 	ldw	r2,44(r3)
  800818:	20800b15 	stw	r2,44(r4)
  80081c:	18800c17 	ldw	r2,48(r3)
  800820:	20800c15 	stw	r2,48(r4)
	
}
  800824:	e037883a 	mov	sp,fp
  800828:	df000017 	ldw	fp,0(sp)
  80082c:	dec00104 	addi	sp,sp,4
  800830:	f800283a 	ret

00800834 <gps_state_machine>:
 * Returns: 	void
 * Description: Takes one character at a time and parses out
 *				gps logs.
 ************************************************************/
void gps_state_machine(char c)
{	
  800834:	defff804 	addi	sp,sp,-32
  800838:	dfc00715 	stw	ra,28(sp)
  80083c:	df000615 	stw	fp,24(sp)
  800840:	df000604 	addi	fp,sp,24
  800844:	e13ffa05 	stb	r4,-24(fp)
	{
		printf("state = %d, checksum_index = %d, c = %c\n", state, checksum_index, c);
	}
	
	/* if new column */ 
	if(c == ',')
  800848:	e0bffa07 	ldb	r2,-24(fp)
  80084c:	10800b18 	cmpnei	r2,r2,44
  800850:	1000051e 	bne	r2,zero,800868 <gps_state_machine+0x34>
	{
		column_index++;
  800854:	d0a73317 	ldw	r2,-25396(gp)
  800858:	10800044 	addi	r2,r2,1
  80085c:	d0a73315 	stw	r2,-25396(gp)
		column_char_index = -1;
  800860:	00bfffc4 	movi	r2,-1
  800864:	d0a73215 	stw	r2,-25400(gp)
	}

	/* state 0: SOF character */
	if(c == '$')
  800868:	e0bffa07 	ldb	r2,-24(fp)
  80086c:	10800918 	cmpnei	r2,r2,36
  800870:	1000081e 	bne	r2,zero,800894 <gps_state_machine+0x60>
	{
		gps_state_machine_reset();
  800874:	08007680 	call	800768 <gps_state_machine_reset>
		state++;
  800878:	d0a73417 	ldw	r2,-25392(gp)
  80087c:	10800044 	addi	r2,r2,1
  800880:	d0a73415 	stw	r2,-25392(gp)
		column_char_index++;
  800884:	d0a73217 	ldw	r2,-25400(gp)
  800888:	10800044 	addi	r2,r2,1
  80088c:	d0a73215 	stw	r2,-25400(gp)
  800890:	00018606 	br	800eac <gps_state_machine+0x678>
	}	
	/* state 1-2: SOF characters */
	else if(( (state == 1) && (c == 'G') ) ||
  800894:	d0a73417 	ldw	r2,-25392(gp)
  800898:	10800058 	cmpnei	r2,r2,1
  80089c:	1000031e 	bne	r2,zero,8008ac <gps_state_machine+0x78>
  8008a0:	e0bffa07 	ldb	r2,-24(fp)
  8008a4:	108011e0 	cmpeqi	r2,r2,71
  8008a8:	1000061e 	bne	r2,zero,8008c4 <gps_state_machine+0x90>
  8008ac:	d0a73417 	ldw	r2,-25392(gp)
  8008b0:	10800098 	cmpnei	r2,r2,2
  8008b4:	10000e1e 	bne	r2,zero,8008f0 <gps_state_machine+0xbc>
  8008b8:	e0bffa07 	ldb	r2,-24(fp)
  8008bc:	10801418 	cmpnei	r2,r2,80
  8008c0:	10000b1e 	bne	r2,zero,8008f0 <gps_state_machine+0xbc>
			( (state == 2) && (c == 'P') ))
	{
		checksum ^= c;
  8008c4:	e0fffa07 	ldb	r3,-24(fp)
  8008c8:	d0a73b17 	ldw	r2,-25364(gp)
  8008cc:	1884f03a 	xor	r2,r3,r2
  8008d0:	d0a73b15 	stw	r2,-25364(gp)
		state++;
  8008d4:	d0a73417 	ldw	r2,-25392(gp)
  8008d8:	10800044 	addi	r2,r2,1
  8008dc:	d0a73415 	stw	r2,-25392(gp)
		column_char_index++;
  8008e0:	d0a73217 	ldw	r2,-25400(gp)
  8008e4:	10800044 	addi	r2,r2,1
  8008e8:	d0a73215 	stw	r2,-25400(gp)
		gps_state_machine_reset();
		state++;
		column_char_index++;
	}	
	/* state 1-2: SOF characters */
	else if(( (state == 1) && (c == 'G') ) ||
  8008ec:	00016f06 	br	800eac <gps_state_machine+0x678>
		checksum ^= c;
		state++;
		column_char_index++;
	}
	/* state 3-5: first column, data set id */
	else if( (state > 2) && (state < 6) )
  8008f0:	d0a73417 	ldw	r2,-25392(gp)
  8008f4:	108000d0 	cmplti	r2,r2,3
  8008f8:	1000141e 	bne	r2,zero,80094c <gps_state_machine+0x118>
  8008fc:	d0a73417 	ldw	r2,-25392(gp)
  800900:	10800188 	cmpgei	r2,r2,6
  800904:	1000111e 	bne	r2,zero,80094c <gps_state_machine+0x118>
	{
		data_set_id[state -3] = c;
  800908:	d0a73417 	ldw	r2,-25392(gp)
  80090c:	10ffff44 	addi	r3,r2,-3
  800910:	d0a73804 	addi	r2,gp,-25376
  800914:	1887883a 	add	r3,r3,r2
  800918:	e0bffa03 	ldbu	r2,-24(fp)
  80091c:	18800005 	stb	r2,0(r3)
		
		checksum ^= c;
  800920:	e0fffa07 	ldb	r3,-24(fp)
  800924:	d0a73b17 	ldw	r2,-25364(gp)
  800928:	1884f03a 	xor	r2,r3,r2
  80092c:	d0a73b15 	stw	r2,-25364(gp)
		state++;
  800930:	d0a73417 	ldw	r2,-25392(gp)
  800934:	10800044 	addi	r2,r2,1
  800938:	d0a73415 	stw	r2,-25392(gp)
		column_char_index++;
  80093c:	d0a73217 	ldw	r2,-25400(gp)
  800940:	10800044 	addi	r2,r2,1
  800944:	d0a73215 	stw	r2,-25400(gp)
		checksum ^= c;
		state++;
		column_char_index++;
	}
	/* state 3-5: first column, data set id */
	else if( (state > 2) && (state < 6) )
  800948:	00015806 	br	800eac <gps_state_machine+0x678>
		checksum ^= c;
		state++;
		column_char_index++;
	}
	/* state 6...: gps log */
	else if((state >= 6) && (c != '*') && (checksum_index == -1))
  80094c:	d0a73417 	ldw	r2,-25392(gp)
  800950:	10800190 	cmplti	r2,r2,6
  800954:	1001121e 	bne	r2,zero,800da0 <gps_state_machine+0x56c>
  800958:	e0bffa07 	ldb	r2,-24(fp)
  80095c:	10800aa0 	cmpeqi	r2,r2,42
  800960:	10010f1e 	bne	r2,zero,800da0 <gps_state_machine+0x56c>
  800964:	d0a73617 	ldw	r2,-25384(gp)
  800968:	10bfffd8 	cmpnei	r2,r2,-1
  80096c:	10010c1e 	bne	r2,zero,800da0 <gps_state_machine+0x56c>
	{
		/* if first character in the log data */
		if(state == 6)
  800970:	d0a73417 	ldw	r2,-25392(gp)
  800974:	10800198 	cmpnei	r2,r2,6
  800978:	1000321e 	bne	r2,zero,800a44 <gps_state_machine+0x210>
			{
				printf("data_set_id = %s\n", data_set_id);
			}

			/* figure out what the data set id (previous column) is */
			if((data_set_id[0] == 'G') &&
  80097c:	d0a73803 	ldbu	r2,-25376(gp)
  800980:	10803fcc 	andi	r2,r2,255
  800984:	1080201c 	xori	r2,r2,128
  800988:	10bfe004 	addi	r2,r2,-128
  80098c:	108011d8 	cmpnei	r2,r2,71
  800990:	1000121e 	bne	r2,zero,8009dc <gps_state_machine+0x1a8>
  800994:	00802074 	movhi	r2,129
  800998:	109d0f44 	addi	r2,r2,29757
  80099c:	10800003 	ldbu	r2,0(r2)
  8009a0:	10803fcc 	andi	r2,r2,255
  8009a4:	1080201c 	xori	r2,r2,128
  8009a8:	10bfe004 	addi	r2,r2,-128
  8009ac:	108011d8 	cmpnei	r2,r2,71
  8009b0:	10000a1e 	bne	r2,zero,8009dc <gps_state_machine+0x1a8>
  8009b4:	00802074 	movhi	r2,129
  8009b8:	109d0f84 	addi	r2,r2,29758
  8009bc:	10800003 	ldbu	r2,0(r2)
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1080201c 	xori	r2,r2,128
  8009c8:	10bfe004 	addi	r2,r2,-128
  8009cc:	10801058 	cmpnei	r2,r2,65
  8009d0:	1000021e 	bne	r2,zero,8009dc <gps_state_machine+0x1a8>
			   (data_set_id[1] == 'G') &&
			   (data_set_id[2] == 'A'))
			{
				temp_log_type = GPGGA;
  8009d4:	d0273015 	stw	zero,-25408(gp)
			{
				printf("data_set_id = %s\n", data_set_id);
			}

			/* figure out what the data set id (previous column) is */
			if((data_set_id[0] == 'G') &&
  8009d8:	00001a06 	br	800a44 <gps_state_machine+0x210>
			   (data_set_id[1] == 'G') &&
			   (data_set_id[2] == 'A'))
			{
				temp_log_type = GPGGA;
			}
			else if ((data_set_id[0] == 'G') &&
  8009dc:	d0a73803 	ldbu	r2,-25376(gp)
  8009e0:	10803fcc 	andi	r2,r2,255
  8009e4:	1080201c 	xori	r2,r2,128
  8009e8:	10bfe004 	addi	r2,r2,-128
  8009ec:	108011d8 	cmpnei	r2,r2,71
  8009f0:	1000131e 	bne	r2,zero,800a40 <gps_state_machine+0x20c>
  8009f4:	00802074 	movhi	r2,129
  8009f8:	109d0f44 	addi	r2,r2,29757
  8009fc:	10800003 	ldbu	r2,0(r2)
  800a00:	10803fcc 	andi	r2,r2,255
  800a04:	1080201c 	xori	r2,r2,128
  800a08:	10bfe004 	addi	r2,r2,-128
  800a0c:	108014d8 	cmpnei	r2,r2,83
  800a10:	10000b1e 	bne	r2,zero,800a40 <gps_state_machine+0x20c>
  800a14:	00802074 	movhi	r2,129
  800a18:	109d0f84 	addi	r2,r2,29758
  800a1c:	10800003 	ldbu	r2,0(r2)
  800a20:	10803fcc 	andi	r2,r2,255
  800a24:	1080201c 	xori	r2,r2,128
  800a28:	10bfe004 	addi	r2,r2,-128
  800a2c:	10801058 	cmpnei	r2,r2,65
  800a30:	1000031e 	bne	r2,zero,800a40 <gps_state_machine+0x20c>
                     (data_set_id[1] == 'S') &&
                     (data_set_id[2] == 'A'))
            {
				temp_log_type = GPGSA;
  800a34:	00800044 	movi	r2,1
  800a38:	d0a73015 	stw	r2,-25408(gp)
			   (data_set_id[1] == 'G') &&
			   (data_set_id[2] == 'A'))
			{
				temp_log_type = GPGGA;
			}
			else if ((data_set_id[0] == 'G') &&
  800a3c:	00000106 	br	800a44 <gps_state_machine+0x210>
            {
				temp_log_type = GPGSA;
            }
			else
			{
				gps_state_machine_reset();
  800a40:	08007680 	call	800768 <gps_state_machine_reset>
			}
		}

		switch(temp_log_type)
  800a44:	d0a73017 	ldw	r2,-25408(gp)
  800a48:	e0bfff15 	stw	r2,-4(fp)
  800a4c:	e0ffff17 	ldw	r3,-4(fp)
  800a50:	1805003a 	cmpeq	r2,r3,zero
  800a54:	1000041e 	bne	r2,zero,800a68 <gps_state_machine+0x234>
  800a58:	e13fff17 	ldw	r4,-4(fp)
  800a5c:	20800060 	cmpeqi	r2,r4,1
  800a60:	1000aa1e 	bne	r2,zero,800d0c <gps_state_machine+0x4d8>
  800a64:	0000c206 	br	800d70 <gps_state_machine+0x53c>
		{
			/* parse character for GPGGA log */
			case GPGGA:
				switch(column_index)
  800a68:	d0a73317 	ldw	r2,-25396(gp)
  800a6c:	e0bffe15 	stw	r2,-8(fp)
  800a70:	e0fffe17 	ldw	r3,-8(fp)
  800a74:	188002e8 	cmpgeui	r2,r3,11
  800a78:	1000be1e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800a7c:	e13ffe17 	ldw	r4,-8(fp)
  800a80:	e13ffe17 	ldw	r4,-8(fp)
  800a84:	2105883a 	add	r2,r4,r4
  800a88:	1087883a 	add	r3,r2,r2
  800a8c:	00802034 	movhi	r2,128
  800a90:	1082a804 	addi	r2,r2,2720
  800a94:	1885883a 	add	r2,r3,r2
  800a98:	10800017 	ldw	r2,0(r2)
  800a9c:	1000683a 	jmp	r2
  800aa0:	00800d74 	movhi	r2,53
  800aa4:	00800acc 	andi	r2,zero,43
  800aa8:	00800b88 	cmpgei	r2,zero,46
  800aac:	00800bfc 	xorhi	r2,zero,47
  800ab0:	00800c20 	cmpeqi	r2,zero,48
  800ab4:	00800c94 	movui	r2,50
  800ab8:	00800d74 	movhi	r2,53
  800abc:	00800d74 	movhi	r2,53
  800ac0:	00800d74 	movhi	r2,53
  800ac4:	00800cb8 	rdprs	r2,zero,50
  800ac8:	00800ce8 	cmpgeui	r2,zero,51
				{
					/* parse character for GPGGA time column */
					case GPGGA_COL_TIME:
						switch(column_char_index)
  800acc:	d0a73217 	ldw	r2,-25400(gp)
  800ad0:	e0bffd15 	stw	r2,-12(fp)
  800ad4:	e0fffd17 	ldw	r3,-12(fp)
  800ad8:	18800268 	cmpgeui	r2,r3,9
  800adc:	1000a51e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800ae0:	e13ffd17 	ldw	r4,-12(fp)
  800ae4:	e13ffd17 	ldw	r4,-12(fp)
  800ae8:	2105883a 	add	r2,r4,r4
  800aec:	1087883a 	add	r3,r2,r2
  800af0:	00802034 	movhi	r2,128
  800af4:	1082c104 	addi	r2,r2,2820
  800af8:	1885883a 	add	r2,r3,r2
  800afc:	10800017 	ldw	r2,0(r2)
  800b00:	1000683a 	jmp	r2
  800b04:	00800b28 	cmpgeui	r2,zero,44
  800b08:	00800b28 	cmpgeui	r2,zero,44
  800b0c:	00800b44 	movi	r2,45
  800b10:	00800b44 	movi	r2,45
  800b14:	00800b64 	muli	r2,zero,45
  800b18:	00800b64 	muli	r2,zero,45
  800b1c:	00800b64 	muli	r2,zero,45
  800b20:	00800b64 	muli	r2,zero,45
  800b24:	00800b64 	muli	r2,zero,45
						{
							/* char 0-1: hour */
							case 0:
							case 1:
								temp_log.gpgga.time.hour[column_char_index] = c;
  800b28:	d0e73217 	ldw	r3,-25400(gp)
  800b2c:	00802074 	movhi	r2,129
  800b30:	109d3d04 	addi	r2,r2,29940
  800b34:	10c7883a 	add	r3,r2,r3
  800b38:	e0bffa03 	ldbu	r2,-24(fp)
  800b3c:	18800005 	stb	r2,0(r3)
								break;
  800b40:	00008c06 	br	800d74 <gps_state_machine+0x540>
								
							/* char 2-3: minute */
							case 2:
							case 3:
								temp_log.gpgga.time.minute[column_char_index -2] = c;
  800b44:	d0a73217 	ldw	r2,-25400(gp)
  800b48:	10ffff84 	addi	r3,r2,-2
  800b4c:	00802074 	movhi	r2,129
  800b50:	109d3d04 	addi	r2,r2,29940
  800b54:	10c7883a 	add	r3,r2,r3
  800b58:	e0bffa03 	ldbu	r2,-24(fp)
  800b5c:	188000c5 	stb	r2,3(r3)
								break;
  800b60:	00008406 	br	800d74 <gps_state_machine+0x540>
							case 4:
							case 5:
							case 6:
							case 7:
							case 8:
								temp_log.gpgga.time.second[column_char_index -4] = c;
  800b64:	d0a73217 	ldw	r2,-25400(gp)
  800b68:	10ffff04 	addi	r3,r2,-4
  800b6c:	00802074 	movhi	r2,129
  800b70:	109d3d04 	addi	r2,r2,29940
  800b74:	1885883a 	add	r2,r3,r2
  800b78:	10c00104 	addi	r3,r2,4
  800b7c:	e0bffa03 	ldbu	r2,-24(fp)
  800b80:	18800085 	stb	r2,2(r3)
								break;
								
							default:
								break;
						}
						break;
  800b84:	00007b06 	br	800d74 <gps_state_machine+0x540>
						
					/* parse character for GPGGA longitude column */
					case GPGGA_COL_LON:
						switch(column_char_index)
  800b88:	d0a73217 	ldw	r2,-25400(gp)
  800b8c:	e0bffc15 	stw	r2,-16(fp)
  800b90:	e0fffc17 	ldw	r3,-16(fp)
  800b94:	1804803a 	cmplt	r2,r3,zero
  800b98:	1000761e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800b9c:	e13ffc17 	ldw	r4,-16(fp)
  800ba0:	20800090 	cmplti	r2,r4,2
  800ba4:	1000041e 	bne	r2,zero,800bb8 <gps_state_machine+0x384>
  800ba8:	e0fffc17 	ldw	r3,-16(fp)
  800bac:	18800288 	cmpgei	r2,r3,10
  800bb0:	1000701e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800bb4:	00000806 	br	800bd8 <gps_state_machine+0x3a4>
						{
							/* char 0-1: degrees */
							case 0:
							case 1:
								temp_log.gpgga.lon.degrees[column_char_index] = c;
  800bb8:	d0e73217 	ldw	r3,-25400(gp)
  800bbc:	00802074 	movhi	r2,129
  800bc0:	109d3d04 	addi	r2,r2,29940
  800bc4:	1885883a 	add	r2,r3,r2
  800bc8:	10c00604 	addi	r3,r2,24
  800bcc:	e0bffa03 	ldbu	r2,-24(fp)
  800bd0:	188000c5 	stb	r2,3(r3)
								break;
  800bd4:	00006706 	br	800d74 <gps_state_machine+0x540>
							case 5:
							case 6:
							case 7:
							case 8:
							case 9:
								temp_log.gpgga.lon.minutes[column_char_index -2] = c;
  800bd8:	d0a73217 	ldw	r2,-25400(gp)
  800bdc:	10ffff84 	addi	r3,r2,-2
  800be0:	00802074 	movhi	r2,129
  800be4:	109d3d04 	addi	r2,r2,29940
  800be8:	1885883a 	add	r2,r3,r2
  800bec:	10c00704 	addi	r3,r2,28
  800bf0:	e0bffa03 	ldbu	r2,-24(fp)
  800bf4:	188000c5 	stb	r2,3(r3)
								
							default:
								break;
						}
					
						break;
  800bf8:	00005e06 	br	800d74 <gps_state_machine+0x540>
						
					/* parse character for GPGGA longitude direction column */
					case GPGGA_COL_LON_DIR:
						switch(column_char_index)
  800bfc:	d0a73217 	ldw	r2,-25400(gp)
  800c00:	1005003a 	cmpeq	r2,r2,zero
  800c04:	1000011e 	bne	r2,zero,800c0c <gps_state_machine+0x3d8>
  800c08:	00005a06 	br	800d74 <gps_state_machine+0x540>
						{							
							/* char 0: longitude direction (E/W) */
							case 0:
								temp_log.gpgga.lon.direction[0] = c;
  800c0c:	00c02074 	movhi	r3,129
  800c10:	18dd3d04 	addi	r3,r3,29940
  800c14:	e0bffa03 	ldbu	r2,-24(fp)
  800c18:	18800a05 	stb	r2,40(r3)
								break;
								
							default:
								break;
						}						
						break;
  800c1c:	00005506 	br	800d74 <gps_state_machine+0x540>
						
					/* parse character for GPGGA latitude column */
					case GPGGA_COL_LAT:
						switch(column_char_index)
  800c20:	d1273217 	ldw	r4,-25400(gp)
  800c24:	e13ffb15 	stw	r4,-20(fp)
  800c28:	e0fffb17 	ldw	r3,-20(fp)
  800c2c:	1804803a 	cmplt	r2,r3,zero
  800c30:	1000501e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800c34:	e13ffb17 	ldw	r4,-20(fp)
  800c38:	208000d0 	cmplti	r2,r4,3
  800c3c:	1000041e 	bne	r2,zero,800c50 <gps_state_machine+0x41c>
  800c40:	e0fffb17 	ldw	r3,-20(fp)
  800c44:	188002c8 	cmpgei	r2,r3,11
  800c48:	10004a1e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800c4c:	00000806 	br	800c70 <gps_state_machine+0x43c>
						{
							/* char 0-1: degrees */
							case 0:
							case 1:
							case 2:
								temp_log.gpgga.lat.degrees[column_char_index] = c;
  800c50:	d0e73217 	ldw	r3,-25400(gp)
  800c54:	00802074 	movhi	r2,129
  800c58:	109d3d04 	addi	r2,r2,29940
  800c5c:	1885883a 	add	r2,r3,r2
  800c60:	10c00304 	addi	r3,r2,12
  800c64:	e0bffa03 	ldbu	r2,-24(fp)
  800c68:	18800005 	stb	r2,0(r3)
								break;
  800c6c:	00004106 	br	800d74 <gps_state_machine+0x540>
							case 6:
							case 7:
							case 8:
							case 9:
							case 10:
								temp_log.gpgga.lat.minutes[column_char_index -3] = c;
  800c70:	d0a73217 	ldw	r2,-25400(gp)
  800c74:	10ffff44 	addi	r3,r2,-3
  800c78:	00802074 	movhi	r2,129
  800c7c:	109d3d04 	addi	r2,r2,29940
  800c80:	1885883a 	add	r2,r3,r2
  800c84:	10c00404 	addi	r3,r2,16
  800c88:	e0bffa03 	ldbu	r2,-24(fp)
  800c8c:	18800005 	stb	r2,0(r3)
								break;
								
							default:
								break;
						}
						break;
  800c90:	00003806 	br	800d74 <gps_state_machine+0x540>
						
					/* parse character for GPGGA latitude direction column */
					case GPGGA_COL_LAT_DIR:
						switch(column_char_index)
  800c94:	d0a73217 	ldw	r2,-25400(gp)
  800c98:	1005003a 	cmpeq	r2,r2,zero
  800c9c:	1000011e 	bne	r2,zero,800ca4 <gps_state_machine+0x470>
  800ca0:	00003406 	br	800d74 <gps_state_machine+0x540>
						{
							/* char 0: latitude direction (N/S) */
							case 0:
								temp_log.gpgga.lat.direction[0] = c;
  800ca4:	00c02074 	movhi	r3,129
  800ca8:	18dd3d04 	addi	r3,r3,29940
  800cac:	e0bffa03 	ldbu	r2,-24(fp)
  800cb0:	18800645 	stb	r2,25(r3)
								break;
								
							default:
								break;
						}
						break;
  800cb4:	00002f06 	br	800d74 <gps_state_machine+0x540>
						
					/* parse character for GPGGA altitude column */
					case GPGGA_COL_ALT:
						switch(column_char_index)
  800cb8:	d0a73217 	ldw	r2,-25400(gp)
  800cbc:	1005883a 	mov	r2,r2
  800cc0:	108001e8 	cmpgeui	r2,r2,7
  800cc4:	10002b1e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
							case 2:
							case 3:
							case 4:
							case 5:
							case 6:
								temp_log.gpgga.alt.alt[column_char_index] = c;
  800cc8:	d0e73217 	ldw	r3,-25400(gp)
  800ccc:	00802074 	movhi	r2,129
  800cd0:	109d3d04 	addi	r2,r2,29940
  800cd4:	1885883a 	add	r2,r3,r2
  800cd8:	10c00a04 	addi	r3,r2,40
  800cdc:	e0bffa03 	ldbu	r2,-24(fp)
  800ce0:	18800085 	stb	r2,2(r3)
								break;
								
							default:
								break;
						}
						break;
  800ce4:	00002306 	br	800d74 <gps_state_machine+0x540>
						
					/* parse character for GPGGA altitude unit column */
					case GPGGA_COL_ALT_DIR:
						switch(column_char_index)
  800ce8:	d0a73217 	ldw	r2,-25400(gp)
  800cec:	1005003a 	cmpeq	r2,r2,zero
  800cf0:	1000011e 	bne	r2,zero,800cf8 <gps_state_machine+0x4c4>
  800cf4:	00001f06 	br	800d74 <gps_state_machine+0x540>
						{						
							/* char 0: altitude units */
							case 0:
								temp_log.gpgga.alt.unit[0] = c;
  800cf8:	00c02074 	movhi	r3,129
  800cfc:	18dd3d04 	addi	r3,r3,29940
  800d00:	e0bffa03 	ldbu	r2,-24(fp)
  800d04:	18800c45 	stb	r2,49(r3)
								break;
						}						
						break;
				}

				break;
  800d08:	00001a06 	br	800d74 <gps_state_machine+0x540>

			/* parse character for GPGSA log */
			case GPGSA:
			
				/* parse character for GPGS ID number columns */
				if(( (column_index >= 3) && (column_index <= 14) ) &&
  800d0c:	d0a73317 	ldw	r2,-25396(gp)
  800d10:	108000d0 	cmplti	r2,r2,3
  800d14:	1000171e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800d18:	d0a73317 	ldw	r2,-25396(gp)
  800d1c:	108003c8 	cmpgei	r2,r2,15
  800d20:	1000141e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800d24:	d0a73217 	ldw	r2,-25400(gp)
  800d28:	1004803a 	cmplt	r2,r2,zero
  800d2c:	1000111e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
  800d30:	d0a73217 	ldw	r2,-25400(gp)
  800d34:	10800088 	cmpgei	r2,r2,2
  800d38:	10000e1e 	bne	r2,zero,800d74 <gps_state_machine+0x540>
				   ( (column_char_index >= 0) && (column_char_index <= 1)))
				{
					temp_log.gpgsa.list[column_index -3].id[column_char_index] = c;
  800d3c:	d0a73317 	ldw	r2,-25396(gp)
  800d40:	10ffff44 	addi	r3,r2,-3
  800d44:	d1673217 	ldw	r5,-25400(gp)
  800d48:	01002074 	movhi	r4,129
  800d4c:	211d3d04 	addi	r4,r4,29940
  800d50:	1805883a 	mov	r2,r3
  800d54:	1085883a 	add	r2,r2,r2
  800d58:	10c5883a 	add	r2,r2,r3
  800d5c:	1105883a 	add	r2,r2,r4
  800d60:	1147883a 	add	r3,r2,r5
  800d64:	e0bffa03 	ldbu	r2,-24(fp)
  800d68:	18800005 	stb	r2,0(r3)
				}

				break;
  800d6c:	00000106 	br	800d74 <gps_state_machine+0x540>

			/* unknown data set id */
			default:
				gps_state_machine_reset();
  800d70:	08007680 	call	800768 <gps_state_machine_reset>
				break;
		}

		/* XOR current char to checksum */
		checksum ^= c;
  800d74:	e0fffa07 	ldb	r3,-24(fp)
  800d78:	d0a73b17 	ldw	r2,-25364(gp)
  800d7c:	1884f03a 	xor	r2,r3,r2
  800d80:	d0a73b15 	stw	r2,-25364(gp)
		
		/* increment state and char within column counters */
		state++;
  800d84:	d0a73417 	ldw	r2,-25392(gp)
  800d88:	10800044 	addi	r2,r2,1
  800d8c:	d0a73415 	stw	r2,-25392(gp)
		column_char_index++;
  800d90:	d0a73217 	ldw	r2,-25400(gp)
  800d94:	10800044 	addi	r2,r2,1
  800d98:	d0a73215 	stw	r2,-25400(gp)
		checksum ^= c;
		state++;
		column_char_index++;
	}
	/* state 6...: gps log */
	else if((state >= 6) && (c != '*') && (checksum_index == -1))
  800d9c:	00004306 	br	800eac <gps_state_machine+0x678>
		state++;
		column_char_index++;

	}
	/* state EOF */
	else if((state >= 6) && (c == '*'))
  800da0:	d0a73417 	ldw	r2,-25392(gp)
  800da4:	10800190 	cmplti	r2,r2,6
  800da8:	1000111e 	bne	r2,zero,800df0 <gps_state_machine+0x5bc>
  800dac:	e0bffa07 	ldb	r2,-24(fp)
  800db0:	10800a98 	cmpnei	r2,r2,42
  800db4:	10000e1e 	bne	r2,zero,800df0 <gps_state_machine+0x5bc>
	{
		sprintf(checksum_str, "%02X\0", checksum);
  800db8:	d1a73b17 	ldw	r6,-25364(gp)
  800dbc:	d1273504 	addi	r4,gp,-25388
  800dc0:	01402074 	movhi	r5,129
  800dc4:	294d1004 	addi	r5,r5,13376
  800dc8:	0804a6c0 	call	804a6c <sprintf>
		if(debug_level >= SOME)
		{
			printf("calculated checksum = %s\n", checksum_str);
		}
		
		state++;
  800dcc:	d0a73417 	ldw	r2,-25392(gp)
  800dd0:	10800044 	addi	r2,r2,1
  800dd4:	d0a73415 	stw	r2,-25392(gp)
		column_char_index++;
  800dd8:	d0a73217 	ldw	r2,-25400(gp)
  800ddc:	10800044 	addi	r2,r2,1
  800de0:	d0a73215 	stw	r2,-25400(gp)
		checksum_index = state;
  800de4:	d0a73417 	ldw	r2,-25392(gp)
  800de8:	d0a73615 	stw	r2,-25384(gp)
		state++;
		column_char_index++;

	}
	/* state EOF */
	else if((state >= 6) && (c == '*'))
  800dec:	00002f06 	br	800eac <gps_state_machine+0x678>
		column_char_index++;
		checksum_index = state;
			
	}
	/* state checksum char 1 */
	else if(state == checksum_index)
  800df0:	d0e73417 	ldw	r3,-25392(gp)
  800df4:	d0a73617 	ldw	r2,-25384(gp)
  800df8:	18800f1e 	bne	r3,r2,800e38 <gps_state_machine+0x604>
	{
	
		/* if first char does NOT match, the checksum is bad */
		if(checksum_str[0] != c)
  800dfc:	d0a73503 	ldbu	r2,-25388(gp)
  800e00:	10c03fcc 	andi	r3,r2,255
  800e04:	18c0201c 	xori	r3,r3,128
  800e08:	18ffe004 	addi	r3,r3,-128
  800e0c:	e0bffa07 	ldb	r2,-24(fp)
  800e10:	18800226 	beq	r3,r2,800e1c <gps_state_machine+0x5e8>
			if(debug_level >= SOME)
			{
				printf("%c\n", c);
			}
			
			gps_state_machine_reset();
  800e14:	08007680 	call	800768 <gps_state_machine_reset>
			return;
  800e18:	00002406 	br	800eac <gps_state_machine+0x678>
		}
		
		state++;
  800e1c:	d0a73417 	ldw	r2,-25392(gp)
  800e20:	10800044 	addi	r2,r2,1
  800e24:	d0a73415 	stw	r2,-25392(gp)
		column_char_index++;
  800e28:	d0a73217 	ldw	r2,-25400(gp)
  800e2c:	10800044 	addi	r2,r2,1
  800e30:	d0a73215 	stw	r2,-25400(gp)
  800e34:	00001d06 	br	800eac <gps_state_machine+0x678>
		
	}
	/* state checksum char 2 */
	else if((state == (checksum_index +1)) && (checksum_index != -1))
  800e38:	d0a73617 	ldw	r2,-25384(gp)
  800e3c:	10c00044 	addi	r3,r2,1
  800e40:	d0a73417 	ldw	r2,-25392(gp)
  800e44:	1880181e 	bne	r3,r2,800ea8 <gps_state_machine+0x674>
  800e48:	d0a73617 	ldw	r2,-25384(gp)
  800e4c:	10bfffe0 	cmpeqi	r2,r2,-1
  800e50:	1000151e 	bne	r2,zero,800ea8 <gps_state_machine+0x674>
	{		
		/* if second char does match */
		if(checksum_str[1] == c)
  800e54:	00802074 	movhi	r2,129
  800e58:	109d0c44 	addi	r2,r2,29745
  800e5c:	10800003 	ldbu	r2,0(r2)
  800e60:	10c03fcc 	andi	r3,r2,255
  800e64:	18c0201c 	xori	r3,r3,128
  800e68:	18ffe004 	addi	r3,r3,-128
  800e6c:	e0bffa07 	ldb	r2,-24(fp)
  800e70:	18800a1e 	bne	r3,r2,800e9c <gps_state_machine+0x668>
		{
			/* packet is valid, set data_good flag */
			gps_convert_log();
  800e74:	0800ec00 	call	800ec0 <gps_convert_log>
			gps_save_string();
  800e78:	08014140 	call	801414 <gps_save_string>
			//WriteLCD(GGA_elev, GGA_time);
			WriteLCD(GGA_lat, GGA_lon);
  800e7c:	01002074 	movhi	r4,129
  800e80:	211d3804 	addi	r4,r4,29920
  800e84:	01402074 	movhi	r5,129
  800e88:	295d5404 	addi	r5,r5,30032
  800e8c:	08017300 	call	801730 <WriteLCD>
			data_good = 1;
  800e90:	00800044 	movi	r2,1
  800e94:	d0a73715 	stw	r2,-25380(gp)
  800e98:	00000106 	br	800ea0 <gps_state_machine+0x66c>

		}
		else
		{
			data_good = 0;
  800e9c:	d0273715 	stw	zero,-25380(gp)
		}
		
		/* packet is done */
		gps_state_machine_reset();
  800ea0:	08007680 	call	800768 <gps_state_machine_reset>
		return;
  800ea4:	00000106 	br	800eac <gps_state_machine+0x678>
	}
	/* unknown state */
	else
	{
		gps_state_machine_reset();
  800ea8:	08007680 	call	800768 <gps_state_machine_reset>
	}

	return;
}
  800eac:	e037883a 	mov	sp,fp
  800eb0:	dfc00117 	ldw	ra,4(sp)
  800eb4:	df000017 	ldw	fp,0(sp)
  800eb8:	dec00204 	addi	sp,sp,8
  800ebc:	f800283a 	ret

00800ec0 <gps_convert_log>:
 * Returns: 	void
 * Description: Converts temp_log from GP***_T to GP***_D_T
 *				
 ************************************************************/
void gps_convert_log(void)
{
  800ec0:	deffec04 	addi	sp,sp,-80
  800ec4:	dfc01315 	stw	ra,76(sp)
  800ec8:	df001215 	stw	fp,72(sp)
  800ecc:	dc401115 	stw	r17,68(sp)
  800ed0:	dc001015 	stw	r16,64(sp)
  800ed4:	df001004 	addi	fp,sp,64
	GPS_LOG_U converted_log;	// struct to hold the converted log
	int i;
	char* pEnd;

	/* clear converted log */
	converted_log = empty_gps_log;
  800ed8:	00c02074 	movhi	r3,129
  800edc:	18dd2104 	addi	r3,r3,29828
  800ee0:	18800017 	ldw	r2,0(r3)
  800ee4:	e0bff115 	stw	r2,-60(fp)
  800ee8:	18800117 	ldw	r2,4(r3)
  800eec:	e0bff215 	stw	r2,-56(fp)
  800ef0:	18800217 	ldw	r2,8(r3)
  800ef4:	e0bff315 	stw	r2,-52(fp)
  800ef8:	18800317 	ldw	r2,12(r3)
  800efc:	e0bff415 	stw	r2,-48(fp)
  800f00:	18800417 	ldw	r2,16(r3)
  800f04:	e0bff515 	stw	r2,-44(fp)
  800f08:	18800517 	ldw	r2,20(r3)
  800f0c:	e0bff615 	stw	r2,-40(fp)
  800f10:	18800617 	ldw	r2,24(r3)
  800f14:	e0bff715 	stw	r2,-36(fp)
  800f18:	18800717 	ldw	r2,28(r3)
  800f1c:	e0bff815 	stw	r2,-32(fp)
  800f20:	18800817 	ldw	r2,32(r3)
  800f24:	e0bff915 	stw	r2,-28(fp)
  800f28:	18800917 	ldw	r2,36(r3)
  800f2c:	e0bffa15 	stw	r2,-24(fp)
  800f30:	18800a17 	ldw	r2,40(r3)
  800f34:	e0bffb15 	stw	r2,-20(fp)
  800f38:	18800b17 	ldw	r2,44(r3)
  800f3c:	e0bffc15 	stw	r2,-16(fp)
  800f40:	18800c17 	ldw	r2,48(r3)
  800f44:	e0bffd15 	stw	r2,-12(fp)

	switch(temp_log_type)
  800f48:	d0a73017 	ldw	r2,-25408(gp)
  800f4c:	e0bfff15 	stw	r2,-4(fp)
  800f50:	e0ffff17 	ldw	r3,-4(fp)
  800f54:	1805003a 	cmpeq	r2,r3,zero
  800f58:	1000041e 	bne	r2,zero,800f6c <gps_convert_log+0xac>
  800f5c:	e13fff17 	ldw	r4,-4(fp)
  800f60:	20800060 	cmpeqi	r2,r4,1
  800f64:	1000d41e 	bne	r2,zero,8012b8 <gps_convert_log+0x3f8>
  800f68:	00012306 	br	8013f8 <gps_convert_log+0x538>
	{
		case GPGGA:
			/* convert time */
			converted_log.gpgga_d.time.hour  		 = strtol (&temp_log.gpgga.time.hour[0], &pEnd, 10);
  800f6c:	e17ffe04 	addi	r5,fp,-8
  800f70:	01002074 	movhi	r4,129
  800f74:	211d3d04 	addi	r4,r4,29940
  800f78:	01800284 	movi	r6,10
  800f7c:	08066a40 	call	8066a4 <strtol>
  800f80:	e0bff115 	stw	r2,-60(fp)
			converted_log.gpgga_d.time.minute  		 = strtol (&temp_log.gpgga.time.minute[0], &pEnd, 10);
  800f84:	e17ffe04 	addi	r5,fp,-8
  800f88:	01002074 	movhi	r4,129
  800f8c:	211d3dc4 	addi	r4,r4,29943
  800f90:	01800284 	movi	r6,10
  800f94:	08066a40 	call	8066a4 <strtol>
  800f98:	e0bff215 	stw	r2,-56(fp)
			converted_log.gpgga_d.time.second  		 = strtol (&temp_log.gpgga.time.second[0], &pEnd, 10);
  800f9c:	e17ffe04 	addi	r5,fp,-8
  800fa0:	01002074 	movhi	r4,129
  800fa4:	211d3e84 	addi	r4,r4,29946
  800fa8:	01800284 	movi	r6,10
  800fac:	08066a40 	call	8066a4 <strtol>
  800fb0:	e0bff315 	stw	r2,-52(fp)

			/* shift from UTC to MDT */
			converted_log.gpgga_d.time.hour += -7;
  800fb4:	e0bff117 	ldw	r2,-60(fp)
  800fb8:	10bffe44 	addi	r2,r2,-7
  800fbc:	e0bff115 	stw	r2,-60(fp)
			if(converted_log.gpgga_d.time.hour < 0)
  800fc0:	e0bff117 	ldw	r2,-60(fp)
  800fc4:	1004403a 	cmpge	r2,r2,zero
  800fc8:	1000031e 	bne	r2,zero,800fd8 <gps_convert_log+0x118>
			{
				converted_log.gpgga_d.time.hour += 24;
  800fcc:	e0bff117 	ldw	r2,-60(fp)
  800fd0:	10800604 	addi	r2,r2,24
  800fd4:	e0bff115 	stw	r2,-60(fp)
			}

			/* convert to 12 hour time */
			if(converted_log.gpgga_d.time.hour > 12)
  800fd8:	e0bff117 	ldw	r2,-60(fp)
  800fdc:	10800350 	cmplti	r2,r2,13
  800fe0:	1000091e 	bne	r2,zero,801008 <gps_convert_log+0x148>
			{
				sprintf(converted_log.gpgga_d.time.ampm, "PM\0");
  800fe4:	e0bff104 	addi	r2,fp,-60
  800fe8:	10c00304 	addi	r3,r2,12
  800fec:	00935404 	movi	r2,19792
  800ff0:	1880000d 	sth	r2,0(r3)
  800ff4:	18000085 	stb	zero,2(r3)
				converted_log.gpgga_d.time.hour -= 12;
  800ff8:	e0bff117 	ldw	r2,-60(fp)
  800ffc:	10bffd04 	addi	r2,r2,-12
  801000:	e0bff115 	stw	r2,-60(fp)
  801004:	00000506 	br	80101c <gps_convert_log+0x15c>
			}
			else
			{
				sprintf(converted_log.gpgga_d.time.ampm, "AM\0");
  801008:	e0bff104 	addi	r2,fp,-60
  80100c:	10c00304 	addi	r3,r2,12
  801010:	00935044 	movi	r2,19777
  801014:	1880000d 	sth	r2,0(r3)
  801018:	18000085 	stb	zero,2(r3)
			}


			/* convert latitude */
			converted_log.gpgga_d.lat  		 = strtod (&temp_log.gpgga.lat.degrees[0], &pEnd);
  80101c:	e17ffe04 	addi	r5,fp,-8
  801020:	01002074 	movhi	r4,129
  801024:	211d4004 	addi	r4,r4,29952
  801028:	08064380 	call	806438 <strtod>
  80102c:	1009883a 	mov	r4,r2
  801030:	180b883a 	mov	r5,r3
  801034:	e13ff515 	stw	r4,-44(fp)
  801038:	e17ff615 	stw	r5,-40(fp)
			converted_log.gpgga_d.lat 		+= strtod (&temp_log.gpgga.lat.minutes[0], &pEnd) / 60.0;
  80103c:	e43ff517 	ldw	r16,-44(fp)
  801040:	e47ff617 	ldw	r17,-40(fp)
  801044:	e17ffe04 	addi	r5,fp,-8
  801048:	01002074 	movhi	r4,129
  80104c:	211d4104 	addi	r4,r4,29956
  801050:	08064380 	call	806438 <strtod>
  801054:	100b883a 	mov	r5,r2
  801058:	180d883a 	mov	r6,r3
  80105c:	2809883a 	mov	r4,r5
  801060:	300b883a 	mov	r5,r6
  801064:	000d883a 	mov	r6,zero
  801068:	01d013b4 	movhi	r7,16462
  80106c:	08021500 	call	802150 <__divdf3>
  801070:	1009883a 	mov	r4,r2
  801074:	180b883a 	mov	r5,r3
  801078:	2005883a 	mov	r2,r4
  80107c:	2807883a 	mov	r3,r5
  801080:	8009883a 	mov	r4,r16
  801084:	880b883a 	mov	r5,r17
  801088:	100d883a 	mov	r6,r2
  80108c:	180f883a 	mov	r7,r3
  801090:	0801d180 	call	801d18 <__adddf3>
  801094:	1009883a 	mov	r4,r2
  801098:	180b883a 	mov	r5,r3
  80109c:	2005883a 	mov	r2,r4
  8010a0:	2807883a 	mov	r3,r5
  8010a4:	e0bff515 	stw	r2,-44(fp)
  8010a8:	e0fff615 	stw	r3,-40(fp)
			for(i = 0; i < sizeof(temp_log.gpgga.lat.direction); i++)
  8010ac:	e03ff015 	stw	zero,-64(fp)
  8010b0:	00000d06 	br	8010e8 <gps_convert_log+0x228>
			{
				converted_log.gpgga_d.lat_dir[i] 	 = temp_log.gpgga.lat.direction[i];
  8010b4:	e13ff017 	ldw	r4,-64(fp)
  8010b8:	e0fff017 	ldw	r3,-64(fp)
  8010bc:	00802074 	movhi	r2,129
  8010c0:	109d3d04 	addi	r2,r2,29940
  8010c4:	1885883a 	add	r2,r3,r2
  8010c8:	10800604 	addi	r2,r2,24
  8010cc:	10c00043 	ldbu	r3,1(r2)
  8010d0:	e0bff704 	addi	r2,fp,-36
  8010d4:	1105883a 	add	r2,r2,r4
  8010d8:	10c00005 	stb	r3,0(r2)


			/* convert latitude */
			converted_log.gpgga_d.lat  		 = strtod (&temp_log.gpgga.lat.degrees[0], &pEnd);
			converted_log.gpgga_d.lat 		+= strtod (&temp_log.gpgga.lat.minutes[0], &pEnd) / 60.0;
			for(i = 0; i < sizeof(temp_log.gpgga.lat.direction); i++)
  8010dc:	e0bff017 	ldw	r2,-64(fp)
  8010e0:	10800044 	addi	r2,r2,1
  8010e4:	e0bff015 	stw	r2,-64(fp)
  8010e8:	e0bff017 	ldw	r2,-64(fp)
  8010ec:	108000b0 	cmpltui	r2,r2,2
  8010f0:	103ff01e 	bne	r2,zero,8010b4 <gps_convert_log+0x1f4>
				converted_log.gpgga_d.lat_dir[i] 	 = temp_log.gpgga.lat.direction[i];
			}


			/* convert longitude */
			converted_log.gpgga_d.lon  = strtod (&temp_log.gpgga.lon.degrees[0], &pEnd);
  8010f4:	e17ffe04 	addi	r5,fp,-8
  8010f8:	01002074 	movhi	r4,129
  8010fc:	211d43c4 	addi	r4,r4,29967
  801100:	08064380 	call	806438 <strtod>
  801104:	1009883a 	mov	r4,r2
  801108:	180b883a 	mov	r5,r3
  80110c:	e13ff815 	stw	r4,-32(fp)
  801110:	e17ff915 	stw	r5,-28(fp)
			converted_log.gpgga_d.lon += strtod (&temp_log.gpgga.lon.minutes[0], &pEnd) / 60.0;
  801114:	e43ff817 	ldw	r16,-32(fp)
  801118:	e47ff917 	ldw	r17,-28(fp)
  80111c:	e17ffe04 	addi	r5,fp,-8
  801120:	01002074 	movhi	r4,129
  801124:	211d44c4 	addi	r4,r4,29971
  801128:	08064380 	call	806438 <strtod>
  80112c:	100b883a 	mov	r5,r2
  801130:	180d883a 	mov	r6,r3
  801134:	2809883a 	mov	r4,r5
  801138:	300b883a 	mov	r5,r6
  80113c:	000d883a 	mov	r6,zero
  801140:	01d013b4 	movhi	r7,16462
  801144:	08021500 	call	802150 <__divdf3>
  801148:	1009883a 	mov	r4,r2
  80114c:	180b883a 	mov	r5,r3
  801150:	2005883a 	mov	r2,r4
  801154:	2807883a 	mov	r3,r5
  801158:	8009883a 	mov	r4,r16
  80115c:	880b883a 	mov	r5,r17
  801160:	100d883a 	mov	r6,r2
  801164:	180f883a 	mov	r7,r3
  801168:	0801d180 	call	801d18 <__adddf3>
  80116c:	1009883a 	mov	r4,r2
  801170:	180b883a 	mov	r5,r3
  801174:	2005883a 	mov	r2,r4
  801178:	2807883a 	mov	r3,r5
  80117c:	e0bff815 	stw	r2,-32(fp)
  801180:	e0fff915 	stw	r3,-28(fp)
			for(i = 0; i < sizeof(temp_log.gpgga.lon.direction); i++)
  801184:	e03ff015 	stw	zero,-64(fp)
  801188:	00000d06 	br	8011c0 <gps_convert_log+0x300>
			{
				converted_log.gpgga_d.lon_dir[i] 	 = temp_log.gpgga.lon.direction[i];
  80118c:	e13ff017 	ldw	r4,-64(fp)
  801190:	e0fff017 	ldw	r3,-64(fp)
  801194:	00802074 	movhi	r2,129
  801198:	109d3d04 	addi	r2,r2,29940
  80119c:	1885883a 	add	r2,r3,r2
  8011a0:	10800904 	addi	r2,r2,36
  8011a4:	10c00103 	ldbu	r3,4(r2)
  8011a8:	e0bffa04 	addi	r2,fp,-24
  8011ac:	1105883a 	add	r2,r2,r4
  8011b0:	10c00005 	stb	r3,0(r2)


			/* convert longitude */
			converted_log.gpgga_d.lon  = strtod (&temp_log.gpgga.lon.degrees[0], &pEnd);
			converted_log.gpgga_d.lon += strtod (&temp_log.gpgga.lon.minutes[0], &pEnd) / 60.0;
			for(i = 0; i < sizeof(temp_log.gpgga.lon.direction); i++)
  8011b4:	e0bff017 	ldw	r2,-64(fp)
  8011b8:	10800044 	addi	r2,r2,1
  8011bc:	e0bff015 	stw	r2,-64(fp)
  8011c0:	e0bff017 	ldw	r2,-64(fp)
  8011c4:	108000b0 	cmpltui	r2,r2,2
  8011c8:	103ff01e 	bne	r2,zero,80118c <gps_convert_log+0x2cc>
			{
				converted_log.gpgga_d.lon_dir[i] 	 = temp_log.gpgga.lon.direction[i];
			}

			/* convert altitude */
			converted_log.gpgga_d.alt  = strtod (&temp_log.gpgga.alt.alt[0], &pEnd);
  8011cc:	e17ffe04 	addi	r5,fp,-8
  8011d0:	01002074 	movhi	r4,129
  8011d4:	211d4784 	addi	r4,r4,29982
  8011d8:	08064380 	call	806438 <strtod>
  8011dc:	1009883a 	mov	r4,r2
  8011e0:	180b883a 	mov	r5,r3
  8011e4:	e13ffb15 	stw	r4,-20(fp)
  8011e8:	e17ffc15 	stw	r5,-16(fp)

			/* convert to ft */
			converted_log.gpgga_d.alt *= 3.28084;
  8011ec:	e0bffb17 	ldw	r2,-20(fp)
  8011f0:	e0fffc17 	ldw	r3,-16(fp)
  8011f4:	1009883a 	mov	r4,r2
  8011f8:	180b883a 	mov	r5,r3
  8011fc:	0182aef4 	movhi	r6,2747
  801200:	31913944 	addi	r6,r6,17637
  801204:	01d002b4 	movhi	r7,16394
  801208:	39cfca44 	addi	r7,r7,16169
  80120c:	0801d8c0 	call	801d8c <__muldf3>
  801210:	1009883a 	mov	r4,r2
  801214:	180b883a 	mov	r5,r3
  801218:	2005883a 	mov	r2,r4
  80121c:	2807883a 	mov	r3,r5
  801220:	e0bffb15 	stw	r2,-20(fp)
  801224:	e0fffc15 	stw	r3,-16(fp)
			sprintf(converted_log.gpgga_d.alt_unit, "ft\0");
  801228:	e0bff104 	addi	r2,fp,-60
  80122c:	10c00c04 	addi	r3,r2,48
  801230:	009d1984 	movi	r2,29798
  801234:	1880000d 	sth	r2,0(r3)
  801238:	18000085 	stb	zero,2(r3)

			temp_log = converted_log;
  80123c:	00c02074 	movhi	r3,129
  801240:	18dd3d04 	addi	r3,r3,29940
  801244:	e0bff117 	ldw	r2,-60(fp)
  801248:	18800015 	stw	r2,0(r3)
  80124c:	e0bff217 	ldw	r2,-56(fp)
  801250:	18800115 	stw	r2,4(r3)
  801254:	e0bff317 	ldw	r2,-52(fp)
  801258:	18800215 	stw	r2,8(r3)
  80125c:	e0bff417 	ldw	r2,-48(fp)
  801260:	18800315 	stw	r2,12(r3)
  801264:	e0bff517 	ldw	r2,-44(fp)
  801268:	18800415 	stw	r2,16(r3)
  80126c:	e0bff617 	ldw	r2,-40(fp)
  801270:	18800515 	stw	r2,20(r3)
  801274:	e0bff717 	ldw	r2,-36(fp)
  801278:	18800615 	stw	r2,24(r3)
  80127c:	e0bff817 	ldw	r2,-32(fp)
  801280:	18800715 	stw	r2,28(r3)
  801284:	e0bff917 	ldw	r2,-28(fp)
  801288:	18800815 	stw	r2,32(r3)
  80128c:	e0bffa17 	ldw	r2,-24(fp)
  801290:	18800915 	stw	r2,36(r3)
  801294:	e0bffb17 	ldw	r2,-20(fp)
  801298:	18800a15 	stw	r2,40(r3)
  80129c:	e0bffc17 	ldw	r2,-16(fp)
  8012a0:	18800b15 	stw	r2,44(r3)
  8012a4:	e0bffd17 	ldw	r2,-12(fp)
  8012a8:	18800c15 	stw	r2,48(r3)
			temp_log_type = GPGGA_D;
  8012ac:	00800084 	movi	r2,2
  8012b0:	d0a73015 	stw	r2,-25408(gp)

			break;
  8012b4:	00005006 	br	8013f8 <gps_convert_log+0x538>

		case GPGSA:

			/* convert list of SAT ID strings to list of integers */
			for(i = 0; i < GPS_NUM_SATIDS; i++)
  8012b8:	e03ff015 	stw	zero,-64(fp)
  8012bc:	00002d06 	br	801374 <gps_convert_log+0x4b4>
			{
				/* if field is empty */
				if(temp_log.gpgsa.list[i].id[0] == '\0')
  8012c0:	e0fff017 	ldw	r3,-64(fp)
  8012c4:	01002074 	movhi	r4,129
  8012c8:	211d3d04 	addi	r4,r4,29940
  8012cc:	1805883a 	mov	r2,r3
  8012d0:	1085883a 	add	r2,r2,r2
  8012d4:	10c5883a 	add	r2,r2,r3
  8012d8:	1105883a 	add	r2,r2,r4
  8012dc:	10800003 	ldbu	r2,0(r2)
  8012e0:	10803fcc 	andi	r2,r2,255
  8012e4:	1080201c 	xori	r2,r2,128
  8012e8:	10bfe004 	addi	r2,r2,-128
  8012ec:	1004c03a 	cmpne	r2,r2,zero
  8012f0:	1000091e 	bne	r2,zero,801318 <gps_convert_log+0x458>
				{
					converted_log.gpgsa_d.list[i] = -1;
  8012f4:	e0bff017 	ldw	r2,-64(fp)
  8012f8:	1085883a 	add	r2,r2,r2
  8012fc:	1085883a 	add	r2,r2,r2
  801300:	e0fff004 	addi	r3,fp,-64
  801304:	10c5883a 	add	r2,r2,r3
  801308:	10c00104 	addi	r3,r2,4
  80130c:	00bfffc4 	movi	r2,-1
  801310:	18800015 	stw	r2,0(r3)
  801314:	00001406 	br	801368 <gps_convert_log+0x4a8>
				}
				else
				{
					converted_log.gpgsa_d.list[i] = strtol (&temp_log.gpgsa.list[i], &pEnd, 10);
  801318:	e43ff017 	ldw	r16,-64(fp)
  80131c:	e0fff017 	ldw	r3,-64(fp)
  801320:	1805883a 	mov	r2,r3
  801324:	1085883a 	add	r2,r2,r2
  801328:	10c5883a 	add	r2,r2,r3
  80132c:	1007883a 	mov	r3,r2
  801330:	00802074 	movhi	r2,129
  801334:	109d3d04 	addi	r2,r2,29940
  801338:	1885883a 	add	r2,r3,r2
  80133c:	1009883a 	mov	r4,r2
  801340:	e17ffe04 	addi	r5,fp,-8
  801344:	01800284 	movi	r6,10
  801348:	08066a40 	call	8066a4 <strtol>
  80134c:	1007883a 	mov	r3,r2
  801350:	8405883a 	add	r2,r16,r16
  801354:	1085883a 	add	r2,r2,r2
  801358:	e13ff004 	addi	r4,fp,-64
  80135c:	1105883a 	add	r2,r2,r4
  801360:	10800104 	addi	r2,r2,4
  801364:	10c00015 	stw	r3,0(r2)
			break;

		case GPGSA:

			/* convert list of SAT ID strings to list of integers */
			for(i = 0; i < GPS_NUM_SATIDS; i++)
  801368:	e0bff017 	ldw	r2,-64(fp)
  80136c:	10800044 	addi	r2,r2,1
  801370:	e0bff015 	stw	r2,-64(fp)
  801374:	e0bff017 	ldw	r2,-64(fp)
  801378:	10800310 	cmplti	r2,r2,12
  80137c:	103fd01e 	bne	r2,zero,8012c0 <gps_convert_log+0x400>
				{
					converted_log.gpgsa_d.list[i] = strtol (&temp_log.gpgsa.list[i], &pEnd, 10);
				}
			}

			temp_log = converted_log;
  801380:	00c02074 	movhi	r3,129
  801384:	18dd3d04 	addi	r3,r3,29940
  801388:	e0bff117 	ldw	r2,-60(fp)
  80138c:	18800015 	stw	r2,0(r3)
  801390:	e0bff217 	ldw	r2,-56(fp)
  801394:	18800115 	stw	r2,4(r3)
  801398:	e0bff317 	ldw	r2,-52(fp)
  80139c:	18800215 	stw	r2,8(r3)
  8013a0:	e0bff417 	ldw	r2,-48(fp)
  8013a4:	18800315 	stw	r2,12(r3)
  8013a8:	e0bff517 	ldw	r2,-44(fp)
  8013ac:	18800415 	stw	r2,16(r3)
  8013b0:	e0bff617 	ldw	r2,-40(fp)
  8013b4:	18800515 	stw	r2,20(r3)
  8013b8:	e0bff717 	ldw	r2,-36(fp)
  8013bc:	18800615 	stw	r2,24(r3)
  8013c0:	e0bff817 	ldw	r2,-32(fp)
  8013c4:	18800715 	stw	r2,28(r3)
  8013c8:	e0bff917 	ldw	r2,-28(fp)
  8013cc:	18800815 	stw	r2,32(r3)
  8013d0:	e0bffa17 	ldw	r2,-24(fp)
  8013d4:	18800915 	stw	r2,36(r3)
  8013d8:	e0bffb17 	ldw	r2,-20(fp)
  8013dc:	18800a15 	stw	r2,40(r3)
  8013e0:	e0bffc17 	ldw	r2,-16(fp)
  8013e4:	18800b15 	stw	r2,44(r3)
  8013e8:	e0bffd17 	ldw	r2,-12(fp)
  8013ec:	18800c15 	stw	r2,48(r3)
			temp_log_type = GPGSA_D;
  8013f0:	008000c4 	movi	r2,3
  8013f4:	d0a73015 	stw	r2,-25408(gp)
			break;

		default:
			break;
	}
}
  8013f8:	e037883a 	mov	sp,fp
  8013fc:	dfc00317 	ldw	ra,12(sp)
  801400:	df000217 	ldw	fp,8(sp)
  801404:	dc400117 	ldw	r17,4(sp)
  801408:	dc000017 	ldw	r16,0(sp)
  80140c:	dec00404 	addi	sp,sp,16
  801410:	f800283a 	ret

00801414 <gps_save_string>:
 *
 *
 *
 ************************************************************/
void gps_save_string(void)
{
  801414:	defffb04 	addi	sp,sp,-20
  801418:	dfc00415 	stw	ra,16(sp)
  80141c:	df000315 	stw	fp,12(sp)
  801420:	df000304 	addi	fp,sp,12
	/* switch on type of log */
	switch(temp_log_type)
  801424:	d0a73017 	ldw	r2,-25408(gp)
  801428:	e0bfff15 	stw	r2,-4(fp)
  80142c:	e0ffff17 	ldw	r3,-4(fp)
  801430:	1805003a 	cmpeq	r2,r3,zero
  801434:	1000401e 	bne	r2,zero,801538 <gps_save_string+0x124>
  801438:	e0ffff17 	ldw	r3,-4(fp)
  80143c:	188000a0 	cmpeqi	r2,r3,2
  801440:	1000011e 	bne	r2,zero,801448 <gps_save_string+0x34>
  801444:	00003c06 	br	801538 <gps_save_string+0x124>
//									temp_log.gpgga.time.second);
//			printf("\n");
			break;

		case GPGGA_D:
				sprintf(GGA_lat, "Lat: %3.3f %s", 	temp_log.gpgga_d.lat,
  801448:	01002074 	movhi	r4,129
  80144c:	211d3d04 	addi	r4,r4,29940
  801450:	20800417 	ldw	r2,16(r4)
  801454:	20c00517 	ldw	r3,20(r4)
  801458:	01002074 	movhi	r4,129
  80145c:	211d4304 	addi	r4,r4,29964
  801460:	d9000015 	stw	r4,0(sp)
  801464:	01002074 	movhi	r4,129
  801468:	211d3804 	addi	r4,r4,29920
  80146c:	01402074 	movhi	r5,129
  801470:	294d1204 	addi	r5,r5,13384
  801474:	100d883a 	mov	r6,r2
  801478:	180f883a 	mov	r7,r3
  80147c:	0804a6c0 	call	804a6c <sprintf>
												temp_log.gpgga_d.lat_dir);

				sprintf(GGA_lon, "Lon: %3.3f %s", 	temp_log.gpgga_d.lon,
  801480:	01002074 	movhi	r4,129
  801484:	211d3d04 	addi	r4,r4,29940
  801488:	20800717 	ldw	r2,28(r4)
  80148c:	20c00817 	ldw	r3,32(r4)
  801490:	01002074 	movhi	r4,129
  801494:	211d4604 	addi	r4,r4,29976
  801498:	d9000015 	stw	r4,0(sp)
  80149c:	01002074 	movhi	r4,129
  8014a0:	211d5404 	addi	r4,r4,30032
  8014a4:	01402074 	movhi	r5,129
  8014a8:	294d1604 	addi	r5,r5,13400
  8014ac:	100d883a 	mov	r6,r2
  8014b0:	180f883a 	mov	r7,r3
  8014b4:	0804a6c0 	call	804a6c <sprintf>
												temp_log.gpgga_d.lon_dir);

				/* print altitude */
				sprintf(GGA_elev, "Elev: %4.1f %s", temp_log.gpgga_d.alt,
  8014b8:	01002074 	movhi	r4,129
  8014bc:	211d3d04 	addi	r4,r4,29940
  8014c0:	20800a17 	ldw	r2,40(r4)
  8014c4:	20c00b17 	ldw	r3,44(r4)
  8014c8:	01002074 	movhi	r4,129
  8014cc:	211d4904 	addi	r4,r4,29988
  8014d0:	d9000015 	stw	r4,0(sp)
  8014d4:	01002074 	movhi	r4,129
  8014d8:	211d4f04 	addi	r4,r4,30012
  8014dc:	01402074 	movhi	r5,129
  8014e0:	294d1a04 	addi	r5,r5,13416
  8014e4:	100d883a 	mov	r6,r2
  8014e8:	180f883a 	mov	r7,r3
  8014ec:	0804a6c0 	call	804a6c <sprintf>
												temp_log.gpgga_d.alt_unit);

				/* print time */
				sprintf(GGA_time, "Time: %02d:%02d:%02d%s", temp_log.gpgga_d.time.hour,
  8014f0:	00802074 	movhi	r2,129
  8014f4:	109d3d04 	addi	r2,r2,29940
  8014f8:	11800017 	ldw	r6,0(r2)
  8014fc:	00802074 	movhi	r2,129
  801500:	109d3d04 	addi	r2,r2,29940
  801504:	11c00117 	ldw	r7,4(r2)
  801508:	00802074 	movhi	r2,129
  80150c:	109d3d04 	addi	r2,r2,29940
  801510:	10800217 	ldw	r2,8(r2)
  801514:	d8800015 	stw	r2,0(sp)
  801518:	00802074 	movhi	r2,129
  80151c:	109d4004 	addi	r2,r2,29952
  801520:	d8800115 	stw	r2,4(sp)
  801524:	01002074 	movhi	r4,129
  801528:	211d4a04 	addi	r4,r4,29992
  80152c:	01402074 	movhi	r5,129
  801530:	294d1e04 	addi	r5,r5,13432
  801534:	0804a6c0 	call	804a6c <sprintf>
			{
				printf("Unknown GPS_LOG_T type, in gps_print_log\n");
			}
			break;
	}
}
  801538:	e037883a 	mov	sp,fp
  80153c:	dfc00117 	ldw	ra,4(sp)
  801540:	df000017 	ldw	fp,0(sp)
  801544:	dec00204 	addi	sp,sp,8
  801548:	f800283a 	ret

0080154c <gps_print_error>:
 * Description: Prints an error message to the LCD and
 * 				terminal.
 *
 ************************************************************/
void gps_print_error(void)
{
  80154c:	defffc04 	addi	sp,sp,-16
  801550:	dfc00315 	stw	ra,12(sp)
  801554:	df000215 	stw	fp,8(sp)
  801558:	df000204 	addi	fp,sp,8
	/* local vars */
	char* s1 = "GPS Unit is not ready.";
  80155c:	00802074 	movhi	r2,129
  801560:	108d2404 	addi	r2,r2,13456
  801564:	e0bfff15 	stw	r2,-4(fp)
	char* s2 = "Data is invalid";
  801568:	00802074 	movhi	r2,129
  80156c:	108d2a04 	addi	r2,r2,13480
  801570:	e0bffe15 	stw	r2,-8(fp)


	printf("\n%s\n%s\n", s1, s2);
  801574:	01002074 	movhi	r4,129
  801578:	210d2e04 	addi	r4,r4,13496
  80157c:	e17fff17 	ldw	r5,-4(fp)
  801580:	e1bffe17 	ldw	r6,-8(fp)
  801584:	08046cc0 	call	8046cc <printf>

}
  801588:	e037883a 	mov	sp,fp
  80158c:	dfc00117 	ldw	ra,4(sp)
  801590:	df000017 	ldw	fp,0(sp)
  801594:	dec00204 	addi	sp,sp,8
  801598:	f800283a 	ret

0080159c <main>:

#include "uart_interrupt.h"
#include "count_binary.h"

int main(void)
{
  80159c:	defffe04 	addi	sp,sp,-8
  8015a0:	dfc00115 	stw	ra,4(sp)
  8015a4:	df000015 	stw	fp,0(sp)
  8015a8:	d839883a 	mov	fp,sp
	/* run button interrupt demo (does not return) */
	//count_binary();

	/* run UART interrupt demo (does not return) */
	uart_interrupts();
  8015ac:	08017c00 	call	8017c0 <uart_interrupts>

	return 0;
  8015b0:	0005883a 	mov	r2,zero
}
  8015b4:	e037883a 	mov	sp,fp
  8015b8:	dfc00117 	ldw	ra,4(sp)
  8015bc:	df000017 	ldw	fp,0(sp)
  8015c0:	dec00204 	addi	sp,sp,8
  8015c4:	f800283a 	ret

008015c8 <handle_uart_interrupts>:

/* A variable to hold the value of the uart rxdata register. */
volatile int rxdata;

static void handle_uart_interrupts(void* context, alt_u32 id)
{
  8015c8:	defffa04 	addi	sp,sp,-24
  8015cc:	dfc00515 	stw	ra,20(sp)
  8015d0:	df000415 	stw	fp,16(sp)
  8015d4:	df000404 	addi	fp,sp,16
  8015d8:	e13ffd15 	stw	r4,-12(fp)
  8015dc:	e17ffe15 	stw	r5,-8(fp)
	char c;

	/* read rxdata register for incoming byte */
	c = IORD_ALTERA_AVALON_UART_RXDATA(UART_RS232_BASE);
  8015e0:	00804034 	movhi	r2,256
  8015e4:	10843804 	addi	r2,r2,4320
  8015e8:	10800037 	ldwio	r2,0(r2)
  8015ec:	e0bffc05 	stb	r2,-16(fp)

	printf("%c", c);
  8015f0:	e13ffc07 	ldb	r4,-16(fp)
  8015f4:	08047440 	call	804744 <putchar>

	/* if we are not about to write to the next location that needs to be read from (buffer not full) */
	if( !ring_buffer_full() )
  8015f8:	d0e73917 	ldw	r3,-25372(gp)
  8015fc:	d0a73117 	ldw	r2,-25404(gp)
  801600:	18801c26 	beq	r3,r2,801674 <handle_uart_interrupts+0xac>
	{
		/* write incoming byte to the buffer and increment wr_idx */
		ring_buffer[ring_buffer_wr_idx++] = c;
  801604:	d0e73917 	ldw	r3,-25372(gp)
  801608:	e13ffc03 	ldbu	r4,-16(fp)
  80160c:	00802074 	movhi	r2,129
  801610:	109d5904 	addi	r2,r2,30052
  801614:	10c5883a 	add	r2,r2,r3
  801618:	11000005 	stb	r4,0(r2)
  80161c:	18800044 	addi	r2,r3,1
  801620:	d0a73915 	stw	r2,-25372(gp)

		/* wrap wr_idx to within the bounds of the buffer size */
		ring_buffer_wr_idx = ring_buffer_wr_idx % BUFFER_SIZE;
  801624:	d0e73917 	ldw	r3,-25372(gp)
  801628:	00a00034 	movhi	r2,32768
  80162c:	1083ffc4 	addi	r2,r2,4095
  801630:	1886703a 	and	r3,r3,r2
  801634:	e0ffff15 	stw	r3,-4(fp)
  801638:	e0ffff17 	ldw	r3,-4(fp)
  80163c:	1804403a 	cmpge	r2,r3,zero
  801640:	10000a1e 	bne	r2,zero,80166c <handle_uart_interrupts+0xa4>
  801644:	e0bfff17 	ldw	r2,-4(fp)
  801648:	10bfffc4 	addi	r2,r2,-1
  80164c:	e0bfff15 	stw	r2,-4(fp)
  801650:	00bc0004 	movi	r2,-4096
  801654:	e0ffff17 	ldw	r3,-4(fp)
  801658:	1886b03a 	or	r3,r3,r2
  80165c:	e0ffff15 	stw	r3,-4(fp)
  801660:	e0bfff17 	ldw	r2,-4(fp)
  801664:	10800044 	addi	r2,r2,1
  801668:	e0bfff15 	stw	r2,-4(fp)
  80166c:	e0bfff17 	ldw	r2,-4(fp)
  801670:	d0a73915 	stw	r2,-25372(gp)
	{
		/* buffer is full, so the incoming byte is discarded */
	}

	/* Reset the UART's status register. */
	IOWR_ALTERA_AVALON_UART_STATUS(UART_RS232_BASE, 0);
  801674:	00804034 	movhi	r2,256
  801678:	10843a04 	addi	r2,r2,4328
  80167c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_UART_STATUS(UART_RS232_BASE, 0);
  801680:	00804034 	movhi	r2,256
  801684:	10843a04 	addi	r2,r2,4328
  801688:	10000035 	stwio	zero,0(r2)
}
  80168c:	e037883a 	mov	sp,fp
  801690:	dfc00117 	ldw	ra,4(sp)
  801694:	df000017 	ldw	fp,0(sp)
  801698:	dec00204 	addi	sp,sp,8
  80169c:	f800283a 	ret

008016a0 <init_uart>:

static void init_uart()
{
  8016a0:	defffd04 	addi	sp,sp,-12
  8016a4:	dfc00215 	stw	ra,8(sp)
  8016a8:	df000115 	stw	fp,4(sp)
  8016ac:	df000104 	addi	fp,sp,4
	void* rxdata_ptr = (void*) &rxdata;
  8016b0:	d0a73c04 	addi	r2,gp,-25360
  8016b4:	e0bfff15 	stw	r2,-4(fp)

	/* Enable UART RRDY interrupt */
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_RS232_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
  8016b8:	00c04034 	movhi	r3,256
  8016bc:	18c43b04 	addi	r3,r3,4332
  8016c0:	00802004 	movi	r2,128
  8016c4:	18800035 	stwio	r2,0(r3)

	/* Reset the UART's status register. */
	IOWR_ALTERA_AVALON_UART_STATUS(UART_RS232_BASE, 0);
  8016c8:	00804034 	movhi	r2,256
  8016cc:	10843a04 	addi	r2,r2,4328
  8016d0:	10000035 	stwio	zero,0(r2)

	/* Register the interrupt handler. */
	alt_irq_register( UART_RS232_IRQ, rxdata_ptr, handle_uart_interrupts);
  8016d4:	01000044 	movi	r4,1
  8016d8:	e17fff17 	ldw	r5,-4(fp)
  8016dc:	01802034 	movhi	r6,128
  8016e0:	31857204 	addi	r6,r6,5576
  8016e4:	080ee480 	call	80ee48 <alt_irq_register>

	/* reset the ring buffer */
	ring_buffer_wr_idx = 1;
  8016e8:	00800044 	movi	r2,1
  8016ec:	d0a73915 	stw	r2,-25372(gp)
	ring_buffer_rd_idx = 0;
  8016f0:	d0273115 	stw	zero,-25404(gp)
}
  8016f4:	e037883a 	mov	sp,fp
  8016f8:	dfc00117 	ldw	ra,4(sp)
  8016fc:	df000017 	ldw	fp,0(sp)
  801700:	dec00204 	addi	sp,sp,8
  801704:	f800283a 	ret

00801708 <clear_led>:

static void clear_led()
{
  801708:	deffff04 	addi	sp,sp,-4
  80170c:	df000015 	stw	fp,0(sp)
  801710:	d839883a 	mov	fp,sp
	/* turn LEDs off */
    *LEDs = 0x00000000;
  801714:	00804034 	movhi	r2,256
  801718:	10845004 	addi	r2,r2,4416
  80171c:	10000015 	stw	zero,0(r2)
}
  801720:	e037883a 	mov	sp,fp
  801724:	df000017 	ldw	fp,0(sp)
  801728:	dec00104 	addi	sp,sp,4
  80172c:	f800283a 	ret

00801730 <WriteLCD>:



void WriteLCD( char* string1, char* string2)
{
  801730:	defffb04 	addi	sp,sp,-20
  801734:	dfc00415 	stw	ra,16(sp)
  801738:	df000315 	stw	fp,12(sp)
  80173c:	df000304 	addi	fp,sp,12
  801740:	e13ffe15 	stw	r4,-8(fp)
  801744:	e17fff15 	stw	r5,-4(fp)
	FILE *lcd;
	lcd = fopen("/dev/lcd_display", "w");
  801748:	01002074 	movhi	r4,129
  80174c:	210d3004 	addi	r4,r4,13504
  801750:	01402074 	movhi	r5,129
  801754:	294d3504 	addi	r5,r5,13524
  801758:	08031d80 	call	8031d8 <fopen>
  80175c:	e0bffd15 	stw	r2,-12(fp)

	/* Write strings to the LCD. */
	if (lcd != NULL )
  801760:	e0bffd17 	ldw	r2,-12(fp)
  801764:	1005003a 	cmpeq	r2,r2,zero
  801768:	10000b1e 	bne	r2,zero,801798 <WriteLCD+0x68>
	{
		fprintf(lcd, "\n%s\n", string1);
  80176c:	e13ffd17 	ldw	r4,-12(fp)
  801770:	01402074 	movhi	r5,129
  801774:	294d3604 	addi	r5,r5,13528
  801778:	e1bffe17 	ldw	r6,-8(fp)
  80177c:	08031f40 	call	8031f4 <fprintf>
		fprintf(lcd, "%s\n",string2);
  801780:	e13ffd17 	ldw	r4,-12(fp)
  801784:	01402074 	movhi	r5,129
  801788:	294d3804 	addi	r5,r5,13536
  80178c:	e1bfff17 	ldw	r6,-4(fp)
  801790:	08031f40 	call	8031f4 <fprintf>
  801794:	00000306 	br	8017a4 <WriteLCD+0x74>
	}
	else
	{
		printf("Could not open LCD file!\n");
  801798:	01002074 	movhi	r4,129
  80179c:	210d3904 	addi	r4,r4,13540
  8017a0:	08048080 	call	804808 <puts>
	}

	fclose( lcd );
  8017a4:	e13ffd17 	ldw	r4,-12(fp)
  8017a8:	0802bac0 	call	802bac <fclose>
}
  8017ac:	e037883a 	mov	sp,fp
  8017b0:	dfc00117 	ldw	ra,4(sp)
  8017b4:	df000017 	ldw	fp,0(sp)
  8017b8:	dec00204 	addi	sp,sp,8
  8017bc:	f800283a 	ret

008017c0 <uart_interrupts>:
/*******************************************************************************
 * int main()                                                                  *
 ******************************************************************************/

int uart_interrupts(void)
{ 
  8017c0:	defffc04 	addi	sp,sp,-16
  8017c4:	dfc00315 	stw	ra,12(sp)
  8017c8:	df000215 	stw	fp,8(sp)
  8017cc:	df000204 	addi	fp,sp,8
	char c;

	/* turn LEDs off */
	clear_led();
  8017d0:	08017080 	call	801708 <clear_led>
    
    /* Initialize the UART. */
    init_uart();
  8017d4:	08016a00 	call	8016a0 <init_uart>

    /* Initialize GPS state machine */
    gps_state_machine_reset();
  8017d8:	08007680 	call	800768 <gps_state_machine_reset>
  8017dc:	00000006 	br	8017e0 <uart_interrupts+0x20>

    while( 1 ) 
    {
        /* ensure buffer isn't empty */
        if(!ring_buffer_empty())
  8017e0:	d0a73917 	ldw	r2,-25372(gp)
  8017e4:	10ffffc4 	addi	r3,r2,-1
  8017e8:	d0a73117 	ldw	r2,-25404(gp)
  8017ec:	18bffc26 	beq	r3,r2,8017e0 <uart_interrupts+0x20>
  8017f0:	d0a73917 	ldw	r2,-25372(gp)
  8017f4:	1004c03a 	cmpne	r2,r2,zero
  8017f8:	1000031e 	bne	r2,zero,801808 <uart_interrupts+0x48>
  8017fc:	d0a73117 	ldw	r2,-25404(gp)
  801800:	1083ffe0 	cmpeqi	r2,r2,4095
  801804:	103ff61e 	bne	r2,zero,8017e0 <uart_interrupts+0x20>
        {
        	/*increment and check if the index is past buffer size */
        	ring_buffer_rd_idx++;
  801808:	d0a73117 	ldw	r2,-25404(gp)
  80180c:	10800044 	addi	r2,r2,1
  801810:	d0a73115 	stw	r2,-25404(gp)
        	ring_buffer_rd_idx = ring_buffer_rd_idx % BUFFER_SIZE;
  801814:	d0e73117 	ldw	r3,-25404(gp)
  801818:	00a00034 	movhi	r2,32768
  80181c:	1083ffc4 	addi	r2,r2,4095
  801820:	1886703a 	and	r3,r3,r2
  801824:	e0ffff15 	stw	r3,-4(fp)
  801828:	e0ffff17 	ldw	r3,-4(fp)
  80182c:	1804403a 	cmpge	r2,r3,zero
  801830:	10000a1e 	bne	r2,zero,80185c <uart_interrupts+0x9c>
  801834:	e0bfff17 	ldw	r2,-4(fp)
  801838:	10bfffc4 	addi	r2,r2,-1
  80183c:	e0bfff15 	stw	r2,-4(fp)
  801840:	00bc0004 	movi	r2,-4096
  801844:	e0ffff17 	ldw	r3,-4(fp)
  801848:	1886b03a 	or	r3,r3,r2
  80184c:	e0ffff15 	stw	r3,-4(fp)
  801850:	e0bfff17 	ldw	r2,-4(fp)
  801854:	10800044 	addi	r2,r2,1
  801858:	e0bfff15 	stw	r2,-4(fp)
  80185c:	e0bfff17 	ldw	r2,-4(fp)
  801860:	d0a73115 	stw	r2,-25404(gp)

        	/* pull data off of buffer */
        	c = ring_buffer[ring_buffer_rd_idx];
  801864:	d0e73117 	ldw	r3,-25404(gp)
  801868:	00802074 	movhi	r2,129
  80186c:	109d5904 	addi	r2,r2,30052
  801870:	10c5883a 	add	r2,r2,r3
  801874:	10800003 	ldbu	r2,0(r2)
  801878:	e0bffe05 	stb	r2,-8(fp)
        	gps_state_machine(c);
  80187c:	e13ffe07 	ldb	r4,-8(fp)
  801880:	08008340 	call	800834 <gps_state_machine>

        }
    }
  801884:	003fd606 	br	8017e0 <uart_interrupts+0x20>

00801888 <_fpadd_parts>:
  801888:	defff804 	addi	sp,sp,-32
  80188c:	dcc00315 	stw	r19,12(sp)
  801890:	2027883a 	mov	r19,r4
  801894:	21000017 	ldw	r4,0(r4)
  801898:	00c00044 	movi	r3,1
  80189c:	dd400515 	stw	r21,20(sp)
  8018a0:	dd000415 	stw	r20,16(sp)
  8018a4:	ddc00715 	stw	r23,28(sp)
  8018a8:	dd800615 	stw	r22,24(sp)
  8018ac:	dc800215 	stw	r18,8(sp)
  8018b0:	dc400115 	stw	r17,4(sp)
  8018b4:	dc000015 	stw	r16,0(sp)
  8018b8:	282b883a 	mov	r21,r5
  8018bc:	3029883a 	mov	r20,r6
  8018c0:	1900632e 	bgeu	r3,r4,801a50 <_fpadd_parts+0x1c8>
  8018c4:	28800017 	ldw	r2,0(r5)
  8018c8:	1880812e 	bgeu	r3,r2,801ad0 <_fpadd_parts+0x248>
  8018cc:	00c00104 	movi	r3,4
  8018d0:	20c0dc26 	beq	r4,r3,801c44 <_fpadd_parts+0x3bc>
  8018d4:	10c07e26 	beq	r2,r3,801ad0 <_fpadd_parts+0x248>
  8018d8:	00c00084 	movi	r3,2
  8018dc:	10c06726 	beq	r2,r3,801a7c <_fpadd_parts+0x1f4>
  8018e0:	20c07b26 	beq	r4,r3,801ad0 <_fpadd_parts+0x248>
  8018e4:	9dc00217 	ldw	r23,8(r19)
  8018e8:	28c00217 	ldw	r3,8(r5)
  8018ec:	9c400317 	ldw	r17,12(r19)
  8018f0:	2bc00317 	ldw	r15,12(r5)
  8018f4:	b8cdc83a 	sub	r6,r23,r3
  8018f8:	9c800417 	ldw	r18,16(r19)
  8018fc:	2c000417 	ldw	r16,16(r5)
  801900:	3009883a 	mov	r4,r6
  801904:	30009716 	blt	r6,zero,801b64 <_fpadd_parts+0x2dc>
  801908:	00800fc4 	movi	r2,63
  80190c:	11806b16 	blt	r2,r6,801abc <_fpadd_parts+0x234>
  801910:	0100a40e 	bge	zero,r4,801ba4 <_fpadd_parts+0x31c>
  801914:	35bff804 	addi	r22,r6,-32
  801918:	b000bc16 	blt	r22,zero,801c0c <_fpadd_parts+0x384>
  80191c:	8596d83a 	srl	r11,r16,r22
  801920:	0019883a 	mov	r12,zero
  801924:	0013883a 	mov	r9,zero
  801928:	01000044 	movi	r4,1
  80192c:	0015883a 	mov	r10,zero
  801930:	b000be16 	blt	r22,zero,801c2c <_fpadd_parts+0x3a4>
  801934:	2590983a 	sll	r8,r4,r22
  801938:	000f883a 	mov	r7,zero
  80193c:	00bfffc4 	movi	r2,-1
  801940:	3889883a 	add	r4,r7,r2
  801944:	408b883a 	add	r5,r8,r2
  801948:	21cd803a 	cmpltu	r6,r4,r7
  80194c:	314b883a 	add	r5,r6,r5
  801950:	7904703a 	and	r2,r15,r4
  801954:	8146703a 	and	r3,r16,r5
  801958:	10c4b03a 	or	r2,r2,r3
  80195c:	10000226 	beq	r2,zero,801968 <_fpadd_parts+0xe0>
  801960:	02400044 	movi	r9,1
  801964:	0015883a 	mov	r10,zero
  801968:	5a5eb03a 	or	r15,r11,r9
  80196c:	62a0b03a 	or	r16,r12,r10
  801970:	99400117 	ldw	r5,4(r19)
  801974:	a8800117 	ldw	r2,4(r21)
  801978:	28806e26 	beq	r5,r2,801b34 <_fpadd_parts+0x2ac>
  80197c:	28006626 	beq	r5,zero,801b18 <_fpadd_parts+0x290>
  801980:	7c45c83a 	sub	r2,r15,r17
  801984:	7889803a 	cmpltu	r4,r15,r2
  801988:	8487c83a 	sub	r3,r16,r18
  80198c:	1909c83a 	sub	r4,r3,r4
  801990:	100d883a 	mov	r6,r2
  801994:	200f883a 	mov	r7,r4
  801998:	38007716 	blt	r7,zero,801b78 <_fpadd_parts+0x2f0>
  80199c:	a5c00215 	stw	r23,8(r20)
  8019a0:	a1c00415 	stw	r7,16(r20)
  8019a4:	a0000115 	stw	zero,4(r20)
  8019a8:	a1800315 	stw	r6,12(r20)
  8019ac:	a2000317 	ldw	r8,12(r20)
  8019b0:	a2400417 	ldw	r9,16(r20)
  8019b4:	00bfffc4 	movi	r2,-1
  8019b8:	408b883a 	add	r5,r8,r2
  8019bc:	2a09803a 	cmpltu	r4,r5,r8
  8019c0:	488d883a 	add	r6,r9,r2
  8019c4:	01c40034 	movhi	r7,4096
  8019c8:	39ffffc4 	addi	r7,r7,-1
  8019cc:	218d883a 	add	r6,r4,r6
  8019d0:	39801736 	bltu	r7,r6,801a30 <_fpadd_parts+0x1a8>
  8019d4:	31c06526 	beq	r6,r7,801b6c <_fpadd_parts+0x2e4>
  8019d8:	a3000217 	ldw	r12,8(r20)
  8019dc:	4209883a 	add	r4,r8,r8
  8019e0:	00bfffc4 	movi	r2,-1
  8019e4:	220f803a 	cmpltu	r7,r4,r8
  8019e8:	4a4b883a 	add	r5,r9,r9
  8019ec:	394f883a 	add	r7,r7,r5
  8019f0:	2095883a 	add	r10,r4,r2
  8019f4:	3897883a 	add	r11,r7,r2
  8019f8:	510d803a 	cmpltu	r6,r10,r4
  8019fc:	6099883a 	add	r12,r12,r2
  801a00:	32d7883a 	add	r11,r6,r11
  801a04:	00840034 	movhi	r2,4096
  801a08:	10bfffc4 	addi	r2,r2,-1
  801a0c:	2011883a 	mov	r8,r4
  801a10:	3813883a 	mov	r9,r7
  801a14:	a1000315 	stw	r4,12(r20)
  801a18:	a1c00415 	stw	r7,16(r20)
  801a1c:	a3000215 	stw	r12,8(r20)
  801a20:	12c00336 	bltu	r2,r11,801a30 <_fpadd_parts+0x1a8>
  801a24:	58bfed1e 	bne	r11,r2,8019dc <_fpadd_parts+0x154>
  801a28:	00bfff84 	movi	r2,-2
  801a2c:	12bfeb2e 	bgeu	r2,r10,8019dc <_fpadd_parts+0x154>
  801a30:	a2800417 	ldw	r10,16(r20)
  801a34:	008000c4 	movi	r2,3
  801a38:	00c80034 	movhi	r3,8192
  801a3c:	18ffffc4 	addi	r3,r3,-1
  801a40:	a2400317 	ldw	r9,12(r20)
  801a44:	a0800015 	stw	r2,0(r20)
  801a48:	1a802336 	bltu	r3,r10,801ad8 <_fpadd_parts+0x250>
  801a4c:	a027883a 	mov	r19,r20
  801a50:	9805883a 	mov	r2,r19
  801a54:	ddc00717 	ldw	r23,28(sp)
  801a58:	dd800617 	ldw	r22,24(sp)
  801a5c:	dd400517 	ldw	r21,20(sp)
  801a60:	dd000417 	ldw	r20,16(sp)
  801a64:	dcc00317 	ldw	r19,12(sp)
  801a68:	dc800217 	ldw	r18,8(sp)
  801a6c:	dc400117 	ldw	r17,4(sp)
  801a70:	dc000017 	ldw	r16,0(sp)
  801a74:	dec00804 	addi	sp,sp,32
  801a78:	f800283a 	ret
  801a7c:	20fff41e 	bne	r4,r3,801a50 <_fpadd_parts+0x1c8>
  801a80:	31000015 	stw	r4,0(r6)
  801a84:	98800117 	ldw	r2,4(r19)
  801a88:	30800115 	stw	r2,4(r6)
  801a8c:	98c00217 	ldw	r3,8(r19)
  801a90:	30c00215 	stw	r3,8(r6)
  801a94:	98800317 	ldw	r2,12(r19)
  801a98:	30800315 	stw	r2,12(r6)
  801a9c:	98c00417 	ldw	r3,16(r19)
  801aa0:	30c00415 	stw	r3,16(r6)
  801aa4:	98800117 	ldw	r2,4(r19)
  801aa8:	28c00117 	ldw	r3,4(r5)
  801aac:	3027883a 	mov	r19,r6
  801ab0:	10c4703a 	and	r2,r2,r3
  801ab4:	30800115 	stw	r2,4(r6)
  801ab8:	003fe506 	br	801a50 <_fpadd_parts+0x1c8>
  801abc:	1dc02616 	blt	r3,r23,801b58 <_fpadd_parts+0x2d0>
  801ac0:	0023883a 	mov	r17,zero
  801ac4:	182f883a 	mov	r23,r3
  801ac8:	0025883a 	mov	r18,zero
  801acc:	003fa806 	br	801970 <_fpadd_parts+0xe8>
  801ad0:	a827883a 	mov	r19,r21
  801ad4:	003fde06 	br	801a50 <_fpadd_parts+0x1c8>
  801ad8:	01800044 	movi	r6,1
  801adc:	500497fa 	slli	r2,r10,31
  801ae0:	4808d07a 	srli	r4,r9,1
  801ae4:	518ad83a 	srl	r5,r10,r6
  801ae8:	a2000217 	ldw	r8,8(r20)
  801aec:	1108b03a 	or	r4,r2,r4
  801af0:	0007883a 	mov	r3,zero
  801af4:	4984703a 	and	r2,r9,r6
  801af8:	208cb03a 	or	r6,r4,r2
  801afc:	28ceb03a 	or	r7,r5,r3
  801b00:	42000044 	addi	r8,r8,1
  801b04:	a027883a 	mov	r19,r20
  801b08:	a1c00415 	stw	r7,16(r20)
  801b0c:	a2000215 	stw	r8,8(r20)
  801b10:	a1800315 	stw	r6,12(r20)
  801b14:	003fce06 	br	801a50 <_fpadd_parts+0x1c8>
  801b18:	8bc5c83a 	sub	r2,r17,r15
  801b1c:	8889803a 	cmpltu	r4,r17,r2
  801b20:	9407c83a 	sub	r3,r18,r16
  801b24:	1909c83a 	sub	r4,r3,r4
  801b28:	100d883a 	mov	r6,r2
  801b2c:	200f883a 	mov	r7,r4
  801b30:	003f9906 	br	801998 <_fpadd_parts+0x110>
  801b34:	7c45883a 	add	r2,r15,r17
  801b38:	13c9803a 	cmpltu	r4,r2,r15
  801b3c:	8487883a 	add	r3,r16,r18
  801b40:	20c9883a 	add	r4,r4,r3
  801b44:	a1400115 	stw	r5,4(r20)
  801b48:	a5c00215 	stw	r23,8(r20)
  801b4c:	a0800315 	stw	r2,12(r20)
  801b50:	a1000415 	stw	r4,16(r20)
  801b54:	003fb606 	br	801a30 <_fpadd_parts+0x1a8>
  801b58:	001f883a 	mov	r15,zero
  801b5c:	0021883a 	mov	r16,zero
  801b60:	003f8306 	br	801970 <_fpadd_parts+0xe8>
  801b64:	018dc83a 	sub	r6,zero,r6
  801b68:	003f6706 	br	801908 <_fpadd_parts+0x80>
  801b6c:	00bfff84 	movi	r2,-2
  801b70:	117faf36 	bltu	r2,r5,801a30 <_fpadd_parts+0x1a8>
  801b74:	003f9806 	br	8019d8 <_fpadd_parts+0x150>
  801b78:	0005883a 	mov	r2,zero
  801b7c:	1189c83a 	sub	r4,r2,r6
  801b80:	1105803a 	cmpltu	r2,r2,r4
  801b84:	01cbc83a 	sub	r5,zero,r7
  801b88:	2885c83a 	sub	r2,r5,r2
  801b8c:	01800044 	movi	r6,1
  801b90:	a1800115 	stw	r6,4(r20)
  801b94:	a5c00215 	stw	r23,8(r20)
  801b98:	a1000315 	stw	r4,12(r20)
  801b9c:	a0800415 	stw	r2,16(r20)
  801ba0:	003f8206 	br	8019ac <_fpadd_parts+0x124>
  801ba4:	203f7226 	beq	r4,zero,801970 <_fpadd_parts+0xe8>
  801ba8:	35bff804 	addi	r22,r6,-32
  801bac:	b9af883a 	add	r23,r23,r6
  801bb0:	b0003116 	blt	r22,zero,801c78 <_fpadd_parts+0x3f0>
  801bb4:	959ad83a 	srl	r13,r18,r22
  801bb8:	001d883a 	mov	r14,zero
  801bbc:	000f883a 	mov	r7,zero
  801bc0:	01000044 	movi	r4,1
  801bc4:	0011883a 	mov	r8,zero
  801bc8:	b0002516 	blt	r22,zero,801c60 <_fpadd_parts+0x3d8>
  801bcc:	2594983a 	sll	r10,r4,r22
  801bd0:	0013883a 	mov	r9,zero
  801bd4:	00bfffc4 	movi	r2,-1
  801bd8:	4889883a 	add	r4,r9,r2
  801bdc:	508b883a 	add	r5,r10,r2
  801be0:	224d803a 	cmpltu	r6,r4,r9
  801be4:	314b883a 	add	r5,r6,r5
  801be8:	8904703a 	and	r2,r17,r4
  801bec:	9146703a 	and	r3,r18,r5
  801bf0:	10c4b03a 	or	r2,r2,r3
  801bf4:	10000226 	beq	r2,zero,801c00 <_fpadd_parts+0x378>
  801bf8:	01c00044 	movi	r7,1
  801bfc:	0011883a 	mov	r8,zero
  801c00:	69e2b03a 	or	r17,r13,r7
  801c04:	7224b03a 	or	r18,r14,r8
  801c08:	003f5906 	br	801970 <_fpadd_parts+0xe8>
  801c0c:	8407883a 	add	r3,r16,r16
  801c10:	008007c4 	movi	r2,31
  801c14:	1185c83a 	sub	r2,r2,r6
  801c18:	1886983a 	sll	r3,r3,r2
  801c1c:	7996d83a 	srl	r11,r15,r6
  801c20:	8198d83a 	srl	r12,r16,r6
  801c24:	1ad6b03a 	or	r11,r3,r11
  801c28:	003f3e06 	br	801924 <_fpadd_parts+0x9c>
  801c2c:	2006d07a 	srli	r3,r4,1
  801c30:	008007c4 	movi	r2,31
  801c34:	1185c83a 	sub	r2,r2,r6
  801c38:	1890d83a 	srl	r8,r3,r2
  801c3c:	218e983a 	sll	r7,r4,r6
  801c40:	003f3e06 	br	80193c <_fpadd_parts+0xb4>
  801c44:	113f821e 	bne	r2,r4,801a50 <_fpadd_parts+0x1c8>
  801c48:	28c00117 	ldw	r3,4(r5)
  801c4c:	98800117 	ldw	r2,4(r19)
  801c50:	10ff7f26 	beq	r2,r3,801a50 <_fpadd_parts+0x1c8>
  801c54:	04c02074 	movhi	r19,129
  801c58:	9ccd4004 	addi	r19,r19,13568
  801c5c:	003f7c06 	br	801a50 <_fpadd_parts+0x1c8>
  801c60:	2006d07a 	srli	r3,r4,1
  801c64:	008007c4 	movi	r2,31
  801c68:	1185c83a 	sub	r2,r2,r6
  801c6c:	1894d83a 	srl	r10,r3,r2
  801c70:	2192983a 	sll	r9,r4,r6
  801c74:	003fd706 	br	801bd4 <_fpadd_parts+0x34c>
  801c78:	9487883a 	add	r3,r18,r18
  801c7c:	008007c4 	movi	r2,31
  801c80:	1185c83a 	sub	r2,r2,r6
  801c84:	1886983a 	sll	r3,r3,r2
  801c88:	899ad83a 	srl	r13,r17,r6
  801c8c:	919cd83a 	srl	r14,r18,r6
  801c90:	1b5ab03a 	or	r13,r3,r13
  801c94:	003fc906 	br	801bbc <_fpadd_parts+0x334>

00801c98 <__subdf3>:
  801c98:	deffea04 	addi	sp,sp,-88
  801c9c:	dcc01415 	stw	r19,80(sp)
  801ca0:	dcc00404 	addi	r19,sp,16
  801ca4:	2011883a 	mov	r8,r4
  801ca8:	2813883a 	mov	r9,r5
  801cac:	dc401315 	stw	r17,76(sp)
  801cb0:	d809883a 	mov	r4,sp
  801cb4:	980b883a 	mov	r5,r19
  801cb8:	dc400904 	addi	r17,sp,36
  801cbc:	dfc01515 	stw	ra,84(sp)
  801cc0:	da400115 	stw	r9,4(sp)
  801cc4:	d9c00315 	stw	r7,12(sp)
  801cc8:	da000015 	stw	r8,0(sp)
  801ccc:	d9800215 	stw	r6,8(sp)
  801cd0:	080292c0 	call	80292c <__unpack_d>
  801cd4:	d9000204 	addi	r4,sp,8
  801cd8:	880b883a 	mov	r5,r17
  801cdc:	080292c0 	call	80292c <__unpack_d>
  801ce0:	d8800a17 	ldw	r2,40(sp)
  801ce4:	880b883a 	mov	r5,r17
  801ce8:	9809883a 	mov	r4,r19
  801cec:	d9800e04 	addi	r6,sp,56
  801cf0:	1080005c 	xori	r2,r2,1
  801cf4:	d8800a15 	stw	r2,40(sp)
  801cf8:	08018880 	call	801888 <_fpadd_parts>
  801cfc:	1009883a 	mov	r4,r2
  801d00:	08026180 	call	802618 <__pack_d>
  801d04:	dfc01517 	ldw	ra,84(sp)
  801d08:	dcc01417 	ldw	r19,80(sp)
  801d0c:	dc401317 	ldw	r17,76(sp)
  801d10:	dec01604 	addi	sp,sp,88
  801d14:	f800283a 	ret

00801d18 <__adddf3>:
  801d18:	deffea04 	addi	sp,sp,-88
  801d1c:	dcc01415 	stw	r19,80(sp)
  801d20:	dcc00404 	addi	r19,sp,16
  801d24:	2011883a 	mov	r8,r4
  801d28:	2813883a 	mov	r9,r5
  801d2c:	dc401315 	stw	r17,76(sp)
  801d30:	d809883a 	mov	r4,sp
  801d34:	980b883a 	mov	r5,r19
  801d38:	dc400904 	addi	r17,sp,36
  801d3c:	dfc01515 	stw	ra,84(sp)
  801d40:	da400115 	stw	r9,4(sp)
  801d44:	d9c00315 	stw	r7,12(sp)
  801d48:	da000015 	stw	r8,0(sp)
  801d4c:	d9800215 	stw	r6,8(sp)
  801d50:	080292c0 	call	80292c <__unpack_d>
  801d54:	d9000204 	addi	r4,sp,8
  801d58:	880b883a 	mov	r5,r17
  801d5c:	080292c0 	call	80292c <__unpack_d>
  801d60:	d9800e04 	addi	r6,sp,56
  801d64:	9809883a 	mov	r4,r19
  801d68:	880b883a 	mov	r5,r17
  801d6c:	08018880 	call	801888 <_fpadd_parts>
  801d70:	1009883a 	mov	r4,r2
  801d74:	08026180 	call	802618 <__pack_d>
  801d78:	dfc01517 	ldw	ra,84(sp)
  801d7c:	dcc01417 	ldw	r19,80(sp)
  801d80:	dc401317 	ldw	r17,76(sp)
  801d84:	dec01604 	addi	sp,sp,88
  801d88:	f800283a 	ret

00801d8c <__muldf3>:
  801d8c:	deffe004 	addi	sp,sp,-128
  801d90:	dc401815 	stw	r17,96(sp)
  801d94:	dc400404 	addi	r17,sp,16
  801d98:	2011883a 	mov	r8,r4
  801d9c:	2813883a 	mov	r9,r5
  801da0:	dc001715 	stw	r16,92(sp)
  801da4:	d809883a 	mov	r4,sp
  801da8:	880b883a 	mov	r5,r17
  801dac:	dc000904 	addi	r16,sp,36
  801db0:	dfc01f15 	stw	ra,124(sp)
  801db4:	da400115 	stw	r9,4(sp)
  801db8:	d9c00315 	stw	r7,12(sp)
  801dbc:	da000015 	stw	r8,0(sp)
  801dc0:	d9800215 	stw	r6,8(sp)
  801dc4:	ddc01e15 	stw	r23,120(sp)
  801dc8:	dd801d15 	stw	r22,116(sp)
  801dcc:	dd401c15 	stw	r21,112(sp)
  801dd0:	dd001b15 	stw	r20,108(sp)
  801dd4:	dcc01a15 	stw	r19,104(sp)
  801dd8:	dc801915 	stw	r18,100(sp)
  801ddc:	080292c0 	call	80292c <__unpack_d>
  801de0:	d9000204 	addi	r4,sp,8
  801de4:	800b883a 	mov	r5,r16
  801de8:	080292c0 	call	80292c <__unpack_d>
  801dec:	d9000417 	ldw	r4,16(sp)
  801df0:	00800044 	movi	r2,1
  801df4:	1100102e 	bgeu	r2,r4,801e38 <__muldf3+0xac>
  801df8:	d8c00917 	ldw	r3,36(sp)
  801dfc:	10c0062e 	bgeu	r2,r3,801e18 <__muldf3+0x8c>
  801e00:	00800104 	movi	r2,4
  801e04:	20800a26 	beq	r4,r2,801e30 <__muldf3+0xa4>
  801e08:	1880cc26 	beq	r3,r2,80213c <__muldf3+0x3b0>
  801e0c:	00800084 	movi	r2,2
  801e10:	20800926 	beq	r4,r2,801e38 <__muldf3+0xac>
  801e14:	1880191e 	bne	r3,r2,801e7c <__muldf3+0xf0>
  801e18:	d8c00a17 	ldw	r3,40(sp)
  801e1c:	d8800517 	ldw	r2,20(sp)
  801e20:	8009883a 	mov	r4,r16
  801e24:	10c4c03a 	cmpne	r2,r2,r3
  801e28:	d8800a15 	stw	r2,40(sp)
  801e2c:	00000706 	br	801e4c <__muldf3+0xc0>
  801e30:	00800084 	movi	r2,2
  801e34:	1880c326 	beq	r3,r2,802144 <__muldf3+0x3b8>
  801e38:	d8800517 	ldw	r2,20(sp)
  801e3c:	d8c00a17 	ldw	r3,40(sp)
  801e40:	8809883a 	mov	r4,r17
  801e44:	10c4c03a 	cmpne	r2,r2,r3
  801e48:	d8800515 	stw	r2,20(sp)
  801e4c:	08026180 	call	802618 <__pack_d>
  801e50:	dfc01f17 	ldw	ra,124(sp)
  801e54:	ddc01e17 	ldw	r23,120(sp)
  801e58:	dd801d17 	ldw	r22,116(sp)
  801e5c:	dd401c17 	ldw	r21,112(sp)
  801e60:	dd001b17 	ldw	r20,108(sp)
  801e64:	dcc01a17 	ldw	r19,104(sp)
  801e68:	dc801917 	ldw	r18,100(sp)
  801e6c:	dc401817 	ldw	r17,96(sp)
  801e70:	dc001717 	ldw	r16,92(sp)
  801e74:	dec02004 	addi	sp,sp,128
  801e78:	f800283a 	ret
  801e7c:	dd800717 	ldw	r22,28(sp)
  801e80:	dc800c17 	ldw	r18,48(sp)
  801e84:	002b883a 	mov	r21,zero
  801e88:	0023883a 	mov	r17,zero
  801e8c:	a80b883a 	mov	r5,r21
  801e90:	b00d883a 	mov	r6,r22
  801e94:	880f883a 	mov	r7,r17
  801e98:	ddc00817 	ldw	r23,32(sp)
  801e9c:	dcc00d17 	ldw	r19,52(sp)
  801ea0:	9009883a 	mov	r4,r18
  801ea4:	08024f40 	call	8024f4 <__muldi3>
  801ea8:	001b883a 	mov	r13,zero
  801eac:	680f883a 	mov	r7,r13
  801eb0:	b009883a 	mov	r4,r22
  801eb4:	000b883a 	mov	r5,zero
  801eb8:	980d883a 	mov	r6,r19
  801ebc:	b82d883a 	mov	r22,r23
  801ec0:	002f883a 	mov	r23,zero
  801ec4:	db401615 	stw	r13,88(sp)
  801ec8:	d8801315 	stw	r2,76(sp)
  801ecc:	d8c01415 	stw	r3,80(sp)
  801ed0:	dcc01515 	stw	r19,84(sp)
  801ed4:	08024f40 	call	8024f4 <__muldi3>
  801ed8:	b00d883a 	mov	r6,r22
  801edc:	000b883a 	mov	r5,zero
  801ee0:	9009883a 	mov	r4,r18
  801ee4:	b80f883a 	mov	r7,r23
  801ee8:	1021883a 	mov	r16,r2
  801eec:	1823883a 	mov	r17,r3
  801ef0:	08024f40 	call	8024f4 <__muldi3>
  801ef4:	8085883a 	add	r2,r16,r2
  801ef8:	140d803a 	cmpltu	r6,r2,r16
  801efc:	88c7883a 	add	r3,r17,r3
  801f00:	30cd883a 	add	r6,r6,r3
  801f04:	1029883a 	mov	r20,r2
  801f08:	302b883a 	mov	r21,r6
  801f0c:	da801317 	ldw	r10,76(sp)
  801f10:	dac01417 	ldw	r11,80(sp)
  801f14:	db001517 	ldw	r12,84(sp)
  801f18:	db401617 	ldw	r13,88(sp)
  801f1c:	3440612e 	bgeu	r6,r17,8020a4 <__muldf3+0x318>
  801f20:	0009883a 	mov	r4,zero
  801f24:	5105883a 	add	r2,r10,r4
  801f28:	128d803a 	cmpltu	r6,r2,r10
  801f2c:	5d07883a 	add	r3,r11,r20
  801f30:	30cd883a 	add	r6,r6,r3
  801f34:	0021883a 	mov	r16,zero
  801f38:	04400044 	movi	r17,1
  801f3c:	1025883a 	mov	r18,r2
  801f40:	3027883a 	mov	r19,r6
  801f44:	32c06236 	bltu	r6,r11,8020d0 <__muldf3+0x344>
  801f48:	59807a26 	beq	r11,r6,802134 <__muldf3+0x3a8>
  801f4c:	680b883a 	mov	r5,r13
  801f50:	b80f883a 	mov	r7,r23
  801f54:	6009883a 	mov	r4,r12
  801f58:	b00d883a 	mov	r6,r22
  801f5c:	08024f40 	call	8024f4 <__muldi3>
  801f60:	1009883a 	mov	r4,r2
  801f64:	000f883a 	mov	r7,zero
  801f68:	1545883a 	add	r2,r2,r21
  801f6c:	1111803a 	cmpltu	r8,r2,r4
  801f70:	19c7883a 	add	r3,r3,r7
  801f74:	40c7883a 	add	r3,r8,r3
  801f78:	88cb883a 	add	r5,r17,r3
  801f7c:	d8c00617 	ldw	r3,24(sp)
  801f80:	8089883a 	add	r4,r16,r2
  801f84:	d8800b17 	ldw	r2,44(sp)
  801f88:	18c00104 	addi	r3,r3,4
  801f8c:	240d803a 	cmpltu	r6,r4,r16
  801f90:	10c7883a 	add	r3,r2,r3
  801f94:	2013883a 	mov	r9,r4
  801f98:	d8800a17 	ldw	r2,40(sp)
  801f9c:	d9000517 	ldw	r4,20(sp)
  801fa0:	314d883a 	add	r6,r6,r5
  801fa4:	3015883a 	mov	r10,r6
  801fa8:	2088c03a 	cmpne	r4,r4,r2
  801fac:	00880034 	movhi	r2,8192
  801fb0:	10bfffc4 	addi	r2,r2,-1
  801fb4:	d9000f15 	stw	r4,60(sp)
  801fb8:	d8c01015 	stw	r3,64(sp)
  801fbc:	1180162e 	bgeu	r2,r6,802018 <__muldf3+0x28c>
  801fc0:	1811883a 	mov	r8,r3
  801fc4:	101f883a 	mov	r15,r2
  801fc8:	980497fa 	slli	r2,r19,31
  801fcc:	9016d07a 	srli	r11,r18,1
  801fd0:	500697fa 	slli	r3,r10,31
  801fd4:	480cd07a 	srli	r6,r9,1
  801fd8:	500ed07a 	srli	r7,r10,1
  801fdc:	12d6b03a 	or	r11,r2,r11
  801fe0:	00800044 	movi	r2,1
  801fe4:	198cb03a 	or	r6,r3,r6
  801fe8:	4888703a 	and	r4,r9,r2
  801fec:	9818d07a 	srli	r12,r19,1
  801ff0:	001b883a 	mov	r13,zero
  801ff4:	03a00034 	movhi	r14,32768
  801ff8:	3013883a 	mov	r9,r6
  801ffc:	3815883a 	mov	r10,r7
  802000:	4091883a 	add	r8,r8,r2
  802004:	20000226 	beq	r4,zero,802010 <__muldf3+0x284>
  802008:	5b64b03a 	or	r18,r11,r13
  80200c:	63a6b03a 	or	r19,r12,r14
  802010:	7abfed36 	bltu	r15,r10,801fc8 <__muldf3+0x23c>
  802014:	da001015 	stw	r8,64(sp)
  802018:	00840034 	movhi	r2,4096
  80201c:	10bfffc4 	addi	r2,r2,-1
  802020:	12801436 	bltu	r2,r10,802074 <__muldf3+0x2e8>
  802024:	da001017 	ldw	r8,64(sp)
  802028:	101f883a 	mov	r15,r2
  80202c:	4a45883a 	add	r2,r9,r9
  802030:	124d803a 	cmpltu	r6,r2,r9
  802034:	5287883a 	add	r3,r10,r10
  802038:	9497883a 	add	r11,r18,r18
  80203c:	5c8f803a 	cmpltu	r7,r11,r18
  802040:	9cd9883a 	add	r12,r19,r19
  802044:	01000044 	movi	r4,1
  802048:	30cd883a 	add	r6,r6,r3
  80204c:	3b0f883a 	add	r7,r7,r12
  802050:	423fffc4 	addi	r8,r8,-1
  802054:	1013883a 	mov	r9,r2
  802058:	3015883a 	mov	r10,r6
  80205c:	111ab03a 	or	r13,r2,r4
  802060:	98003016 	blt	r19,zero,802124 <__muldf3+0x398>
  802064:	5825883a 	mov	r18,r11
  802068:	3827883a 	mov	r19,r7
  80206c:	7abfef2e 	bgeu	r15,r10,80202c <__muldf3+0x2a0>
  802070:	da001015 	stw	r8,64(sp)
  802074:	00803fc4 	movi	r2,255
  802078:	488e703a 	and	r7,r9,r2
  80207c:	00802004 	movi	r2,128
  802080:	0007883a 	mov	r3,zero
  802084:	0011883a 	mov	r8,zero
  802088:	38801826 	beq	r7,r2,8020ec <__muldf3+0x360>
  80208c:	008000c4 	movi	r2,3
  802090:	d9000e04 	addi	r4,sp,56
  802094:	da801215 	stw	r10,72(sp)
  802098:	d8800e15 	stw	r2,56(sp)
  80209c:	da401115 	stw	r9,68(sp)
  8020a0:	003f6a06 	br	801e4c <__muldf3+0xc0>
  8020a4:	89802126 	beq	r17,r6,80212c <__muldf3+0x3a0>
  8020a8:	0009883a 	mov	r4,zero
  8020ac:	5105883a 	add	r2,r10,r4
  8020b0:	128d803a 	cmpltu	r6,r2,r10
  8020b4:	5d07883a 	add	r3,r11,r20
  8020b8:	30cd883a 	add	r6,r6,r3
  8020bc:	0021883a 	mov	r16,zero
  8020c0:	0023883a 	mov	r17,zero
  8020c4:	1025883a 	mov	r18,r2
  8020c8:	3027883a 	mov	r19,r6
  8020cc:	32ff9e2e 	bgeu	r6,r11,801f48 <__muldf3+0x1bc>
  8020d0:	00800044 	movi	r2,1
  8020d4:	8089883a 	add	r4,r16,r2
  8020d8:	240d803a 	cmpltu	r6,r4,r16
  8020dc:	344d883a 	add	r6,r6,r17
  8020e0:	2021883a 	mov	r16,r4
  8020e4:	3023883a 	mov	r17,r6
  8020e8:	003f9806 	br	801f4c <__muldf3+0x1c0>
  8020ec:	403fe71e 	bne	r8,zero,80208c <__muldf3+0x300>
  8020f0:	01004004 	movi	r4,256
  8020f4:	4904703a 	and	r2,r9,r4
  8020f8:	10c4b03a 	or	r2,r2,r3
  8020fc:	103fe31e 	bne	r2,zero,80208c <__muldf3+0x300>
  802100:	94c4b03a 	or	r2,r18,r19
  802104:	103fe126 	beq	r2,zero,80208c <__muldf3+0x300>
  802108:	49c5883a 	add	r2,r9,r7
  80210c:	1251803a 	cmpltu	r8,r2,r9
  802110:	4291883a 	add	r8,r8,r10
  802114:	013fc004 	movi	r4,-256
  802118:	1112703a 	and	r9,r2,r4
  80211c:	4015883a 	mov	r10,r8
  802120:	003fda06 	br	80208c <__muldf3+0x300>
  802124:	6813883a 	mov	r9,r13
  802128:	003fce06 	br	802064 <__muldf3+0x2d8>
  80212c:	143f7c36 	bltu	r2,r16,801f20 <__muldf3+0x194>
  802130:	003fdd06 	br	8020a8 <__muldf3+0x31c>
  802134:	12bf852e 	bgeu	r2,r10,801f4c <__muldf3+0x1c0>
  802138:	003fe506 	br	8020d0 <__muldf3+0x344>
  80213c:	00800084 	movi	r2,2
  802140:	20bf351e 	bne	r4,r2,801e18 <__muldf3+0x8c>
  802144:	01002074 	movhi	r4,129
  802148:	210d4004 	addi	r4,r4,13568
  80214c:	003f3f06 	br	801e4c <__muldf3+0xc0>

00802150 <__divdf3>:
  802150:	deffed04 	addi	sp,sp,-76
  802154:	dcc01115 	stw	r19,68(sp)
  802158:	dcc00404 	addi	r19,sp,16
  80215c:	2011883a 	mov	r8,r4
  802160:	2813883a 	mov	r9,r5
  802164:	dc000e15 	stw	r16,56(sp)
  802168:	d809883a 	mov	r4,sp
  80216c:	980b883a 	mov	r5,r19
  802170:	dc000904 	addi	r16,sp,36
  802174:	dfc01215 	stw	ra,72(sp)
  802178:	da400115 	stw	r9,4(sp)
  80217c:	d9c00315 	stw	r7,12(sp)
  802180:	da000015 	stw	r8,0(sp)
  802184:	d9800215 	stw	r6,8(sp)
  802188:	dc801015 	stw	r18,64(sp)
  80218c:	dc400f15 	stw	r17,60(sp)
  802190:	080292c0 	call	80292c <__unpack_d>
  802194:	d9000204 	addi	r4,sp,8
  802198:	800b883a 	mov	r5,r16
  80219c:	080292c0 	call	80292c <__unpack_d>
  8021a0:	d9000417 	ldw	r4,16(sp)
  8021a4:	00800044 	movi	r2,1
  8021a8:	11000b2e 	bgeu	r2,r4,8021d8 <__divdf3+0x88>
  8021ac:	d9400917 	ldw	r5,36(sp)
  8021b0:	1140762e 	bgeu	r2,r5,80238c <__divdf3+0x23c>
  8021b4:	d8800517 	ldw	r2,20(sp)
  8021b8:	d8c00a17 	ldw	r3,40(sp)
  8021bc:	01800104 	movi	r6,4
  8021c0:	10c4f03a 	xor	r2,r2,r3
  8021c4:	d8800515 	stw	r2,20(sp)
  8021c8:	21800226 	beq	r4,r6,8021d4 <__divdf3+0x84>
  8021cc:	00800084 	movi	r2,2
  8021d0:	2080141e 	bne	r4,r2,802224 <__divdf3+0xd4>
  8021d4:	29000926 	beq	r5,r4,8021fc <__divdf3+0xac>
  8021d8:	9809883a 	mov	r4,r19
  8021dc:	08026180 	call	802618 <__pack_d>
  8021e0:	dfc01217 	ldw	ra,72(sp)
  8021e4:	dcc01117 	ldw	r19,68(sp)
  8021e8:	dc801017 	ldw	r18,64(sp)
  8021ec:	dc400f17 	ldw	r17,60(sp)
  8021f0:	dc000e17 	ldw	r16,56(sp)
  8021f4:	dec01304 	addi	sp,sp,76
  8021f8:	f800283a 	ret
  8021fc:	01002074 	movhi	r4,129
  802200:	210d4004 	addi	r4,r4,13568
  802204:	08026180 	call	802618 <__pack_d>
  802208:	dfc01217 	ldw	ra,72(sp)
  80220c:	dcc01117 	ldw	r19,68(sp)
  802210:	dc801017 	ldw	r18,64(sp)
  802214:	dc400f17 	ldw	r17,60(sp)
  802218:	dc000e17 	ldw	r16,56(sp)
  80221c:	dec01304 	addi	sp,sp,76
  802220:	f800283a 	ret
  802224:	29805b26 	beq	r5,r6,802394 <__divdf3+0x244>
  802228:	28802d26 	beq	r5,r2,8022e0 <__divdf3+0x190>
  80222c:	d8c00617 	ldw	r3,24(sp)
  802230:	d8800b17 	ldw	r2,44(sp)
  802234:	d9c00817 	ldw	r7,32(sp)
  802238:	dc400d17 	ldw	r17,52(sp)
  80223c:	188bc83a 	sub	r5,r3,r2
  802240:	d9800717 	ldw	r6,28(sp)
  802244:	dc000c17 	ldw	r16,48(sp)
  802248:	d9400615 	stw	r5,24(sp)
  80224c:	3c403836 	bltu	r7,r17,802330 <__divdf3+0x1e0>
  802250:	89c03626 	beq	r17,r7,80232c <__divdf3+0x1dc>
  802254:	0015883a 	mov	r10,zero
  802258:	001d883a 	mov	r14,zero
  80225c:	02c40034 	movhi	r11,4096
  802260:	001f883a 	mov	r15,zero
  802264:	003f883a 	mov	ra,zero
  802268:	04800f44 	movi	r18,61
  80226c:	00000f06 	br	8022ac <__divdf3+0x15c>
  802270:	601d883a 	mov	r14,r12
  802274:	681f883a 	mov	r15,r13
  802278:	400d883a 	mov	r6,r8
  80227c:	100f883a 	mov	r7,r2
  802280:	3191883a 	add	r8,r6,r6
  802284:	5808d07a 	srli	r4,r11,1
  802288:	4185803a 	cmpltu	r2,r8,r6
  80228c:	39d3883a 	add	r9,r7,r7
  802290:	28c6b03a 	or	r3,r5,r3
  802294:	1245883a 	add	r2,r2,r9
  802298:	1815883a 	mov	r10,r3
  80229c:	2017883a 	mov	r11,r4
  8022a0:	400d883a 	mov	r6,r8
  8022a4:	100f883a 	mov	r7,r2
  8022a8:	fc801726 	beq	ra,r18,802308 <__divdf3+0x1b8>
  8022ac:	580a97fa 	slli	r5,r11,31
  8022b0:	5006d07a 	srli	r3,r10,1
  8022b4:	ffc00044 	addi	ra,ra,1
  8022b8:	3c7ff136 	bltu	r7,r17,802280 <__divdf3+0x130>
  8022bc:	3411c83a 	sub	r8,r6,r16
  8022c0:	3205803a 	cmpltu	r2,r6,r8
  8022c4:	3c53c83a 	sub	r9,r7,r17
  8022c8:	7298b03a 	or	r12,r14,r10
  8022cc:	7adab03a 	or	r13,r15,r11
  8022d0:	4885c83a 	sub	r2,r9,r2
  8022d4:	89ffe61e 	bne	r17,r7,802270 <__divdf3+0x120>
  8022d8:	343fe936 	bltu	r6,r16,802280 <__divdf3+0x130>
  8022dc:	003fe406 	br	802270 <__divdf3+0x120>
  8022e0:	9809883a 	mov	r4,r19
  8022e4:	d9800415 	stw	r6,16(sp)
  8022e8:	08026180 	call	802618 <__pack_d>
  8022ec:	dfc01217 	ldw	ra,72(sp)
  8022f0:	dcc01117 	ldw	r19,68(sp)
  8022f4:	dc801017 	ldw	r18,64(sp)
  8022f8:	dc400f17 	ldw	r17,60(sp)
  8022fc:	dc000e17 	ldw	r16,56(sp)
  802300:	dec01304 	addi	sp,sp,76
  802304:	f800283a 	ret
  802308:	00803fc4 	movi	r2,255
  80230c:	7090703a 	and	r8,r14,r2
  802310:	00802004 	movi	r2,128
  802314:	0007883a 	mov	r3,zero
  802318:	0013883a 	mov	r9,zero
  80231c:	40800d26 	beq	r8,r2,802354 <__divdf3+0x204>
  802320:	dbc00815 	stw	r15,32(sp)
  802324:	db800715 	stw	r14,28(sp)
  802328:	003fab06 	br	8021d8 <__divdf3+0x88>
  80232c:	343fc92e 	bgeu	r6,r16,802254 <__divdf3+0x104>
  802330:	3185883a 	add	r2,r6,r6
  802334:	1189803a 	cmpltu	r4,r2,r6
  802338:	39c7883a 	add	r3,r7,r7
  80233c:	20c9883a 	add	r4,r4,r3
  802340:	297fffc4 	addi	r5,r5,-1
  802344:	100d883a 	mov	r6,r2
  802348:	200f883a 	mov	r7,r4
  80234c:	d9400615 	stw	r5,24(sp)
  802350:	003fc006 	br	802254 <__divdf3+0x104>
  802354:	483ff21e 	bne	r9,zero,802320 <__divdf3+0x1d0>
  802358:	01004004 	movi	r4,256
  80235c:	7104703a 	and	r2,r14,r4
  802360:	10c4b03a 	or	r2,r2,r3
  802364:	103fee1e 	bne	r2,zero,802320 <__divdf3+0x1d0>
  802368:	31c4b03a 	or	r2,r6,r7
  80236c:	103fec26 	beq	r2,zero,802320 <__divdf3+0x1d0>
  802370:	7205883a 	add	r2,r14,r8
  802374:	1391803a 	cmpltu	r8,r2,r14
  802378:	43d1883a 	add	r8,r8,r15
  80237c:	013fc004 	movi	r4,-256
  802380:	111c703a 	and	r14,r2,r4
  802384:	401f883a 	mov	r15,r8
  802388:	003fe506 	br	802320 <__divdf3+0x1d0>
  80238c:	8009883a 	mov	r4,r16
  802390:	003f9206 	br	8021dc <__divdf3+0x8c>
  802394:	9809883a 	mov	r4,r19
  802398:	d8000715 	stw	zero,28(sp)
  80239c:	d8000815 	stw	zero,32(sp)
  8023a0:	d8000615 	stw	zero,24(sp)
  8023a4:	003f8d06 	br	8021dc <__divdf3+0x8c>

008023a8 <udivmodsi4>:
  8023a8:	29001b2e 	bgeu	r5,r4,802418 <udivmodsi4+0x70>
  8023ac:	28001a16 	blt	r5,zero,802418 <udivmodsi4+0x70>
  8023b0:	00800044 	movi	r2,1
  8023b4:	0007883a 	mov	r3,zero
  8023b8:	01c007c4 	movi	r7,31
  8023bc:	00000306 	br	8023cc <udivmodsi4+0x24>
  8023c0:	19c01326 	beq	r3,r7,802410 <udivmodsi4+0x68>
  8023c4:	18c00044 	addi	r3,r3,1
  8023c8:	28000416 	blt	r5,zero,8023dc <udivmodsi4+0x34>
  8023cc:	294b883a 	add	r5,r5,r5
  8023d0:	1085883a 	add	r2,r2,r2
  8023d4:	293ffa36 	bltu	r5,r4,8023c0 <udivmodsi4+0x18>
  8023d8:	10000d26 	beq	r2,zero,802410 <udivmodsi4+0x68>
  8023dc:	0007883a 	mov	r3,zero
  8023e0:	21400236 	bltu	r4,r5,8023ec <udivmodsi4+0x44>
  8023e4:	2149c83a 	sub	r4,r4,r5
  8023e8:	1886b03a 	or	r3,r3,r2
  8023ec:	1004d07a 	srli	r2,r2,1
  8023f0:	280ad07a 	srli	r5,r5,1
  8023f4:	103ffa1e 	bne	r2,zero,8023e0 <udivmodsi4+0x38>
  8023f8:	30000226 	beq	r6,zero,802404 <udivmodsi4+0x5c>
  8023fc:	2005883a 	mov	r2,r4
  802400:	f800283a 	ret
  802404:	1809883a 	mov	r4,r3
  802408:	2005883a 	mov	r2,r4
  80240c:	f800283a 	ret
  802410:	0007883a 	mov	r3,zero
  802414:	003ff806 	br	8023f8 <udivmodsi4+0x50>
  802418:	00800044 	movi	r2,1
  80241c:	0007883a 	mov	r3,zero
  802420:	003fef06 	br	8023e0 <udivmodsi4+0x38>

00802424 <__divsi3>:
  802424:	defffe04 	addi	sp,sp,-8
  802428:	dc000015 	stw	r16,0(sp)
  80242c:	dfc00115 	stw	ra,4(sp)
  802430:	0021883a 	mov	r16,zero
  802434:	20000c16 	blt	r4,zero,802468 <__divsi3+0x44>
  802438:	000d883a 	mov	r6,zero
  80243c:	28000e16 	blt	r5,zero,802478 <__divsi3+0x54>
  802440:	08023a80 	call	8023a8 <udivmodsi4>
  802444:	1007883a 	mov	r3,r2
  802448:	8005003a 	cmpeq	r2,r16,zero
  80244c:	1000011e 	bne	r2,zero,802454 <__divsi3+0x30>
  802450:	00c7c83a 	sub	r3,zero,r3
  802454:	1805883a 	mov	r2,r3
  802458:	dfc00117 	ldw	ra,4(sp)
  80245c:	dc000017 	ldw	r16,0(sp)
  802460:	dec00204 	addi	sp,sp,8
  802464:	f800283a 	ret
  802468:	0109c83a 	sub	r4,zero,r4
  80246c:	04000044 	movi	r16,1
  802470:	000d883a 	mov	r6,zero
  802474:	283ff20e 	bge	r5,zero,802440 <__divsi3+0x1c>
  802478:	014bc83a 	sub	r5,zero,r5
  80247c:	8021003a 	cmpeq	r16,r16,zero
  802480:	003fef06 	br	802440 <__divsi3+0x1c>

00802484 <__modsi3>:
  802484:	deffff04 	addi	sp,sp,-4
  802488:	dfc00015 	stw	ra,0(sp)
  80248c:	01800044 	movi	r6,1
  802490:	2807883a 	mov	r3,r5
  802494:	20000416 	blt	r4,zero,8024a8 <__modsi3+0x24>
  802498:	28000c16 	blt	r5,zero,8024cc <__modsi3+0x48>
  80249c:	dfc00017 	ldw	ra,0(sp)
  8024a0:	dec00104 	addi	sp,sp,4
  8024a4:	08023a81 	jmpi	8023a8 <udivmodsi4>
  8024a8:	0109c83a 	sub	r4,zero,r4
  8024ac:	28000b16 	blt	r5,zero,8024dc <__modsi3+0x58>
  8024b0:	180b883a 	mov	r5,r3
  8024b4:	01800044 	movi	r6,1
  8024b8:	08023a80 	call	8023a8 <udivmodsi4>
  8024bc:	0085c83a 	sub	r2,zero,r2
  8024c0:	dfc00017 	ldw	ra,0(sp)
  8024c4:	dec00104 	addi	sp,sp,4
  8024c8:	f800283a 	ret
  8024cc:	014bc83a 	sub	r5,zero,r5
  8024d0:	dfc00017 	ldw	ra,0(sp)
  8024d4:	dec00104 	addi	sp,sp,4
  8024d8:	08023a81 	jmpi	8023a8 <udivmodsi4>
  8024dc:	0147c83a 	sub	r3,zero,r5
  8024e0:	003ff306 	br	8024b0 <__modsi3+0x2c>

008024e4 <__udivsi3>:
  8024e4:	000d883a 	mov	r6,zero
  8024e8:	08023a81 	jmpi	8023a8 <udivmodsi4>

008024ec <__umodsi3>:
  8024ec:	01800044 	movi	r6,1
  8024f0:	08023a81 	jmpi	8023a8 <udivmodsi4>

008024f4 <__muldi3>:
  8024f4:	defff204 	addi	sp,sp,-56
  8024f8:	df000c15 	stw	fp,48(sp)
  8024fc:	3038d43a 	srli	fp,r6,16
  802500:	dd000815 	stw	r20,32(sp)
  802504:	dc400515 	stw	r17,20(sp)
  802508:	2028d43a 	srli	r20,r4,16
  80250c:	247fffcc 	andi	r17,r4,65535
  802510:	dc000415 	stw	r16,16(sp)
  802514:	343fffcc 	andi	r16,r6,65535
  802518:	dcc00715 	stw	r19,28(sp)
  80251c:	d9000015 	stw	r4,0(sp)
  802520:	2827883a 	mov	r19,r5
  802524:	8809883a 	mov	r4,r17
  802528:	d9400115 	stw	r5,4(sp)
  80252c:	800b883a 	mov	r5,r16
  802530:	d9800215 	stw	r6,8(sp)
  802534:	dfc00d15 	stw	ra,52(sp)
  802538:	d9c00315 	stw	r7,12(sp)
  80253c:	dd800a15 	stw	r22,40(sp)
  802540:	dd400915 	stw	r21,36(sp)
  802544:	302d883a 	mov	r22,r6
  802548:	ddc00b15 	stw	r23,44(sp)
  80254c:	dc800615 	stw	r18,24(sp)
  802550:	0802a640 	call	802a64 <__mulsi3>
  802554:	8809883a 	mov	r4,r17
  802558:	e00b883a 	mov	r5,fp
  80255c:	102b883a 	mov	r21,r2
  802560:	0802a640 	call	802a64 <__mulsi3>
  802564:	800b883a 	mov	r5,r16
  802568:	a009883a 	mov	r4,r20
  80256c:	1023883a 	mov	r17,r2
  802570:	0802a640 	call	802a64 <__mulsi3>
  802574:	a009883a 	mov	r4,r20
  802578:	e00b883a 	mov	r5,fp
  80257c:	1021883a 	mov	r16,r2
  802580:	0802a640 	call	802a64 <__mulsi3>
  802584:	a8ffffcc 	andi	r3,r21,65535
  802588:	a82ad43a 	srli	r21,r21,16
  80258c:	8c23883a 	add	r17,r17,r16
  802590:	1011883a 	mov	r8,r2
  802594:	ac6b883a 	add	r21,r21,r17
  802598:	a804943a 	slli	r2,r21,16
  80259c:	b009883a 	mov	r4,r22
  8025a0:	980b883a 	mov	r5,r19
  8025a4:	10c7883a 	add	r3,r2,r3
  8025a8:	a812d43a 	srli	r9,r21,16
  8025ac:	180d883a 	mov	r6,r3
  8025b0:	ac00022e 	bgeu	r21,r16,8025bc <__muldi3+0xc8>
  8025b4:	00800074 	movhi	r2,1
  8025b8:	4091883a 	add	r8,r8,r2
  8025bc:	4267883a 	add	r19,r8,r9
  8025c0:	302d883a 	mov	r22,r6
  8025c4:	0802a640 	call	802a64 <__mulsi3>
  8025c8:	d9400317 	ldw	r5,12(sp)
  8025cc:	d9000017 	ldw	r4,0(sp)
  8025d0:	1023883a 	mov	r17,r2
  8025d4:	0802a640 	call	802a64 <__mulsi3>
  8025d8:	14cb883a 	add	r5,r2,r19
  8025dc:	894b883a 	add	r5,r17,r5
  8025e0:	b005883a 	mov	r2,r22
  8025e4:	2807883a 	mov	r3,r5
  8025e8:	dfc00d17 	ldw	ra,52(sp)
  8025ec:	df000c17 	ldw	fp,48(sp)
  8025f0:	ddc00b17 	ldw	r23,44(sp)
  8025f4:	dd800a17 	ldw	r22,40(sp)
  8025f8:	dd400917 	ldw	r21,36(sp)
  8025fc:	dd000817 	ldw	r20,32(sp)
  802600:	dcc00717 	ldw	r19,28(sp)
  802604:	dc800617 	ldw	r18,24(sp)
  802608:	dc400517 	ldw	r17,20(sp)
  80260c:	dc000417 	ldw	r16,16(sp)
  802610:	dec00e04 	addi	sp,sp,56
  802614:	f800283a 	ret

00802618 <__pack_d>:
  802618:	20c00017 	ldw	r3,0(r4)
  80261c:	defffd04 	addi	sp,sp,-12
  802620:	dc000015 	stw	r16,0(sp)
  802624:	dc800215 	stw	r18,8(sp)
  802628:	dc400115 	stw	r17,4(sp)
  80262c:	00800044 	movi	r2,1
  802630:	22000317 	ldw	r8,12(r4)
  802634:	001f883a 	mov	r15,zero
  802638:	22400417 	ldw	r9,16(r4)
  80263c:	24000117 	ldw	r16,4(r4)
  802640:	10c0552e 	bgeu	r2,r3,802798 <__pack_d+0x180>
  802644:	00800104 	movi	r2,4
  802648:	18804f26 	beq	r3,r2,802788 <__pack_d+0x170>
  80264c:	00800084 	movi	r2,2
  802650:	18800226 	beq	r3,r2,80265c <__pack_d+0x44>
  802654:	4244b03a 	or	r2,r8,r9
  802658:	10001a1e 	bne	r2,zero,8026c4 <__pack_d+0xac>
  80265c:	000d883a 	mov	r6,zero
  802660:	000f883a 	mov	r7,zero
  802664:	0011883a 	mov	r8,zero
  802668:	00800434 	movhi	r2,16
  80266c:	10bfffc4 	addi	r2,r2,-1
  802670:	301d883a 	mov	r14,r6
  802674:	3884703a 	and	r2,r7,r2
  802678:	400a953a 	slli	r5,r8,20
  80267c:	79bffc2c 	andhi	r6,r15,65520
  802680:	308cb03a 	or	r6,r6,r2
  802684:	00e00434 	movhi	r3,32784
  802688:	18ffffc4 	addi	r3,r3,-1
  80268c:	800497fa 	slli	r2,r16,31
  802690:	30c6703a 	and	r3,r6,r3
  802694:	1946b03a 	or	r3,r3,r5
  802698:	01600034 	movhi	r5,32768
  80269c:	297fffc4 	addi	r5,r5,-1
  8026a0:	194a703a 	and	r5,r3,r5
  8026a4:	288ab03a 	or	r5,r5,r2
  8026a8:	2807883a 	mov	r3,r5
  8026ac:	7005883a 	mov	r2,r14
  8026b0:	dc800217 	ldw	r18,8(sp)
  8026b4:	dc400117 	ldw	r17,4(sp)
  8026b8:	dc000017 	ldw	r16,0(sp)
  8026bc:	dec00304 	addi	sp,sp,12
  8026c0:	f800283a 	ret
  8026c4:	21000217 	ldw	r4,8(r4)
  8026c8:	00bf0084 	movi	r2,-1022
  8026cc:	20803f16 	blt	r4,r2,8027cc <__pack_d+0x1b4>
  8026d0:	0080ffc4 	movi	r2,1023
  8026d4:	11002c16 	blt	r2,r4,802788 <__pack_d+0x170>
  8026d8:	00803fc4 	movi	r2,255
  8026dc:	408c703a 	and	r6,r8,r2
  8026e0:	00802004 	movi	r2,128
  8026e4:	0007883a 	mov	r3,zero
  8026e8:	000f883a 	mov	r7,zero
  8026ec:	2280ffc4 	addi	r10,r4,1023
  8026f0:	30801e26 	beq	r6,r2,80276c <__pack_d+0x154>
  8026f4:	00801fc4 	movi	r2,127
  8026f8:	4089883a 	add	r4,r8,r2
  8026fc:	220d803a 	cmpltu	r6,r4,r8
  802700:	324d883a 	add	r6,r6,r9
  802704:	2011883a 	mov	r8,r4
  802708:	3013883a 	mov	r9,r6
  80270c:	00880034 	movhi	r2,8192
  802710:	10bfffc4 	addi	r2,r2,-1
  802714:	12400d36 	bltu	r2,r9,80274c <__pack_d+0x134>
  802718:	4804963a 	slli	r2,r9,24
  80271c:	400cd23a 	srli	r6,r8,8
  802720:	480ed23a 	srli	r7,r9,8
  802724:	013fffc4 	movi	r4,-1
  802728:	118cb03a 	or	r6,r2,r6
  80272c:	01400434 	movhi	r5,16
  802730:	297fffc4 	addi	r5,r5,-1
  802734:	3104703a 	and	r2,r6,r4
  802738:	3946703a 	and	r3,r7,r5
  80273c:	5201ffcc 	andi	r8,r10,2047
  802740:	100d883a 	mov	r6,r2
  802744:	180f883a 	mov	r7,r3
  802748:	003fc706 	br	802668 <__pack_d+0x50>
  80274c:	480897fa 	slli	r4,r9,31
  802750:	4004d07a 	srli	r2,r8,1
  802754:	4806d07a 	srli	r3,r9,1
  802758:	52800044 	addi	r10,r10,1
  80275c:	2084b03a 	or	r2,r4,r2
  802760:	1011883a 	mov	r8,r2
  802764:	1813883a 	mov	r9,r3
  802768:	003feb06 	br	802718 <__pack_d+0x100>
  80276c:	383fe11e 	bne	r7,zero,8026f4 <__pack_d+0xdc>
  802770:	01004004 	movi	r4,256
  802774:	4104703a 	and	r2,r8,r4
  802778:	10c4b03a 	or	r2,r2,r3
  80277c:	103fe326 	beq	r2,zero,80270c <__pack_d+0xf4>
  802780:	3005883a 	mov	r2,r6
  802784:	003fdc06 	br	8026f8 <__pack_d+0xe0>
  802788:	000d883a 	mov	r6,zero
  80278c:	000f883a 	mov	r7,zero
  802790:	0201ffc4 	movi	r8,2047
  802794:	003fb406 	br	802668 <__pack_d+0x50>
  802798:	0005883a 	mov	r2,zero
  80279c:	00c00234 	movhi	r3,8
  8027a0:	408cb03a 	or	r6,r8,r2
  8027a4:	48ceb03a 	or	r7,r9,r3
  8027a8:	013fffc4 	movi	r4,-1
  8027ac:	01400434 	movhi	r5,16
  8027b0:	297fffc4 	addi	r5,r5,-1
  8027b4:	3104703a 	and	r2,r6,r4
  8027b8:	3946703a 	and	r3,r7,r5
  8027bc:	100d883a 	mov	r6,r2
  8027c0:	180f883a 	mov	r7,r3
  8027c4:	0201ffc4 	movi	r8,2047
  8027c8:	003fa706 	br	802668 <__pack_d+0x50>
  8027cc:	1109c83a 	sub	r4,r2,r4
  8027d0:	00800e04 	movi	r2,56
  8027d4:	11004316 	blt	r2,r4,8028e4 <__pack_d+0x2cc>
  8027d8:	21fff804 	addi	r7,r4,-32
  8027dc:	38004516 	blt	r7,zero,8028f4 <__pack_d+0x2dc>
  8027e0:	49d8d83a 	srl	r12,r9,r7
  8027e4:	001b883a 	mov	r13,zero
  8027e8:	0023883a 	mov	r17,zero
  8027ec:	01400044 	movi	r5,1
  8027f0:	0025883a 	mov	r18,zero
  8027f4:	38004716 	blt	r7,zero,802914 <__pack_d+0x2fc>
  8027f8:	29d6983a 	sll	r11,r5,r7
  8027fc:	0015883a 	mov	r10,zero
  802800:	00bfffc4 	movi	r2,-1
  802804:	5089883a 	add	r4,r10,r2
  802808:	588b883a 	add	r5,r11,r2
  80280c:	228d803a 	cmpltu	r6,r4,r10
  802810:	314b883a 	add	r5,r6,r5
  802814:	4104703a 	and	r2,r8,r4
  802818:	4946703a 	and	r3,r9,r5
  80281c:	10c4b03a 	or	r2,r2,r3
  802820:	10000226 	beq	r2,zero,80282c <__pack_d+0x214>
  802824:	04400044 	movi	r17,1
  802828:	0025883a 	mov	r18,zero
  80282c:	00803fc4 	movi	r2,255
  802830:	644eb03a 	or	r7,r12,r17
  802834:	3892703a 	and	r9,r7,r2
  802838:	00802004 	movi	r2,128
  80283c:	6c90b03a 	or	r8,r13,r18
  802840:	0015883a 	mov	r10,zero
  802844:	48801626 	beq	r9,r2,8028a0 <__pack_d+0x288>
  802848:	01001fc4 	movi	r4,127
  80284c:	3905883a 	add	r2,r7,r4
  802850:	11cd803a 	cmpltu	r6,r2,r7
  802854:	320d883a 	add	r6,r6,r8
  802858:	100f883a 	mov	r7,r2
  80285c:	00840034 	movhi	r2,4096
  802860:	10bfffc4 	addi	r2,r2,-1
  802864:	3011883a 	mov	r8,r6
  802868:	0007883a 	mov	r3,zero
  80286c:	11801b36 	bltu	r2,r6,8028dc <__pack_d+0x2c4>
  802870:	4004963a 	slli	r2,r8,24
  802874:	3808d23a 	srli	r4,r7,8
  802878:	400ad23a 	srli	r5,r8,8
  80287c:	1813883a 	mov	r9,r3
  802880:	1108b03a 	or	r4,r2,r4
  802884:	00bfffc4 	movi	r2,-1
  802888:	00c00434 	movhi	r3,16
  80288c:	18ffffc4 	addi	r3,r3,-1
  802890:	208c703a 	and	r6,r4,r2
  802894:	28ce703a 	and	r7,r5,r3
  802898:	4a01ffcc 	andi	r8,r9,2047
  80289c:	003f7206 	br	802668 <__pack_d+0x50>
  8028a0:	503fe91e 	bne	r10,zero,802848 <__pack_d+0x230>
  8028a4:	01004004 	movi	r4,256
  8028a8:	3904703a 	and	r2,r7,r4
  8028ac:	0007883a 	mov	r3,zero
  8028b0:	10c4b03a 	or	r2,r2,r3
  8028b4:	10000626 	beq	r2,zero,8028d0 <__pack_d+0x2b8>
  8028b8:	3a45883a 	add	r2,r7,r9
  8028bc:	11cd803a 	cmpltu	r6,r2,r7
  8028c0:	320d883a 	add	r6,r6,r8
  8028c4:	100f883a 	mov	r7,r2
  8028c8:	3011883a 	mov	r8,r6
  8028cc:	0007883a 	mov	r3,zero
  8028d0:	00840034 	movhi	r2,4096
  8028d4:	10bfffc4 	addi	r2,r2,-1
  8028d8:	123fe52e 	bgeu	r2,r8,802870 <__pack_d+0x258>
  8028dc:	00c00044 	movi	r3,1
  8028e0:	003fe306 	br	802870 <__pack_d+0x258>
  8028e4:	0009883a 	mov	r4,zero
  8028e8:	0013883a 	mov	r9,zero
  8028ec:	000b883a 	mov	r5,zero
  8028f0:	003fe406 	br	802884 <__pack_d+0x26c>
  8028f4:	4a47883a 	add	r3,r9,r9
  8028f8:	008007c4 	movi	r2,31
  8028fc:	1105c83a 	sub	r2,r2,r4
  802900:	1886983a 	sll	r3,r3,r2
  802904:	4118d83a 	srl	r12,r8,r4
  802908:	491ad83a 	srl	r13,r9,r4
  80290c:	1b18b03a 	or	r12,r3,r12
  802910:	003fb506 	br	8027e8 <__pack_d+0x1d0>
  802914:	2806d07a 	srli	r3,r5,1
  802918:	008007c4 	movi	r2,31
  80291c:	1105c83a 	sub	r2,r2,r4
  802920:	1896d83a 	srl	r11,r3,r2
  802924:	2914983a 	sll	r10,r5,r4
  802928:	003fb506 	br	802800 <__pack_d+0x1e8>

0080292c <__unpack_d>:
  80292c:	20c00117 	ldw	r3,4(r4)
  802930:	22400017 	ldw	r9,0(r4)
  802934:	00800434 	movhi	r2,16
  802938:	10bfffc4 	addi	r2,r2,-1
  80293c:	1808d53a 	srli	r4,r3,20
  802940:	180cd7fa 	srli	r6,r3,31
  802944:	1894703a 	and	r10,r3,r2
  802948:	2201ffcc 	andi	r8,r4,2047
  80294c:	281b883a 	mov	r13,r5
  802950:	4817883a 	mov	r11,r9
  802954:	29800115 	stw	r6,4(r5)
  802958:	5019883a 	mov	r12,r10
  80295c:	40001e1e 	bne	r8,zero,8029d8 <__unpack_d+0xac>
  802960:	4a84b03a 	or	r2,r9,r10
  802964:	10001926 	beq	r2,zero,8029cc <__unpack_d+0xa0>
  802968:	4804d63a 	srli	r2,r9,24
  80296c:	500c923a 	slli	r6,r10,8
  802970:	013f0084 	movi	r4,-1022
  802974:	00c40034 	movhi	r3,4096
  802978:	18ffffc4 	addi	r3,r3,-1
  80297c:	118cb03a 	or	r6,r2,r6
  802980:	008000c4 	movi	r2,3
  802984:	480a923a 	slli	r5,r9,8
  802988:	68800015 	stw	r2,0(r13)
  80298c:	69000215 	stw	r4,8(r13)
  802990:	19800b36 	bltu	r3,r6,8029c0 <__unpack_d+0x94>
  802994:	200f883a 	mov	r7,r4
  802998:	1811883a 	mov	r8,r3
  80299c:	2945883a 	add	r2,r5,r5
  8029a0:	1149803a 	cmpltu	r4,r2,r5
  8029a4:	3187883a 	add	r3,r6,r6
  8029a8:	20c9883a 	add	r4,r4,r3
  8029ac:	100b883a 	mov	r5,r2
  8029b0:	200d883a 	mov	r6,r4
  8029b4:	39ffffc4 	addi	r7,r7,-1
  8029b8:	413ff82e 	bgeu	r8,r4,80299c <__unpack_d+0x70>
  8029bc:	69c00215 	stw	r7,8(r13)
  8029c0:	69800415 	stw	r6,16(r13)
  8029c4:	69400315 	stw	r5,12(r13)
  8029c8:	f800283a 	ret
  8029cc:	00800084 	movi	r2,2
  8029d0:	28800015 	stw	r2,0(r5)
  8029d4:	f800283a 	ret
  8029d8:	0081ffc4 	movi	r2,2047
  8029dc:	40800f26 	beq	r8,r2,802a1c <__unpack_d+0xf0>
  8029e0:	480cd63a 	srli	r6,r9,24
  8029e4:	5006923a 	slli	r3,r10,8
  8029e8:	4804923a 	slli	r2,r9,8
  8029ec:	0009883a 	mov	r4,zero
  8029f0:	30c6b03a 	or	r3,r6,r3
  8029f4:	01440034 	movhi	r5,4096
  8029f8:	110cb03a 	or	r6,r2,r4
  8029fc:	423f0044 	addi	r8,r8,-1023
  802a00:	194eb03a 	or	r7,r3,r5
  802a04:	008000c4 	movi	r2,3
  802a08:	69c00415 	stw	r7,16(r13)
  802a0c:	6a000215 	stw	r8,8(r13)
  802a10:	68800015 	stw	r2,0(r13)
  802a14:	69800315 	stw	r6,12(r13)
  802a18:	f800283a 	ret
  802a1c:	4a84b03a 	or	r2,r9,r10
  802a20:	1000031e 	bne	r2,zero,802a30 <__unpack_d+0x104>
  802a24:	00800104 	movi	r2,4
  802a28:	28800015 	stw	r2,0(r5)
  802a2c:	f800283a 	ret
  802a30:	0009883a 	mov	r4,zero
  802a34:	01400234 	movhi	r5,8
  802a38:	4904703a 	and	r2,r9,r4
  802a3c:	5146703a 	and	r3,r10,r5
  802a40:	10c4b03a 	or	r2,r2,r3
  802a44:	10000526 	beq	r2,zero,802a5c <__unpack_d+0x130>
  802a48:	00800044 	movi	r2,1
  802a4c:	68800015 	stw	r2,0(r13)
  802a50:	6b000415 	stw	r12,16(r13)
  802a54:	6ac00315 	stw	r11,12(r13)
  802a58:	f800283a 	ret
  802a5c:	68000015 	stw	zero,0(r13)
  802a60:	003ffb06 	br	802a50 <__unpack_d+0x124>

00802a64 <__mulsi3>:
  802a64:	20000a26 	beq	r4,zero,802a90 <__mulsi3+0x2c>
  802a68:	0007883a 	mov	r3,zero
  802a6c:	2080004c 	andi	r2,r4,1
  802a70:	1005003a 	cmpeq	r2,r2,zero
  802a74:	2008d07a 	srli	r4,r4,1
  802a78:	1000011e 	bne	r2,zero,802a80 <__mulsi3+0x1c>
  802a7c:	1947883a 	add	r3,r3,r5
  802a80:	294b883a 	add	r5,r5,r5
  802a84:	203ff91e 	bne	r4,zero,802a6c <__mulsi3+0x8>
  802a88:	1805883a 	mov	r2,r3
  802a8c:	f800283a 	ret
  802a90:	0007883a 	mov	r3,zero
  802a94:	1805883a 	mov	r2,r3
  802a98:	f800283a 	ret

00802a9c <_fclose_r>:
  802a9c:	defffc04 	addi	sp,sp,-16
  802aa0:	dc400115 	stw	r17,4(sp)
  802aa4:	dc000015 	stw	r16,0(sp)
  802aa8:	dfc00315 	stw	ra,12(sp)
  802aac:	dc800215 	stw	r18,8(sp)
  802ab0:	2821883a 	mov	r16,r5
  802ab4:	2023883a 	mov	r17,r4
  802ab8:	28002926 	beq	r5,zero,802b60 <_fclose_r+0xc4>
  802abc:	0802e480 	call	802e48 <__sfp_lock_acquire>
  802ac0:	88000226 	beq	r17,zero,802acc <_fclose_r+0x30>
  802ac4:	88800e17 	ldw	r2,56(r17)
  802ac8:	10002d26 	beq	r2,zero,802b80 <_fclose_r+0xe4>
  802acc:	8080030f 	ldh	r2,12(r16)
  802ad0:	10002226 	beq	r2,zero,802b5c <_fclose_r+0xc0>
  802ad4:	8809883a 	mov	r4,r17
  802ad8:	800b883a 	mov	r5,r16
  802adc:	0802bc00 	call	802bc0 <_fflush_r>
  802ae0:	1025883a 	mov	r18,r2
  802ae4:	80800b17 	ldw	r2,44(r16)
  802ae8:	10000426 	beq	r2,zero,802afc <_fclose_r+0x60>
  802aec:	81400717 	ldw	r5,28(r16)
  802af0:	8809883a 	mov	r4,r17
  802af4:	103ee83a 	callr	r2
  802af8:	10002a16 	blt	r2,zero,802ba4 <_fclose_r+0x108>
  802afc:	8080030b 	ldhu	r2,12(r16)
  802b00:	1080200c 	andi	r2,r2,128
  802b04:	1000231e 	bne	r2,zero,802b94 <_fclose_r+0xf8>
  802b08:	81400c17 	ldw	r5,48(r16)
  802b0c:	28000526 	beq	r5,zero,802b24 <_fclose_r+0x88>
  802b10:	80801004 	addi	r2,r16,64
  802b14:	28800226 	beq	r5,r2,802b20 <_fclose_r+0x84>
  802b18:	8809883a 	mov	r4,r17
  802b1c:	08033800 	call	803380 <_free_r>
  802b20:	80000c15 	stw	zero,48(r16)
  802b24:	81401117 	ldw	r5,68(r16)
  802b28:	28000326 	beq	r5,zero,802b38 <_fclose_r+0x9c>
  802b2c:	8809883a 	mov	r4,r17
  802b30:	08033800 	call	803380 <_free_r>
  802b34:	80001115 	stw	zero,68(r16)
  802b38:	8000030d 	sth	zero,12(r16)
  802b3c:	0802e4c0 	call	802e4c <__sfp_lock_release>
  802b40:	9005883a 	mov	r2,r18
  802b44:	dfc00317 	ldw	ra,12(sp)
  802b48:	dc800217 	ldw	r18,8(sp)
  802b4c:	dc400117 	ldw	r17,4(sp)
  802b50:	dc000017 	ldw	r16,0(sp)
  802b54:	dec00404 	addi	sp,sp,16
  802b58:	f800283a 	ret
  802b5c:	0802e4c0 	call	802e4c <__sfp_lock_release>
  802b60:	0025883a 	mov	r18,zero
  802b64:	9005883a 	mov	r2,r18
  802b68:	dfc00317 	ldw	ra,12(sp)
  802b6c:	dc800217 	ldw	r18,8(sp)
  802b70:	dc400117 	ldw	r17,4(sp)
  802b74:	dc000017 	ldw	r16,0(sp)
  802b78:	dec00404 	addi	sp,sp,16
  802b7c:	f800283a 	ret
  802b80:	8809883a 	mov	r4,r17
  802b84:	0802e580 	call	802e58 <__sinit>
  802b88:	8080030f 	ldh	r2,12(r16)
  802b8c:	103fd11e 	bne	r2,zero,802ad4 <_fclose_r+0x38>
  802b90:	003ff206 	br	802b5c <_fclose_r+0xc0>
  802b94:	81400417 	ldw	r5,16(r16)
  802b98:	8809883a 	mov	r4,r17
  802b9c:	08033800 	call	803380 <_free_r>
  802ba0:	003fd906 	br	802b08 <_fclose_r+0x6c>
  802ba4:	04bfffc4 	movi	r18,-1
  802ba8:	003fd406 	br	802afc <_fclose_r+0x60>

00802bac <fclose>:
  802bac:	00802074 	movhi	r2,129
  802bb0:	1095d704 	addi	r2,r2,22364
  802bb4:	200b883a 	mov	r5,r4
  802bb8:	11000017 	ldw	r4,0(r2)
  802bbc:	0802a9c1 	jmpi	802a9c <_fclose_r>

00802bc0 <_fflush_r>:
  802bc0:	defffb04 	addi	sp,sp,-20
  802bc4:	dcc00315 	stw	r19,12(sp)
  802bc8:	dc800215 	stw	r18,8(sp)
  802bcc:	dfc00415 	stw	ra,16(sp)
  802bd0:	dc400115 	stw	r17,4(sp)
  802bd4:	dc000015 	stw	r16,0(sp)
  802bd8:	2027883a 	mov	r19,r4
  802bdc:	2825883a 	mov	r18,r5
  802be0:	20000226 	beq	r4,zero,802bec <_fflush_r+0x2c>
  802be4:	20800e17 	ldw	r2,56(r4)
  802be8:	10005626 	beq	r2,zero,802d44 <_fflush_r+0x184>
  802bec:	9100030b 	ldhu	r4,12(r18)
  802bf0:	20ffffcc 	andi	r3,r4,65535
  802bf4:	18e0001c 	xori	r3,r3,32768
  802bf8:	18e00004 	addi	r3,r3,-32768
  802bfc:	1880020c 	andi	r2,r3,8
  802c00:	1000261e 	bne	r2,zero,802c9c <_fflush_r+0xdc>
  802c04:	90c00117 	ldw	r3,4(r18)
  802c08:	20820014 	ori	r2,r4,2048
  802c0c:	9080030d 	sth	r2,12(r18)
  802c10:	1009883a 	mov	r4,r2
  802c14:	00c0400e 	bge	zero,r3,802d18 <_fflush_r+0x158>
  802c18:	92000a17 	ldw	r8,40(r18)
  802c1c:	40004026 	beq	r8,zero,802d20 <_fflush_r+0x160>
  802c20:	2084000c 	andi	r2,r4,4096
  802c24:	10005326 	beq	r2,zero,802d74 <_fflush_r+0x1b4>
  802c28:	94001417 	ldw	r16,80(r18)
  802c2c:	9080030b 	ldhu	r2,12(r18)
  802c30:	1080010c 	andi	r2,r2,4
  802c34:	1000481e 	bne	r2,zero,802d58 <_fflush_r+0x198>
  802c38:	91400717 	ldw	r5,28(r18)
  802c3c:	9809883a 	mov	r4,r19
  802c40:	800d883a 	mov	r6,r16
  802c44:	000f883a 	mov	r7,zero
  802c48:	403ee83a 	callr	r8
  802c4c:	8080261e 	bne	r16,r2,802ce8 <_fflush_r+0x128>
  802c50:	9080030b 	ldhu	r2,12(r18)
  802c54:	91000417 	ldw	r4,16(r18)
  802c58:	90000115 	stw	zero,4(r18)
  802c5c:	10bdffcc 	andi	r2,r2,63487
  802c60:	10ffffcc 	andi	r3,r2,65535
  802c64:	18c4000c 	andi	r3,r3,4096
  802c68:	9080030d 	sth	r2,12(r18)
  802c6c:	91000015 	stw	r4,0(r18)
  802c70:	18002b26 	beq	r3,zero,802d20 <_fflush_r+0x160>
  802c74:	0007883a 	mov	r3,zero
  802c78:	1805883a 	mov	r2,r3
  802c7c:	94001415 	stw	r16,80(r18)
  802c80:	dfc00417 	ldw	ra,16(sp)
  802c84:	dcc00317 	ldw	r19,12(sp)
  802c88:	dc800217 	ldw	r18,8(sp)
  802c8c:	dc400117 	ldw	r17,4(sp)
  802c90:	dc000017 	ldw	r16,0(sp)
  802c94:	dec00504 	addi	sp,sp,20
  802c98:	f800283a 	ret
  802c9c:	94400417 	ldw	r17,16(r18)
  802ca0:	88001f26 	beq	r17,zero,802d20 <_fflush_r+0x160>
  802ca4:	90800017 	ldw	r2,0(r18)
  802ca8:	18c000cc 	andi	r3,r3,3
  802cac:	94400015 	stw	r17,0(r18)
  802cb0:	1461c83a 	sub	r16,r2,r17
  802cb4:	18002526 	beq	r3,zero,802d4c <_fflush_r+0x18c>
  802cb8:	0005883a 	mov	r2,zero
  802cbc:	90800215 	stw	r2,8(r18)
  802cc0:	0400170e 	bge	zero,r16,802d20 <_fflush_r+0x160>
  802cc4:	90c00917 	ldw	r3,36(r18)
  802cc8:	91400717 	ldw	r5,28(r18)
  802ccc:	880d883a 	mov	r6,r17
  802cd0:	800f883a 	mov	r7,r16
  802cd4:	9809883a 	mov	r4,r19
  802cd8:	183ee83a 	callr	r3
  802cdc:	88a3883a 	add	r17,r17,r2
  802ce0:	80a1c83a 	sub	r16,r16,r2
  802ce4:	00bff616 	blt	zero,r2,802cc0 <_fflush_r+0x100>
  802ce8:	9080030b 	ldhu	r2,12(r18)
  802cec:	00ffffc4 	movi	r3,-1
  802cf0:	10801014 	ori	r2,r2,64
  802cf4:	9080030d 	sth	r2,12(r18)
  802cf8:	1805883a 	mov	r2,r3
  802cfc:	dfc00417 	ldw	ra,16(sp)
  802d00:	dcc00317 	ldw	r19,12(sp)
  802d04:	dc800217 	ldw	r18,8(sp)
  802d08:	dc400117 	ldw	r17,4(sp)
  802d0c:	dc000017 	ldw	r16,0(sp)
  802d10:	dec00504 	addi	sp,sp,20
  802d14:	f800283a 	ret
  802d18:	90800f17 	ldw	r2,60(r18)
  802d1c:	00bfbe16 	blt	zero,r2,802c18 <_fflush_r+0x58>
  802d20:	0007883a 	mov	r3,zero
  802d24:	1805883a 	mov	r2,r3
  802d28:	dfc00417 	ldw	ra,16(sp)
  802d2c:	dcc00317 	ldw	r19,12(sp)
  802d30:	dc800217 	ldw	r18,8(sp)
  802d34:	dc400117 	ldw	r17,4(sp)
  802d38:	dc000017 	ldw	r16,0(sp)
  802d3c:	dec00504 	addi	sp,sp,20
  802d40:	f800283a 	ret
  802d44:	0802e580 	call	802e58 <__sinit>
  802d48:	003fa806 	br	802bec <_fflush_r+0x2c>
  802d4c:	90800517 	ldw	r2,20(r18)
  802d50:	90800215 	stw	r2,8(r18)
  802d54:	003fda06 	br	802cc0 <_fflush_r+0x100>
  802d58:	90800117 	ldw	r2,4(r18)
  802d5c:	90c00c17 	ldw	r3,48(r18)
  802d60:	80a1c83a 	sub	r16,r16,r2
  802d64:	183fb426 	beq	r3,zero,802c38 <_fflush_r+0x78>
  802d68:	90800f17 	ldw	r2,60(r18)
  802d6c:	80a1c83a 	sub	r16,r16,r2
  802d70:	003fb106 	br	802c38 <_fflush_r+0x78>
  802d74:	91400717 	ldw	r5,28(r18)
  802d78:	9809883a 	mov	r4,r19
  802d7c:	000d883a 	mov	r6,zero
  802d80:	01c00044 	movi	r7,1
  802d84:	403ee83a 	callr	r8
  802d88:	1021883a 	mov	r16,r2
  802d8c:	00bfffc4 	movi	r2,-1
  802d90:	80800226 	beq	r16,r2,802d9c <_fflush_r+0x1dc>
  802d94:	92000a17 	ldw	r8,40(r18)
  802d98:	003fa406 	br	802c2c <_fflush_r+0x6c>
  802d9c:	98c00017 	ldw	r3,0(r19)
  802da0:	00800744 	movi	r2,29
  802da4:	18bfde26 	beq	r3,r2,802d20 <_fflush_r+0x160>
  802da8:	9080030b 	ldhu	r2,12(r18)
  802dac:	8007883a 	mov	r3,r16
  802db0:	10801014 	ori	r2,r2,64
  802db4:	9080030d 	sth	r2,12(r18)
  802db8:	003fcf06 	br	802cf8 <_fflush_r+0x138>

00802dbc <fflush>:
  802dbc:	01402034 	movhi	r5,128
  802dc0:	294af004 	addi	r5,r5,11200
  802dc4:	2007883a 	mov	r3,r4
  802dc8:	20000526 	beq	r4,zero,802de0 <fflush+0x24>
  802dcc:	00802074 	movhi	r2,129
  802dd0:	1095d704 	addi	r2,r2,22364
  802dd4:	11000017 	ldw	r4,0(r2)
  802dd8:	180b883a 	mov	r5,r3
  802ddc:	0802bc01 	jmpi	802bc0 <_fflush_r>
  802de0:	00802074 	movhi	r2,129
  802de4:	1095d804 	addi	r2,r2,22368
  802de8:	11000017 	ldw	r4,0(r2)
  802dec:	0803b681 	jmpi	803b68 <_fwalk_reent>

00802df0 <std>:
  802df0:	00802034 	movhi	r2,128
  802df4:	1092d004 	addi	r2,r2,19264
  802df8:	20800b15 	stw	r2,44(r4)
  802dfc:	00802034 	movhi	r2,128
  802e00:	10930b04 	addi	r2,r2,19500
  802e04:	20800815 	stw	r2,32(r4)
  802e08:	00c02034 	movhi	r3,128
  802e0c:	18d2ec04 	addi	r3,r3,19376
  802e10:	00802034 	movhi	r2,128
  802e14:	1092d204 	addi	r2,r2,19272
  802e18:	2140030d 	sth	r5,12(r4)
  802e1c:	2180038d 	sth	r6,14(r4)
  802e20:	20c00915 	stw	r3,36(r4)
  802e24:	20800a15 	stw	r2,40(r4)
  802e28:	20000015 	stw	zero,0(r4)
  802e2c:	20000115 	stw	zero,4(r4)
  802e30:	20000215 	stw	zero,8(r4)
  802e34:	20000415 	stw	zero,16(r4)
  802e38:	20000515 	stw	zero,20(r4)
  802e3c:	20000615 	stw	zero,24(r4)
  802e40:	21000715 	stw	r4,28(r4)
  802e44:	f800283a 	ret

00802e48 <__sfp_lock_acquire>:
  802e48:	f800283a 	ret

00802e4c <__sfp_lock_release>:
  802e4c:	f800283a 	ret

00802e50 <__sinit_lock_acquire>:
  802e50:	f800283a 	ret

00802e54 <__sinit_lock_release>:
  802e54:	f800283a 	ret

00802e58 <__sinit>:
  802e58:	20800e17 	ldw	r2,56(r4)
  802e5c:	defffd04 	addi	sp,sp,-12
  802e60:	dc400115 	stw	r17,4(sp)
  802e64:	dc000015 	stw	r16,0(sp)
  802e68:	dfc00215 	stw	ra,8(sp)
  802e6c:	04400044 	movi	r17,1
  802e70:	01400104 	movi	r5,4
  802e74:	000d883a 	mov	r6,zero
  802e78:	2021883a 	mov	r16,r4
  802e7c:	2200bb04 	addi	r8,r4,748
  802e80:	200f883a 	mov	r7,r4
  802e84:	10000526 	beq	r2,zero,802e9c <__sinit+0x44>
  802e88:	dfc00217 	ldw	ra,8(sp)
  802e8c:	dc400117 	ldw	r17,4(sp)
  802e90:	dc000017 	ldw	r16,0(sp)
  802e94:	dec00304 	addi	sp,sp,12
  802e98:	f800283a 	ret
  802e9c:	21000117 	ldw	r4,4(r4)
  802ea0:	00802034 	movhi	r2,128
  802ea4:	108bcf04 	addi	r2,r2,12092
  802ea8:	00c000c4 	movi	r3,3
  802eac:	80800f15 	stw	r2,60(r16)
  802eb0:	80c0b915 	stw	r3,740(r16)
  802eb4:	8200ba15 	stw	r8,744(r16)
  802eb8:	84400e15 	stw	r17,56(r16)
  802ebc:	8000b815 	stw	zero,736(r16)
  802ec0:	0802df00 	call	802df0 <std>
  802ec4:	81000217 	ldw	r4,8(r16)
  802ec8:	880d883a 	mov	r6,r17
  802ecc:	800f883a 	mov	r7,r16
  802ed0:	01400284 	movi	r5,10
  802ed4:	0802df00 	call	802df0 <std>
  802ed8:	81000317 	ldw	r4,12(r16)
  802edc:	800f883a 	mov	r7,r16
  802ee0:	01400484 	movi	r5,18
  802ee4:	01800084 	movi	r6,2
  802ee8:	dfc00217 	ldw	ra,8(sp)
  802eec:	dc400117 	ldw	r17,4(sp)
  802ef0:	dc000017 	ldw	r16,0(sp)
  802ef4:	dec00304 	addi	sp,sp,12
  802ef8:	0802df01 	jmpi	802df0 <std>

00802efc <__fp_lock>:
  802efc:	0005883a 	mov	r2,zero
  802f00:	f800283a 	ret

00802f04 <__fp_unlock>:
  802f04:	0005883a 	mov	r2,zero
  802f08:	f800283a 	ret

00802f0c <__fp_unlock_all>:
  802f0c:	00802074 	movhi	r2,129
  802f10:	1095d704 	addi	r2,r2,22364
  802f14:	11000017 	ldw	r4,0(r2)
  802f18:	01402034 	movhi	r5,128
  802f1c:	294bc104 	addi	r5,r5,12036
  802f20:	0803c301 	jmpi	803c30 <_fwalk>

00802f24 <__fp_lock_all>:
  802f24:	00802074 	movhi	r2,129
  802f28:	1095d704 	addi	r2,r2,22364
  802f2c:	11000017 	ldw	r4,0(r2)
  802f30:	01402034 	movhi	r5,128
  802f34:	294bbf04 	addi	r5,r5,12028
  802f38:	0803c301 	jmpi	803c30 <_fwalk>

00802f3c <_cleanup_r>:
  802f3c:	01402034 	movhi	r5,128
  802f40:	294aeb04 	addi	r5,r5,11180
  802f44:	0803c301 	jmpi	803c30 <_fwalk>

00802f48 <_cleanup>:
  802f48:	00802074 	movhi	r2,129
  802f4c:	1095d804 	addi	r2,r2,22368
  802f50:	11000017 	ldw	r4,0(r2)
  802f54:	0802f3c1 	jmpi	802f3c <_cleanup_r>

00802f58 <__sfmoreglue>:
  802f58:	defffc04 	addi	sp,sp,-16
  802f5c:	dc000015 	stw	r16,0(sp)
  802f60:	2821883a 	mov	r16,r5
  802f64:	dc400115 	stw	r17,4(sp)
  802f68:	01401704 	movi	r5,92
  802f6c:	2023883a 	mov	r17,r4
  802f70:	8009883a 	mov	r4,r16
  802f74:	dfc00315 	stw	ra,12(sp)
  802f78:	dcc00215 	stw	r19,8(sp)
  802f7c:	0802a640 	call	802a64 <__mulsi3>
  802f80:	11400304 	addi	r5,r2,12
  802f84:	8809883a 	mov	r4,r17
  802f88:	1027883a 	mov	r19,r2
  802f8c:	0803e7c0 	call	803e7c <_malloc_r>
  802f90:	10c00304 	addi	r3,r2,12
  802f94:	1023883a 	mov	r17,r2
  802f98:	1809883a 	mov	r4,r3
  802f9c:	980d883a 	mov	r6,r19
  802fa0:	000b883a 	mov	r5,zero
  802fa4:	10000b26 	beq	r2,zero,802fd4 <__sfmoreglue+0x7c>
  802fa8:	14000115 	stw	r16,4(r2)
  802fac:	10c00215 	stw	r3,8(r2)
  802fb0:	10000015 	stw	zero,0(r2)
  802fb4:	08045bc0 	call	8045bc <memset>
  802fb8:	8805883a 	mov	r2,r17
  802fbc:	dfc00317 	ldw	ra,12(sp)
  802fc0:	dcc00217 	ldw	r19,8(sp)
  802fc4:	dc400117 	ldw	r17,4(sp)
  802fc8:	dc000017 	ldw	r16,0(sp)
  802fcc:	dec00404 	addi	sp,sp,16
  802fd0:	f800283a 	ret
  802fd4:	0023883a 	mov	r17,zero
  802fd8:	8805883a 	mov	r2,r17
  802fdc:	dfc00317 	ldw	ra,12(sp)
  802fe0:	dcc00217 	ldw	r19,8(sp)
  802fe4:	dc400117 	ldw	r17,4(sp)
  802fe8:	dc000017 	ldw	r16,0(sp)
  802fec:	dec00404 	addi	sp,sp,16
  802ff0:	f800283a 	ret

00802ff4 <__sfp>:
  802ff4:	defffd04 	addi	sp,sp,-12
  802ff8:	00802074 	movhi	r2,129
  802ffc:	1095d804 	addi	r2,r2,22368
  803000:	dc000015 	stw	r16,0(sp)
  803004:	14000017 	ldw	r16,0(r2)
  803008:	dc400115 	stw	r17,4(sp)
  80300c:	dfc00215 	stw	ra,8(sp)
  803010:	80800e17 	ldw	r2,56(r16)
  803014:	2023883a 	mov	r17,r4
  803018:	10002626 	beq	r2,zero,8030b4 <__sfp+0xc0>
  80301c:	8400b804 	addi	r16,r16,736
  803020:	80800117 	ldw	r2,4(r16)
  803024:	81000217 	ldw	r4,8(r16)
  803028:	10ffffc4 	addi	r3,r2,-1
  80302c:	18000916 	blt	r3,zero,803054 <__sfp+0x60>
  803030:	2080030f 	ldh	r2,12(r4)
  803034:	10000b26 	beq	r2,zero,803064 <__sfp+0x70>
  803038:	017fffc4 	movi	r5,-1
  80303c:	00000206 	br	803048 <__sfp+0x54>
  803040:	2080030f 	ldh	r2,12(r4)
  803044:	10000726 	beq	r2,zero,803064 <__sfp+0x70>
  803048:	18ffffc4 	addi	r3,r3,-1
  80304c:	21001704 	addi	r4,r4,92
  803050:	197ffb1e 	bne	r3,r5,803040 <__sfp+0x4c>
  803054:	80800017 	ldw	r2,0(r16)
  803058:	10001926 	beq	r2,zero,8030c0 <__sfp+0xcc>
  80305c:	1021883a 	mov	r16,r2
  803060:	003fef06 	br	803020 <__sfp+0x2c>
  803064:	00bfffc4 	movi	r2,-1
  803068:	00c00044 	movi	r3,1
  80306c:	2080038d 	sth	r2,14(r4)
  803070:	20c0030d 	sth	r3,12(r4)
  803074:	20000015 	stw	zero,0(r4)
  803078:	20000215 	stw	zero,8(r4)
  80307c:	20000115 	stw	zero,4(r4)
  803080:	20000415 	stw	zero,16(r4)
  803084:	20000515 	stw	zero,20(r4)
  803088:	20000615 	stw	zero,24(r4)
  80308c:	20000c15 	stw	zero,48(r4)
  803090:	20000d15 	stw	zero,52(r4)
  803094:	20001115 	stw	zero,68(r4)
  803098:	20001215 	stw	zero,72(r4)
  80309c:	2005883a 	mov	r2,r4
  8030a0:	dfc00217 	ldw	ra,8(sp)
  8030a4:	dc400117 	ldw	r17,4(sp)
  8030a8:	dc000017 	ldw	r16,0(sp)
  8030ac:	dec00304 	addi	sp,sp,12
  8030b0:	f800283a 	ret
  8030b4:	8009883a 	mov	r4,r16
  8030b8:	0802e580 	call	802e58 <__sinit>
  8030bc:	003fd706 	br	80301c <__sfp+0x28>
  8030c0:	8809883a 	mov	r4,r17
  8030c4:	01400104 	movi	r5,4
  8030c8:	0802f580 	call	802f58 <__sfmoreglue>
  8030cc:	80800015 	stw	r2,0(r16)
  8030d0:	103fe21e 	bne	r2,zero,80305c <__sfp+0x68>
  8030d4:	00800304 	movi	r2,12
  8030d8:	0009883a 	mov	r4,zero
  8030dc:	88800015 	stw	r2,0(r17)
  8030e0:	003fee06 	br	80309c <__sfp+0xa8>

008030e4 <_fopen_r>:
  8030e4:	defffa04 	addi	sp,sp,-24
  8030e8:	dcc00415 	stw	r19,16(sp)
  8030ec:	2827883a 	mov	r19,r5
  8030f0:	300b883a 	mov	r5,r6
  8030f4:	d80d883a 	mov	r6,sp
  8030f8:	dc800315 	stw	r18,12(sp)
  8030fc:	dc400215 	stw	r17,8(sp)
  803100:	dc000115 	stw	r16,4(sp)
  803104:	dfc00515 	stw	ra,20(sp)
  803108:	2021883a 	mov	r16,r4
  80310c:	080a0240 	call	80a024 <__sflags>
  803110:	1025883a 	mov	r18,r2
  803114:	8009883a 	mov	r4,r16
  803118:	0023883a 	mov	r17,zero
  80311c:	1000081e 	bne	r2,zero,803140 <_fopen_r+0x5c>
  803120:	8805883a 	mov	r2,r17
  803124:	dfc00517 	ldw	ra,20(sp)
  803128:	dcc00417 	ldw	r19,16(sp)
  80312c:	dc800317 	ldw	r18,12(sp)
  803130:	dc400217 	ldw	r17,8(sp)
  803134:	dc000117 	ldw	r16,4(sp)
  803138:	dec00604 	addi	sp,sp,24
  80313c:	f800283a 	ret
  803140:	0802ff40 	call	802ff4 <__sfp>
  803144:	1023883a 	mov	r17,r2
  803148:	980b883a 	mov	r5,r19
  80314c:	8009883a 	mov	r4,r16
  803150:	01c06d84 	movi	r7,438
  803154:	103ff226 	beq	r2,zero,803120 <_fopen_r+0x3c>
  803158:	d9800017 	ldw	r6,0(sp)
  80315c:	08046540 	call	804654 <_open_r>
  803160:	10001816 	blt	r2,zero,8031c4 <_fopen_r+0xe0>
  803164:	00c02034 	movhi	r3,128
  803168:	18d2ec04 	addi	r3,r3,19376
  80316c:	923fffcc 	andi	r8,r18,65535
  803170:	8880038d 	sth	r2,14(r17)
  803174:	00802034 	movhi	r2,128
  803178:	10930b04 	addi	r2,r2,19500
  80317c:	88800815 	stw	r2,32(r17)
  803180:	88c00915 	stw	r3,36(r17)
  803184:	00802034 	movhi	r2,128
  803188:	1092d204 	addi	r2,r2,19272
  80318c:	00c02034 	movhi	r3,128
  803190:	18d2d004 	addi	r3,r3,19264
  803194:	4200400c 	andi	r8,r8,256
  803198:	8c80030d 	sth	r18,12(r17)
  80319c:	8009883a 	mov	r4,r16
  8031a0:	880b883a 	mov	r5,r17
  8031a4:	000d883a 	mov	r6,zero
  8031a8:	01c00084 	movi	r7,2
  8031ac:	88800a15 	stw	r2,40(r17)
  8031b0:	88c00b15 	stw	r3,44(r17)
  8031b4:	8c400715 	stw	r17,28(r17)
  8031b8:	403fd926 	beq	r8,zero,803120 <_fopen_r+0x3c>
  8031bc:	08036940 	call	803694 <_fseek_r>
  8031c0:	003fd706 	br	803120 <_fopen_r+0x3c>
  8031c4:	0802e480 	call	802e48 <__sfp_lock_acquire>
  8031c8:	8800030d 	sth	zero,12(r17)
  8031cc:	0802e4c0 	call	802e4c <__sfp_lock_release>
  8031d0:	0023883a 	mov	r17,zero
  8031d4:	003fd206 	br	803120 <_fopen_r+0x3c>

008031d8 <fopen>:
  8031d8:	01802074 	movhi	r6,129
  8031dc:	3195d704 	addi	r6,r6,22364
  8031e0:	2007883a 	mov	r3,r4
  8031e4:	31000017 	ldw	r4,0(r6)
  8031e8:	280d883a 	mov	r6,r5
  8031ec:	180b883a 	mov	r5,r3
  8031f0:	08030e41 	jmpi	8030e4 <_fopen_r>

008031f4 <fprintf>:
  8031f4:	defffc04 	addi	sp,sp,-16
  8031f8:	dfc00115 	stw	ra,4(sp)
  8031fc:	d9800215 	stw	r6,8(sp)
  803200:	d9c00315 	stw	r7,12(sp)
  803204:	d8800204 	addi	r2,sp,8
  803208:	100d883a 	mov	r6,r2
  80320c:	d8800015 	stw	r2,0(sp)
  803210:	08085e40 	call	8085e4 <__vfprintf_internal>
  803214:	dfc00117 	ldw	ra,4(sp)
  803218:	dec00404 	addi	sp,sp,16
  80321c:	f800283a 	ret

00803220 <_fprintf_r>:
  803220:	defffd04 	addi	sp,sp,-12
  803224:	2807883a 	mov	r3,r5
  803228:	dfc00115 	stw	ra,4(sp)
  80322c:	d9c00215 	stw	r7,8(sp)
  803230:	d8800204 	addi	r2,sp,8
  803234:	300b883a 	mov	r5,r6
  803238:	1809883a 	mov	r4,r3
  80323c:	100d883a 	mov	r6,r2
  803240:	d8800015 	stw	r2,0(sp)
  803244:	08085e40 	call	8085e4 <__vfprintf_internal>
  803248:	dfc00117 	ldw	ra,4(sp)
  80324c:	dec00304 	addi	sp,sp,12
  803250:	f800283a 	ret

00803254 <_malloc_trim_r>:
  803254:	defffb04 	addi	sp,sp,-20
  803258:	dcc00315 	stw	r19,12(sp)
  80325c:	04c02074 	movhi	r19,129
  803260:	9ccfcd04 	addi	r19,r19,16180
  803264:	dc800215 	stw	r18,8(sp)
  803268:	dc400115 	stw	r17,4(sp)
  80326c:	dc000015 	stw	r16,0(sp)
  803270:	2823883a 	mov	r17,r5
  803274:	2025883a 	mov	r18,r4
  803278:	dfc00415 	stw	ra,16(sp)
  80327c:	080f3d80 	call	80f3d8 <__malloc_lock>
  803280:	98800217 	ldw	r2,8(r19)
  803284:	9009883a 	mov	r4,r18
  803288:	000b883a 	mov	r5,zero
  80328c:	10c00117 	ldw	r3,4(r2)
  803290:	00bfff04 	movi	r2,-4
  803294:	18a0703a 	and	r16,r3,r2
  803298:	8463c83a 	sub	r17,r16,r17
  80329c:	8c43fbc4 	addi	r17,r17,4079
  8032a0:	8822d33a 	srli	r17,r17,12
  8032a4:	0083ffc4 	movi	r2,4095
  8032a8:	8c7fffc4 	addi	r17,r17,-1
  8032ac:	8822933a 	slli	r17,r17,12
  8032b0:	1440060e 	bge	r2,r17,8032cc <_malloc_trim_r+0x78>
  8032b4:	08049fc0 	call	8049fc <_sbrk_r>
  8032b8:	98c00217 	ldw	r3,8(r19)
  8032bc:	9009883a 	mov	r4,r18
  8032c0:	044bc83a 	sub	r5,zero,r17
  8032c4:	80c7883a 	add	r3,r16,r3
  8032c8:	10c00926 	beq	r2,r3,8032f0 <_malloc_trim_r+0x9c>
  8032cc:	080f3f80 	call	80f3f8 <__malloc_unlock>
  8032d0:	0005883a 	mov	r2,zero
  8032d4:	dfc00417 	ldw	ra,16(sp)
  8032d8:	dcc00317 	ldw	r19,12(sp)
  8032dc:	dc800217 	ldw	r18,8(sp)
  8032e0:	dc400117 	ldw	r17,4(sp)
  8032e4:	dc000017 	ldw	r16,0(sp)
  8032e8:	dec00504 	addi	sp,sp,20
  8032ec:	f800283a 	ret
  8032f0:	9009883a 	mov	r4,r18
  8032f4:	08049fc0 	call	8049fc <_sbrk_r>
  8032f8:	844dc83a 	sub	r6,r16,r17
  8032fc:	00ffffc4 	movi	r3,-1
  803300:	9009883a 	mov	r4,r18
  803304:	000b883a 	mov	r5,zero
  803308:	01c02074 	movhi	r7,129
  80330c:	39dd2e04 	addi	r7,r7,29880
  803310:	31800054 	ori	r6,r6,1
  803314:	10c00926 	beq	r2,r3,80333c <_malloc_trim_r+0xe8>
  803318:	38800017 	ldw	r2,0(r7)
  80331c:	98c00217 	ldw	r3,8(r19)
  803320:	9009883a 	mov	r4,r18
  803324:	1445c83a 	sub	r2,r2,r17
  803328:	38800015 	stw	r2,0(r7)
  80332c:	19800115 	stw	r6,4(r3)
  803330:	080f3f80 	call	80f3f8 <__malloc_unlock>
  803334:	00800044 	movi	r2,1
  803338:	003fe606 	br	8032d4 <_malloc_trim_r+0x80>
  80333c:	08049fc0 	call	8049fc <_sbrk_r>
  803340:	99800217 	ldw	r6,8(r19)
  803344:	100f883a 	mov	r7,r2
  803348:	9009883a 	mov	r4,r18
  80334c:	1187c83a 	sub	r3,r2,r6
  803350:	008003c4 	movi	r2,15
  803354:	19400054 	ori	r5,r3,1
  803358:	10ffdc0e 	bge	r2,r3,8032cc <_malloc_trim_r+0x78>
  80335c:	00802074 	movhi	r2,129
  803360:	1095da04 	addi	r2,r2,22376
  803364:	10c00017 	ldw	r3,0(r2)
  803368:	00802074 	movhi	r2,129
  80336c:	109d2e04 	addi	r2,r2,29880
  803370:	31400115 	stw	r5,4(r6)
  803374:	38c7c83a 	sub	r3,r7,r3
  803378:	10c00015 	stw	r3,0(r2)
  80337c:	003fd306 	br	8032cc <_malloc_trim_r+0x78>

00803380 <_free_r>:
  803380:	defffd04 	addi	sp,sp,-12
  803384:	dc400115 	stw	r17,4(sp)
  803388:	dc000015 	stw	r16,0(sp)
  80338c:	dfc00215 	stw	ra,8(sp)
  803390:	2821883a 	mov	r16,r5
  803394:	2023883a 	mov	r17,r4
  803398:	28005a26 	beq	r5,zero,803504 <_free_r+0x184>
  80339c:	080f3d80 	call	80f3d8 <__malloc_lock>
  8033a0:	823ffe04 	addi	r8,r16,-8
  8033a4:	41400117 	ldw	r5,4(r8)
  8033a8:	00bfff84 	movi	r2,-2
  8033ac:	02802074 	movhi	r10,129
  8033b0:	528fcd04 	addi	r10,r10,16180
  8033b4:	288e703a 	and	r7,r5,r2
  8033b8:	41cd883a 	add	r6,r8,r7
  8033bc:	30c00117 	ldw	r3,4(r6)
  8033c0:	51000217 	ldw	r4,8(r10)
  8033c4:	00bfff04 	movi	r2,-4
  8033c8:	1892703a 	and	r9,r3,r2
  8033cc:	5017883a 	mov	r11,r10
  8033d0:	31006726 	beq	r6,r4,803570 <_free_r+0x1f0>
  8033d4:	2880004c 	andi	r2,r5,1
  8033d8:	1005003a 	cmpeq	r2,r2,zero
  8033dc:	32400115 	stw	r9,4(r6)
  8033e0:	10001a1e 	bne	r2,zero,80344c <_free_r+0xcc>
  8033e4:	000b883a 	mov	r5,zero
  8033e8:	3247883a 	add	r3,r6,r9
  8033ec:	18800117 	ldw	r2,4(r3)
  8033f0:	1080004c 	andi	r2,r2,1
  8033f4:	1000231e 	bne	r2,zero,803484 <_free_r+0x104>
  8033f8:	280ac03a 	cmpne	r5,r5,zero
  8033fc:	3a4f883a 	add	r7,r7,r9
  803400:	2800451e 	bne	r5,zero,803518 <_free_r+0x198>
  803404:	31000217 	ldw	r4,8(r6)
  803408:	00802074 	movhi	r2,129
  80340c:	108fcf04 	addi	r2,r2,16188
  803410:	20807b26 	beq	r4,r2,803600 <_free_r+0x280>
  803414:	30800317 	ldw	r2,12(r6)
  803418:	3a07883a 	add	r3,r7,r8
  80341c:	19c00015 	stw	r7,0(r3)
  803420:	11000215 	stw	r4,8(r2)
  803424:	20800315 	stw	r2,12(r4)
  803428:	38800054 	ori	r2,r7,1
  80342c:	40800115 	stw	r2,4(r8)
  803430:	28001a26 	beq	r5,zero,80349c <_free_r+0x11c>
  803434:	8809883a 	mov	r4,r17
  803438:	dfc00217 	ldw	ra,8(sp)
  80343c:	dc400117 	ldw	r17,4(sp)
  803440:	dc000017 	ldw	r16,0(sp)
  803444:	dec00304 	addi	sp,sp,12
  803448:	080f3f81 	jmpi	80f3f8 <__malloc_unlock>
  80344c:	80bffe17 	ldw	r2,-8(r16)
  803450:	50c00204 	addi	r3,r10,8
  803454:	4091c83a 	sub	r8,r8,r2
  803458:	41000217 	ldw	r4,8(r8)
  80345c:	388f883a 	add	r7,r7,r2
  803460:	20c06126 	beq	r4,r3,8035e8 <_free_r+0x268>
  803464:	40800317 	ldw	r2,12(r8)
  803468:	3247883a 	add	r3,r6,r9
  80346c:	000b883a 	mov	r5,zero
  803470:	11000215 	stw	r4,8(r2)
  803474:	20800315 	stw	r2,12(r4)
  803478:	18800117 	ldw	r2,4(r3)
  80347c:	1080004c 	andi	r2,r2,1
  803480:	103fdd26 	beq	r2,zero,8033f8 <_free_r+0x78>
  803484:	38800054 	ori	r2,r7,1
  803488:	3a07883a 	add	r3,r7,r8
  80348c:	280ac03a 	cmpne	r5,r5,zero
  803490:	40800115 	stw	r2,4(r8)
  803494:	19c00015 	stw	r7,0(r3)
  803498:	283fe61e 	bne	r5,zero,803434 <_free_r+0xb4>
  80349c:	00807fc4 	movi	r2,511
  8034a0:	11c01f2e 	bgeu	r2,r7,803520 <_free_r+0x1a0>
  8034a4:	3806d27a 	srli	r3,r7,9
  8034a8:	1800481e 	bne	r3,zero,8035cc <_free_r+0x24c>
  8034ac:	3804d0fa 	srli	r2,r7,3
  8034b0:	100690fa 	slli	r3,r2,3
  8034b4:	1acd883a 	add	r6,r3,r11
  8034b8:	31400217 	ldw	r5,8(r6)
  8034bc:	31405926 	beq	r6,r5,803624 <_free_r+0x2a4>
  8034c0:	28800117 	ldw	r2,4(r5)
  8034c4:	00ffff04 	movi	r3,-4
  8034c8:	10c4703a 	and	r2,r2,r3
  8034cc:	3880022e 	bgeu	r7,r2,8034d8 <_free_r+0x158>
  8034d0:	29400217 	ldw	r5,8(r5)
  8034d4:	317ffa1e 	bne	r6,r5,8034c0 <_free_r+0x140>
  8034d8:	29800317 	ldw	r6,12(r5)
  8034dc:	41800315 	stw	r6,12(r8)
  8034e0:	41400215 	stw	r5,8(r8)
  8034e4:	8809883a 	mov	r4,r17
  8034e8:	2a000315 	stw	r8,12(r5)
  8034ec:	32000215 	stw	r8,8(r6)
  8034f0:	dfc00217 	ldw	ra,8(sp)
  8034f4:	dc400117 	ldw	r17,4(sp)
  8034f8:	dc000017 	ldw	r16,0(sp)
  8034fc:	dec00304 	addi	sp,sp,12
  803500:	080f3f81 	jmpi	80f3f8 <__malloc_unlock>
  803504:	dfc00217 	ldw	ra,8(sp)
  803508:	dc400117 	ldw	r17,4(sp)
  80350c:	dc000017 	ldw	r16,0(sp)
  803510:	dec00304 	addi	sp,sp,12
  803514:	f800283a 	ret
  803518:	31000217 	ldw	r4,8(r6)
  80351c:	003fbd06 	br	803414 <_free_r+0x94>
  803520:	3806d0fa 	srli	r3,r7,3
  803524:	00800044 	movi	r2,1
  803528:	51400117 	ldw	r5,4(r10)
  80352c:	180890fa 	slli	r4,r3,3
  803530:	1807d0ba 	srai	r3,r3,2
  803534:	22c9883a 	add	r4,r4,r11
  803538:	21800217 	ldw	r6,8(r4)
  80353c:	10c4983a 	sll	r2,r2,r3
  803540:	41000315 	stw	r4,12(r8)
  803544:	41800215 	stw	r6,8(r8)
  803548:	288ab03a 	or	r5,r5,r2
  80354c:	22000215 	stw	r8,8(r4)
  803550:	8809883a 	mov	r4,r17
  803554:	51400115 	stw	r5,4(r10)
  803558:	32000315 	stw	r8,12(r6)
  80355c:	dfc00217 	ldw	ra,8(sp)
  803560:	dc400117 	ldw	r17,4(sp)
  803564:	dc000017 	ldw	r16,0(sp)
  803568:	dec00304 	addi	sp,sp,12
  80356c:	080f3f81 	jmpi	80f3f8 <__malloc_unlock>
  803570:	2880004c 	andi	r2,r5,1
  803574:	3a4d883a 	add	r6,r7,r9
  803578:	1000071e 	bne	r2,zero,803598 <_free_r+0x218>
  80357c:	80bffe17 	ldw	r2,-8(r16)
  803580:	4091c83a 	sub	r8,r8,r2
  803584:	41000317 	ldw	r4,12(r8)
  803588:	40c00217 	ldw	r3,8(r8)
  80358c:	308d883a 	add	r6,r6,r2
  803590:	20c00215 	stw	r3,8(r4)
  803594:	19000315 	stw	r4,12(r3)
  803598:	00802074 	movhi	r2,129
  80359c:	1095d904 	addi	r2,r2,22372
  8035a0:	11000017 	ldw	r4,0(r2)
  8035a4:	30c00054 	ori	r3,r6,1
  8035a8:	52000215 	stw	r8,8(r10)
  8035ac:	40c00115 	stw	r3,4(r8)
  8035b0:	313fa036 	bltu	r6,r4,803434 <_free_r+0xb4>
  8035b4:	00802074 	movhi	r2,129
  8035b8:	109d1504 	addi	r2,r2,29780
  8035bc:	11400017 	ldw	r5,0(r2)
  8035c0:	8809883a 	mov	r4,r17
  8035c4:	08032540 	call	803254 <_malloc_trim_r>
  8035c8:	003f9a06 	br	803434 <_free_r+0xb4>
  8035cc:	00800104 	movi	r2,4
  8035d0:	10c0072e 	bgeu	r2,r3,8035f0 <_free_r+0x270>
  8035d4:	00800504 	movi	r2,20
  8035d8:	10c01936 	bltu	r2,r3,803640 <_free_r+0x2c0>
  8035dc:	188016c4 	addi	r2,r3,91
  8035e0:	100690fa 	slli	r3,r2,3
  8035e4:	003fb306 	br	8034b4 <_free_r+0x134>
  8035e8:	01400044 	movi	r5,1
  8035ec:	003f7e06 	br	8033e8 <_free_r+0x68>
  8035f0:	3804d1ba 	srli	r2,r7,6
  8035f4:	10800e04 	addi	r2,r2,56
  8035f8:	100690fa 	slli	r3,r2,3
  8035fc:	003fad06 	br	8034b4 <_free_r+0x134>
  803600:	22000315 	stw	r8,12(r4)
  803604:	22000215 	stw	r8,8(r4)
  803608:	3a05883a 	add	r2,r7,r8
  80360c:	38c00054 	ori	r3,r7,1
  803610:	11c00015 	stw	r7,0(r2)
  803614:	41000215 	stw	r4,8(r8)
  803618:	40c00115 	stw	r3,4(r8)
  80361c:	41000315 	stw	r4,12(r8)
  803620:	003f8406 	br	803434 <_free_r+0xb4>
  803624:	1005d0ba 	srai	r2,r2,2
  803628:	00c00044 	movi	r3,1
  80362c:	51000117 	ldw	r4,4(r10)
  803630:	1886983a 	sll	r3,r3,r2
  803634:	20c8b03a 	or	r4,r4,r3
  803638:	51000115 	stw	r4,4(r10)
  80363c:	003fa706 	br	8034dc <_free_r+0x15c>
  803640:	00801504 	movi	r2,84
  803644:	10c00436 	bltu	r2,r3,803658 <_free_r+0x2d8>
  803648:	3804d33a 	srli	r2,r7,12
  80364c:	10801b84 	addi	r2,r2,110
  803650:	100690fa 	slli	r3,r2,3
  803654:	003f9706 	br	8034b4 <_free_r+0x134>
  803658:	00805504 	movi	r2,340
  80365c:	10c00436 	bltu	r2,r3,803670 <_free_r+0x2f0>
  803660:	3804d3fa 	srli	r2,r7,15
  803664:	10801dc4 	addi	r2,r2,119
  803668:	100690fa 	slli	r3,r2,3
  80366c:	003f9106 	br	8034b4 <_free_r+0x134>
  803670:	00815504 	movi	r2,1364
  803674:	10c0032e 	bgeu	r2,r3,803684 <_free_r+0x304>
  803678:	00801f84 	movi	r2,126
  80367c:	00c0fc04 	movi	r3,1008
  803680:	003f8c06 	br	8034b4 <_free_r+0x134>
  803684:	3804d4ba 	srli	r2,r7,18
  803688:	10801f04 	addi	r2,r2,124
  80368c:	100690fa 	slli	r3,r2,3
  803690:	003f8806 	br	8034b4 <_free_r+0x134>

00803694 <_fseek_r>:
  803694:	deffe804 	addi	sp,sp,-96
  803698:	dd801515 	stw	r22,84(sp)
  80369c:	dcc01215 	stw	r19,72(sp)
  8036a0:	dc801115 	stw	r18,68(sp)
  8036a4:	dc000f15 	stw	r16,60(sp)
  8036a8:	dfc01715 	stw	ra,92(sp)
  8036ac:	ddc01615 	stw	r23,88(sp)
  8036b0:	dd401415 	stw	r21,80(sp)
  8036b4:	dd001315 	stw	r20,76(sp)
  8036b8:	dc401015 	stw	r17,64(sp)
  8036bc:	2025883a 	mov	r18,r4
  8036c0:	2821883a 	mov	r16,r5
  8036c4:	302d883a 	mov	r22,r6
  8036c8:	3827883a 	mov	r19,r7
  8036cc:	20000226 	beq	r4,zero,8036d8 <_fseek_r+0x44>
  8036d0:	20800e17 	ldw	r2,56(r4)
  8036d4:	10007826 	beq	r2,zero,8038b8 <_fseek_r+0x224>
  8036d8:	8080030b 	ldhu	r2,12(r16)
  8036dc:	00c04204 	movi	r3,264
  8036e0:	1080420c 	andi	r2,r2,264
  8036e4:	10c07926 	beq	r2,r3,8038cc <_fseek_r+0x238>
  8036e8:	85400a17 	ldw	r21,40(r16)
  8036ec:	a800ea26 	beq	r21,zero,803a98 <_fseek_r+0x404>
  8036f0:	00800044 	movi	r2,1
  8036f4:	98805f26 	beq	r19,r2,803874 <_fseek_r+0x1e0>
  8036f8:	00800084 	movi	r2,2
  8036fc:	98801026 	beq	r19,r2,803740 <_fseek_r+0xac>
  803700:	98000f26 	beq	r19,zero,803740 <_fseek_r+0xac>
  803704:	00800584 	movi	r2,22
  803708:	013fffc4 	movi	r4,-1
  80370c:	90800015 	stw	r2,0(r18)
  803710:	2005883a 	mov	r2,r4
  803714:	dfc01717 	ldw	ra,92(sp)
  803718:	ddc01617 	ldw	r23,88(sp)
  80371c:	dd801517 	ldw	r22,84(sp)
  803720:	dd401417 	ldw	r21,80(sp)
  803724:	dd001317 	ldw	r20,76(sp)
  803728:	dcc01217 	ldw	r19,72(sp)
  80372c:	dc801117 	ldw	r18,68(sp)
  803730:	dc401017 	ldw	r17,64(sp)
  803734:	dc000f17 	ldw	r16,60(sp)
  803738:	dec01804 	addi	sp,sp,96
  80373c:	f800283a 	ret
  803740:	81800417 	ldw	r6,16(r16)
  803744:	0023883a 	mov	r17,zero
  803748:	002f883a 	mov	r23,zero
  80374c:	3000a626 	beq	r6,zero,8039e8 <_fseek_r+0x354>
  803750:	8100030b 	ldhu	r4,12(r16)
  803754:	2082068c 	andi	r2,r4,2074
  803758:	1000081e 	bne	r2,zero,80377c <_fseek_r+0xe8>
  80375c:	2081000c 	andi	r2,r4,1024
  803760:	10001b1e 	bne	r2,zero,8037d0 <_fseek_r+0x13c>
  803764:	00802034 	movhi	r2,128
  803768:	1092d204 	addi	r2,r2,19272
  80376c:	a8800926 	beq	r21,r2,803794 <_fseek_r+0x100>
  803770:	8080030b 	ldhu	r2,12(r16)
  803774:	10820014 	ori	r2,r2,2048
  803778:	8080030d 	sth	r2,12(r16)
  80377c:	9009883a 	mov	r4,r18
  803780:	800b883a 	mov	r5,r16
  803784:	0802bc00 	call	802bc0 <_fflush_r>
  803788:	1000a326 	beq	r2,zero,803a18 <_fseek_r+0x384>
  80378c:	013fffc4 	movi	r4,-1
  803790:	003fdf06 	br	803710 <_fseek_r+0x7c>
  803794:	8140038f 	ldh	r5,14(r16)
  803798:	283ff516 	blt	r5,zero,803770 <_fseek_r+0xdc>
  80379c:	9009883a 	mov	r4,r18
  8037a0:	d80d883a 	mov	r6,sp
  8037a4:	0803af40 	call	803af4 <_fstat_r>
  8037a8:	103ff11e 	bne	r2,zero,803770 <_fseek_r+0xdc>
  8037ac:	d8800117 	ldw	r2,4(sp)
  8037b0:	00e00014 	movui	r3,32768
  8037b4:	10bc000c 	andi	r2,r2,61440
  8037b8:	10ffed1e 	bne	r2,r3,803770 <_fseek_r+0xdc>
  8037bc:	80c0030b 	ldhu	r3,12(r16)
  8037c0:	00810004 	movi	r2,1024
  8037c4:	80801315 	stw	r2,76(r16)
  8037c8:	1886b03a 	or	r3,r3,r2
  8037cc:	80c0030d 	sth	r3,12(r16)
  8037d0:	9800701e 	bne	r19,zero,803994 <_fseek_r+0x300>
  8037d4:	b029883a 	mov	r20,r22
  8037d8:	b804c03a 	cmpne	r2,r23,zero
  8037dc:	10003f1e 	bne	r2,zero,8038dc <_fseek_r+0x248>
  8037e0:	8100030b 	ldhu	r4,12(r16)
  8037e4:	2084000c 	andi	r2,r4,4096
  8037e8:	1000a126 	beq	r2,zero,803a70 <_fseek_r+0x3dc>
  8037ec:	81801417 	ldw	r6,80(r16)
  8037f0:	80c00117 	ldw	r3,4(r16)
  8037f4:	81400c17 	ldw	r5,48(r16)
  8037f8:	30e3c83a 	sub	r17,r6,r3
  8037fc:	28008026 	beq	r5,zero,803a00 <_fseek_r+0x36c>
  803800:	81c00f17 	ldw	r7,60(r16)
  803804:	89e3c83a 	sub	r17,r17,r7
  803808:	80800e17 	ldw	r2,56(r16)
  80380c:	81800417 	ldw	r6,16(r16)
  803810:	88c7883a 	add	r3,r17,r3
  803814:	1185c83a 	sub	r2,r2,r6
  803818:	11cf883a 	add	r7,r2,r7
  80381c:	1887c83a 	sub	r3,r3,r2
  803820:	2088000c 	andi	r2,r4,8192
  803824:	10003e1e 	bne	r2,zero,803920 <_fseek_r+0x28c>
  803828:	a0c03d16 	blt	r20,r3,803920 <_fseek_r+0x28c>
  80382c:	38c5883a 	add	r2,r7,r3
  803830:	a0803b2e 	bgeu	r20,r2,803920 <_fseek_r+0x28c>
  803834:	a0c5c83a 	sub	r2,r20,r3
  803838:	3887c83a 	sub	r3,r7,r2
  80383c:	3085883a 	add	r2,r6,r2
  803840:	80800015 	stw	r2,0(r16)
  803844:	80c00115 	stw	r3,4(r16)
  803848:	28000526 	beq	r5,zero,803860 <_fseek_r+0x1cc>
  80384c:	80801004 	addi	r2,r16,64
  803850:	28800226 	beq	r5,r2,80385c <_fseek_r+0x1c8>
  803854:	9009883a 	mov	r4,r18
  803858:	08033800 	call	803380 <_free_r>
  80385c:	80000c15 	stw	zero,48(r16)
  803860:	8080030b 	ldhu	r2,12(r16)
  803864:	0009883a 	mov	r4,zero
  803868:	10bff7cc 	andi	r2,r2,65503
  80386c:	8080030d 	sth	r2,12(r16)
  803870:	003fa706 	br	803710 <_fseek_r+0x7c>
  803874:	9009883a 	mov	r4,r18
  803878:	800b883a 	mov	r5,r16
  80387c:	0802bc00 	call	802bc0 <_fflush_r>
  803880:	8100030b 	ldhu	r4,12(r16)
  803884:	2084000c 	andi	r2,r4,4096
  803888:	10008726 	beq	r2,zero,803aa8 <_fseek_r+0x414>
  80388c:	84401417 	ldw	r17,80(r16)
  803890:	2080010c 	andi	r2,r4,4
  803894:	1000171e 	bne	r2,zero,8038f4 <_fseek_r+0x260>
  803898:	2080020c 	andi	r2,r4,8
  80389c:	10003b26 	beq	r2,zero,80398c <_fseek_r+0x2f8>
  8038a0:	80800017 	ldw	r2,0(r16)
  8038a4:	10003926 	beq	r2,zero,80398c <_fseek_r+0x2f8>
  8038a8:	81800417 	ldw	r6,16(r16)
  8038ac:	1185c83a 	sub	r2,r2,r6
  8038b0:	88a3883a 	add	r17,r17,r2
  8038b4:	00001606 	br	803910 <_fseek_r+0x27c>
  8038b8:	0802e580 	call	802e58 <__sinit>
  8038bc:	8080030b 	ldhu	r2,12(r16)
  8038c0:	00c04204 	movi	r3,264
  8038c4:	1080420c 	andi	r2,r2,264
  8038c8:	10ff871e 	bne	r2,r3,8036e8 <_fseek_r+0x54>
  8038cc:	9009883a 	mov	r4,r18
  8038d0:	800b883a 	mov	r5,r16
  8038d4:	0802bc00 	call	802bc0 <_fflush_r>
  8038d8:	003f8306 	br	8036e8 <_fseek_r+0x54>
  8038dc:	81400c17 	ldw	r5,48(r16)
  8038e0:	28004526 	beq	r5,zero,8039f8 <_fseek_r+0x364>
  8038e4:	8100030b 	ldhu	r4,12(r16)
  8038e8:	80c00117 	ldw	r3,4(r16)
  8038ec:	81c00f17 	ldw	r7,60(r16)
  8038f0:	003fc506 	br	803808 <_fseek_r+0x174>
  8038f4:	80c00117 	ldw	r3,4(r16)
  8038f8:	80800c17 	ldw	r2,48(r16)
  8038fc:	88e3c83a 	sub	r17,r17,r3
  803900:	10002226 	beq	r2,zero,80398c <_fseek_r+0x2f8>
  803904:	81c00f17 	ldw	r7,60(r16)
  803908:	81800417 	ldw	r6,16(r16)
  80390c:	89e3c83a 	sub	r17,r17,r7
  803910:	b46d883a 	add	r22,r22,r17
  803914:	0027883a 	mov	r19,zero
  803918:	05c00044 	movi	r23,1
  80391c:	003f8b06 	br	80374c <_fseek_r+0xb8>
  803920:	80801317 	ldw	r2,76(r16)
  803924:	81400717 	ldw	r5,28(r16)
  803928:	9009883a 	mov	r4,r18
  80392c:	0085c83a 	sub	r2,zero,r2
  803930:	a0a2703a 	and	r17,r20,r2
  803934:	880d883a 	mov	r6,r17
  803938:	000f883a 	mov	r7,zero
  80393c:	a83ee83a 	callr	r21
  803940:	00ffffc4 	movi	r3,-1
  803944:	10ff8d26 	beq	r2,r3,80377c <_fseek_r+0xe8>
  803948:	80800417 	ldw	r2,16(r16)
  80394c:	81400c17 	ldw	r5,48(r16)
  803950:	80000115 	stw	zero,4(r16)
  803954:	80800015 	stw	r2,0(r16)
  803958:	28000526 	beq	r5,zero,803970 <_fseek_r+0x2dc>
  80395c:	80801004 	addi	r2,r16,64
  803960:	28800226 	beq	r5,r2,80396c <_fseek_r+0x2d8>
  803964:	9009883a 	mov	r4,r18
  803968:	08033800 	call	803380 <_free_r>
  80396c:	80000c15 	stw	zero,48(r16)
  803970:	8080030b 	ldhu	r2,12(r16)
  803974:	a463c83a 	sub	r17,r20,r17
  803978:	10bff7cc 	andi	r2,r2,65503
  80397c:	8080030d 	sth	r2,12(r16)
  803980:	88000c1e 	bne	r17,zero,8039b4 <_fseek_r+0x320>
  803984:	0009883a 	mov	r4,zero
  803988:	003f6106 	br	803710 <_fseek_r+0x7c>
  80398c:	81800417 	ldw	r6,16(r16)
  803990:	003fdf06 	br	803910 <_fseek_r+0x27c>
  803994:	8140038f 	ldh	r5,14(r16)
  803998:	9009883a 	mov	r4,r18
  80399c:	d80d883a 	mov	r6,sp
  8039a0:	0803af40 	call	803af4 <_fstat_r>
  8039a4:	103f751e 	bne	r2,zero,80377c <_fseek_r+0xe8>
  8039a8:	d8800417 	ldw	r2,16(sp)
  8039ac:	b0a9883a 	add	r20,r22,r2
  8039b0:	003f8906 	br	8037d8 <_fseek_r+0x144>
  8039b4:	9009883a 	mov	r4,r18
  8039b8:	800b883a 	mov	r5,r16
  8039bc:	080481c0 	call	80481c <__srefill_r>
  8039c0:	103f6e1e 	bne	r2,zero,80377c <_fseek_r+0xe8>
  8039c4:	80c00117 	ldw	r3,4(r16)
  8039c8:	1c7f6c36 	bltu	r3,r17,80377c <_fseek_r+0xe8>
  8039cc:	80800017 	ldw	r2,0(r16)
  8039d0:	1c47c83a 	sub	r3,r3,r17
  8039d4:	0009883a 	mov	r4,zero
  8039d8:	1445883a 	add	r2,r2,r17
  8039dc:	80c00115 	stw	r3,4(r16)
  8039e0:	80800015 	stw	r2,0(r16)
  8039e4:	003f4a06 	br	803710 <_fseek_r+0x7c>
  8039e8:	9009883a 	mov	r4,r18
  8039ec:	800b883a 	mov	r5,r16
  8039f0:	0803ce80 	call	803ce8 <__smakebuf_r>
  8039f4:	003f5606 	br	803750 <_fseek_r+0xbc>
  8039f8:	8100030b 	ldhu	r4,12(r16)
  8039fc:	80c00117 	ldw	r3,4(r16)
  803a00:	80800017 	ldw	r2,0(r16)
  803a04:	81800417 	ldw	r6,16(r16)
  803a08:	1185c83a 	sub	r2,r2,r6
  803a0c:	10cf883a 	add	r7,r2,r3
  803a10:	8887c83a 	sub	r3,r17,r2
  803a14:	003f8206 	br	803820 <_fseek_r+0x18c>
  803a18:	81400717 	ldw	r5,28(r16)
  803a1c:	b00d883a 	mov	r6,r22
  803a20:	980f883a 	mov	r7,r19
  803a24:	9009883a 	mov	r4,r18
  803a28:	a83ee83a 	callr	r21
  803a2c:	00ffffc4 	movi	r3,-1
  803a30:	10ff5626 	beq	r2,r3,80378c <_fseek_r+0xf8>
  803a34:	81400c17 	ldw	r5,48(r16)
  803a38:	28000526 	beq	r5,zero,803a50 <_fseek_r+0x3bc>
  803a3c:	80801004 	addi	r2,r16,64
  803a40:	28800226 	beq	r5,r2,803a4c <_fseek_r+0x3b8>
  803a44:	9009883a 	mov	r4,r18
  803a48:	08033800 	call	803380 <_free_r>
  803a4c:	80000c15 	stw	zero,48(r16)
  803a50:	8080030b 	ldhu	r2,12(r16)
  803a54:	80c00417 	ldw	r3,16(r16)
  803a58:	0009883a 	mov	r4,zero
  803a5c:	10bdf7cc 	andi	r2,r2,63455
  803a60:	8080030d 	sth	r2,12(r16)
  803a64:	80c00015 	stw	r3,0(r16)
  803a68:	80000115 	stw	zero,4(r16)
  803a6c:	003f2806 	br	803710 <_fseek_r+0x7c>
  803a70:	81400717 	ldw	r5,28(r16)
  803a74:	000d883a 	mov	r6,zero
  803a78:	9009883a 	mov	r4,r18
  803a7c:	01c00044 	movi	r7,1
  803a80:	a83ee83a 	callr	r21
  803a84:	100d883a 	mov	r6,r2
  803a88:	00bfffc4 	movi	r2,-1
  803a8c:	30bf3b26 	beq	r6,r2,80377c <_fseek_r+0xe8>
  803a90:	8100030b 	ldhu	r4,12(r16)
  803a94:	003f5606 	br	8037f0 <_fseek_r+0x15c>
  803a98:	00800744 	movi	r2,29
  803a9c:	013fffc4 	movi	r4,-1
  803aa0:	90800015 	stw	r2,0(r18)
  803aa4:	003f1a06 	br	803710 <_fseek_r+0x7c>
  803aa8:	81400717 	ldw	r5,28(r16)
  803aac:	980f883a 	mov	r7,r19
  803ab0:	9009883a 	mov	r4,r18
  803ab4:	000d883a 	mov	r6,zero
  803ab8:	a83ee83a 	callr	r21
  803abc:	1023883a 	mov	r17,r2
  803ac0:	00bfffc4 	movi	r2,-1
  803ac4:	88bf3126 	beq	r17,r2,80378c <_fseek_r+0xf8>
  803ac8:	8100030b 	ldhu	r4,12(r16)
  803acc:	003f7006 	br	803890 <_fseek_r+0x1fc>

00803ad0 <fseek>:
  803ad0:	00802074 	movhi	r2,129
  803ad4:	1095d704 	addi	r2,r2,22364
  803ad8:	2013883a 	mov	r9,r4
  803adc:	11000017 	ldw	r4,0(r2)
  803ae0:	2805883a 	mov	r2,r5
  803ae4:	300f883a 	mov	r7,r6
  803ae8:	480b883a 	mov	r5,r9
  803aec:	100d883a 	mov	r6,r2
  803af0:	08036941 	jmpi	803694 <_fseek_r>

00803af4 <_fstat_r>:
  803af4:	defffd04 	addi	sp,sp,-12
  803af8:	dc000015 	stw	r16,0(sp)
  803afc:	04002074 	movhi	r16,129
  803b00:	841d1404 	addi	r16,r16,29776
  803b04:	dc400115 	stw	r17,4(sp)
  803b08:	80000015 	stw	zero,0(r16)
  803b0c:	2023883a 	mov	r17,r4
  803b10:	2809883a 	mov	r4,r5
  803b14:	300b883a 	mov	r5,r6
  803b18:	dfc00215 	stw	ra,8(sp)
  803b1c:	080ed100 	call	80ed10 <fstat>
  803b20:	1007883a 	mov	r3,r2
  803b24:	00bfffc4 	movi	r2,-1
  803b28:	18800626 	beq	r3,r2,803b44 <_fstat_r+0x50>
  803b2c:	1805883a 	mov	r2,r3
  803b30:	dfc00217 	ldw	ra,8(sp)
  803b34:	dc400117 	ldw	r17,4(sp)
  803b38:	dc000017 	ldw	r16,0(sp)
  803b3c:	dec00304 	addi	sp,sp,12
  803b40:	f800283a 	ret
  803b44:	80800017 	ldw	r2,0(r16)
  803b48:	103ff826 	beq	r2,zero,803b2c <_fstat_r+0x38>
  803b4c:	88800015 	stw	r2,0(r17)
  803b50:	1805883a 	mov	r2,r3
  803b54:	dfc00217 	ldw	ra,8(sp)
  803b58:	dc400117 	ldw	r17,4(sp)
  803b5c:	dc000017 	ldw	r16,0(sp)
  803b60:	dec00304 	addi	sp,sp,12
  803b64:	f800283a 	ret

00803b68 <_fwalk_reent>:
  803b68:	defff704 	addi	sp,sp,-36
  803b6c:	dcc00315 	stw	r19,12(sp)
  803b70:	24c0b804 	addi	r19,r4,736
  803b74:	dd800615 	stw	r22,24(sp)
  803b78:	dd400515 	stw	r21,20(sp)
  803b7c:	dfc00815 	stw	ra,32(sp)
  803b80:	ddc00715 	stw	r23,28(sp)
  803b84:	dd000415 	stw	r20,16(sp)
  803b88:	dc800215 	stw	r18,8(sp)
  803b8c:	dc400115 	stw	r17,4(sp)
  803b90:	dc000015 	stw	r16,0(sp)
  803b94:	202b883a 	mov	r21,r4
  803b98:	282d883a 	mov	r22,r5
  803b9c:	0802e480 	call	802e48 <__sfp_lock_acquire>
  803ba0:	98002126 	beq	r19,zero,803c28 <_fwalk_reent+0xc0>
  803ba4:	002f883a 	mov	r23,zero
  803ba8:	9c800117 	ldw	r18,4(r19)
  803bac:	9c000217 	ldw	r16,8(r19)
  803bb0:	90bfffc4 	addi	r2,r18,-1
  803bb4:	10000d16 	blt	r2,zero,803bec <_fwalk_reent+0x84>
  803bb8:	0023883a 	mov	r17,zero
  803bbc:	053fffc4 	movi	r20,-1
  803bc0:	8080030f 	ldh	r2,12(r16)
  803bc4:	8c400044 	addi	r17,r17,1
  803bc8:	10000626 	beq	r2,zero,803be4 <_fwalk_reent+0x7c>
  803bcc:	8080038f 	ldh	r2,14(r16)
  803bd0:	800b883a 	mov	r5,r16
  803bd4:	a809883a 	mov	r4,r21
  803bd8:	15000226 	beq	r2,r20,803be4 <_fwalk_reent+0x7c>
  803bdc:	b03ee83a 	callr	r22
  803be0:	b8aeb03a 	or	r23,r23,r2
  803be4:	84001704 	addi	r16,r16,92
  803be8:	947ff51e 	bne	r18,r17,803bc0 <_fwalk_reent+0x58>
  803bec:	9cc00017 	ldw	r19,0(r19)
  803bf0:	983fed1e 	bne	r19,zero,803ba8 <_fwalk_reent+0x40>
  803bf4:	0802e4c0 	call	802e4c <__sfp_lock_release>
  803bf8:	b805883a 	mov	r2,r23
  803bfc:	dfc00817 	ldw	ra,32(sp)
  803c00:	ddc00717 	ldw	r23,28(sp)
  803c04:	dd800617 	ldw	r22,24(sp)
  803c08:	dd400517 	ldw	r21,20(sp)
  803c0c:	dd000417 	ldw	r20,16(sp)
  803c10:	dcc00317 	ldw	r19,12(sp)
  803c14:	dc800217 	ldw	r18,8(sp)
  803c18:	dc400117 	ldw	r17,4(sp)
  803c1c:	dc000017 	ldw	r16,0(sp)
  803c20:	dec00904 	addi	sp,sp,36
  803c24:	f800283a 	ret
  803c28:	002f883a 	mov	r23,zero
  803c2c:	003ff106 	br	803bf4 <_fwalk_reent+0x8c>

00803c30 <_fwalk>:
  803c30:	defff804 	addi	sp,sp,-32
  803c34:	dcc00315 	stw	r19,12(sp)
  803c38:	24c0b804 	addi	r19,r4,736
  803c3c:	dd400515 	stw	r21,20(sp)
  803c40:	dfc00715 	stw	ra,28(sp)
  803c44:	dd800615 	stw	r22,24(sp)
  803c48:	dd000415 	stw	r20,16(sp)
  803c4c:	dc800215 	stw	r18,8(sp)
  803c50:	dc400115 	stw	r17,4(sp)
  803c54:	dc000015 	stw	r16,0(sp)
  803c58:	282b883a 	mov	r21,r5
  803c5c:	0802e480 	call	802e48 <__sfp_lock_acquire>
  803c60:	98001f26 	beq	r19,zero,803ce0 <_fwalk+0xb0>
  803c64:	002d883a 	mov	r22,zero
  803c68:	9c800117 	ldw	r18,4(r19)
  803c6c:	9c000217 	ldw	r16,8(r19)
  803c70:	90bfffc4 	addi	r2,r18,-1
  803c74:	10000c16 	blt	r2,zero,803ca8 <_fwalk+0x78>
  803c78:	0023883a 	mov	r17,zero
  803c7c:	053fffc4 	movi	r20,-1
  803c80:	8080030f 	ldh	r2,12(r16)
  803c84:	8c400044 	addi	r17,r17,1
  803c88:	10000526 	beq	r2,zero,803ca0 <_fwalk+0x70>
  803c8c:	8080038f 	ldh	r2,14(r16)
  803c90:	8009883a 	mov	r4,r16
  803c94:	15000226 	beq	r2,r20,803ca0 <_fwalk+0x70>
  803c98:	a83ee83a 	callr	r21
  803c9c:	b0acb03a 	or	r22,r22,r2
  803ca0:	84001704 	addi	r16,r16,92
  803ca4:	947ff61e 	bne	r18,r17,803c80 <_fwalk+0x50>
  803ca8:	9cc00017 	ldw	r19,0(r19)
  803cac:	983fee1e 	bne	r19,zero,803c68 <_fwalk+0x38>
  803cb0:	0802e4c0 	call	802e4c <__sfp_lock_release>
  803cb4:	b005883a 	mov	r2,r22
  803cb8:	dfc00717 	ldw	ra,28(sp)
  803cbc:	dd800617 	ldw	r22,24(sp)
  803cc0:	dd400517 	ldw	r21,20(sp)
  803cc4:	dd000417 	ldw	r20,16(sp)
  803cc8:	dcc00317 	ldw	r19,12(sp)
  803ccc:	dc800217 	ldw	r18,8(sp)
  803cd0:	dc400117 	ldw	r17,4(sp)
  803cd4:	dc000017 	ldw	r16,0(sp)
  803cd8:	dec00804 	addi	sp,sp,32
  803cdc:	f800283a 	ret
  803ce0:	002d883a 	mov	r22,zero
  803ce4:	003ff206 	br	803cb0 <_fwalk+0x80>

00803ce8 <__smakebuf_r>:
  803ce8:	2880030b 	ldhu	r2,12(r5)
  803cec:	deffed04 	addi	sp,sp,-76
  803cf0:	dc401015 	stw	r17,64(sp)
  803cf4:	1080008c 	andi	r2,r2,2
  803cf8:	dc000f15 	stw	r16,60(sp)
  803cfc:	dfc01215 	stw	ra,72(sp)
  803d00:	dc801115 	stw	r18,68(sp)
  803d04:	2821883a 	mov	r16,r5
  803d08:	2023883a 	mov	r17,r4
  803d0c:	10000b26 	beq	r2,zero,803d3c <__smakebuf_r+0x54>
  803d10:	28c010c4 	addi	r3,r5,67
  803d14:	00800044 	movi	r2,1
  803d18:	28800515 	stw	r2,20(r5)
  803d1c:	28c00415 	stw	r3,16(r5)
  803d20:	28c00015 	stw	r3,0(r5)
  803d24:	dfc01217 	ldw	ra,72(sp)
  803d28:	dc801117 	ldw	r18,68(sp)
  803d2c:	dc401017 	ldw	r17,64(sp)
  803d30:	dc000f17 	ldw	r16,60(sp)
  803d34:	dec01304 	addi	sp,sp,76
  803d38:	f800283a 	ret
  803d3c:	2940038f 	ldh	r5,14(r5)
  803d40:	28002116 	blt	r5,zero,803dc8 <__smakebuf_r+0xe0>
  803d44:	d80d883a 	mov	r6,sp
  803d48:	0803af40 	call	803af4 <_fstat_r>
  803d4c:	10001e16 	blt	r2,zero,803dc8 <__smakebuf_r+0xe0>
  803d50:	d8800117 	ldw	r2,4(sp)
  803d54:	00e00014 	movui	r3,32768
  803d58:	113c000c 	andi	r4,r2,61440
  803d5c:	20c03126 	beq	r4,r3,803e24 <__smakebuf_r+0x13c>
  803d60:	8080030b 	ldhu	r2,12(r16)
  803d64:	00c80004 	movi	r3,8192
  803d68:	10820014 	ori	r2,r2,2048
  803d6c:	8080030d 	sth	r2,12(r16)
  803d70:	20c01e26 	beq	r4,r3,803dec <__smakebuf_r+0x104>
  803d74:	04810004 	movi	r18,1024
  803d78:	8809883a 	mov	r4,r17
  803d7c:	900b883a 	mov	r5,r18
  803d80:	0803e7c0 	call	803e7c <_malloc_r>
  803d84:	1009883a 	mov	r4,r2
  803d88:	10003126 	beq	r2,zero,803e50 <__smakebuf_r+0x168>
  803d8c:	80c0030b 	ldhu	r3,12(r16)
  803d90:	00802034 	movhi	r2,128
  803d94:	108bcf04 	addi	r2,r2,12092
  803d98:	88800f15 	stw	r2,60(r17)
  803d9c:	18c02014 	ori	r3,r3,128
  803da0:	84800515 	stw	r18,20(r16)
  803da4:	80c0030d 	sth	r3,12(r16)
  803da8:	81000415 	stw	r4,16(r16)
  803dac:	81000015 	stw	r4,0(r16)
  803db0:	dfc01217 	ldw	ra,72(sp)
  803db4:	dc801117 	ldw	r18,68(sp)
  803db8:	dc401017 	ldw	r17,64(sp)
  803dbc:	dc000f17 	ldw	r16,60(sp)
  803dc0:	dec01304 	addi	sp,sp,76
  803dc4:	f800283a 	ret
  803dc8:	80c0030b 	ldhu	r3,12(r16)
  803dcc:	1880200c 	andi	r2,r3,128
  803dd0:	10000426 	beq	r2,zero,803de4 <__smakebuf_r+0xfc>
  803dd4:	04801004 	movi	r18,64
  803dd8:	18820014 	ori	r2,r3,2048
  803ddc:	8080030d 	sth	r2,12(r16)
  803de0:	003fe506 	br	803d78 <__smakebuf_r+0x90>
  803de4:	04810004 	movi	r18,1024
  803de8:	003ffb06 	br	803dd8 <__smakebuf_r+0xf0>
  803dec:	8140038f 	ldh	r5,14(r16)
  803df0:	8809883a 	mov	r4,r17
  803df4:	080b12c0 	call	80b12c <_isatty_r>
  803df8:	103fde26 	beq	r2,zero,803d74 <__smakebuf_r+0x8c>
  803dfc:	8080030b 	ldhu	r2,12(r16)
  803e00:	80c010c4 	addi	r3,r16,67
  803e04:	04810004 	movi	r18,1024
  803e08:	10800054 	ori	r2,r2,1
  803e0c:	8080030d 	sth	r2,12(r16)
  803e10:	00800044 	movi	r2,1
  803e14:	80c00415 	stw	r3,16(r16)
  803e18:	80800515 	stw	r2,20(r16)
  803e1c:	80c00015 	stw	r3,0(r16)
  803e20:	003fd506 	br	803d78 <__smakebuf_r+0x90>
  803e24:	80c00a17 	ldw	r3,40(r16)
  803e28:	00802034 	movhi	r2,128
  803e2c:	1092d204 	addi	r2,r2,19272
  803e30:	18bfcb1e 	bne	r3,r2,803d60 <__smakebuf_r+0x78>
  803e34:	8080030b 	ldhu	r2,12(r16)
  803e38:	00c10004 	movi	r3,1024
  803e3c:	1825883a 	mov	r18,r3
  803e40:	10c4b03a 	or	r2,r2,r3
  803e44:	8080030d 	sth	r2,12(r16)
  803e48:	80c01315 	stw	r3,76(r16)
  803e4c:	003fca06 	br	803d78 <__smakebuf_r+0x90>
  803e50:	8100030b 	ldhu	r4,12(r16)
  803e54:	2080800c 	andi	r2,r4,512
  803e58:	103fb21e 	bne	r2,zero,803d24 <__smakebuf_r+0x3c>
  803e5c:	80c010c4 	addi	r3,r16,67
  803e60:	21000094 	ori	r4,r4,2
  803e64:	00800044 	movi	r2,1
  803e68:	80800515 	stw	r2,20(r16)
  803e6c:	8100030d 	sth	r4,12(r16)
  803e70:	80c00415 	stw	r3,16(r16)
  803e74:	80c00015 	stw	r3,0(r16)
  803e78:	003faa06 	br	803d24 <__smakebuf_r+0x3c>

00803e7c <_malloc_r>:
  803e7c:	defff604 	addi	sp,sp,-40
  803e80:	28c002c4 	addi	r3,r5,11
  803e84:	00800584 	movi	r2,22
  803e88:	dc800215 	stw	r18,8(sp)
  803e8c:	dfc00915 	stw	ra,36(sp)
  803e90:	df000815 	stw	fp,32(sp)
  803e94:	ddc00715 	stw	r23,28(sp)
  803e98:	dd800615 	stw	r22,24(sp)
  803e9c:	dd400515 	stw	r21,20(sp)
  803ea0:	dd000415 	stw	r20,16(sp)
  803ea4:	dcc00315 	stw	r19,12(sp)
  803ea8:	dc400115 	stw	r17,4(sp)
  803eac:	dc000015 	stw	r16,0(sp)
  803eb0:	2025883a 	mov	r18,r4
  803eb4:	10c01236 	bltu	r2,r3,803f00 <_malloc_r+0x84>
  803eb8:	04400404 	movi	r17,16
  803ebc:	8940142e 	bgeu	r17,r5,803f10 <_malloc_r+0x94>
  803ec0:	00800304 	movi	r2,12
  803ec4:	0007883a 	mov	r3,zero
  803ec8:	90800015 	stw	r2,0(r18)
  803ecc:	1805883a 	mov	r2,r3
  803ed0:	dfc00917 	ldw	ra,36(sp)
  803ed4:	df000817 	ldw	fp,32(sp)
  803ed8:	ddc00717 	ldw	r23,28(sp)
  803edc:	dd800617 	ldw	r22,24(sp)
  803ee0:	dd400517 	ldw	r21,20(sp)
  803ee4:	dd000417 	ldw	r20,16(sp)
  803ee8:	dcc00317 	ldw	r19,12(sp)
  803eec:	dc800217 	ldw	r18,8(sp)
  803ef0:	dc400117 	ldw	r17,4(sp)
  803ef4:	dc000017 	ldw	r16,0(sp)
  803ef8:	dec00a04 	addi	sp,sp,40
  803efc:	f800283a 	ret
  803f00:	00bffe04 	movi	r2,-8
  803f04:	18a2703a 	and	r17,r3,r2
  803f08:	883fed16 	blt	r17,zero,803ec0 <_malloc_r+0x44>
  803f0c:	897fec36 	bltu	r17,r5,803ec0 <_malloc_r+0x44>
  803f10:	9009883a 	mov	r4,r18
  803f14:	080f3d80 	call	80f3d8 <__malloc_lock>
  803f18:	00807dc4 	movi	r2,503
  803f1c:	14402b2e 	bgeu	r2,r17,803fcc <_malloc_r+0x150>
  803f20:	8806d27a 	srli	r3,r17,9
  803f24:	18003f1e 	bne	r3,zero,804024 <_malloc_r+0x1a8>
  803f28:	880cd0fa 	srli	r6,r17,3
  803f2c:	300490fa 	slli	r2,r6,3
  803f30:	02c02074 	movhi	r11,129
  803f34:	5acfcd04 	addi	r11,r11,16180
  803f38:	12cb883a 	add	r5,r2,r11
  803f3c:	2c000317 	ldw	r16,12(r5)
  803f40:	580f883a 	mov	r7,r11
  803f44:	2c00041e 	bne	r5,r16,803f58 <_malloc_r+0xdc>
  803f48:	00000a06 	br	803f74 <_malloc_r+0xf8>
  803f4c:	1800860e 	bge	r3,zero,804168 <_malloc_r+0x2ec>
  803f50:	84000317 	ldw	r16,12(r16)
  803f54:	2c000726 	beq	r5,r16,803f74 <_malloc_r+0xf8>
  803f58:	80800117 	ldw	r2,4(r16)
  803f5c:	00ffff04 	movi	r3,-4
  803f60:	10c8703a 	and	r4,r2,r3
  803f64:	2447c83a 	sub	r3,r4,r17
  803f68:	008003c4 	movi	r2,15
  803f6c:	10fff70e 	bge	r2,r3,803f4c <_malloc_r+0xd0>
  803f70:	31bfffc4 	addi	r6,r6,-1
  803f74:	32400044 	addi	r9,r6,1
  803f78:	02802074 	movhi	r10,129
  803f7c:	528fcf04 	addi	r10,r10,16188
  803f80:	54000217 	ldw	r16,8(r10)
  803f84:	8280a026 	beq	r16,r10,804208 <_malloc_r+0x38c>
  803f88:	80800117 	ldw	r2,4(r16)
  803f8c:	00ffff04 	movi	r3,-4
  803f90:	10ca703a 	and	r5,r2,r3
  803f94:	2c4dc83a 	sub	r6,r5,r17
  803f98:	008003c4 	movi	r2,15
  803f9c:	11808316 	blt	r2,r6,8041ac <_malloc_r+0x330>
  803fa0:	52800315 	stw	r10,12(r10)
  803fa4:	52800215 	stw	r10,8(r10)
  803fa8:	30002916 	blt	r6,zero,804050 <_malloc_r+0x1d4>
  803fac:	8147883a 	add	r3,r16,r5
  803fb0:	18800117 	ldw	r2,4(r3)
  803fb4:	9009883a 	mov	r4,r18
  803fb8:	10800054 	ori	r2,r2,1
  803fbc:	18800115 	stw	r2,4(r3)
  803fc0:	080f3f80 	call	80f3f8 <__malloc_unlock>
  803fc4:	80c00204 	addi	r3,r16,8
  803fc8:	003fc006 	br	803ecc <_malloc_r+0x50>
  803fcc:	02c02074 	movhi	r11,129
  803fd0:	5acfcd04 	addi	r11,r11,16180
  803fd4:	8ac5883a 	add	r2,r17,r11
  803fd8:	14000317 	ldw	r16,12(r2)
  803fdc:	580f883a 	mov	r7,r11
  803fe0:	8806d0fa 	srli	r3,r17,3
  803fe4:	14006c26 	beq	r2,r16,804198 <_malloc_r+0x31c>
  803fe8:	80c00117 	ldw	r3,4(r16)
  803fec:	00bfff04 	movi	r2,-4
  803ff0:	81800317 	ldw	r6,12(r16)
  803ff4:	1886703a 	and	r3,r3,r2
  803ff8:	80c7883a 	add	r3,r16,r3
  803ffc:	18800117 	ldw	r2,4(r3)
  804000:	81400217 	ldw	r5,8(r16)
  804004:	9009883a 	mov	r4,r18
  804008:	10800054 	ori	r2,r2,1
  80400c:	18800115 	stw	r2,4(r3)
  804010:	31400215 	stw	r5,8(r6)
  804014:	29800315 	stw	r6,12(r5)
  804018:	080f3f80 	call	80f3f8 <__malloc_unlock>
  80401c:	80c00204 	addi	r3,r16,8
  804020:	003faa06 	br	803ecc <_malloc_r+0x50>
  804024:	00800104 	movi	r2,4
  804028:	10c0052e 	bgeu	r2,r3,804040 <_malloc_r+0x1c4>
  80402c:	00800504 	movi	r2,20
  804030:	10c07836 	bltu	r2,r3,804214 <_malloc_r+0x398>
  804034:	198016c4 	addi	r6,r3,91
  804038:	300490fa 	slli	r2,r6,3
  80403c:	003fbc06 	br	803f30 <_malloc_r+0xb4>
  804040:	8804d1ba 	srli	r2,r17,6
  804044:	11800e04 	addi	r6,r2,56
  804048:	300490fa 	slli	r2,r6,3
  80404c:	003fb806 	br	803f30 <_malloc_r+0xb4>
  804050:	00807fc4 	movi	r2,511
  804054:	1140bb36 	bltu	r2,r5,804344 <_malloc_r+0x4c8>
  804058:	2806d0fa 	srli	r3,r5,3
  80405c:	573ffe04 	addi	fp,r10,-8
  804060:	00800044 	movi	r2,1
  804064:	180890fa 	slli	r4,r3,3
  804068:	1807d0ba 	srai	r3,r3,2
  80406c:	e1c00117 	ldw	r7,4(fp)
  804070:	5909883a 	add	r4,r11,r4
  804074:	21400217 	ldw	r5,8(r4)
  804078:	10c4983a 	sll	r2,r2,r3
  80407c:	81000315 	stw	r4,12(r16)
  804080:	81400215 	stw	r5,8(r16)
  804084:	388eb03a 	or	r7,r7,r2
  804088:	2c000315 	stw	r16,12(r5)
  80408c:	24000215 	stw	r16,8(r4)
  804090:	e1c00115 	stw	r7,4(fp)
  804094:	4807883a 	mov	r3,r9
  804098:	4800cd16 	blt	r9,zero,8043d0 <_malloc_r+0x554>
  80409c:	1807d0ba 	srai	r3,r3,2
  8040a0:	00800044 	movi	r2,1
  8040a4:	10c8983a 	sll	r4,r2,r3
  8040a8:	39004436 	bltu	r7,r4,8041bc <_malloc_r+0x340>
  8040ac:	21c4703a 	and	r2,r4,r7
  8040b0:	10000a1e 	bne	r2,zero,8040dc <_malloc_r+0x260>
  8040b4:	2109883a 	add	r4,r4,r4
  8040b8:	00bfff04 	movi	r2,-4
  8040bc:	4884703a 	and	r2,r9,r2
  8040c0:	3906703a 	and	r3,r7,r4
  8040c4:	12400104 	addi	r9,r2,4
  8040c8:	1800041e 	bne	r3,zero,8040dc <_malloc_r+0x260>
  8040cc:	2109883a 	add	r4,r4,r4
  8040d0:	3904703a 	and	r2,r7,r4
  8040d4:	4a400104 	addi	r9,r9,4
  8040d8:	103ffc26 	beq	r2,zero,8040cc <_malloc_r+0x250>
  8040dc:	480490fa 	slli	r2,r9,3
  8040e0:	4819883a 	mov	r12,r9
  8040e4:	023fff04 	movi	r8,-4
  8040e8:	589b883a 	add	r13,r11,r2
  8040ec:	6807883a 	mov	r3,r13
  8040f0:	014003c4 	movi	r5,15
  8040f4:	1c000317 	ldw	r16,12(r3)
  8040f8:	1c00041e 	bne	r3,r16,80410c <_malloc_r+0x290>
  8040fc:	0000a706 	br	80439c <_malloc_r+0x520>
  804100:	3000ab0e 	bge	r6,zero,8043b0 <_malloc_r+0x534>
  804104:	84000317 	ldw	r16,12(r16)
  804108:	1c00a426 	beq	r3,r16,80439c <_malloc_r+0x520>
  80410c:	80800117 	ldw	r2,4(r16)
  804110:	1204703a 	and	r2,r2,r8
  804114:	144dc83a 	sub	r6,r2,r17
  804118:	29bff90e 	bge	r5,r6,804100 <_malloc_r+0x284>
  80411c:	81000317 	ldw	r4,12(r16)
  804120:	80c00217 	ldw	r3,8(r16)
  804124:	89400054 	ori	r5,r17,1
  804128:	8445883a 	add	r2,r16,r17
  80412c:	20c00215 	stw	r3,8(r4)
  804130:	19000315 	stw	r4,12(r3)
  804134:	81400115 	stw	r5,4(r16)
  804138:	1187883a 	add	r3,r2,r6
  80413c:	31000054 	ori	r4,r6,1
  804140:	50800315 	stw	r2,12(r10)
  804144:	50800215 	stw	r2,8(r10)
  804148:	19800015 	stw	r6,0(r3)
  80414c:	11000115 	stw	r4,4(r2)
  804150:	12800215 	stw	r10,8(r2)
  804154:	12800315 	stw	r10,12(r2)
  804158:	9009883a 	mov	r4,r18
  80415c:	080f3f80 	call	80f3f8 <__malloc_unlock>
  804160:	80c00204 	addi	r3,r16,8
  804164:	003f5906 	br	803ecc <_malloc_r+0x50>
  804168:	8109883a 	add	r4,r16,r4
  80416c:	20800117 	ldw	r2,4(r4)
  804170:	80c00217 	ldw	r3,8(r16)
  804174:	81400317 	ldw	r5,12(r16)
  804178:	10800054 	ori	r2,r2,1
  80417c:	20800115 	stw	r2,4(r4)
  804180:	28c00215 	stw	r3,8(r5)
  804184:	19400315 	stw	r5,12(r3)
  804188:	9009883a 	mov	r4,r18
  80418c:	080f3f80 	call	80f3f8 <__malloc_unlock>
  804190:	80c00204 	addi	r3,r16,8
  804194:	003f4d06 	br	803ecc <_malloc_r+0x50>
  804198:	80800204 	addi	r2,r16,8
  80419c:	14000317 	ldw	r16,12(r2)
  8041a0:	143f911e 	bne	r2,r16,803fe8 <_malloc_r+0x16c>
  8041a4:	1a400084 	addi	r9,r3,2
  8041a8:	003f7306 	br	803f78 <_malloc_r+0xfc>
  8041ac:	88c00054 	ori	r3,r17,1
  8041b0:	8445883a 	add	r2,r16,r17
  8041b4:	80c00115 	stw	r3,4(r16)
  8041b8:	003fdf06 	br	804138 <_malloc_r+0x2bc>
  8041bc:	e4000217 	ldw	r16,8(fp)
  8041c0:	00bfff04 	movi	r2,-4
  8041c4:	80c00117 	ldw	r3,4(r16)
  8041c8:	802d883a 	mov	r22,r16
  8041cc:	18aa703a 	and	r21,r3,r2
  8041d0:	ac401636 	bltu	r21,r17,80422c <_malloc_r+0x3b0>
  8041d4:	ac49c83a 	sub	r4,r21,r17
  8041d8:	008003c4 	movi	r2,15
  8041dc:	1100130e 	bge	r2,r4,80422c <_malloc_r+0x3b0>
  8041e0:	88800054 	ori	r2,r17,1
  8041e4:	8447883a 	add	r3,r16,r17
  8041e8:	80800115 	stw	r2,4(r16)
  8041ec:	20800054 	ori	r2,r4,1
  8041f0:	18800115 	stw	r2,4(r3)
  8041f4:	e0c00215 	stw	r3,8(fp)
  8041f8:	9009883a 	mov	r4,r18
  8041fc:	080f3f80 	call	80f3f8 <__malloc_unlock>
  804200:	80c00204 	addi	r3,r16,8
  804204:	003f3106 	br	803ecc <_malloc_r+0x50>
  804208:	39c00117 	ldw	r7,4(r7)
  80420c:	573ffe04 	addi	fp,r10,-8
  804210:	003fa006 	br	804094 <_malloc_r+0x218>
  804214:	00801504 	movi	r2,84
  804218:	10c06736 	bltu	r2,r3,8043b8 <_malloc_r+0x53c>
  80421c:	8804d33a 	srli	r2,r17,12
  804220:	11801b84 	addi	r6,r2,110
  804224:	300490fa 	slli	r2,r6,3
  804228:	003f4106 	br	803f30 <_malloc_r+0xb4>
  80422c:	d0a73e17 	ldw	r2,-25352(gp)
  804230:	d0e00317 	ldw	r3,-32756(gp)
  804234:	053fffc4 	movi	r20,-1
  804238:	10800404 	addi	r2,r2,16
  80423c:	88a7883a 	add	r19,r17,r2
  804240:	1d000326 	beq	r3,r20,804250 <_malloc_r+0x3d4>
  804244:	98c3ffc4 	addi	r3,r19,4095
  804248:	00bc0004 	movi	r2,-4096
  80424c:	18a6703a 	and	r19,r3,r2
  804250:	9009883a 	mov	r4,r18
  804254:	980b883a 	mov	r5,r19
  804258:	08049fc0 	call	8049fc <_sbrk_r>
  80425c:	1009883a 	mov	r4,r2
  804260:	15000426 	beq	r2,r20,804274 <_malloc_r+0x3f8>
  804264:	854b883a 	add	r5,r16,r21
  804268:	1029883a 	mov	r20,r2
  80426c:	11405a2e 	bgeu	r2,r5,8043d8 <_malloc_r+0x55c>
  804270:	87000c26 	beq	r16,fp,8042a4 <_malloc_r+0x428>
  804274:	e4000217 	ldw	r16,8(fp)
  804278:	80c00117 	ldw	r3,4(r16)
  80427c:	00bfff04 	movi	r2,-4
  804280:	1884703a 	and	r2,r3,r2
  804284:	14400336 	bltu	r2,r17,804294 <_malloc_r+0x418>
  804288:	1449c83a 	sub	r4,r2,r17
  80428c:	008003c4 	movi	r2,15
  804290:	113fd316 	blt	r2,r4,8041e0 <_malloc_r+0x364>
  804294:	9009883a 	mov	r4,r18
  804298:	080f3f80 	call	80f3f8 <__malloc_unlock>
  80429c:	0007883a 	mov	r3,zero
  8042a0:	003f0a06 	br	803ecc <_malloc_r+0x50>
  8042a4:	05c02074 	movhi	r23,129
  8042a8:	bddd2e04 	addi	r23,r23,29880
  8042ac:	b8800017 	ldw	r2,0(r23)
  8042b0:	988d883a 	add	r6,r19,r2
  8042b4:	b9800015 	stw	r6,0(r23)
  8042b8:	d0e00317 	ldw	r3,-32756(gp)
  8042bc:	00bfffc4 	movi	r2,-1
  8042c0:	18808e26 	beq	r3,r2,8044fc <_malloc_r+0x680>
  8042c4:	2145c83a 	sub	r2,r4,r5
  8042c8:	3085883a 	add	r2,r6,r2
  8042cc:	b8800015 	stw	r2,0(r23)
  8042d0:	20c001cc 	andi	r3,r4,7
  8042d4:	18005f1e 	bne	r3,zero,804454 <_malloc_r+0x5d8>
  8042d8:	000b883a 	mov	r5,zero
  8042dc:	a4c5883a 	add	r2,r20,r19
  8042e0:	1083ffcc 	andi	r2,r2,4095
  8042e4:	00c40004 	movi	r3,4096
  8042e8:	1887c83a 	sub	r3,r3,r2
  8042ec:	28e7883a 	add	r19,r5,r3
  8042f0:	9009883a 	mov	r4,r18
  8042f4:	980b883a 	mov	r5,r19
  8042f8:	08049fc0 	call	8049fc <_sbrk_r>
  8042fc:	1007883a 	mov	r3,r2
  804300:	00bfffc4 	movi	r2,-1
  804304:	18807a26 	beq	r3,r2,8044f0 <_malloc_r+0x674>
  804308:	1d05c83a 	sub	r2,r3,r20
  80430c:	9885883a 	add	r2,r19,r2
  804310:	10c00054 	ori	r3,r2,1
  804314:	b8800017 	ldw	r2,0(r23)
  804318:	a021883a 	mov	r16,r20
  80431c:	a0c00115 	stw	r3,4(r20)
  804320:	9885883a 	add	r2,r19,r2
  804324:	b8800015 	stw	r2,0(r23)
  804328:	e5000215 	stw	r20,8(fp)
  80432c:	b7003626 	beq	r22,fp,804408 <_malloc_r+0x58c>
  804330:	018003c4 	movi	r6,15
  804334:	35404b36 	bltu	r6,r21,804464 <_malloc_r+0x5e8>
  804338:	00800044 	movi	r2,1
  80433c:	a0800115 	stw	r2,4(r20)
  804340:	003fcd06 	br	804278 <_malloc_r+0x3fc>
  804344:	2808d27a 	srli	r4,r5,9
  804348:	2000371e 	bne	r4,zero,804428 <_malloc_r+0x5ac>
  80434c:	2808d0fa 	srli	r4,r5,3
  804350:	200690fa 	slli	r3,r4,3
  804354:	1ad1883a 	add	r8,r3,r11
  804358:	41800217 	ldw	r6,8(r8)
  80435c:	41805b26 	beq	r8,r6,8044cc <_malloc_r+0x650>
  804360:	30800117 	ldw	r2,4(r6)
  804364:	00ffff04 	movi	r3,-4
  804368:	10c4703a 	and	r2,r2,r3
  80436c:	2880022e 	bgeu	r5,r2,804378 <_malloc_r+0x4fc>
  804370:	31800217 	ldw	r6,8(r6)
  804374:	41bffa1e 	bne	r8,r6,804360 <_malloc_r+0x4e4>
  804378:	32000317 	ldw	r8,12(r6)
  80437c:	39c00117 	ldw	r7,4(r7)
  804380:	82000315 	stw	r8,12(r16)
  804384:	81800215 	stw	r6,8(r16)
  804388:	07002074 	movhi	fp,129
  80438c:	e70fcd04 	addi	fp,fp,16180
  804390:	34000315 	stw	r16,12(r6)
  804394:	44000215 	stw	r16,8(r8)
  804398:	003f3e06 	br	804094 <_malloc_r+0x218>
  80439c:	63000044 	addi	r12,r12,1
  8043a0:	608000cc 	andi	r2,r12,3
  8043a4:	10005d26 	beq	r2,zero,80451c <_malloc_r+0x6a0>
  8043a8:	18c00204 	addi	r3,r3,8
  8043ac:	003f5106 	br	8040f4 <_malloc_r+0x278>
  8043b0:	8089883a 	add	r4,r16,r2
  8043b4:	003f6d06 	br	80416c <_malloc_r+0x2f0>
  8043b8:	00805504 	movi	r2,340
  8043bc:	10c02036 	bltu	r2,r3,804440 <_malloc_r+0x5c4>
  8043c0:	8804d3fa 	srli	r2,r17,15
  8043c4:	11801dc4 	addi	r6,r2,119
  8043c8:	300490fa 	slli	r2,r6,3
  8043cc:	003ed806 	br	803f30 <_malloc_r+0xb4>
  8043d0:	48c000c4 	addi	r3,r9,3
  8043d4:	003f3106 	br	80409c <_malloc_r+0x220>
  8043d8:	05c02074 	movhi	r23,129
  8043dc:	bddd2e04 	addi	r23,r23,29880
  8043e0:	b8800017 	ldw	r2,0(r23)
  8043e4:	988d883a 	add	r6,r19,r2
  8043e8:	b9800015 	stw	r6,0(r23)
  8043ec:	293fb21e 	bne	r5,r4,8042b8 <_malloc_r+0x43c>
  8043f0:	2083ffcc 	andi	r2,r4,4095
  8043f4:	103fb01e 	bne	r2,zero,8042b8 <_malloc_r+0x43c>
  8043f8:	e4000217 	ldw	r16,8(fp)
  8043fc:	9d45883a 	add	r2,r19,r21
  804400:	10800054 	ori	r2,r2,1
  804404:	80800115 	stw	r2,4(r16)
  804408:	b8c00017 	ldw	r3,0(r23)
  80440c:	d0a73f17 	ldw	r2,-25348(gp)
  804410:	10c0012e 	bgeu	r2,r3,804418 <_malloc_r+0x59c>
  804414:	d0e73f15 	stw	r3,-25348(gp)
  804418:	d0a74017 	ldw	r2,-25344(gp)
  80441c:	10ff962e 	bgeu	r2,r3,804278 <_malloc_r+0x3fc>
  804420:	d0e74015 	stw	r3,-25344(gp)
  804424:	003f9406 	br	804278 <_malloc_r+0x3fc>
  804428:	00800104 	movi	r2,4
  80442c:	11001e36 	bltu	r2,r4,8044a8 <_malloc_r+0x62c>
  804430:	2804d1ba 	srli	r2,r5,6
  804434:	11000e04 	addi	r4,r2,56
  804438:	200690fa 	slli	r3,r4,3
  80443c:	003fc506 	br	804354 <_malloc_r+0x4d8>
  804440:	00815504 	movi	r2,1364
  804444:	10c01d2e 	bgeu	r2,r3,8044bc <_malloc_r+0x640>
  804448:	01801f84 	movi	r6,126
  80444c:	0080fc04 	movi	r2,1008
  804450:	003eb706 	br	803f30 <_malloc_r+0xb4>
  804454:	00800204 	movi	r2,8
  804458:	10cbc83a 	sub	r5,r2,r3
  80445c:	2169883a 	add	r20,r4,r5
  804460:	003f9e06 	br	8042dc <_malloc_r+0x460>
  804464:	00bffe04 	movi	r2,-8
  804468:	a93ffd04 	addi	r4,r21,-12
  80446c:	2088703a 	and	r4,r4,r2
  804470:	b10b883a 	add	r5,r22,r4
  804474:	00c00144 	movi	r3,5
  804478:	28c00215 	stw	r3,8(r5)
  80447c:	28c00115 	stw	r3,4(r5)
  804480:	b0800117 	ldw	r2,4(r22)
  804484:	1080004c 	andi	r2,r2,1
  804488:	2084b03a 	or	r2,r4,r2
  80448c:	b0800115 	stw	r2,4(r22)
  804490:	313fdd2e 	bgeu	r6,r4,804408 <_malloc_r+0x58c>
  804494:	b1400204 	addi	r5,r22,8
  804498:	9009883a 	mov	r4,r18
  80449c:	08033800 	call	803380 <_free_r>
  8044a0:	e4000217 	ldw	r16,8(fp)
  8044a4:	003fd806 	br	804408 <_malloc_r+0x58c>
  8044a8:	00800504 	movi	r2,20
  8044ac:	11001536 	bltu	r2,r4,804504 <_malloc_r+0x688>
  8044b0:	210016c4 	addi	r4,r4,91
  8044b4:	200690fa 	slli	r3,r4,3
  8044b8:	003fa606 	br	804354 <_malloc_r+0x4d8>
  8044bc:	8804d4ba 	srli	r2,r17,18
  8044c0:	11801f04 	addi	r6,r2,124
  8044c4:	300490fa 	slli	r2,r6,3
  8044c8:	003e9906 	br	803f30 <_malloc_r+0xb4>
  8044cc:	2009d0ba 	srai	r4,r4,2
  8044d0:	01402074 	movhi	r5,129
  8044d4:	294fcd04 	addi	r5,r5,16180
  8044d8:	00c00044 	movi	r3,1
  8044dc:	28800117 	ldw	r2,4(r5)
  8044e0:	1906983a 	sll	r3,r3,r4
  8044e4:	10c4b03a 	or	r2,r2,r3
  8044e8:	28800115 	stw	r2,4(r5)
  8044ec:	003fa306 	br	80437c <_malloc_r+0x500>
  8044f0:	0027883a 	mov	r19,zero
  8044f4:	00c00044 	movi	r3,1
  8044f8:	003f8606 	br	804314 <_malloc_r+0x498>
  8044fc:	d1200315 	stw	r4,-32756(gp)
  804500:	003f7306 	br	8042d0 <_malloc_r+0x454>
  804504:	00801504 	movi	r2,84
  804508:	11001936 	bltu	r2,r4,804570 <_malloc_r+0x6f4>
  80450c:	2804d33a 	srli	r2,r5,12
  804510:	11001b84 	addi	r4,r2,110
  804514:	200690fa 	slli	r3,r4,3
  804518:	003f8e06 	br	804354 <_malloc_r+0x4d8>
  80451c:	480b883a 	mov	r5,r9
  804520:	6807883a 	mov	r3,r13
  804524:	288000cc 	andi	r2,r5,3
  804528:	18fffe04 	addi	r3,r3,-8
  80452c:	297fffc4 	addi	r5,r5,-1
  804530:	10001526 	beq	r2,zero,804588 <_malloc_r+0x70c>
  804534:	18800217 	ldw	r2,8(r3)
  804538:	10fffa26 	beq	r2,r3,804524 <_malloc_r+0x6a8>
  80453c:	2109883a 	add	r4,r4,r4
  804540:	393f1e36 	bltu	r7,r4,8041bc <_malloc_r+0x340>
  804544:	203f1d26 	beq	r4,zero,8041bc <_malloc_r+0x340>
  804548:	21c4703a 	and	r2,r4,r7
  80454c:	10000226 	beq	r2,zero,804558 <_malloc_r+0x6dc>
  804550:	6013883a 	mov	r9,r12
  804554:	003ee106 	br	8040dc <_malloc_r+0x260>
  804558:	2109883a 	add	r4,r4,r4
  80455c:	3904703a 	and	r2,r7,r4
  804560:	63000104 	addi	r12,r12,4
  804564:	103ffc26 	beq	r2,zero,804558 <_malloc_r+0x6dc>
  804568:	6013883a 	mov	r9,r12
  80456c:	003edb06 	br	8040dc <_malloc_r+0x260>
  804570:	00805504 	movi	r2,340
  804574:	11000836 	bltu	r2,r4,804598 <_malloc_r+0x71c>
  804578:	2804d3fa 	srli	r2,r5,15
  80457c:	11001dc4 	addi	r4,r2,119
  804580:	200690fa 	slli	r3,r4,3
  804584:	003f7306 	br	804354 <_malloc_r+0x4d8>
  804588:	0104303a 	nor	r2,zero,r4
  80458c:	388e703a 	and	r7,r7,r2
  804590:	e1c00115 	stw	r7,4(fp)
  804594:	003fe906 	br	80453c <_malloc_r+0x6c0>
  804598:	00815504 	movi	r2,1364
  80459c:	1100032e 	bgeu	r2,r4,8045ac <_malloc_r+0x730>
  8045a0:	01001f84 	movi	r4,126
  8045a4:	00c0fc04 	movi	r3,1008
  8045a8:	003f6a06 	br	804354 <_malloc_r+0x4d8>
  8045ac:	2804d4ba 	srli	r2,r5,18
  8045b0:	11001f04 	addi	r4,r2,124
  8045b4:	200690fa 	slli	r3,r4,3
  8045b8:	003f6606 	br	804354 <_malloc_r+0x4d8>

008045bc <memset>:
  8045bc:	008000c4 	movi	r2,3
  8045c0:	29403fcc 	andi	r5,r5,255
  8045c4:	2007883a 	mov	r3,r4
  8045c8:	1180022e 	bgeu	r2,r6,8045d4 <memset+0x18>
  8045cc:	2084703a 	and	r2,r4,r2
  8045d0:	10000826 	beq	r2,zero,8045f4 <memset+0x38>
  8045d4:	30000526 	beq	r6,zero,8045ec <memset+0x30>
  8045d8:	2805883a 	mov	r2,r5
  8045dc:	30cd883a 	add	r6,r6,r3
  8045e0:	18800005 	stb	r2,0(r3)
  8045e4:	18c00044 	addi	r3,r3,1
  8045e8:	19bffd1e 	bne	r3,r6,8045e0 <memset+0x24>
  8045ec:	2005883a 	mov	r2,r4
  8045f0:	f800283a 	ret
  8045f4:	2804923a 	slli	r2,r5,8
  8045f8:	020003c4 	movi	r8,15
  8045fc:	200f883a 	mov	r7,r4
  804600:	2884b03a 	or	r2,r5,r2
  804604:	1006943a 	slli	r3,r2,16
  804608:	10c6b03a 	or	r3,r2,r3
  80460c:	41800a2e 	bgeu	r8,r6,804638 <memset+0x7c>
  804610:	4005883a 	mov	r2,r8
  804614:	31bffc04 	addi	r6,r6,-16
  804618:	38c00015 	stw	r3,0(r7)
  80461c:	38c00115 	stw	r3,4(r7)
  804620:	38c00215 	stw	r3,8(r7)
  804624:	38c00315 	stw	r3,12(r7)
  804628:	39c00404 	addi	r7,r7,16
  80462c:	11bff936 	bltu	r2,r6,804614 <memset+0x58>
  804630:	008000c4 	movi	r2,3
  804634:	1180052e 	bgeu	r2,r6,80464c <memset+0x90>
  804638:	31bfff04 	addi	r6,r6,-4
  80463c:	008000c4 	movi	r2,3
  804640:	38c00015 	stw	r3,0(r7)
  804644:	39c00104 	addi	r7,r7,4
  804648:	11bffb36 	bltu	r2,r6,804638 <memset+0x7c>
  80464c:	3807883a 	mov	r3,r7
  804650:	003fe006 	br	8045d4 <memset+0x18>

00804654 <_open_r>:
  804654:	defffd04 	addi	sp,sp,-12
  804658:	dc000015 	stw	r16,0(sp)
  80465c:	04002074 	movhi	r16,129
  804660:	841d1404 	addi	r16,r16,29776
  804664:	dc400115 	stw	r17,4(sp)
  804668:	80000015 	stw	zero,0(r16)
  80466c:	2023883a 	mov	r17,r4
  804670:	2809883a 	mov	r4,r5
  804674:	300b883a 	mov	r5,r6
  804678:	380d883a 	mov	r6,r7
  80467c:	dfc00215 	stw	ra,8(sp)
  804680:	080f5100 	call	80f510 <open>
  804684:	1007883a 	mov	r3,r2
  804688:	00bfffc4 	movi	r2,-1
  80468c:	18800626 	beq	r3,r2,8046a8 <_open_r+0x54>
  804690:	1805883a 	mov	r2,r3
  804694:	dfc00217 	ldw	ra,8(sp)
  804698:	dc400117 	ldw	r17,4(sp)
  80469c:	dc000017 	ldw	r16,0(sp)
  8046a0:	dec00304 	addi	sp,sp,12
  8046a4:	f800283a 	ret
  8046a8:	80800017 	ldw	r2,0(r16)
  8046ac:	103ff826 	beq	r2,zero,804690 <_open_r+0x3c>
  8046b0:	88800015 	stw	r2,0(r17)
  8046b4:	1805883a 	mov	r2,r3
  8046b8:	dfc00217 	ldw	ra,8(sp)
  8046bc:	dc400117 	ldw	r17,4(sp)
  8046c0:	dc000017 	ldw	r16,0(sp)
  8046c4:	dec00304 	addi	sp,sp,12
  8046c8:	f800283a 	ret

008046cc <printf>:
  8046cc:	defffb04 	addi	sp,sp,-20
  8046d0:	dfc00115 	stw	ra,4(sp)
  8046d4:	d9400215 	stw	r5,8(sp)
  8046d8:	d9800315 	stw	r6,12(sp)
  8046dc:	d9c00415 	stw	r7,16(sp)
  8046e0:	00802074 	movhi	r2,129
  8046e4:	1095d704 	addi	r2,r2,22364
  8046e8:	10c00017 	ldw	r3,0(r2)
  8046ec:	200b883a 	mov	r5,r4
  8046f0:	d8800204 	addi	r2,sp,8
  8046f4:	19000217 	ldw	r4,8(r3)
  8046f8:	100d883a 	mov	r6,r2
  8046fc:	d8800015 	stw	r2,0(sp)
  804700:	08085e40 	call	8085e4 <__vfprintf_internal>
  804704:	dfc00117 	ldw	ra,4(sp)
  804708:	dec00504 	addi	sp,sp,20
  80470c:	f800283a 	ret

00804710 <_printf_r>:
  804710:	defffc04 	addi	sp,sp,-16
  804714:	dfc00115 	stw	ra,4(sp)
  804718:	d9800215 	stw	r6,8(sp)
  80471c:	d9c00315 	stw	r7,12(sp)
  804720:	280d883a 	mov	r6,r5
  804724:	21400217 	ldw	r5,8(r4)
  804728:	d8c00204 	addi	r3,sp,8
  80472c:	180f883a 	mov	r7,r3
  804730:	d8c00015 	stw	r3,0(sp)
  804734:	08067200 	call	806720 <___vfprintf_internal_r>
  804738:	dfc00117 	ldw	ra,4(sp)
  80473c:	dec00404 	addi	sp,sp,16
  804740:	f800283a 	ret

00804744 <putchar>:
  804744:	00802074 	movhi	r2,129
  804748:	1095d704 	addi	r2,r2,22364
  80474c:	11800017 	ldw	r6,0(r2)
  804750:	200b883a 	mov	r5,r4
  804754:	3009883a 	mov	r4,r6
  804758:	31800217 	ldw	r6,8(r6)
  80475c:	080c6cc1 	jmpi	80c6cc <_putc_r>

00804760 <_putchar_r>:
  804760:	21800217 	ldw	r6,8(r4)
  804764:	080c6cc1 	jmpi	80c6cc <_putc_r>

00804768 <_puts_r>:
  804768:	defff604 	addi	sp,sp,-40
  80476c:	dc400715 	stw	r17,28(sp)
  804770:	2023883a 	mov	r17,r4
  804774:	2809883a 	mov	r4,r5
  804778:	dfc00915 	stw	ra,36(sp)
  80477c:	dcc00815 	stw	r19,32(sp)
  804780:	2827883a 	mov	r19,r5
  804784:	0804c8c0 	call	804c8c <strlen>
  804788:	89400217 	ldw	r5,8(r17)
  80478c:	00c02074 	movhi	r3,129
  804790:	18cd4604 	addi	r3,r3,13592
  804794:	01c00044 	movi	r7,1
  804798:	12000044 	addi	r8,r2,1
  80479c:	d8c00515 	stw	r3,20(sp)
  8047a0:	d9c00615 	stw	r7,24(sp)
  8047a4:	d8c00304 	addi	r3,sp,12
  8047a8:	01c00084 	movi	r7,2
  8047ac:	8809883a 	mov	r4,r17
  8047b0:	d80d883a 	mov	r6,sp
  8047b4:	d8c00015 	stw	r3,0(sp)
  8047b8:	dcc00315 	stw	r19,12(sp)
  8047bc:	da000215 	stw	r8,8(sp)
  8047c0:	d9c00115 	stw	r7,4(sp)
  8047c4:	d8800415 	stw	r2,16(sp)
  8047c8:	080a0c40 	call	80a0c4 <__sfvwrite_r>
  8047cc:	00ffffc4 	movi	r3,-1
  8047d0:	10000626 	beq	r2,zero,8047ec <_puts_r+0x84>
  8047d4:	1805883a 	mov	r2,r3
  8047d8:	dfc00917 	ldw	ra,36(sp)
  8047dc:	dcc00817 	ldw	r19,32(sp)
  8047e0:	dc400717 	ldw	r17,28(sp)
  8047e4:	dec00a04 	addi	sp,sp,40
  8047e8:	f800283a 	ret
  8047ec:	00c00284 	movi	r3,10
  8047f0:	1805883a 	mov	r2,r3
  8047f4:	dfc00917 	ldw	ra,36(sp)
  8047f8:	dcc00817 	ldw	r19,32(sp)
  8047fc:	dc400717 	ldw	r17,28(sp)
  804800:	dec00a04 	addi	sp,sp,40
  804804:	f800283a 	ret

00804808 <puts>:
  804808:	00802074 	movhi	r2,129
  80480c:	1095d704 	addi	r2,r2,22364
  804810:	200b883a 	mov	r5,r4
  804814:	11000017 	ldw	r4,0(r2)
  804818:	08047681 	jmpi	804768 <_puts_r>

0080481c <__srefill_r>:
  80481c:	defffd04 	addi	sp,sp,-12
  804820:	dc400115 	stw	r17,4(sp)
  804824:	dc000015 	stw	r16,0(sp)
  804828:	dfc00215 	stw	ra,8(sp)
  80482c:	2023883a 	mov	r17,r4
  804830:	2821883a 	mov	r16,r5
  804834:	20000226 	beq	r4,zero,804840 <__srefill_r+0x24>
  804838:	20800e17 	ldw	r2,56(r4)
  80483c:	10004126 	beq	r2,zero,804944 <__srefill_r+0x128>
  804840:	80c0030b 	ldhu	r3,12(r16)
  804844:	80000115 	stw	zero,4(r16)
  804848:	1880080c 	andi	r2,r3,32
  80484c:	1000361e 	bne	r2,zero,804928 <__srefill_r+0x10c>
  804850:	1880010c 	andi	r2,r3,4
  804854:	1000211e 	bne	r2,zero,8048dc <__srefill_r+0xc0>
  804858:	1880040c 	andi	r2,r3,16
  80485c:	10005026 	beq	r2,zero,8049a0 <__srefill_r+0x184>
  804860:	1880020c 	andi	r2,r3,8
  804864:	1000541e 	bne	r2,zero,8049b8 <__srefill_r+0x19c>
  804868:	8080030b 	ldhu	r2,12(r16)
  80486c:	10800114 	ori	r2,r2,4
  804870:	8080030d 	sth	r2,12(r16)
  804874:	80800417 	ldw	r2,16(r16)
  804878:	10004526 	beq	r2,zero,804990 <__srefill_r+0x174>
  80487c:	8080030b 	ldhu	r2,12(r16)
  804880:	108000cc 	andi	r2,r2,3
  804884:	1000361e 	bne	r2,zero,804960 <__srefill_r+0x144>
  804888:	81800417 	ldw	r6,16(r16)
  80488c:	80c00817 	ldw	r3,32(r16)
  804890:	81400717 	ldw	r5,28(r16)
  804894:	81c00517 	ldw	r7,20(r16)
  804898:	8809883a 	mov	r4,r17
  80489c:	81800015 	stw	r6,0(r16)
  8048a0:	183ee83a 	callr	r3
  8048a4:	80c0030b 	ldhu	r3,12(r16)
  8048a8:	1009883a 	mov	r4,r2
  8048ac:	80800115 	stw	r2,4(r16)
  8048b0:	00b7ffc4 	movi	r2,-8193
  8048b4:	1884703a 	and	r2,r3,r2
  8048b8:	8080030d 	sth	r2,12(r16)
  8048bc:	0100230e 	bge	zero,r4,80494c <__srefill_r+0x130>
  8048c0:	0009883a 	mov	r4,zero
  8048c4:	2005883a 	mov	r2,r4
  8048c8:	dfc00217 	ldw	ra,8(sp)
  8048cc:	dc400117 	ldw	r17,4(sp)
  8048d0:	dc000017 	ldw	r16,0(sp)
  8048d4:	dec00304 	addi	sp,sp,12
  8048d8:	f800283a 	ret
  8048dc:	81400c17 	ldw	r5,48(r16)
  8048e0:	283fe426 	beq	r5,zero,804874 <__srefill_r+0x58>
  8048e4:	80801004 	addi	r2,r16,64
  8048e8:	28800226 	beq	r5,r2,8048f4 <__srefill_r+0xd8>
  8048ec:	8809883a 	mov	r4,r17
  8048f0:	08033800 	call	803380 <_free_r>
  8048f4:	80800f17 	ldw	r2,60(r16)
  8048f8:	80000c15 	stw	zero,48(r16)
  8048fc:	80800115 	stw	r2,4(r16)
  804900:	103fdc26 	beq	r2,zero,804874 <__srefill_r+0x58>
  804904:	80800e17 	ldw	r2,56(r16)
  804908:	0009883a 	mov	r4,zero
  80490c:	80800015 	stw	r2,0(r16)
  804910:	2005883a 	mov	r2,r4
  804914:	dfc00217 	ldw	ra,8(sp)
  804918:	dc400117 	ldw	r17,4(sp)
  80491c:	dc000017 	ldw	r16,0(sp)
  804920:	dec00304 	addi	sp,sp,12
  804924:	f800283a 	ret
  804928:	013fffc4 	movi	r4,-1
  80492c:	2005883a 	mov	r2,r4
  804930:	dfc00217 	ldw	ra,8(sp)
  804934:	dc400117 	ldw	r17,4(sp)
  804938:	dc000017 	ldw	r16,0(sp)
  80493c:	dec00304 	addi	sp,sp,12
  804940:	f800283a 	ret
  804944:	0802e580 	call	802e58 <__sinit>
  804948:	003fbd06 	br	804840 <__srefill_r+0x24>
  80494c:	20000b1e 	bne	r4,zero,80497c <__srefill_r+0x160>
  804950:	10800814 	ori	r2,r2,32
  804954:	013fffc4 	movi	r4,-1
  804958:	8080030d 	sth	r2,12(r16)
  80495c:	003fd906 	br	8048c4 <__srefill_r+0xa8>
  804960:	00802074 	movhi	r2,129
  804964:	1095d804 	addi	r2,r2,22368
  804968:	11000017 	ldw	r4,0(r2)
  80496c:	01402034 	movhi	r5,128
  804970:	29527804 	addi	r5,r5,18912
  804974:	0803c300 	call	803c30 <_fwalk>
  804978:	003fc306 	br	804888 <__srefill_r+0x6c>
  80497c:	10801014 	ori	r2,r2,64
  804980:	013fffc4 	movi	r4,-1
  804984:	8080030d 	sth	r2,12(r16)
  804988:	80000115 	stw	zero,4(r16)
  80498c:	003fcd06 	br	8048c4 <__srefill_r+0xa8>
  804990:	8809883a 	mov	r4,r17
  804994:	800b883a 	mov	r5,r16
  804998:	0803ce80 	call	803ce8 <__smakebuf_r>
  80499c:	003fb706 	br	80487c <__srefill_r+0x60>
  8049a0:	18c01014 	ori	r3,r3,64
  8049a4:	00800244 	movi	r2,9
  8049a8:	013fffc4 	movi	r4,-1
  8049ac:	88800015 	stw	r2,0(r17)
  8049b0:	80c0030d 	sth	r3,12(r16)
  8049b4:	003fc306 	br	8048c4 <__srefill_r+0xa8>
  8049b8:	8809883a 	mov	r4,r17
  8049bc:	800b883a 	mov	r5,r16
  8049c0:	0802bc00 	call	802bc0 <_fflush_r>
  8049c4:	103fd81e 	bne	r2,zero,804928 <__srefill_r+0x10c>
  8049c8:	8080030b 	ldhu	r2,12(r16)
  8049cc:	80000215 	stw	zero,8(r16)
  8049d0:	80000615 	stw	zero,24(r16)
  8049d4:	10bffdcc 	andi	r2,r2,65527
  8049d8:	8080030d 	sth	r2,12(r16)
  8049dc:	003fa206 	br	804868 <__srefill_r+0x4c>

008049e0 <lflush>:
  8049e0:	20c0030b 	ldhu	r3,12(r4)
  8049e4:	01400244 	movi	r5,9
  8049e8:	0005883a 	mov	r2,zero
  8049ec:	18c0024c 	andi	r3,r3,9
  8049f0:	19400126 	beq	r3,r5,8049f8 <lflush+0x18>
  8049f4:	f800283a 	ret
  8049f8:	0802dbc1 	jmpi	802dbc <fflush>

008049fc <_sbrk_r>:
  8049fc:	defffd04 	addi	sp,sp,-12
  804a00:	dc000015 	stw	r16,0(sp)
  804a04:	04002074 	movhi	r16,129
  804a08:	841d1404 	addi	r16,r16,29776
  804a0c:	dc400115 	stw	r17,4(sp)
  804a10:	80000015 	stw	zero,0(r16)
  804a14:	2023883a 	mov	r17,r4
  804a18:	2809883a 	mov	r4,r5
  804a1c:	dfc00215 	stw	ra,8(sp)
  804a20:	080f8f80 	call	80f8f8 <sbrk>
  804a24:	1007883a 	mov	r3,r2
  804a28:	00bfffc4 	movi	r2,-1
  804a2c:	18800626 	beq	r3,r2,804a48 <_sbrk_r+0x4c>
  804a30:	1805883a 	mov	r2,r3
  804a34:	dfc00217 	ldw	ra,8(sp)
  804a38:	dc400117 	ldw	r17,4(sp)
  804a3c:	dc000017 	ldw	r16,0(sp)
  804a40:	dec00304 	addi	sp,sp,12
  804a44:	f800283a 	ret
  804a48:	80800017 	ldw	r2,0(r16)
  804a4c:	103ff826 	beq	r2,zero,804a30 <_sbrk_r+0x34>
  804a50:	88800015 	stw	r2,0(r17)
  804a54:	1805883a 	mov	r2,r3
  804a58:	dfc00217 	ldw	ra,8(sp)
  804a5c:	dc400117 	ldw	r17,4(sp)
  804a60:	dc000017 	ldw	r16,0(sp)
  804a64:	dec00304 	addi	sp,sp,12
  804a68:	f800283a 	ret

00804a6c <sprintf>:
  804a6c:	deffe504 	addi	sp,sp,-108
  804a70:	2013883a 	mov	r9,r4
  804a74:	dfc01815 	stw	ra,96(sp)
  804a78:	d9801915 	stw	r6,100(sp)
  804a7c:	d9c01a15 	stw	r7,104(sp)
  804a80:	d8801904 	addi	r2,sp,100
  804a84:	d8800015 	stw	r2,0(sp)
  804a88:	00802074 	movhi	r2,129
  804a8c:	1095d704 	addi	r2,r2,22364
  804a90:	11000017 	ldw	r4,0(r2)
  804a94:	d9c00017 	ldw	r7,0(sp)
  804a98:	00808204 	movi	r2,520
  804a9c:	00e00034 	movhi	r3,32768
  804aa0:	18ffffc4 	addi	r3,r3,-1
  804aa4:	280d883a 	mov	r6,r5
  804aa8:	d880040d 	sth	r2,16(sp)
  804aac:	d9400104 	addi	r5,sp,4
  804ab0:	00bfffc4 	movi	r2,-1
  804ab4:	d8c00615 	stw	r3,24(sp)
  804ab8:	d8c00315 	stw	r3,12(sp)
  804abc:	da400515 	stw	r9,20(sp)
  804ac0:	d880048d 	sth	r2,18(sp)
  804ac4:	da400115 	stw	r9,4(sp)
  804ac8:	08067200 	call	806720 <___vfprintf_internal_r>
  804acc:	d8c00117 	ldw	r3,4(sp)
  804ad0:	18000005 	stb	zero,0(r3)
  804ad4:	dfc01817 	ldw	ra,96(sp)
  804ad8:	dec01b04 	addi	sp,sp,108
  804adc:	f800283a 	ret

00804ae0 <_sprintf_r>:
  804ae0:	deffe604 	addi	sp,sp,-104
  804ae4:	2813883a 	mov	r9,r5
  804ae8:	dfc01815 	stw	ra,96(sp)
  804aec:	d9c01915 	stw	r7,100(sp)
  804af0:	d8801904 	addi	r2,sp,100
  804af4:	d8800015 	stw	r2,0(sp)
  804af8:	100f883a 	mov	r7,r2
  804afc:	00808204 	movi	r2,520
  804b00:	00e00034 	movhi	r3,32768
  804b04:	18ffffc4 	addi	r3,r3,-1
  804b08:	d880040d 	sth	r2,16(sp)
  804b0c:	d9400104 	addi	r5,sp,4
  804b10:	00bfffc4 	movi	r2,-1
  804b14:	d8c00615 	stw	r3,24(sp)
  804b18:	d8c00315 	stw	r3,12(sp)
  804b1c:	da400515 	stw	r9,20(sp)
  804b20:	d880048d 	sth	r2,18(sp)
  804b24:	da400115 	stw	r9,4(sp)
  804b28:	08067200 	call	806720 <___vfprintf_internal_r>
  804b2c:	d8c00117 	ldw	r3,4(sp)
  804b30:	18000005 	stb	zero,0(r3)
  804b34:	dfc01817 	ldw	ra,96(sp)
  804b38:	dec01a04 	addi	sp,sp,104
  804b3c:	f800283a 	ret

00804b40 <__sclose>:
  804b40:	2940038f 	ldh	r5,14(r5)
  804b44:	08087bc1 	jmpi	8087bc <_close_r>

00804b48 <__sseek>:
  804b48:	defffe04 	addi	sp,sp,-8
  804b4c:	dc000015 	stw	r16,0(sp)
  804b50:	2821883a 	mov	r16,r5
  804b54:	2940038f 	ldh	r5,14(r5)
  804b58:	dfc00115 	stw	ra,4(sp)
  804b5c:	080b2600 	call	80b260 <_lseek_r>
  804b60:	1007883a 	mov	r3,r2
  804b64:	00bfffc4 	movi	r2,-1
  804b68:	18800926 	beq	r3,r2,804b90 <__sseek+0x48>
  804b6c:	8080030b 	ldhu	r2,12(r16)
  804b70:	80c01415 	stw	r3,80(r16)
  804b74:	10840014 	ori	r2,r2,4096
  804b78:	8080030d 	sth	r2,12(r16)
  804b7c:	1805883a 	mov	r2,r3
  804b80:	dfc00117 	ldw	ra,4(sp)
  804b84:	dc000017 	ldw	r16,0(sp)
  804b88:	dec00204 	addi	sp,sp,8
  804b8c:	f800283a 	ret
  804b90:	8080030b 	ldhu	r2,12(r16)
  804b94:	10bbffcc 	andi	r2,r2,61439
  804b98:	8080030d 	sth	r2,12(r16)
  804b9c:	1805883a 	mov	r2,r3
  804ba0:	dfc00117 	ldw	ra,4(sp)
  804ba4:	dc000017 	ldw	r16,0(sp)
  804ba8:	dec00204 	addi	sp,sp,8
  804bac:	f800283a 	ret

00804bb0 <__swrite>:
  804bb0:	2880030b 	ldhu	r2,12(r5)
  804bb4:	defffb04 	addi	sp,sp,-20
  804bb8:	dcc00315 	stw	r19,12(sp)
  804bbc:	1080400c 	andi	r2,r2,256
  804bc0:	dc800215 	stw	r18,8(sp)
  804bc4:	dc400115 	stw	r17,4(sp)
  804bc8:	dc000015 	stw	r16,0(sp)
  804bcc:	3027883a 	mov	r19,r6
  804bd0:	3825883a 	mov	r18,r7
  804bd4:	dfc00415 	stw	ra,16(sp)
  804bd8:	2821883a 	mov	r16,r5
  804bdc:	000d883a 	mov	r6,zero
  804be0:	01c00084 	movi	r7,2
  804be4:	2023883a 	mov	r17,r4
  804be8:	10000226 	beq	r2,zero,804bf4 <__swrite+0x44>
  804bec:	2940038f 	ldh	r5,14(r5)
  804bf0:	080b2600 	call	80b260 <_lseek_r>
  804bf4:	8080030b 	ldhu	r2,12(r16)
  804bf8:	8140038f 	ldh	r5,14(r16)
  804bfc:	8809883a 	mov	r4,r17
  804c00:	10bbffcc 	andi	r2,r2,61439
  804c04:	980d883a 	mov	r6,r19
  804c08:	900f883a 	mov	r7,r18
  804c0c:	8080030d 	sth	r2,12(r16)
  804c10:	dfc00417 	ldw	ra,16(sp)
  804c14:	dcc00317 	ldw	r19,12(sp)
  804c18:	dc800217 	ldw	r18,8(sp)
  804c1c:	dc400117 	ldw	r17,4(sp)
  804c20:	dc000017 	ldw	r16,0(sp)
  804c24:	dec00504 	addi	sp,sp,20
  804c28:	08086081 	jmpi	808608 <_write_r>

00804c2c <__sread>:
  804c2c:	defffe04 	addi	sp,sp,-8
  804c30:	dc000015 	stw	r16,0(sp)
  804c34:	2821883a 	mov	r16,r5
  804c38:	2940038f 	ldh	r5,14(r5)
  804c3c:	dfc00115 	stw	ra,4(sp)
  804c40:	080c7b40 	call	80c7b4 <_read_r>
  804c44:	1007883a 	mov	r3,r2
  804c48:	10000816 	blt	r2,zero,804c6c <__sread+0x40>
  804c4c:	80801417 	ldw	r2,80(r16)
  804c50:	10c5883a 	add	r2,r2,r3
  804c54:	80801415 	stw	r2,80(r16)
  804c58:	1805883a 	mov	r2,r3
  804c5c:	dfc00117 	ldw	ra,4(sp)
  804c60:	dc000017 	ldw	r16,0(sp)
  804c64:	dec00204 	addi	sp,sp,8
  804c68:	f800283a 	ret
  804c6c:	8080030b 	ldhu	r2,12(r16)
  804c70:	10bbffcc 	andi	r2,r2,61439
  804c74:	8080030d 	sth	r2,12(r16)
  804c78:	1805883a 	mov	r2,r3
  804c7c:	dfc00117 	ldw	ra,4(sp)
  804c80:	dc000017 	ldw	r16,0(sp)
  804c84:	dec00204 	addi	sp,sp,8
  804c88:	f800283a 	ret

00804c8c <strlen>:
  804c8c:	208000cc 	andi	r2,r4,3
  804c90:	2011883a 	mov	r8,r4
  804c94:	1000161e 	bne	r2,zero,804cf0 <strlen+0x64>
  804c98:	20c00017 	ldw	r3,0(r4)
  804c9c:	017fbff4 	movhi	r5,65279
  804ca0:	297fbfc4 	addi	r5,r5,-257
  804ca4:	01e02074 	movhi	r7,32897
  804ca8:	39e02004 	addi	r7,r7,-32640
  804cac:	1945883a 	add	r2,r3,r5
  804cb0:	11c4703a 	and	r2,r2,r7
  804cb4:	00c6303a 	nor	r3,zero,r3
  804cb8:	1886703a 	and	r3,r3,r2
  804cbc:	18000c1e 	bne	r3,zero,804cf0 <strlen+0x64>
  804cc0:	280d883a 	mov	r6,r5
  804cc4:	380b883a 	mov	r5,r7
  804cc8:	21000104 	addi	r4,r4,4
  804ccc:	20800017 	ldw	r2,0(r4)
  804cd0:	1187883a 	add	r3,r2,r6
  804cd4:	1946703a 	and	r3,r3,r5
  804cd8:	0084303a 	nor	r2,zero,r2
  804cdc:	10c4703a 	and	r2,r2,r3
  804ce0:	103ff926 	beq	r2,zero,804cc8 <strlen+0x3c>
  804ce4:	20800007 	ldb	r2,0(r4)
  804ce8:	10000326 	beq	r2,zero,804cf8 <strlen+0x6c>
  804cec:	21000044 	addi	r4,r4,1
  804cf0:	20800007 	ldb	r2,0(r4)
  804cf4:	103ffd1e 	bne	r2,zero,804cec <strlen+0x60>
  804cf8:	2205c83a 	sub	r2,r4,r8
  804cfc:	f800283a 	ret

00804d00 <match>:
  804d00:	21800017 	ldw	r6,0(r4)
  804d04:	01c01004 	movi	r7,64
  804d08:	02001684 	movi	r8,90
  804d0c:	28800007 	ldb	r2,0(r5)
  804d10:	29400044 	addi	r5,r5,1
  804d14:	10000826 	beq	r2,zero,804d38 <match+0x38>
  804d18:	31800044 	addi	r6,r6,1
  804d1c:	30c00007 	ldb	r3,0(r6)
  804d20:	38c0020e 	bge	r7,r3,804d2c <match+0x2c>
  804d24:	40c00116 	blt	r8,r3,804d2c <match+0x2c>
  804d28:	18c00804 	addi	r3,r3,32
  804d2c:	18bff726 	beq	r3,r2,804d0c <match+0xc>
  804d30:	0005883a 	mov	r2,zero
  804d34:	f800283a 	ret
  804d38:	30800044 	addi	r2,r6,1
  804d3c:	20800015 	stw	r2,0(r4)
  804d40:	00800044 	movi	r2,1
  804d44:	f800283a 	ret

00804d48 <_strtod_r>:
  804d48:	deffd504 	addi	sp,sp,-172
  804d4c:	df002915 	stw	fp,164(sp)
  804d50:	dd402615 	stw	r21,152(sp)
  804d54:	dd002515 	stw	r20,148(sp)
  804d58:	dfc02a15 	stw	ra,168(sp)
  804d5c:	ddc02815 	stw	r23,160(sp)
  804d60:	dd802715 	stw	r22,156(sp)
  804d64:	dcc02415 	stw	r19,144(sp)
  804d68:	dc802315 	stw	r18,140(sp)
  804d6c:	dc402215 	stw	r17,136(sp)
  804d70:	dc002115 	stw	r16,132(sp)
  804d74:	2829883a 	mov	r20,r5
  804d78:	202b883a 	mov	r21,r4
  804d7c:	d9801d15 	stw	r6,116(sp)
  804d80:	d8000915 	stw	zero,36(sp)
  804d84:	d8000a15 	stw	zero,40(sp)
  804d88:	d9400415 	stw	r5,16(sp)
  804d8c:	df000904 	addi	fp,sp,36
  804d90:	dc000417 	ldw	r16,16(sp)
  804d94:	00800b44 	movi	r2,45
  804d98:	80c00003 	ldbu	r3,0(r16)
  804d9c:	10c03536 	bltu	r2,r3,804e74 <_strtod_r+0x12c>
  804da0:	18c5883a 	add	r2,r3,r3
  804da4:	1085883a 	add	r2,r2,r2
  804da8:	00c02034 	movhi	r3,128
  804dac:	18d36f04 	addi	r3,r3,19900
  804db0:	10c5883a 	add	r2,r2,r3
  804db4:	11000017 	ldw	r4,0(r2)
  804db8:	2000683a 	jmp	r4
  804dbc:	00804ff4 	movhi	r2,319
  804dc0:	00804e74 	movhi	r2,313
  804dc4:	00804e74 	movhi	r2,313
  804dc8:	00804e74 	movhi	r2,313
  804dcc:	00804e74 	movhi	r2,313
  804dd0:	00804e74 	movhi	r2,313
  804dd4:	00804e74 	movhi	r2,313
  804dd8:	00804e74 	movhi	r2,313
  804ddc:	00804e74 	movhi	r2,313
  804de0:	0080533c 	xorhi	r2,zero,332
  804de4:	0080533c 	xorhi	r2,zero,332
  804de8:	0080533c 	xorhi	r2,zero,332
  804dec:	0080533c 	xorhi	r2,zero,332
  804df0:	0080533c 	xorhi	r2,zero,332
  804df4:	00804e74 	movhi	r2,313
  804df8:	00804e74 	movhi	r2,313
  804dfc:	00804e74 	movhi	r2,313
  804e00:	00804e74 	movhi	r2,313
  804e04:	00804e74 	movhi	r2,313
  804e08:	00804e74 	movhi	r2,313
  804e0c:	00804e74 	movhi	r2,313
  804e10:	00804e74 	movhi	r2,313
  804e14:	00804e74 	movhi	r2,313
  804e18:	00804e74 	movhi	r2,313
  804e1c:	00804e74 	movhi	r2,313
  804e20:	00804e74 	movhi	r2,313
  804e24:	00804e74 	movhi	r2,313
  804e28:	00804e74 	movhi	r2,313
  804e2c:	00804e74 	movhi	r2,313
  804e30:	00804e74 	movhi	r2,313
  804e34:	00804e74 	movhi	r2,313
  804e38:	00804e74 	movhi	r2,313
  804e3c:	0080533c 	xorhi	r2,zero,332
  804e40:	00804e74 	movhi	r2,313
  804e44:	00804e74 	movhi	r2,313
  804e48:	00804e74 	movhi	r2,313
  804e4c:	00804e74 	movhi	r2,313
  804e50:	00804e74 	movhi	r2,313
  804e54:	00804e74 	movhi	r2,313
  804e58:	00804e74 	movhi	r2,313
  804e5c:	00804e74 	movhi	r2,313
  804e60:	00804e74 	movhi	r2,313
  804e64:	00804e74 	movhi	r2,313
  804e68:	0080531c 	xori	r2,zero,332
  804e6c:	00804e74 	movhi	r2,313
  804e70:	00805348 	cmpgei	r2,zero,333
  804e74:	d8001515 	stw	zero,84(sp)
  804e78:	80c00007 	ldb	r3,0(r16)
  804e7c:	00800c04 	movi	r2,48
  804e80:	1880e926 	beq	r3,r2,805228 <_strtod_r+0x4e0>
  804e84:	d8001615 	stw	zero,88(sp)
  804e88:	dc001415 	stw	r16,80(sp)
  804e8c:	84400007 	ldb	r17,0(r16)
  804e90:	00800bc4 	movi	r2,47
  804e94:	1443760e 	bge	r2,r17,805c70 <_strtod_r+0xf28>
  804e98:	00800e44 	movi	r2,57
  804e9c:	14437416 	blt	r2,r17,805c70 <_strtod_r+0xf28>
  804ea0:	8025883a 	mov	r18,r16
  804ea4:	0027883a 	mov	r19,zero
  804ea8:	d8001215 	stw	zero,72(sp)
  804eac:	d8001115 	stw	zero,68(sp)
  804eb0:	00000f06 	br	804ef0 <_strtod_r+0x1a8>
  804eb4:	d9001217 	ldw	r4,72(sp)
  804eb8:	01400284 	movi	r5,10
  804ebc:	0802a640 	call	802a64 <__mulsi3>
  804ec0:	1445883a 	add	r2,r2,r17
  804ec4:	10bff404 	addi	r2,r2,-48
  804ec8:	d8801215 	stw	r2,72(sp)
  804ecc:	94000044 	addi	r16,r18,1
  804ed0:	dc000415 	stw	r16,16(sp)
  804ed4:	84400007 	ldb	r17,0(r16)
  804ed8:	00800bc4 	movi	r2,47
  804edc:	9cc00044 	addi	r19,r19,1
  804ee0:	8025883a 	mov	r18,r16
  804ee4:	1440130e 	bge	r2,r17,804f34 <_strtod_r+0x1ec>
  804ee8:	00800e44 	movi	r2,57
  804eec:	14401116 	blt	r2,r17,804f34 <_strtod_r+0x1ec>
  804ef0:	00800204 	movi	r2,8
  804ef4:	14ffef0e 	bge	r2,r19,804eb4 <_strtod_r+0x16c>
  804ef8:	008003c4 	movi	r2,15
  804efc:	14fff316 	blt	r2,r19,804ecc <_strtod_r+0x184>
  804f00:	d9001117 	ldw	r4,68(sp)
  804f04:	01400284 	movi	r5,10
  804f08:	94000044 	addi	r16,r18,1
  804f0c:	0802a640 	call	802a64 <__mulsi3>
  804f10:	1445883a 	add	r2,r2,r17
  804f14:	10bff404 	addi	r2,r2,-48
  804f18:	d8801115 	stw	r2,68(sp)
  804f1c:	dc000415 	stw	r16,16(sp)
  804f20:	84400007 	ldb	r17,0(r16)
  804f24:	00800bc4 	movi	r2,47
  804f28:	9cc00044 	addi	r19,r19,1
  804f2c:	8025883a 	mov	r18,r16
  804f30:	147fed16 	blt	r2,r17,804ee8 <_strtod_r+0x1a0>
  804f34:	00800b84 	movi	r2,46
  804f38:	8880c926 	beq	r17,r2,805260 <_strtod_r+0x518>
  804f3c:	dcc01815 	stw	r19,96(sp)
  804f40:	d8001b15 	stw	zero,108(sp)
  804f44:	d8001715 	stw	zero,92(sp)
  804f48:	000d883a 	mov	r6,zero
  804f4c:	00801944 	movi	r2,101
  804f50:	88802126 	beq	r17,r2,804fd8 <_strtod_r+0x290>
  804f54:	00801144 	movi	r2,69
  804f58:	88801f26 	beq	r17,r2,804fd8 <_strtod_r+0x290>
  804f5c:	d9001817 	ldw	r4,96(sp)
  804f60:	2024c03a 	cmpne	r18,r4,zero
  804f64:	0009883a 	mov	r4,zero
  804f68:	9000651e 	bne	r18,zero,805100 <_strtod_r+0x3b8>
  804f6c:	3000c926 	beq	r6,zero,805294 <_strtod_r+0x54c>
  804f70:	d8801d17 	ldw	r2,116(sp)
  804f74:	10000326 	beq	r2,zero,804f84 <_strtod_r+0x23c>
  804f78:	d8800417 	ldw	r2,16(sp)
  804f7c:	d8c01d17 	ldw	r3,116(sp)
  804f80:	18800015 	stw	r2,0(r3)
  804f84:	d9001517 	ldw	r4,84(sp)
  804f88:	2005003a 	cmpeq	r2,r4,zero
  804f8c:	10001c1e 	bne	r2,zero,805000 <_strtod_r+0x2b8>
  804f90:	e0800017 	ldw	r2,0(fp)
  804f94:	e0c00117 	ldw	r3,4(fp)
  804f98:	1009883a 	mov	r4,r2
  804f9c:	1960003c 	xorhi	r5,r3,32768
  804fa0:	2005883a 	mov	r2,r4
  804fa4:	2807883a 	mov	r3,r5
  804fa8:	dfc02a17 	ldw	ra,168(sp)
  804fac:	df002917 	ldw	fp,164(sp)
  804fb0:	ddc02817 	ldw	r23,160(sp)
  804fb4:	dd802717 	ldw	r22,156(sp)
  804fb8:	dd402617 	ldw	r21,152(sp)
  804fbc:	dd002517 	ldw	r20,148(sp)
  804fc0:	dcc02417 	ldw	r19,144(sp)
  804fc4:	dc802317 	ldw	r18,140(sp)
  804fc8:	dc402217 	ldw	r17,136(sp)
  804fcc:	dc002117 	ldw	r16,132(sp)
  804fd0:	dec02b04 	addi	sp,sp,172
  804fd4:	f800283a 	ret
  804fd8:	d8801817 	ldw	r2,96(sp)
  804fdc:	1024c03a 	cmpne	r18,r2,zero
  804fe0:	90000a1e 	bne	r18,zero,80500c <_strtod_r+0x2c4>
  804fe4:	3000091e 	bne	r6,zero,80500c <_strtod_r+0x2c4>
  804fe8:	d8c01617 	ldw	r3,88(sp)
  804fec:	1805003a 	cmpeq	r2,r3,zero
  804ff0:	10000626 	beq	r2,zero,80500c <_strtod_r+0x2c4>
  804ff4:	d8001515 	stw	zero,84(sp)
  804ff8:	dd000415 	stw	r20,16(sp)
  804ffc:	003fdc06 	br	804f70 <_strtod_r+0x228>
  805000:	e1000017 	ldw	r4,0(fp)
  805004:	e1400117 	ldw	r5,4(fp)
  805008:	003fe506 	br	804fa0 <_strtod_r+0x258>
  80500c:	dd000417 	ldw	r20,16(sp)
  805010:	00800ac4 	movi	r2,43
  805014:	a4000044 	addi	r16,r20,1
  805018:	dc000415 	stw	r16,16(sp)
  80501c:	a0c00047 	ldb	r3,1(r20)
  805020:	8009883a 	mov	r4,r16
  805024:	1880cb26 	beq	r3,r2,805354 <_strtod_r+0x60c>
  805028:	00800b44 	movi	r2,45
  80502c:	18838326 	beq	r3,r2,805e3c <_strtod_r+0x10f4>
  805030:	1823883a 	mov	r17,r3
  805034:	88fff404 	addi	r3,r17,-48
  805038:	00800244 	movi	r2,9
  80503c:	d8001915 	stw	zero,100(sp)
  805040:	10c0cb36 	bltu	r2,r3,805370 <_strtod_r+0x628>
  805044:	00800c04 	movi	r2,48
  805048:	8880061e 	bne	r17,r2,805064 <_strtod_r+0x31c>
  80504c:	dc000417 	ldw	r16,16(sp)
  805050:	8805883a 	mov	r2,r17
  805054:	84000044 	addi	r16,r16,1
  805058:	dc000415 	stw	r16,16(sp)
  80505c:	84400007 	ldb	r17,0(r16)
  805060:	88bffc26 	beq	r17,r2,805054 <_strtod_r+0x30c>
  805064:	88fff3c4 	addi	r3,r17,-49
  805068:	00800204 	movi	r2,8
  80506c:	10ffbd36 	bltu	r2,r3,804f64 <_strtod_r+0x21c>
  805070:	dc000417 	ldw	r16,16(sp)
  805074:	893ff404 	addi	r4,r17,-48
  805078:	00c00bc4 	movi	r3,47
  80507c:	dc001315 	stw	r16,76(sp)
  805080:	84000044 	addi	r16,r16,1
  805084:	dc000415 	stw	r16,16(sp)
  805088:	84400007 	ldb	r17,0(r16)
  80508c:	1c40100e 	bge	r3,r17,8050d0 <_strtod_r+0x388>
  805090:	00800e44 	movi	r2,57
  805094:	14400e16 	blt	r2,r17,8050d0 <_strtod_r+0x388>
  805098:	182f883a 	mov	r23,r3
  80509c:	102d883a 	mov	r22,r2
  8050a0:	00000106 	br	8050a8 <_strtod_r+0x360>
  8050a4:	b4400a16 	blt	r22,r17,8050d0 <_strtod_r+0x388>
  8050a8:	84000044 	addi	r16,r16,1
  8050ac:	01400284 	movi	r5,10
  8050b0:	d9802015 	stw	r6,128(sp)
  8050b4:	0802a640 	call	802a64 <__mulsi3>
  8050b8:	dc000415 	stw	r16,16(sp)
  8050bc:	8885883a 	add	r2,r17,r2
  8050c0:	84400007 	ldb	r17,0(r16)
  8050c4:	113ff404 	addi	r4,r2,-48
  8050c8:	d9802017 	ldw	r6,128(sp)
  8050cc:	bc7ff516 	blt	r23,r17,8050a4 <_strtod_r+0x35c>
  8050d0:	d8801317 	ldw	r2,76(sp)
  8050d4:	8087c83a 	sub	r3,r16,r2
  8050d8:	00800204 	movi	r2,8
  8050dc:	10c2ff16 	blt	r2,r3,805cdc <_strtod_r+0xf94>
  8050e0:	009387c4 	movi	r2,19999
  8050e4:	1100010e 	bge	r2,r4,8050ec <_strtod_r+0x3a4>
  8050e8:	1009883a 	mov	r4,r2
  8050ec:	d8c01917 	ldw	r3,100(sp)
  8050f0:	1805003a 	cmpeq	r2,r3,zero
  8050f4:	103f9c1e 	bne	r2,zero,804f68 <_strtod_r+0x220>
  8050f8:	0109c83a 	sub	r4,zero,r4
  8050fc:	903f9b26 	beq	r18,zero,804f6c <_strtod_r+0x224>
  805100:	d8801717 	ldw	r2,92(sp)
  805104:	2089c83a 	sub	r4,r4,r2
  805108:	d9000f15 	stw	r4,60(sp)
  80510c:	9800811e 	bne	r19,zero,805314 <_strtod_r+0x5cc>
  805110:	dd001817 	ldw	r20,96(sp)
  805114:	dc801817 	ldw	r18,96(sp)
  805118:	00800404 	movi	r2,16
  80511c:	1480010e 	bge	r2,r18,805124 <_strtod_r+0x3dc>
  805120:	1025883a 	mov	r18,r2
  805124:	d9001217 	ldw	r4,72(sp)
  805128:	080e5ac0 	call	80e5ac <__floatunsidf>
  80512c:	100f883a 	mov	r7,r2
  805130:	e0800015 	stw	r2,0(fp)
  805134:	00800244 	movi	r2,9
  805138:	e0c00115 	stw	r3,4(fp)
  80513c:	1480160e 	bge	r2,r18,805198 <_strtod_r+0x450>
  805140:	900c90fa 	slli	r6,r18,3
  805144:	01002074 	movhi	r4,129
  805148:	210e3004 	addi	r4,r4,14528
  80514c:	180b883a 	mov	r5,r3
  805150:	310d883a 	add	r6,r6,r4
  805154:	30ffef17 	ldw	r3,-68(r6)
  805158:	30bfee17 	ldw	r2,-72(r6)
  80515c:	3809883a 	mov	r4,r7
  805160:	180f883a 	mov	r7,r3
  805164:	100d883a 	mov	r6,r2
  805168:	0801d8c0 	call	801d8c <__muldf3>
  80516c:	d9001117 	ldw	r4,68(sp)
  805170:	1021883a 	mov	r16,r2
  805174:	1823883a 	mov	r17,r3
  805178:	080e5ac0 	call	80e5ac <__floatunsidf>
  80517c:	880b883a 	mov	r5,r17
  805180:	180f883a 	mov	r7,r3
  805184:	8009883a 	mov	r4,r16
  805188:	100d883a 	mov	r6,r2
  80518c:	0801d180 	call	801d18 <__adddf3>
  805190:	e0c00115 	stw	r3,4(fp)
  805194:	e0800015 	stw	r2,0(fp)
  805198:	d8c01817 	ldw	r3,96(sp)
  80519c:	010003c4 	movi	r4,15
  8051a0:	20c09e16 	blt	r4,r3,80541c <_strtod_r+0x6d4>
  8051a4:	d8800f17 	ldw	r2,60(sp)
  8051a8:	103f7126 	beq	r2,zero,804f70 <_strtod_r+0x228>
  8051ac:	0083d90e 	bge	zero,r2,806114 <_strtod_r+0x13cc>
  8051b0:	d8c00f17 	ldw	r3,60(sp)
  8051b4:	00800584 	movi	r2,22
  8051b8:	10c2ca0e 	bge	r2,r3,805ce4 <_strtod_r+0xf9c>
  8051bc:	d8801817 	ldw	r2,96(sp)
  8051c0:	d8c00f17 	ldw	r3,60(sp)
  8051c4:	20a3c83a 	sub	r17,r4,r2
  8051c8:	88800584 	addi	r2,r17,22
  8051cc:	10c09316 	blt	r2,r3,80541c <_strtod_r+0x6d4>
  8051d0:	880890fa 	slli	r4,r17,3
  8051d4:	04002074 	movhi	r16,129
  8051d8:	840e3004 	addi	r16,r16,14528
  8051dc:	e0800017 	ldw	r2,0(fp)
  8051e0:	2409883a 	add	r4,r4,r16
  8051e4:	22000017 	ldw	r8,0(r4)
  8051e8:	22400117 	ldw	r9,4(r4)
  8051ec:	e0c00117 	ldw	r3,4(fp)
  8051f0:	1009883a 	mov	r4,r2
  8051f4:	480f883a 	mov	r7,r9
  8051f8:	180b883a 	mov	r5,r3
  8051fc:	400d883a 	mov	r6,r8
  805200:	0801d8c0 	call	801d8c <__muldf3>
  805204:	d9000f17 	ldw	r4,60(sp)
  805208:	180b883a 	mov	r5,r3
  80520c:	2455c83a 	sub	r10,r4,r17
  805210:	501490fa 	slli	r10,r10,3
  805214:	1009883a 	mov	r4,r2
  805218:	5415883a 	add	r10,r10,r16
  80521c:	52000017 	ldw	r8,0(r10)
  805220:	52400117 	ldw	r9,4(r10)
  805224:	0002b906 	br	805d0c <_strtod_r+0xfc4>
  805228:	80c00047 	ldb	r3,1(r16)
  80522c:	00801604 	movi	r2,88
  805230:	18805226 	beq	r3,r2,80537c <_strtod_r+0x634>
  805234:	00801e04 	movi	r2,120
  805238:	18805026 	beq	r3,r2,80537c <_strtod_r+0x634>
  80523c:	84000044 	addi	r16,r16,1
  805240:	dc000415 	stw	r16,16(sp)
  805244:	80c00007 	ldb	r3,0(r16)
  805248:	00800c04 	movi	r2,48
  80524c:	18bffb26 	beq	r3,r2,80523c <_strtod_r+0x4f4>
  805250:	183f4726 	beq	r3,zero,804f70 <_strtod_r+0x228>
  805254:	01000044 	movi	r4,1
  805258:	d9001615 	stw	r4,88(sp)
  80525c:	003f0a06 	br	804e88 <_strtod_r+0x140>
  805260:	84000044 	addi	r16,r16,1
  805264:	dc000415 	stw	r16,16(sp)
  805268:	94400047 	ldb	r17,1(r18)
  80526c:	9800ba26 	beq	r19,zero,805558 <_strtod_r+0x810>
  805270:	dcc01815 	stw	r19,96(sp)
  805274:	d8001715 	stw	zero,92(sp)
  805278:	000d883a 	mov	r6,zero
  80527c:	8dbff404 	addi	r22,r17,-48
  805280:	00800244 	movi	r2,9
  805284:	15826e2e 	bgeu	r2,r22,805c40 <_strtod_r+0xef8>
  805288:	01000044 	movi	r4,1
  80528c:	d9001b15 	stw	r4,108(sp)
  805290:	003f2e06 	br	804f4c <_strtod_r+0x204>
  805294:	d8c01617 	ldw	r3,88(sp)
  805298:	1804c03a 	cmpne	r2,r3,zero
  80529c:	103f341e 	bne	r2,zero,804f70 <_strtod_r+0x228>
  8052a0:	d9001b17 	ldw	r4,108(sp)
  8052a4:	2004c03a 	cmpne	r2,r4,zero
  8052a8:	103f521e 	bne	r2,zero,804ff4 <_strtod_r+0x2ac>
  8052ac:	00801384 	movi	r2,78
  8052b0:	8883b526 	beq	r17,r2,806188 <_strtod_r+0x1440>
  8052b4:	1443b016 	blt	r2,r17,806178 <_strtod_r+0x1430>
  8052b8:	00801244 	movi	r2,73
  8052bc:	88bf4d1e 	bne	r17,r2,804ff4 <_strtod_r+0x2ac>
  8052c0:	dc000404 	addi	r16,sp,16
  8052c4:	8009883a 	mov	r4,r16
  8052c8:	01402074 	movhi	r5,129
  8052cc:	294d4704 	addi	r5,r5,13596
  8052d0:	0804d000 	call	804d00 <match>
  8052d4:	103f4726 	beq	r2,zero,804ff4 <_strtod_r+0x2ac>
  8052d8:	d8800417 	ldw	r2,16(sp)
  8052dc:	8009883a 	mov	r4,r16
  8052e0:	01402074 	movhi	r5,129
  8052e4:	294d4804 	addi	r5,r5,13600
  8052e8:	143fffc4 	addi	r16,r2,-1
  8052ec:	dc000415 	stw	r16,16(sp)
  8052f0:	0804d000 	call	804d00 <match>
  8052f4:	1000031e 	bne	r2,zero,805304 <_strtod_r+0x5bc>
  8052f8:	d8800417 	ldw	r2,16(sp)
  8052fc:	14000044 	addi	r16,r2,1
  805300:	dc000415 	stw	r16,16(sp)
  805304:	019ffc34 	movhi	r6,32752
  805308:	e1800115 	stw	r6,4(fp)
  80530c:	e0000015 	stw	zero,0(fp)
  805310:	003f1706 	br	804f70 <_strtod_r+0x228>
  805314:	9829883a 	mov	r20,r19
  805318:	003f7e06 	br	805114 <_strtod_r+0x3cc>
  80531c:	d8001515 	stw	zero,84(sp)
  805320:	84000044 	addi	r16,r16,1
  805324:	dc000415 	stw	r16,16(sp)
  805328:	80800007 	ldb	r2,0(r16)
  80532c:	103ed21e 	bne	r2,zero,804e78 <_strtod_r+0x130>
  805330:	d8001515 	stw	zero,84(sp)
  805334:	dd000415 	stw	r20,16(sp)
  805338:	003f0d06 	br	804f70 <_strtod_r+0x228>
  80533c:	84000044 	addi	r16,r16,1
  805340:	dc000415 	stw	r16,16(sp)
  805344:	003e9206 	br	804d90 <_strtod_r+0x48>
  805348:	00800044 	movi	r2,1
  80534c:	d8801515 	stw	r2,84(sp)
  805350:	003ff306 	br	805320 <_strtod_r+0x5d8>
  805354:	d8001915 	stw	zero,100(sp)
  805358:	84000044 	addi	r16,r16,1
  80535c:	dc000415 	stw	r16,16(sp)
  805360:	24400047 	ldb	r17,1(r4)
  805364:	00800244 	movi	r2,9
  805368:	88fff404 	addi	r3,r17,-48
  80536c:	10ff352e 	bgeu	r2,r3,805044 <_strtod_r+0x2fc>
  805370:	0009883a 	mov	r4,zero
  805374:	dd000415 	stw	r20,16(sp)
  805378:	003efb06 	br	804f68 <_strtod_r+0x220>
  80537c:	d8c01517 	ldw	r3,84(sp)
  805380:	04402074 	movhi	r17,129
  805384:	8c50d404 	addi	r17,r17,17232
  805388:	d8800504 	addi	r2,sp,20
  80538c:	a809883a 	mov	r4,r21
  805390:	d9400404 	addi	r5,sp,16
  805394:	880d883a 	mov	r6,r17
  805398:	d9c00604 	addi	r7,sp,24
  80539c:	d8800015 	stw	r2,0(sp)
  8053a0:	d8c00115 	stw	r3,4(sp)
  8053a4:	080a69c0 	call	80a69c <__gethex>
  8053a8:	140001cc 	andi	r16,r2,7
  8053ac:	1025883a 	mov	r18,r2
  8053b0:	803eef26 	beq	r16,zero,804f70 <_strtod_r+0x228>
  8053b4:	04c00184 	movi	r19,6
  8053b8:	84ff0e26 	beq	r16,r19,804ff4 <_strtod_r+0x2ac>
  8053bc:	d9800517 	ldw	r6,20(sp)
  8053c0:	30000626 	beq	r6,zero,8053dc <_strtod_r+0x694>
  8053c4:	89400017 	ldw	r5,0(r17)
  8053c8:	d9000d04 	addi	r4,sp,52
  8053cc:	080b9dc0 	call	80b9dc <__copybits>
  8053d0:	d9400517 	ldw	r5,20(sp)
  8053d4:	a809883a 	mov	r4,r21
  8053d8:	080b53c0 	call	80b53c <_Bfree>
  8053dc:	d9400617 	ldw	r5,24(sp)
  8053e0:	9c025436 	bltu	r19,r16,805d34 <_strtod_r+0xfec>
  8053e4:	8405883a 	add	r2,r16,r16
  8053e8:	1085883a 	add	r2,r2,r2
  8053ec:	00c02034 	movhi	r3,128
  8053f0:	18d50004 	addi	r3,r3,21504
  8053f4:	10c5883a 	add	r2,r2,r3
  8053f8:	11000017 	ldw	r4,0(r2)
  8053fc:	2000683a 	jmp	r4
  805400:	00805d74 	movhi	r2,373
  805404:	00805d80 	call	805d8 <__reset-0x77fa28>
  805408:	00805d24 	muli	r2,zero,372
  80540c:	00805d4c 	andi	r2,zero,373
  805410:	00805d5c 	xori	r2,zero,373
  805414:	00805d80 	call	805d8 <__reset-0x77fa28>
  805418:	00805d74 	movhi	r2,373
  80541c:	d9001817 	ldw	r4,96(sp)
  805420:	d8c00f17 	ldw	r3,60(sp)
  805424:	2485c83a 	sub	r2,r4,r18
  805428:	18a1883a 	add	r16,r3,r2
  80542c:	0402e80e 	bge	zero,r16,805fd0 <_strtod_r+0x1288>
  805430:	814003cc 	andi	r5,r16,15
  805434:	28000f26 	beq	r5,zero,805474 <_strtod_r+0x72c>
  805438:	280a90fa 	slli	r5,r5,3
  80543c:	01002074 	movhi	r4,129
  805440:	210e3004 	addi	r4,r4,14528
  805444:	e0800017 	ldw	r2,0(fp)
  805448:	290b883a 	add	r5,r5,r4
  80544c:	2a000017 	ldw	r8,0(r5)
  805450:	e0c00117 	ldw	r3,4(fp)
  805454:	2a400117 	ldw	r9,4(r5)
  805458:	1009883a 	mov	r4,r2
  80545c:	180b883a 	mov	r5,r3
  805460:	480f883a 	mov	r7,r9
  805464:	400d883a 	mov	r6,r8
  805468:	0801d8c0 	call	801d8c <__muldf3>
  80546c:	e0c00115 	stw	r3,4(fp)
  805470:	e0800015 	stw	r2,0(fp)
  805474:	00bffc04 	movi	r2,-16
  805478:	808c703a 	and	r6,r16,r2
  80547c:	30006726 	beq	r6,zero,80561c <_strtod_r+0x8d4>
  805480:	00804d04 	movi	r2,308
  805484:	11820f16 	blt	r2,r6,805cc4 <_strtod_r+0xf7c>
  805488:	3021d13a 	srai	r16,r6,4
  80548c:	00800044 	movi	r2,1
  805490:	14037f0e 	bge	r2,r16,806290 <_strtod_r+0x1548>
  805494:	05802074 	movhi	r22,129
  805498:	b58e6204 	addi	r22,r22,14728
  80549c:	1027883a 	mov	r19,r2
  8054a0:	0025883a 	mov	r18,zero
  8054a4:	b023883a 	mov	r17,r22
  8054a8:	8080004c 	andi	r2,r16,1
  8054ac:	1005003a 	cmpeq	r2,r2,zero
  8054b0:	1000091e 	bne	r2,zero,8054d8 <_strtod_r+0x790>
  8054b4:	e0800017 	ldw	r2,0(fp)
  8054b8:	e0c00117 	ldw	r3,4(fp)
  8054bc:	89800017 	ldw	r6,0(r17)
  8054c0:	89c00117 	ldw	r7,4(r17)
  8054c4:	180b883a 	mov	r5,r3
  8054c8:	1009883a 	mov	r4,r2
  8054cc:	0801d8c0 	call	801d8c <__muldf3>
  8054d0:	e0c00115 	stw	r3,4(fp)
  8054d4:	e0800015 	stw	r2,0(fp)
  8054d8:	8021d07a 	srai	r16,r16,1
  8054dc:	94800044 	addi	r18,r18,1
  8054e0:	8c400204 	addi	r17,r17,8
  8054e4:	9c3ff016 	blt	r19,r16,8054a8 <_strtod_r+0x760>
  8054e8:	900e90fa 	slli	r7,r18,3
  8054ec:	e2000117 	ldw	r8,4(fp)
  8054f0:	e1000017 	ldw	r4,0(fp)
  8054f4:	3d8f883a 	add	r7,r7,r22
  8054f8:	38800017 	ldw	r2,0(r7)
  8054fc:	38c00117 	ldw	r3,4(r7)
  805500:	01bf2c34 	movhi	r6,64688
  805504:	418d883a 	add	r6,r8,r6
  805508:	300b883a 	mov	r5,r6
  80550c:	180f883a 	mov	r7,r3
  805510:	100d883a 	mov	r6,r2
  805514:	0801d8c0 	call	801d8c <__muldf3>
  805518:	1009883a 	mov	r4,r2
  80551c:	180b883a 	mov	r5,r3
  805520:	199ffc2c 	andhi	r6,r3,32752
  805524:	009f2834 	movhi	r2,31904
  805528:	e1000015 	stw	r4,0(fp)
  80552c:	e1400115 	stw	r5,4(fp)
  805530:	1181e436 	bltu	r2,r6,805cc4 <_strtod_r+0xf7c>
  805534:	009f2434 	movhi	r2,31888
  805538:	11833f2e 	bgeu	r2,r6,806238 <_strtod_r+0x14f0>
  80553c:	d8001c15 	stw	zero,112(sp)
  805540:	019ffc34 	movhi	r6,32752
  805544:	31bfffc4 	addi	r6,r6,-1
  805548:	01ffffc4 	movi	r7,-1
  80554c:	e1800115 	stw	r6,4(fp)
  805550:	e1c00015 	stw	r7,0(fp)
  805554:	00003206 	br	805620 <_strtod_r+0x8d8>
  805558:	00800c04 	movi	r2,48
  80555c:	8883221e 	bne	r17,r2,8061e8 <_strtod_r+0x14a0>
  805560:	8805883a 	mov	r2,r17
  805564:	000d883a 	mov	r6,zero
  805568:	84000044 	addi	r16,r16,1
  80556c:	dc000415 	stw	r16,16(sp)
  805570:	84400007 	ldb	r17,0(r16)
  805574:	31800044 	addi	r6,r6,1
  805578:	88bffb26 	beq	r17,r2,805568 <_strtod_r+0x820>
  80557c:	88fff3c4 	addi	r3,r17,-49
  805580:	00800204 	movi	r2,8
  805584:	10c1ca36 	bltu	r2,r3,805cb0 <_strtod_r+0xf68>
  805588:	d8c00417 	ldw	r3,16(sp)
  80558c:	d9801715 	stw	r6,92(sp)
  805590:	8dbff404 	addi	r22,r17,-48
  805594:	d8c01415 	stw	r3,80(sp)
  805598:	1821883a 	mov	r16,r3
  80559c:	d8001815 	stw	zero,96(sp)
  8055a0:	01800044 	movi	r6,1
  8055a4:	b0023526 	beq	r22,zero,805e7c <_strtod_r+0x1134>
  8055a8:	d9001717 	ldw	r4,92(sp)
  8055ac:	00800044 	movi	r2,1
  8055b0:	2189883a 	add	r4,r4,r6
  8055b4:	d9001715 	stw	r4,92(sp)
  8055b8:	1183390e 	bge	r2,r6,8062a0 <_strtod_r+0x1558>
  8055bc:	dc401817 	ldw	r17,96(sp)
  8055c0:	1025883a 	mov	r18,r2
  8055c4:	05c00204 	movi	r23,8
  8055c8:	00000806 	br	8055ec <_strtod_r+0x8a4>
  8055cc:	d9001217 	ldw	r4,72(sp)
  8055d0:	01400284 	movi	r5,10
  8055d4:	d9802015 	stw	r6,128(sp)
  8055d8:	0802a640 	call	802a64 <__mulsi3>
  8055dc:	d9802017 	ldw	r6,128(sp)
  8055e0:	d8801215 	stw	r2,72(sp)
  8055e4:	94800044 	addi	r18,r18,1
  8055e8:	91821726 	beq	r18,r6,805e48 <_strtod_r+0x1100>
  8055ec:	8c400044 	addi	r17,r17,1
  8055f0:	88bfffc4 	addi	r2,r17,-1
  8055f4:	b8bff50e 	bge	r23,r2,8055cc <_strtod_r+0x884>
  8055f8:	00800404 	movi	r2,16
  8055fc:	147ff916 	blt	r2,r17,8055e4 <_strtod_r+0x89c>
  805600:	d9001117 	ldw	r4,68(sp)
  805604:	01400284 	movi	r5,10
  805608:	d9802015 	stw	r6,128(sp)
  80560c:	0802a640 	call	802a64 <__mulsi3>
  805610:	d9802017 	ldw	r6,128(sp)
  805614:	d8801115 	stw	r2,68(sp)
  805618:	003ff206 	br	8055e4 <_strtod_r+0x89c>
  80561c:	d8001c15 	stw	zero,112(sp)
  805620:	d8c01217 	ldw	r3,72(sp)
  805624:	d9401417 	ldw	r5,80(sp)
  805628:	d9c01817 	ldw	r7,96(sp)
  80562c:	a809883a 	mov	r4,r21
  805630:	a00d883a 	mov	r6,r20
  805634:	d8c00015 	stw	r3,0(sp)
  805638:	080c4a80 	call	80c4a8 <__s2b>
  80563c:	11000304 	addi	r4,r2,12
  805640:	d8801015 	stw	r2,64(sp)
  805644:	d8800f17 	ldw	r2,60(sp)
  805648:	d9001f15 	stw	r4,124(sp)
  80564c:	1004803a 	cmplt	r2,r2,zero
  805650:	d8801e15 	stw	r2,120(sp)
  805654:	d8c01017 	ldw	r3,64(sp)
  805658:	a809883a 	mov	r4,r21
  80565c:	19400117 	ldw	r5,4(r3)
  805660:	080babc0 	call	80babc <_Balloc>
  805664:	d9001017 	ldw	r4,64(sp)
  805668:	d9401f17 	ldw	r5,124(sp)
  80566c:	102f883a 	mov	r23,r2
  805670:	21800417 	ldw	r6,16(r4)
  805674:	11000304 	addi	r4,r2,12
  805678:	318d883a 	add	r6,r6,r6
  80567c:	318d883a 	add	r6,r6,r6
  805680:	31800204 	addi	r6,r6,8
  805684:	080b3bc0 	call	80b3bc <memcpy>
  805688:	e2000017 	ldw	r8,0(fp)
  80568c:	e2400117 	ldw	r9,4(fp)
  805690:	a809883a 	mov	r4,r21
  805694:	400b883a 	mov	r5,r8
  805698:	d9c00204 	addi	r7,sp,8
  80569c:	d8800304 	addi	r2,sp,12
  8056a0:	480d883a 	mov	r6,r9
  8056a4:	d8800015 	stw	r2,0(sp)
  8056a8:	080bb780 	call	80bb78 <__d2b>
  8056ac:	a809883a 	mov	r4,r21
  8056b0:	01400044 	movi	r5,1
  8056b4:	d8800515 	stw	r2,20(sp)
  8056b8:	080c2200 	call	80c220 <__i2b>
  8056bc:	d8c01e17 	ldw	r3,120(sp)
  8056c0:	102d883a 	mov	r22,r2
  8056c4:	1801091e 	bne	r3,zero,805aec <_strtod_r+0xda4>
  8056c8:	dd000f17 	ldw	r20,60(sp)
  8056cc:	000f883a 	mov	r7,zero
  8056d0:	0013883a 	mov	r9,zero
  8056d4:	a011883a 	mov	r8,r20
  8056d8:	d8800217 	ldw	r2,8(sp)
  8056dc:	10010116 	blt	r2,zero,805ae4 <_strtod_r+0xd9c>
  8056e0:	388f883a 	add	r7,r7,r2
  8056e4:	d8c01c17 	ldw	r3,112(sp)
  8056e8:	d9400317 	ldw	r5,12(sp)
  8056ec:	10c9c83a 	sub	r4,r2,r3
  8056f0:	2145883a 	add	r2,r4,r5
  8056f4:	10bfffc4 	addi	r2,r2,-1
  8056f8:	00ff0084 	movi	r3,-1022
  8056fc:	10c09f0e 	bge	r2,r3,80597c <_strtod_r+0xc34>
  805700:	21810cc4 	addi	r6,r4,1075
  805704:	d9001c17 	ldw	r4,112(sp)
  805708:	4185883a 	add	r2,r8,r6
  80570c:	39a1883a 	add	r16,r7,r6
  805710:	20a5883a 	add	r18,r4,r2
  805714:	3807883a 	mov	r3,r7
  805718:	81c0010e 	bge	r16,r7,805720 <_strtod_r+0x9d8>
  80571c:	8007883a 	mov	r3,r16
  805720:	9005883a 	mov	r2,r18
  805724:	1c80010e 	bge	r3,r18,80572c <_strtod_r+0x9e4>
  805728:	1805883a 	mov	r2,r3
  80572c:	0080eb0e 	bge	zero,r2,805adc <_strtod_r+0xd94>
  805730:	38a7c83a 	sub	r19,r7,r2
  805734:	80a1c83a 	sub	r16,r16,r2
  805738:	90a5c83a 	sub	r18,r18,r2
  80573c:	02400e0e 	bge	zero,r9,805778 <_strtod_r+0xa30>
  805740:	480d883a 	mov	r6,r9
  805744:	b00b883a 	mov	r5,r22
  805748:	a809883a 	mov	r4,r21
  80574c:	080c3880 	call	80c388 <__pow5mult>
  805750:	d9800517 	ldw	r6,20(sp)
  805754:	a809883a 	mov	r4,r21
  805758:	100b883a 	mov	r5,r2
  80575c:	102d883a 	mov	r22,r2
  805760:	080bfcc0 	call	80bfcc <__multiply>
  805764:	d9400517 	ldw	r5,20(sp)
  805768:	1023883a 	mov	r17,r2
  80576c:	a809883a 	mov	r4,r21
  805770:	080b53c0 	call	80b53c <_Bfree>
  805774:	dc400515 	stw	r17,20(sp)
  805778:	0400050e 	bge	zero,r16,805790 <_strtod_r+0xa48>
  80577c:	d9400517 	ldw	r5,20(sp)
  805780:	800d883a 	mov	r6,r16
  805784:	a809883a 	mov	r4,r21
  805788:	080be800 	call	80be80 <__lshift>
  80578c:	d8800515 	stw	r2,20(sp)
  805790:	a000741e 	bne	r20,zero,805964 <_strtod_r+0xc1c>
  805794:	0480050e 	bge	zero,r18,8057ac <_strtod_r+0xa64>
  805798:	b80b883a 	mov	r5,r23
  80579c:	900d883a 	mov	r6,r18
  8057a0:	a809883a 	mov	r4,r21
  8057a4:	080be800 	call	80be80 <__lshift>
  8057a8:	102f883a 	mov	r23,r2
  8057ac:	04c0050e 	bge	zero,r19,8057c4 <_strtod_r+0xa7c>
  8057b0:	b00b883a 	mov	r5,r22
  8057b4:	980d883a 	mov	r6,r19
  8057b8:	a809883a 	mov	r4,r21
  8057bc:	080be800 	call	80be80 <__lshift>
  8057c0:	102d883a 	mov	r22,r2
  8057c4:	d9400517 	ldw	r5,20(sp)
  8057c8:	a809883a 	mov	r4,r21
  8057cc:	b80d883a 	mov	r6,r23
  8057d0:	080bcf40 	call	80bcf4 <__mdiff>
  8057d4:	1029883a 	mov	r20,r2
  8057d8:	10800317 	ldw	r2,12(r2)
  8057dc:	a009883a 	mov	r4,r20
  8057e0:	a0000315 	stw	zero,12(r20)
  8057e4:	b00b883a 	mov	r5,r22
  8057e8:	d8801a15 	stw	r2,104(sp)
  8057ec:	080b6980 	call	80b698 <__mcmp>
  8057f0:	1001a616 	blt	r2,zero,805e8c <_strtod_r+0x1144>
  8057f4:	10016d26 	beq	r2,zero,805dac <_strtod_r+0x1064>
  8057f8:	a009883a 	mov	r4,r20
  8057fc:	b00b883a 	mov	r5,r22
  805800:	080b8980 	call	80b898 <__ratio>
  805804:	0011883a 	mov	r8,zero
  805808:	02500034 	movhi	r9,16384
  80580c:	480f883a 	mov	r7,r9
  805810:	1009883a 	mov	r4,r2
  805814:	180b883a 	mov	r5,r3
  805818:	400d883a 	mov	r6,r8
  80581c:	1021883a 	mov	r16,r2
  805820:	1823883a 	mov	r17,r3
  805824:	080e2e00 	call	80e2e0 <__ledf2>
  805828:	00805716 	blt	zero,r2,805988 <_strtod_r+0xc40>
  80582c:	d8801a17 	ldw	r2,104(sp)
  805830:	1025003a 	cmpeq	r18,r2,zero
  805834:	90008c1e 	bne	r18,zero,805a68 <_strtod_r+0xd20>
  805838:	008ffc34 	movhi	r2,16368
  80583c:	0021883a 	mov	r16,zero
  805840:	1023883a 	mov	r17,r2
  805844:	d8000715 	stw	zero,28(sp)
  805848:	d8800815 	stw	r2,32(sp)
  80584c:	e1c00117 	ldw	r7,4(fp)
  805850:	009ff834 	movhi	r2,32736
  805854:	3cdffc2c 	andhi	r19,r7,32752
  805858:	98805f26 	beq	r19,r2,8059d8 <_strtod_r+0xc90>
  80585c:	d8c01c17 	ldw	r3,112(sp)
  805860:	18001b26 	beq	r3,zero,8058d0 <_strtod_r+0xb88>
  805864:	0081a834 	movhi	r2,1696
  805868:	14c01936 	bltu	r2,r19,8058d0 <_strtod_r+0xb88>
  80586c:	00bff034 	movhi	r2,65472
  805870:	00d07834 	movhi	r3,16864
  805874:	18ffffc4 	addi	r3,r3,-1
  805878:	180f883a 	mov	r7,r3
  80587c:	8009883a 	mov	r4,r16
  805880:	880b883a 	mov	r5,r17
  805884:	100d883a 	mov	r6,r2
  805888:	080e2e00 	call	80e2e0 <__ledf2>
  80588c:	00800b16 	blt	zero,r2,8058bc <_strtod_r+0xb74>
  805890:	880b883a 	mov	r5,r17
  805894:	8009883a 	mov	r4,r16
  805898:	080d1600 	call	80d160 <__fixunsdfsi>
  80589c:	1000e31e 	bne	r2,zero,805c2c <_strtod_r+0xee4>
  8058a0:	0021883a 	mov	r16,zero
  8058a4:	044ffc34 	movhi	r17,16368
  8058a8:	9000dd1e 	bne	r18,zero,805c20 <_strtod_r+0xed8>
  8058ac:	8005883a 	mov	r2,r16
  8058b0:	8807883a 	mov	r3,r17
  8058b4:	d8c00815 	stw	r3,32(sp)
  8058b8:	d8800715 	stw	r2,28(sp)
  8058bc:	d8800817 	ldw	r2,32(sp)
  8058c0:	00c1ac34 	movhi	r3,1712
  8058c4:	14c5c83a 	sub	r2,r2,r19
  8058c8:	10c5883a 	add	r2,r2,r3
  8058cc:	d8800815 	stw	r2,32(sp)
  8058d0:	e0800017 	ldw	r2,0(fp)
  8058d4:	e0c00117 	ldw	r3,4(fp)
  8058d8:	1009883a 	mov	r4,r2
  8058dc:	180b883a 	mov	r5,r3
  8058e0:	080b6f80 	call	80b6f8 <__ulp>
  8058e4:	d9800717 	ldw	r6,28(sp)
  8058e8:	d9c00817 	ldw	r7,32(sp)
  8058ec:	180b883a 	mov	r5,r3
  8058f0:	1009883a 	mov	r4,r2
  8058f4:	0801d8c0 	call	801d8c <__muldf3>
  8058f8:	e2000017 	ldw	r8,0(fp)
  8058fc:	e2400117 	ldw	r9,4(fp)
  805900:	180b883a 	mov	r5,r3
  805904:	1009883a 	mov	r4,r2
  805908:	480f883a 	mov	r7,r9
  80590c:	400d883a 	mov	r6,r8
  805910:	0801d180 	call	801d18 <__adddf3>
  805914:	e0c00115 	stw	r3,4(fp)
  805918:	e0800015 	stw	r2,0(fp)
  80591c:	d9001c17 	ldw	r4,112(sp)
  805920:	e4800117 	ldw	r18,4(fp)
  805924:	2000021e 	bne	r4,zero,805930 <_strtod_r+0xbe8>
  805928:	909ffc2c 	andhi	r2,r18,32752
  80592c:	98807f26 	beq	r19,r2,805b2c <_strtod_r+0xde4>
  805930:	d9400517 	ldw	r5,20(sp)
  805934:	a809883a 	mov	r4,r21
  805938:	080b53c0 	call	80b53c <_Bfree>
  80593c:	a809883a 	mov	r4,r21
  805940:	b80b883a 	mov	r5,r23
  805944:	080b53c0 	call	80b53c <_Bfree>
  805948:	a809883a 	mov	r4,r21
  80594c:	b00b883a 	mov	r5,r22
  805950:	080b53c0 	call	80b53c <_Bfree>
  805954:	a809883a 	mov	r4,r21
  805958:	a00b883a 	mov	r5,r20
  80595c:	080b53c0 	call	80b53c <_Bfree>
  805960:	003f3c06 	br	805654 <_strtod_r+0x90c>
  805964:	b80b883a 	mov	r5,r23
  805968:	a00d883a 	mov	r6,r20
  80596c:	a809883a 	mov	r4,r21
  805970:	080c3880 	call	80c388 <__pow5mult>
  805974:	102f883a 	mov	r23,r2
  805978:	003f8606 	br	805794 <_strtod_r+0xa4c>
  80597c:	00800d84 	movi	r2,54
  805980:	114dc83a 	sub	r6,r2,r5
  805984:	003f5f06 	br	805704 <_strtod_r+0x9bc>
  805988:	0005883a 	mov	r2,zero
  80598c:	00cff834 	movhi	r3,16352
  805990:	8009883a 	mov	r4,r16
  805994:	880b883a 	mov	r5,r17
  805998:	180f883a 	mov	r7,r3
  80599c:	100d883a 	mov	r6,r2
  8059a0:	0801d8c0 	call	801d8c <__muldf3>
  8059a4:	1009883a 	mov	r4,r2
  8059a8:	d8801a17 	ldw	r2,104(sp)
  8059ac:	2021883a 	mov	r16,r4
  8059b0:	1823883a 	mov	r17,r3
  8059b4:	1025003a 	cmpeq	r18,r2,zero
  8059b8:	9000451e 	bne	r18,zero,805ad0 <_strtod_r+0xd88>
  8059bc:	2005883a 	mov	r2,r4
  8059c0:	d8800715 	stw	r2,28(sp)
  8059c4:	d8c00815 	stw	r3,32(sp)
  8059c8:	e1c00117 	ldw	r7,4(fp)
  8059cc:	009ff834 	movhi	r2,32736
  8059d0:	3cdffc2c 	andhi	r19,r7,32752
  8059d4:	98bfa11e 	bne	r19,r2,80585c <_strtod_r+0xb14>
  8059d8:	e1000017 	ldw	r4,0(fp)
  8059dc:	01bf2c34 	movhi	r6,64688
  8059e0:	398d883a 	add	r6,r7,r6
  8059e4:	d9000b15 	stw	r4,44(sp)
  8059e8:	d9c00c15 	stw	r7,48(sp)
  8059ec:	300b883a 	mov	r5,r6
  8059f0:	e1800115 	stw	r6,4(fp)
  8059f4:	080b6f80 	call	80b6f8 <__ulp>
  8059f8:	d9800717 	ldw	r6,28(sp)
  8059fc:	d9c00817 	ldw	r7,32(sp)
  805a00:	180b883a 	mov	r5,r3
  805a04:	1009883a 	mov	r4,r2
  805a08:	0801d8c0 	call	801d8c <__muldf3>
  805a0c:	e2000017 	ldw	r8,0(fp)
  805a10:	e2400117 	ldw	r9,4(fp)
  805a14:	180b883a 	mov	r5,r3
  805a18:	1009883a 	mov	r4,r2
  805a1c:	480f883a 	mov	r7,r9
  805a20:	400d883a 	mov	r6,r8
  805a24:	0801d180 	call	801d18 <__adddf3>
  805a28:	1009883a 	mov	r4,r2
  805a2c:	180b883a 	mov	r5,r3
  805a30:	009f2834 	movhi	r2,31904
  805a34:	10bfffc4 	addi	r2,r2,-1
  805a38:	18dffc2c 	andhi	r3,r3,32752
  805a3c:	e1000015 	stw	r4,0(fp)
  805a40:	e1400115 	stw	r5,4(fp)
  805a44:	10c0722e 	bgeu	r2,r3,805c10 <_strtod_r+0xec8>
  805a48:	d8800c17 	ldw	r2,48(sp)
  805a4c:	011ffc34 	movhi	r4,32752
  805a50:	213fffc4 	addi	r4,r4,-1
  805a54:	11007d26 	beq	r2,r4,805c4c <_strtod_r+0xf04>
  805a58:	01ffffc4 	movi	r7,-1
  805a5c:	e1000115 	stw	r4,4(fp)
  805a60:	e1c00015 	stw	r7,0(fp)
  805a64:	003fb206 	br	805930 <_strtod_r+0xbe8>
  805a68:	e0c00017 	ldw	r3,0(fp)
  805a6c:	1800251e 	bne	r3,zero,805b04 <_strtod_r+0xdbc>
  805a70:	e0800117 	ldw	r2,4(fp)
  805a74:	00c00434 	movhi	r3,16
  805a78:	18ffffc4 	addi	r3,r3,-1
  805a7c:	10c4703a 	and	r2,r2,r3
  805a80:	1000241e 	bne	r2,zero,805b14 <_strtod_r+0xdcc>
  805a84:	0005883a 	mov	r2,zero
  805a88:	00cffc34 	movhi	r3,16368
  805a8c:	180f883a 	mov	r7,r3
  805a90:	8009883a 	mov	r4,r16
  805a94:	880b883a 	mov	r5,r17
  805a98:	100d883a 	mov	r6,r2
  805a9c:	080e2580 	call	80e258 <__ltdf2>
  805aa0:	10014616 	blt	r2,zero,805fbc <_strtod_r+0x1274>
  805aa4:	0005883a 	mov	r2,zero
  805aa8:	00cff834 	movhi	r3,16352
  805aac:	880b883a 	mov	r5,r17
  805ab0:	8009883a 	mov	r4,r16
  805ab4:	180f883a 	mov	r7,r3
  805ab8:	100d883a 	mov	r6,r2
  805abc:	0801d8c0 	call	801d8c <__muldf3>
  805ac0:	1823883a 	mov	r17,r3
  805ac4:	1021883a 	mov	r16,r2
  805ac8:	18e0003c 	xorhi	r3,r3,32768
  805acc:	003fbc06 	br	8059c0 <_strtod_r+0xc78>
  805ad0:	2005883a 	mov	r2,r4
  805ad4:	18e0003c 	xorhi	r3,r3,32768
  805ad8:	003fb906 	br	8059c0 <_strtod_r+0xc78>
  805adc:	3827883a 	mov	r19,r7
  805ae0:	003f1606 	br	80573c <_strtod_r+0x9f4>
  805ae4:	4091c83a 	sub	r8,r8,r2
  805ae8:	003efe06 	br	8056e4 <_strtod_r+0x99c>
  805aec:	d9000f17 	ldw	r4,60(sp)
  805af0:	0011883a 	mov	r8,zero
  805af4:	0029883a 	mov	r20,zero
  805af8:	0113c83a 	sub	r9,zero,r4
  805afc:	480f883a 	mov	r7,r9
  805b00:	003ef506 	br	8056d8 <_strtod_r+0x990>
  805b04:	00800044 	movi	r2,1
  805b08:	1880021e 	bne	r3,r2,805b14 <_strtod_r+0xdcc>
  805b0c:	e0800117 	ldw	r2,4(fp)
  805b10:	1000c526 	beq	r2,zero,805e28 <_strtod_r+0x10e0>
  805b14:	00affc34 	movhi	r2,49136
  805b18:	0021883a 	mov	r16,zero
  805b1c:	044ffc34 	movhi	r17,16368
  805b20:	d8800815 	stw	r2,32(sp)
  805b24:	d8000715 	stw	zero,28(sp)
  805b28:	003f4806 	br	80584c <_strtod_r+0xb04>
  805b2c:	880b883a 	mov	r5,r17
  805b30:	8009883a 	mov	r4,r16
  805b34:	080e4600 	call	80e460 <__fixdfsi>
  805b38:	1009883a 	mov	r4,r2
  805b3c:	080e3680 	call	80e368 <__floatsidf>
  805b40:	880b883a 	mov	r5,r17
  805b44:	8009883a 	mov	r4,r16
  805b48:	100d883a 	mov	r6,r2
  805b4c:	180f883a 	mov	r7,r3
  805b50:	0801c980 	call	801c98 <__subdf3>
  805b54:	100b883a 	mov	r5,r2
  805b58:	1021883a 	mov	r16,r2
  805b5c:	d8801a17 	ldw	r2,104(sp)
  805b60:	180d883a 	mov	r6,r3
  805b64:	1823883a 	mov	r17,r3
  805b68:	1000061e 	bne	r2,zero,805b84 <_strtod_r+0xe3c>
  805b6c:	e0800017 	ldw	r2,0(fp)
  805b70:	1000041e 	bne	r2,zero,805b84 <_strtod_r+0xe3c>
  805b74:	00c00434 	movhi	r3,16
  805b78:	18ffffc4 	addi	r3,r3,-1
  805b7c:	90c4703a 	and	r2,r18,r3
  805b80:	10004026 	beq	r2,zero,805c84 <_strtod_r+0xf3c>
  805b84:	00a52834 	movhi	r2,38048
  805b88:	108d6544 	addi	r2,r2,13717
  805b8c:	00cff834 	movhi	r3,16352
  805b90:	18ffffc4 	addi	r3,r3,-1
  805b94:	180f883a 	mov	r7,r3
  805b98:	8009883a 	mov	r4,r16
  805b9c:	880b883a 	mov	r5,r17
  805ba0:	100d883a 	mov	r6,r2
  805ba4:	080e2580 	call	80e258 <__ltdf2>
  805ba8:	10000916 	blt	r2,zero,805bd0 <_strtod_r+0xe88>
  805bac:	008d6c34 	movhi	r2,13744
  805bb0:	10b94d44 	addi	r2,r2,-6859
  805bb4:	00cff834 	movhi	r3,16352
  805bb8:	880b883a 	mov	r5,r17
  805bbc:	180f883a 	mov	r7,r3
  805bc0:	8009883a 	mov	r4,r16
  805bc4:	100d883a 	mov	r6,r2
  805bc8:	080e1480 	call	80e148 <__gtdf2>
  805bcc:	00bf580e 	bge	zero,r2,805930 <_strtod_r+0xbe8>
  805bd0:	d9400517 	ldw	r5,20(sp)
  805bd4:	a809883a 	mov	r4,r21
  805bd8:	080b53c0 	call	80b53c <_Bfree>
  805bdc:	a809883a 	mov	r4,r21
  805be0:	b80b883a 	mov	r5,r23
  805be4:	080b53c0 	call	80b53c <_Bfree>
  805be8:	a809883a 	mov	r4,r21
  805bec:	b00b883a 	mov	r5,r22
  805bf0:	080b53c0 	call	80b53c <_Bfree>
  805bf4:	d9401017 	ldw	r5,64(sp)
  805bf8:	a809883a 	mov	r4,r21
  805bfc:	080b53c0 	call	80b53c <_Bfree>
  805c00:	a809883a 	mov	r4,r21
  805c04:	a00b883a 	mov	r5,r20
  805c08:	080b53c0 	call	80b53c <_Bfree>
  805c0c:	003cd806 	br	804f70 <_strtod_r+0x228>
  805c10:	0080d434 	movhi	r2,848
  805c14:	288d883a 	add	r6,r5,r2
  805c18:	e1800115 	stw	r6,4(fp)
  805c1c:	003f3f06 	br	80591c <_strtod_r+0xbd4>
  805c20:	8005883a 	mov	r2,r16
  805c24:	88e0003c 	xorhi	r3,r17,32768
  805c28:	003f2206 	br	8058b4 <_strtod_r+0xb6c>
  805c2c:	1009883a 	mov	r4,r2
  805c30:	080e5ac0 	call	80e5ac <__floatunsidf>
  805c34:	1021883a 	mov	r16,r2
  805c38:	1823883a 	mov	r17,r3
  805c3c:	003f1a06 	br	8058a8 <_strtod_r+0xb60>
  805c40:	dc000417 	ldw	r16,16(sp)
  805c44:	31800044 	addi	r6,r6,1
  805c48:	003e5606 	br	8055a4 <_strtod_r+0x85c>
  805c4c:	d8c00b17 	ldw	r3,44(sp)
  805c50:	00bfffc4 	movi	r2,-1
  805c54:	18bf801e 	bne	r3,r2,805a58 <_strtod_r+0xd10>
  805c58:	00c00884 	movi	r3,34
  805c5c:	a8c00015 	stw	r3,0(r21)
  805c60:	009ffc34 	movhi	r2,32752
  805c64:	e0800115 	stw	r2,4(fp)
  805c68:	e0000015 	stw	zero,0(fp)
  805c6c:	003fd806 	br	805bd0 <_strtod_r+0xe88>
  805c70:	8025883a 	mov	r18,r16
  805c74:	0027883a 	mov	r19,zero
  805c78:	d8001215 	stw	zero,72(sp)
  805c7c:	d8001115 	stw	zero,68(sp)
  805c80:	003cac06 	br	804f34 <_strtod_r+0x1ec>
  805c84:	00a52834 	movhi	r2,38048
  805c88:	108d6544 	addi	r2,r2,13717
  805c8c:	00cff434 	movhi	r3,16336
  805c90:	18ffffc4 	addi	r3,r3,-1
  805c94:	2809883a 	mov	r4,r5
  805c98:	180f883a 	mov	r7,r3
  805c9c:	300b883a 	mov	r5,r6
  805ca0:	100d883a 	mov	r6,r2
  805ca4:	080e2580 	call	80e258 <__ltdf2>
  805ca8:	103f210e 	bge	r2,zero,805930 <_strtod_r+0xbe8>
  805cac:	003fc806 	br	805bd0 <_strtod_r+0xe88>
  805cb0:	00800044 	movi	r2,1
  805cb4:	d8001815 	stw	zero,96(sp)
  805cb8:	d8801b15 	stw	r2,108(sp)
  805cbc:	d8001715 	stw	zero,92(sp)
  805cc0:	003ca206 	br	804f4c <_strtod_r+0x204>
  805cc4:	00800884 	movi	r2,34
  805cc8:	a8800015 	stw	r2,0(r21)
  805ccc:	019ffc34 	movhi	r6,32752
  805cd0:	e1800115 	stw	r6,4(fp)
  805cd4:	e0000015 	stw	zero,0(fp)
  805cd8:	003ca506 	br	804f70 <_strtod_r+0x228>
  805cdc:	011387c4 	movi	r4,19999
  805ce0:	003d0206 	br	8050ec <_strtod_r+0x3a4>
  805ce4:	180a90fa 	slli	r5,r3,3
  805ce8:	e0800017 	ldw	r2,0(fp)
  805cec:	e0c00117 	ldw	r3,4(fp)
  805cf0:	01002074 	movhi	r4,129
  805cf4:	210e3004 	addi	r4,r4,14528
  805cf8:	290b883a 	add	r5,r5,r4
  805cfc:	2a000017 	ldw	r8,0(r5)
  805d00:	2a400117 	ldw	r9,4(r5)
  805d04:	1009883a 	mov	r4,r2
  805d08:	180b883a 	mov	r5,r3
  805d0c:	480f883a 	mov	r7,r9
  805d10:	400d883a 	mov	r6,r8
  805d14:	0801d8c0 	call	801d8c <__muldf3>
  805d18:	e0c00115 	stw	r3,4(fp)
  805d1c:	e0800015 	stw	r2,0(fp)
  805d20:	003c9306 	br	804f70 <_strtod_r+0x228>
  805d24:	d8800d17 	ldw	r2,52(sp)
  805d28:	e0800015 	stw	r2,0(fp)
  805d2c:	d8c00e17 	ldw	r3,56(sp)
  805d30:	e0c00115 	stw	r3,4(fp)
  805d34:	9080020c 	andi	r2,r18,8
  805d38:	103c8d26 	beq	r2,zero,804f70 <_strtod_r+0x228>
  805d3c:	e0800117 	ldw	r2,4(fp)
  805d40:	10a00034 	orhi	r2,r2,32768
  805d44:	e0800115 	stw	r2,4(fp)
  805d48:	003c8906 	br	804f70 <_strtod_r+0x228>
  805d4c:	009ffc34 	movhi	r2,32752
  805d50:	e0800115 	stw	r2,4(fp)
  805d54:	e0000015 	stw	zero,0(fp)
  805d58:	003ff606 	br	805d34 <_strtod_r+0xfec>
  805d5c:	00a00034 	movhi	r2,32768
  805d60:	10bfffc4 	addi	r2,r2,-1
  805d64:	00ffffc4 	movi	r3,-1
  805d68:	e0800115 	stw	r2,4(fp)
  805d6c:	e0c00015 	stw	r3,0(fp)
  805d70:	003ff006 	br	805d34 <_strtod_r+0xfec>
  805d74:	e0000115 	stw	zero,4(fp)
  805d78:	e0000015 	stw	zero,0(fp)
  805d7c:	003fed06 	br	805d34 <_strtod_r+0xfec>
  805d80:	d8800e17 	ldw	r2,56(sp)
  805d84:	29010cc4 	addi	r4,r5,1075
  805d88:	00fffc34 	movhi	r3,65520
  805d8c:	18ffffc4 	addi	r3,r3,-1
  805d90:	2008953a 	slli	r4,r4,20
  805d94:	10c4703a 	and	r2,r2,r3
  805d98:	d8c00d17 	ldw	r3,52(sp)
  805d9c:	1104b03a 	or	r2,r2,r4
  805da0:	e0800115 	stw	r2,4(fp)
  805da4:	e0c00015 	stw	r3,0(fp)
  805da8:	003fe206 	br	805d34 <_strtod_r+0xfec>
  805dac:	d8c01a17 	ldw	r3,104(sp)
  805db0:	1825003a 	cmpeq	r18,r3,zero
  805db4:	9000cf1e 	bne	r18,zero,8060f4 <_strtod_r+0x13ac>
  805db8:	e1400117 	ldw	r5,4(fp)
  805dbc:	01000434 	movhi	r4,16
  805dc0:	213fffc4 	addi	r4,r4,-1
  805dc4:	2904703a 	and	r2,r5,r4
  805dc8:	11006826 	beq	r2,r4,805f6c <_strtod_r+0x1224>
  805dcc:	e1c00017 	ldw	r7,0(fp)
  805dd0:	3880004c 	andi	r2,r7,1
  805dd4:	1005003a 	cmpeq	r2,r2,zero
  805dd8:	1000601e 	bne	r2,zero,805f5c <_strtod_r+0x1214>
  805ddc:	90010426 	beq	r18,zero,8061f0 <_strtod_r+0x14a8>
  805de0:	e4400117 	ldw	r17,4(fp)
  805de4:	3809883a 	mov	r4,r7
  805de8:	3821883a 	mov	r16,r7
  805dec:	880b883a 	mov	r5,r17
  805df0:	080b6f80 	call	80b6f8 <__ulp>
  805df4:	180f883a 	mov	r7,r3
  805df8:	880b883a 	mov	r5,r17
  805dfc:	8009883a 	mov	r4,r16
  805e00:	100d883a 	mov	r6,r2
  805e04:	0801c980 	call	801c98 <__subdf3>
  805e08:	1009883a 	mov	r4,r2
  805e0c:	000d883a 	mov	r6,zero
  805e10:	000f883a 	mov	r7,zero
  805e14:	180b883a 	mov	r5,r3
  805e18:	e0800015 	stw	r2,0(fp)
  805e1c:	e0c00115 	stw	r3,4(fp)
  805e20:	080e0c00 	call	80e0c0 <__nedf2>
  805e24:	10004d1e 	bne	r2,zero,805f5c <_strtod_r+0x1214>
  805e28:	00800884 	movi	r2,34
  805e2c:	a8800015 	stw	r2,0(r21)
  805e30:	e0000015 	stw	zero,0(fp)
  805e34:	e0000115 	stw	zero,4(fp)
  805e38:	003f6506 	br	805bd0 <_strtod_r+0xe88>
  805e3c:	00800044 	movi	r2,1
  805e40:	d8801915 	stw	r2,100(sp)
  805e44:	003d4406 	br	805358 <_strtod_r+0x610>
  805e48:	d8c01817 	ldw	r3,96(sp)
  805e4c:	1985883a 	add	r2,r3,r6
  805e50:	11ffffc4 	addi	r7,r2,-1
  805e54:	39000044 	addi	r4,r7,1
  805e58:	00800204 	movi	r2,8
  805e5c:	d9001815 	stw	r4,96(sp)
  805e60:	11c0d716 	blt	r2,r7,8061c0 <_strtod_r+0x1478>
  805e64:	d9001217 	ldw	r4,72(sp)
  805e68:	01400284 	movi	r5,10
  805e6c:	0802a640 	call	802a64 <__mulsi3>
  805e70:	1585883a 	add	r2,r2,r22
  805e74:	d8801215 	stw	r2,72(sp)
  805e78:	000d883a 	mov	r6,zero
  805e7c:	84000044 	addi	r16,r16,1
  805e80:	dc000415 	stw	r16,16(sp)
  805e84:	84400007 	ldb	r17,0(r16)
  805e88:	003cfc06 	br	80527c <_strtod_r+0x534>
  805e8c:	d8c01a17 	ldw	r3,104(sp)
  805e90:	1800321e 	bne	r3,zero,805f5c <_strtod_r+0x1214>
  805e94:	e0800017 	ldw	r2,0(fp)
  805e98:	1000b31e 	bne	r2,zero,806168 <_strtod_r+0x1420>
  805e9c:	e0c00117 	ldw	r3,4(fp)
  805ea0:	01000434 	movhi	r4,16
  805ea4:	213fffc4 	addi	r4,r4,-1
  805ea8:	1904703a 	and	r2,r3,r4
  805eac:	1000e71e 	bne	r2,zero,80624c <_strtod_r+0x1504>
  805eb0:	18dffc2c 	andhi	r3,r3,32752
  805eb4:	0081ac34 	movhi	r2,1712
  805eb8:	10c0282e 	bgeu	r2,r3,805f5c <_strtod_r+0x1214>
  805ebc:	a0800517 	ldw	r2,20(r20)
  805ec0:	1000031e 	bne	r2,zero,805ed0 <_strtod_r+0x1188>
  805ec4:	a0c00417 	ldw	r3,16(r20)
  805ec8:	00800044 	movi	r2,1
  805ecc:	10c0a60e 	bge	r2,r3,806168 <_strtod_r+0x1420>
  805ed0:	a00b883a 	mov	r5,r20
  805ed4:	a809883a 	mov	r4,r21
  805ed8:	01800044 	movi	r6,1
  805edc:	080be800 	call	80be80 <__lshift>
  805ee0:	1009883a 	mov	r4,r2
  805ee4:	b00b883a 	mov	r5,r22
  805ee8:	1029883a 	mov	r20,r2
  805eec:	080b6980 	call	80b698 <__mcmp>
  805ef0:	00809d0e 	bge	zero,r2,806168 <_strtod_r+0x1420>
  805ef4:	e1800117 	ldw	r6,4(fp)
  805ef8:	d9001c17 	ldw	r4,112(sp)
  805efc:	2013003a 	cmpeq	r9,r4,zero
  805f00:	4800d61e 	bne	r9,zero,80625c <_strtod_r+0x1514>
  805f04:	30dffc2c 	andhi	r3,r6,32752
  805f08:	0081ac34 	movhi	r2,1712
  805f0c:	10c0d336 	bltu	r2,r3,80625c <_strtod_r+0x1514>
  805f10:	0080dc34 	movhi	r2,880
  805f14:	10ffc42e 	bgeu	r2,r3,805e28 <_strtod_r+0x10e0>
  805f18:	e0800017 	ldw	r2,0(fp)
  805f1c:	e0c00117 	ldw	r3,4(fp)
  805f20:	020e5434 	movhi	r8,14672
  805f24:	000d883a 	mov	r6,zero
  805f28:	400f883a 	mov	r7,r8
  805f2c:	180b883a 	mov	r5,r3
  805f30:	1009883a 	mov	r4,r2
  805f34:	da000c15 	stw	r8,48(sp)
  805f38:	d8000b15 	stw	zero,44(sp)
  805f3c:	0801d8c0 	call	801d8c <__muldf3>
  805f40:	e0800015 	stw	r2,0(fp)
  805f44:	e0c00115 	stw	r3,4(fp)
  805f48:	183f211e 	bne	r3,zero,805bd0 <_strtod_r+0xe88>
  805f4c:	103f201e 	bne	r2,zero,805bd0 <_strtod_r+0xe88>
  805f50:	00800884 	movi	r2,34
  805f54:	a8800015 	stw	r2,0(r21)
  805f58:	003f1d06 	br	805bd0 <_strtod_r+0xe88>
  805f5c:	d9001c17 	ldw	r4,112(sp)
  805f60:	2013003a 	cmpeq	r9,r4,zero
  805f64:	483f1a1e 	bne	r9,zero,805bd0 <_strtod_r+0xe88>
  805f68:	003feb06 	br	805f18 <_strtod_r+0x11d0>
  805f6c:	d8801c17 	ldw	r2,112(sp)
  805f70:	e1c00017 	ldw	r7,0(fp)
  805f74:	1013003a 	cmpeq	r9,r2,zero
  805f78:	4800c31e 	bne	r9,zero,806288 <_strtod_r+0x1540>
  805f7c:	28dffc2c 	andhi	r3,r5,32752
  805f80:	0081a834 	movhi	r2,1696
  805f84:	10c0c036 	bltu	r2,r3,806288 <_strtod_r+0x1540>
  805f88:	1804d53a 	srli	r2,r3,20
  805f8c:	00c01ac4 	movi	r3,107
  805f90:	013fffc4 	movi	r4,-1
  805f94:	1887c83a 	sub	r3,r3,r2
  805f98:	20c4983a 	sll	r2,r4,r3
  805f9c:	11ff8c1e 	bne	r2,r7,805dd0 <_strtod_r+0x1088>
  805fa0:	28dffc2c 	andhi	r3,r5,32752
  805fa4:	00800434 	movhi	r2,16
  805fa8:	188d883a 	add	r6,r3,r2
  805fac:	e1800115 	stw	r6,4(fp)
  805fb0:	e0000015 	stw	zero,0(fp)
  805fb4:	483f061e 	bne	r9,zero,805bd0 <_strtod_r+0xe88>
  805fb8:	003fd706 	br	805f18 <_strtod_r+0x11d0>
  805fbc:	0021883a 	mov	r16,zero
  805fc0:	0005883a 	mov	r2,zero
  805fc4:	044ff834 	movhi	r17,16352
  805fc8:	00eff834 	movhi	r3,49120
  805fcc:	003e7c06 	br	8059c0 <_strtod_r+0xc78>
  805fd0:	803d9226 	beq	r16,zero,80561c <_strtod_r+0x8d4>
  805fd4:	0421c83a 	sub	r16,zero,r16
  805fd8:	814003cc 	andi	r5,r16,15
  805fdc:	28000f26 	beq	r5,zero,80601c <_strtod_r+0x12d4>
  805fe0:	280a90fa 	slli	r5,r5,3
  805fe4:	01002074 	movhi	r4,129
  805fe8:	210e3004 	addi	r4,r4,14528
  805fec:	e0800017 	ldw	r2,0(fp)
  805ff0:	290b883a 	add	r5,r5,r4
  805ff4:	2a000017 	ldw	r8,0(r5)
  805ff8:	e0c00117 	ldw	r3,4(fp)
  805ffc:	2a400117 	ldw	r9,4(r5)
  806000:	1009883a 	mov	r4,r2
  806004:	180b883a 	mov	r5,r3
  806008:	480f883a 	mov	r7,r9
  80600c:	400d883a 	mov	r6,r8
  806010:	08021500 	call	802150 <__divdf3>
  806014:	e0c00115 	stw	r3,4(fp)
  806018:	e0800015 	stw	r2,0(fp)
  80601c:	8021d13a 	srai	r16,r16,4
  806020:	803d7e26 	beq	r16,zero,80561c <_strtod_r+0x8d4>
  806024:	008007c4 	movi	r2,31
  806028:	14002d16 	blt	r2,r16,8060e0 <_strtod_r+0x1398>
  80602c:	8080040c 	andi	r2,r16,16
  806030:	10009d26 	beq	r2,zero,8062a8 <_strtod_r+0x1560>
  806034:	01001a84 	movi	r4,106
  806038:	d9001c15 	stw	r4,112(sp)
  80603c:	0400110e 	bge	zero,r16,806084 <_strtod_r+0x133c>
  806040:	04402074 	movhi	r17,129
  806044:	8c4d4b04 	addi	r17,r17,13612
  806048:	8080004c 	andi	r2,r16,1
  80604c:	1005003a 	cmpeq	r2,r2,zero
  806050:	1000091e 	bne	r2,zero,806078 <_strtod_r+0x1330>
  806054:	e0800017 	ldw	r2,0(fp)
  806058:	e0c00117 	ldw	r3,4(fp)
  80605c:	89800017 	ldw	r6,0(r17)
  806060:	89c00117 	ldw	r7,4(r17)
  806064:	180b883a 	mov	r5,r3
  806068:	1009883a 	mov	r4,r2
  80606c:	0801d8c0 	call	801d8c <__muldf3>
  806070:	e0c00115 	stw	r3,4(fp)
  806074:	e0800015 	stw	r2,0(fp)
  806078:	8021d07a 	srai	r16,r16,1
  80607c:	8c400204 	addi	r17,r17,8
  806080:	043ff116 	blt	zero,r16,806048 <_strtod_r+0x1300>
  806084:	d8801c17 	ldw	r2,112(sp)
  806088:	10000d26 	beq	r2,zero,8060c0 <_strtod_r+0x1378>
  80608c:	e1000117 	ldw	r4,4(fp)
  806090:	00c01ac4 	movi	r3,107
  806094:	209ffc2c 	andhi	r2,r4,32752
  806098:	1004d53a 	srli	r2,r2,20
  80609c:	1887c83a 	sub	r3,r3,r2
  8060a0:	00c0070e 	bge	zero,r3,8060c0 <_strtod_r+0x1378>
  8060a4:	008007c4 	movi	r2,31
  8060a8:	10c0940e 	bge	r2,r3,8062fc <_strtod_r+0x15b4>
  8060ac:	00800d04 	movi	r2,52
  8060b0:	e0000015 	stw	zero,0(fp)
  8060b4:	10c08b0e 	bge	r2,r3,8062e4 <_strtod_r+0x159c>
  8060b8:	0180dc34 	movhi	r6,880
  8060bc:	e1800115 	stw	r6,4(fp)
  8060c0:	e0800017 	ldw	r2,0(fp)
  8060c4:	e0c00117 	ldw	r3,4(fp)
  8060c8:	000d883a 	mov	r6,zero
  8060cc:	000f883a 	mov	r7,zero
  8060d0:	180b883a 	mov	r5,r3
  8060d4:	1009883a 	mov	r4,r2
  8060d8:	080e0c00 	call	80e0c0 <__nedf2>
  8060dc:	103d501e 	bne	r2,zero,805620 <_strtod_r+0x8d8>
  8060e0:	00800884 	movi	r2,34
  8060e4:	a8800015 	stw	r2,0(r21)
  8060e8:	e0000015 	stw	zero,0(fp)
  8060ec:	e0000115 	stw	zero,4(fp)
  8060f0:	003b9f06 	br	804f70 <_strtod_r+0x228>
  8060f4:	e1800117 	ldw	r6,4(fp)
  8060f8:	00c00434 	movhi	r3,16
  8060fc:	18ffffc4 	addi	r3,r3,-1
  806100:	30c4703a 	and	r2,r6,r3
  806104:	103f311e 	bne	r2,zero,805dcc <_strtod_r+0x1084>
  806108:	e1c00017 	ldw	r7,0(fp)
  80610c:	383f301e 	bne	r7,zero,805dd0 <_strtod_r+0x1088>
  806110:	003f7906 	br	805ef8 <_strtod_r+0x11b0>
  806114:	d8c00f17 	ldw	r3,60(sp)
  806118:	00bffa84 	movi	r2,-22
  80611c:	18bcbf16 	blt	r3,r2,80541c <_strtod_r+0x6d4>
  806120:	1809883a 	mov	r4,r3
  806124:	017ffe04 	movi	r5,-8
  806128:	0802a640 	call	802a64 <__mulsi3>
  80612c:	00c02074 	movhi	r3,129
  806130:	18ce3004 	addi	r3,r3,14528
  806134:	10c5883a 	add	r2,r2,r3
  806138:	e2000017 	ldw	r8,0(fp)
  80613c:	e2400117 	ldw	r9,4(fp)
  806140:	12800017 	ldw	r10,0(r2)
  806144:	12c00117 	ldw	r11,4(r2)
  806148:	480b883a 	mov	r5,r9
  80614c:	4009883a 	mov	r4,r8
  806150:	580f883a 	mov	r7,r11
  806154:	500d883a 	mov	r6,r10
  806158:	08021500 	call	802150 <__divdf3>
  80615c:	e0c00115 	stw	r3,4(fp)
  806160:	e0800015 	stw	r2,0(fp)
  806164:	003b8206 	br	804f70 <_strtod_r+0x228>
  806168:	d8801c17 	ldw	r2,112(sp)
  80616c:	1013003a 	cmpeq	r9,r2,zero
  806170:	483e971e 	bne	r9,zero,805bd0 <_strtod_r+0xe88>
  806174:	003f6806 	br	805f18 <_strtod_r+0x11d0>
  806178:	00801a44 	movi	r2,105
  80617c:	88bc5026 	beq	r17,r2,8052c0 <_strtod_r+0x578>
  806180:	00801b84 	movi	r2,110
  806184:	88bb9b1e 	bne	r17,r2,804ff4 <_strtod_r+0x2ac>
  806188:	dc000404 	addi	r16,sp,16
  80618c:	8009883a 	mov	r4,r16
  806190:	01402074 	movhi	r5,129
  806194:	294d4a04 	addi	r5,r5,13608
  806198:	0804d000 	call	804d00 <match>
  80619c:	103b9526 	beq	r2,zero,804ff4 <_strtod_r+0x2ac>
  8061a0:	d8800417 	ldw	r2,16(sp)
  8061a4:	00c00a04 	movi	r3,40
  8061a8:	11000007 	ldb	r4,0(r2)
  8061ac:	20c04026 	beq	r4,r3,8062b0 <_strtod_r+0x1568>
  8061b0:	01bffe34 	movhi	r6,65528
  8061b4:	e1800115 	stw	r6,4(fp)
  8061b8:	e0000015 	stw	zero,0(fp)
  8061bc:	003b6c06 	br	804f70 <_strtod_r+0x228>
  8061c0:	d8c01817 	ldw	r3,96(sp)
  8061c4:	00800404 	movi	r2,16
  8061c8:	10c00516 	blt	r2,r3,8061e0 <_strtod_r+0x1498>
  8061cc:	d9001117 	ldw	r4,68(sp)
  8061d0:	01400284 	movi	r5,10
  8061d4:	0802a640 	call	802a64 <__mulsi3>
  8061d8:	1585883a 	add	r2,r2,r22
  8061dc:	d8801115 	stw	r2,68(sp)
  8061e0:	000d883a 	mov	r6,zero
  8061e4:	003f2506 	br	805e7c <_strtod_r+0x1134>
  8061e8:	000d883a 	mov	r6,zero
  8061ec:	003ce306 	br	80557c <_strtod_r+0x834>
  8061f0:	e4400117 	ldw	r17,4(fp)
  8061f4:	3809883a 	mov	r4,r7
  8061f8:	3821883a 	mov	r16,r7
  8061fc:	880b883a 	mov	r5,r17
  806200:	080b6f80 	call	80b6f8 <__ulp>
  806204:	180f883a 	mov	r7,r3
  806208:	880b883a 	mov	r5,r17
  80620c:	8009883a 	mov	r4,r16
  806210:	100d883a 	mov	r6,r2
  806214:	0801d180 	call	801d18 <__adddf3>
  806218:	180b883a 	mov	r5,r3
  80621c:	d8c01c17 	ldw	r3,112(sp)
  806220:	1009883a 	mov	r4,r2
  806224:	e1400115 	stw	r5,4(fp)
  806228:	1813003a 	cmpeq	r9,r3,zero
  80622c:	e1000015 	stw	r4,0(fp)
  806230:	483e671e 	bne	r9,zero,805bd0 <_strtod_r+0xe88>
  806234:	003f3806 	br	805f18 <_strtod_r+0x11d0>
  806238:	0080d434 	movhi	r2,848
  80623c:	188d883a 	add	r6,r3,r2
  806240:	d8001c15 	stw	zero,112(sp)
  806244:	e1800115 	stw	r6,4(fp)
  806248:	003cf506 	br	805620 <_strtod_r+0x8d8>
  80624c:	d8c01c17 	ldw	r3,112(sp)
  806250:	1813003a 	cmpeq	r9,r3,zero
  806254:	483e5e1e 	bne	r9,zero,805bd0 <_strtod_r+0xe88>
  806258:	003f2f06 	br	805f18 <_strtod_r+0x11d0>
  80625c:	309ffc2c 	andhi	r2,r6,32752
  806260:	00fffc34 	movhi	r3,65520
  806264:	10c5883a 	add	r2,r2,r3
  806268:	00c00434 	movhi	r3,16
  80626c:	18ffffc4 	addi	r3,r3,-1
  806270:	10ccb03a 	or	r6,r2,r3
  806274:	01ffffc4 	movi	r7,-1
  806278:	e1800115 	stw	r6,4(fp)
  80627c:	e1c00015 	stw	r7,0(fp)
  806280:	483e531e 	bne	r9,zero,805bd0 <_strtod_r+0xe88>
  806284:	003f2406 	br	805f18 <_strtod_r+0x11d0>
  806288:	00bfffc4 	movi	r2,-1
  80628c:	003f4306 	br	805f9c <_strtod_r+0x1254>
  806290:	0025883a 	mov	r18,zero
  806294:	05802074 	movhi	r22,129
  806298:	b58e6204 	addi	r22,r22,14728
  80629c:	003c9206 	br	8054e8 <_strtod_r+0x7a0>
  8062a0:	d9c01817 	ldw	r7,96(sp)
  8062a4:	003eeb06 	br	805e54 <_strtod_r+0x110c>
  8062a8:	d8001c15 	stw	zero,112(sp)
  8062ac:	003f6306 	br	80603c <_strtod_r+0x12f4>
  8062b0:	8009883a 	mov	r4,r16
  8062b4:	01402074 	movhi	r5,129
  8062b8:	2950cf04 	addi	r5,r5,17212
  8062bc:	d9800d04 	addi	r6,sp,52
  8062c0:	080aee40 	call	80aee4 <__hexnan>
  8062c4:	00c00144 	movi	r3,5
  8062c8:	10ffb91e 	bne	r2,r3,8061b0 <_strtod_r+0x1468>
  8062cc:	d8800e17 	ldw	r2,56(sp)
  8062d0:	d9c00d17 	ldw	r7,52(sp)
  8062d4:	119ffc34 	orhi	r6,r2,32752
  8062d8:	e1800115 	stw	r6,4(fp)
  8062dc:	e1c00015 	stw	r7,0(fp)
  8062e0:	003b2306 	br	804f70 <_strtod_r+0x228>
  8062e4:	18fff804 	addi	r3,r3,-32
  8062e8:	00bfffc4 	movi	r2,-1
  8062ec:	10c4983a 	sll	r2,r2,r3
  8062f0:	208c703a 	and	r6,r4,r2
  8062f4:	e1800115 	stw	r6,4(fp)
  8062f8:	003f7106 	br	8060c0 <_strtod_r+0x1378>
  8062fc:	00bfffc4 	movi	r2,-1
  806300:	10c4983a 	sll	r2,r2,r3
  806304:	e0c00017 	ldw	r3,0(fp)
  806308:	188e703a 	and	r7,r3,r2
  80630c:	e1c00015 	stw	r7,0(fp)
  806310:	003f6b06 	br	8060c0 <_strtod_r+0x1378>

00806314 <strtof>:
  806314:	defffa04 	addi	sp,sp,-24
  806318:	dd000415 	stw	r20,16(sp)
  80631c:	05002074 	movhi	r20,129
  806320:	a515d704 	addi	r20,r20,22364
  806324:	2007883a 	mov	r3,r4
  806328:	a1000017 	ldw	r4,0(r20)
  80632c:	280d883a 	mov	r6,r5
  806330:	180b883a 	mov	r5,r3
  806334:	dfc00515 	stw	ra,20(sp)
  806338:	dcc00315 	stw	r19,12(sp)
  80633c:	dc800215 	stw	r18,8(sp)
  806340:	dc400115 	stw	r17,4(sp)
  806344:	dc000015 	stw	r16,0(sp)
  806348:	0804d480 	call	804d48 <_strtod_r>
  80634c:	180b883a 	mov	r5,r3
  806350:	1009883a 	mov	r4,r2
  806354:	1823883a 	mov	r17,r3
  806358:	1021883a 	mov	r16,r2
  80635c:	080e5380 	call	80e538 <__truncdfsf2>
  806360:	1009883a 	mov	r4,r2
  806364:	000b883a 	mov	r5,zero
  806368:	1025883a 	mov	r18,r2
  80636c:	1027883a 	mov	r19,r2
  806370:	080ded00 	call	80ded0 <__nesf2>
  806374:	000d883a 	mov	r6,zero
  806378:	000f883a 	mov	r7,zero
  80637c:	8009883a 	mov	r4,r16
  806380:	880b883a 	mov	r5,r17
  806384:	10000e1e 	bne	r2,zero,8063c0 <strtof+0xac>
  806388:	080e0c00 	call	80e0c0 <__nedf2>
  80638c:	10000c26 	beq	r2,zero,8063c0 <strtof+0xac>
  806390:	a0c00017 	ldw	r3,0(r20)
  806394:	00800884 	movi	r2,34
  806398:	18800015 	stw	r2,0(r3)
  80639c:	9805883a 	mov	r2,r19
  8063a0:	dfc00517 	ldw	ra,20(sp)
  8063a4:	dd000417 	ldw	r20,16(sp)
  8063a8:	dcc00317 	ldw	r19,12(sp)
  8063ac:	dc800217 	ldw	r18,8(sp)
  8063b0:	dc400117 	ldw	r17,4(sp)
  8063b4:	dc000017 	ldw	r16,0(sp)
  8063b8:	dec00604 	addi	sp,sp,24
  8063bc:	f800283a 	ret
  8063c0:	9009883a 	mov	r4,r18
  8063c4:	015fe034 	movhi	r5,32640
  8063c8:	297fffc4 	addi	r5,r5,-1
  8063cc:	080df480 	call	80df48 <__gtsf2>
  8063d0:	00ffffc4 	movi	r3,-1
  8063d4:	011ffc34 	movhi	r4,32752
  8063d8:	213fffc4 	addi	r4,r4,-1
  8063dc:	200f883a 	mov	r7,r4
  8063e0:	180d883a 	mov	r6,r3
  8063e4:	8009883a 	mov	r4,r16
  8063e8:	880b883a 	mov	r5,r17
  8063ec:	00800f16 	blt	zero,r2,80642c <strtof+0x118>
  8063f0:	9009883a 	mov	r4,r18
  8063f4:	017fe034 	movhi	r5,65408
  8063f8:	297fffc4 	addi	r5,r5,-1
  8063fc:	080dfc00 	call	80dfc0 <__ltsf2>
  806400:	023fffc4 	movi	r8,-1
  806404:	027ffc34 	movhi	r9,65520
  806408:	4a7fffc4 	addi	r9,r9,-1
  80640c:	880b883a 	mov	r5,r17
  806410:	480f883a 	mov	r7,r9
  806414:	8009883a 	mov	r4,r16
  806418:	400d883a 	mov	r6,r8
  80641c:	103fdf0e 	bge	r2,zero,80639c <strtof+0x88>
  806420:	080e2580 	call	80e258 <__ltdf2>
  806424:	103fda0e 	bge	r2,zero,806390 <strtof+0x7c>
  806428:	003fdc06 	br	80639c <strtof+0x88>
  80642c:	080e1480 	call	80e148 <__gtdf2>
  806430:	00bfd70e 	bge	zero,r2,806390 <strtof+0x7c>
  806434:	003fee06 	br	8063f0 <strtof+0xdc>

00806438 <strtod>:
  806438:	01802074 	movhi	r6,129
  80643c:	3195d704 	addi	r6,r6,22364
  806440:	2007883a 	mov	r3,r4
  806444:	31000017 	ldw	r4,0(r6)
  806448:	280d883a 	mov	r6,r5
  80644c:	180b883a 	mov	r5,r3
  806450:	0804d481 	jmpi	804d48 <_strtod_r>

00806454 <_strtol_r>:
  806454:	defff304 	addi	sp,sp,-52
  806458:	00802074 	movhi	r2,129
  80645c:	1095db04 	addi	r2,r2,22380
  806460:	dd000715 	stw	r20,28(sp)
  806464:	15000017 	ldw	r20,0(r2)
  806468:	ddc00a15 	stw	r23,40(sp)
  80646c:	dc800515 	stw	r18,20(sp)
  806470:	dc400415 	stw	r17,16(sp)
  806474:	dfc00c15 	stw	ra,48(sp)
  806478:	df000b15 	stw	fp,44(sp)
  80647c:	dd800915 	stw	r22,36(sp)
  806480:	dd400815 	stw	r21,32(sp)
  806484:	dcc00615 	stw	r19,24(sp)
  806488:	dc000315 	stw	r16,12(sp)
  80648c:	282f883a 	mov	r23,r5
  806490:	d9000115 	stw	r4,4(sp)
  806494:	d9800215 	stw	r6,8(sp)
  806498:	3825883a 	mov	r18,r7
  80649c:	2823883a 	mov	r17,r5
  8064a0:	8c000007 	ldb	r16,0(r17)
  8064a4:	8c400044 	addi	r17,r17,1
  8064a8:	a407883a 	add	r3,r20,r16
  8064ac:	18800003 	ldbu	r2,0(r3)
  8064b0:	1080020c 	andi	r2,r2,8
  8064b4:	103ffa1e 	bne	r2,zero,8064a0 <_strtol_r+0x4c>
  8064b8:	00800b44 	movi	r2,45
  8064bc:	80805c26 	beq	r16,r2,806630 <_strtol_r+0x1dc>
  8064c0:	00800ac4 	movi	r2,43
  8064c4:	80805726 	beq	r16,r2,806624 <_strtol_r+0x1d0>
  8064c8:	d8000015 	stw	zero,0(sp)
  8064cc:	9007003a 	cmpeq	r3,r18,zero
  8064d0:	1800431e 	bne	r3,zero,8065e0 <_strtol_r+0x18c>
  8064d4:	00800404 	movi	r2,16
  8064d8:	90804126 	beq	r18,r2,8065e0 <_strtol_r+0x18c>
  8064dc:	902b883a 	mov	r21,r18
  8064e0:	d8c00017 	ldw	r3,0(sp)
  8064e4:	1838c03a 	cmpne	fp,r3,zero
  8064e8:	e0004a1e 	bne	fp,zero,806614 <_strtol_r+0x1c0>
  8064ec:	04e00034 	movhi	r19,32768
  8064f0:	9cffffc4 	addi	r19,r19,-1
  8064f4:	9809883a 	mov	r4,r19
  8064f8:	a80b883a 	mov	r5,r21
  8064fc:	08024ec0 	call	8024ec <__umodsi3>
  806500:	9809883a 	mov	r4,r19
  806504:	a80b883a 	mov	r5,r21
  806508:	102d883a 	mov	r22,r2
  80650c:	08024e40 	call	8024e4 <__udivsi3>
  806510:	1027883a 	mov	r19,r2
  806514:	a405883a 	add	r2,r20,r16
  806518:	11400003 	ldbu	r5,0(r2)
  80651c:	0009883a 	mov	r4,zero
  806520:	000d883a 	mov	r6,zero
  806524:	28c0010c 	andi	r3,r5,4
  806528:	18000f26 	beq	r3,zero,806568 <_strtol_r+0x114>
  80652c:	843ff404 	addi	r16,r16,-48
  806530:	8480150e 	bge	r16,r18,806588 <_strtol_r+0x134>
  806534:	30003216 	blt	r6,zero,806600 <_strtol_r+0x1ac>
  806538:	99003136 	bltu	r19,r4,806600 <_strtol_r+0x1ac>
  80653c:	24c02f26 	beq	r4,r19,8065fc <_strtol_r+0x1a8>
  806540:	a80b883a 	mov	r5,r21
  806544:	0802a640 	call	802a64 <__mulsi3>
  806548:	1409883a 	add	r4,r2,r16
  80654c:	01800044 	movi	r6,1
  806550:	8c000007 	ldb	r16,0(r17)
  806554:	8c400044 	addi	r17,r17,1
  806558:	a405883a 	add	r2,r20,r16
  80655c:	11400003 	ldbu	r5,0(r2)
  806560:	28c0010c 	andi	r3,r5,4
  806564:	183ff11e 	bne	r3,zero,80652c <_strtol_r+0xd8>
  806568:	288000cc 	andi	r2,r5,3
  80656c:	10000626 	beq	r2,zero,806588 <_strtol_r+0x134>
  806570:	2880004c 	andi	r2,r5,1
  806574:	1005003a 	cmpeq	r2,r2,zero
  806578:	1000231e 	bne	r2,zero,806608 <_strtol_r+0x1b4>
  80657c:	00800dc4 	movi	r2,55
  806580:	80a1c83a 	sub	r16,r16,r2
  806584:	84bfeb16 	blt	r16,r18,806534 <_strtol_r+0xe0>
  806588:	30002e16 	blt	r6,zero,806644 <_strtol_r+0x1f0>
  80658c:	e000231e 	bne	fp,zero,80661c <_strtol_r+0x1c8>
  806590:	2007883a 	mov	r3,r4
  806594:	d8800217 	ldw	r2,8(sp)
  806598:	10000426 	beq	r2,zero,8065ac <_strtol_r+0x158>
  80659c:	30000126 	beq	r6,zero,8065a4 <_strtol_r+0x150>
  8065a0:	8dffffc4 	addi	r23,r17,-1
  8065a4:	d9000217 	ldw	r4,8(sp)
  8065a8:	25c00015 	stw	r23,0(r4)
  8065ac:	1805883a 	mov	r2,r3
  8065b0:	dfc00c17 	ldw	ra,48(sp)
  8065b4:	df000b17 	ldw	fp,44(sp)
  8065b8:	ddc00a17 	ldw	r23,40(sp)
  8065bc:	dd800917 	ldw	r22,36(sp)
  8065c0:	dd400817 	ldw	r21,32(sp)
  8065c4:	dd000717 	ldw	r20,28(sp)
  8065c8:	dcc00617 	ldw	r19,24(sp)
  8065cc:	dc800517 	ldw	r18,20(sp)
  8065d0:	dc400417 	ldw	r17,16(sp)
  8065d4:	dc000317 	ldw	r16,12(sp)
  8065d8:	dec00d04 	addi	sp,sp,52
  8065dc:	f800283a 	ret
  8065e0:	00800c04 	movi	r2,48
  8065e4:	80801f26 	beq	r16,r2,806664 <_strtol_r+0x210>
  8065e8:	183fbc26 	beq	r3,zero,8064dc <_strtol_r+0x88>
  8065ec:	00800c04 	movi	r2,48
  8065f0:	80802926 	beq	r16,r2,806698 <_strtol_r+0x244>
  8065f4:	04800284 	movi	r18,10
  8065f8:	003fb806 	br	8064dc <_strtol_r+0x88>
  8065fc:	b43fd00e 	bge	r22,r16,806540 <_strtol_r+0xec>
  806600:	01bfffc4 	movi	r6,-1
  806604:	003fd206 	br	806550 <_strtol_r+0xfc>
  806608:	008015c4 	movi	r2,87
  80660c:	80a1c83a 	sub	r16,r16,r2
  806610:	003fdc06 	br	806584 <_strtol_r+0x130>
  806614:	04e00034 	movhi	r19,32768
  806618:	003fb606 	br	8064f4 <_strtol_r+0xa0>
  80661c:	0107c83a 	sub	r3,zero,r4
  806620:	003fdc06 	br	806594 <_strtol_r+0x140>
  806624:	8c000007 	ldb	r16,0(r17)
  806628:	8c400044 	addi	r17,r17,1
  80662c:	003fa606 	br	8064c8 <_strtol_r+0x74>
  806630:	8c000007 	ldb	r16,0(r17)
  806634:	00800044 	movi	r2,1
  806638:	8c400044 	addi	r17,r17,1
  80663c:	d8800015 	stw	r2,0(sp)
  806640:	003fa206 	br	8064cc <_strtol_r+0x78>
  806644:	d9000017 	ldw	r4,0(sp)
  806648:	2005003a 	cmpeq	r2,r4,zero
  80664c:	10000f1e 	bne	r2,zero,80668c <_strtol_r+0x238>
  806650:	00e00034 	movhi	r3,32768
  806654:	d9000117 	ldw	r4,4(sp)
  806658:	00800884 	movi	r2,34
  80665c:	20800015 	stw	r2,0(r4)
  806660:	003fcc06 	br	806594 <_strtol_r+0x140>
  806664:	89000007 	ldb	r4,0(r17)
  806668:	00801e04 	movi	r2,120
  80666c:	20800226 	beq	r4,r2,806678 <_strtol_r+0x224>
  806670:	00801604 	movi	r2,88
  806674:	20bfdc1e 	bne	r4,r2,8065e8 <_strtol_r+0x194>
  806678:	8c000047 	ldb	r16,1(r17)
  80667c:	04800404 	movi	r18,16
  806680:	8c400084 	addi	r17,r17,2
  806684:	902b883a 	mov	r21,r18
  806688:	003f9506 	br	8064e0 <_strtol_r+0x8c>
  80668c:	00e00034 	movhi	r3,32768
  806690:	18ffffc4 	addi	r3,r3,-1
  806694:	003fef06 	br	806654 <_strtol_r+0x200>
  806698:	04800204 	movi	r18,8
  80669c:	902b883a 	mov	r21,r18
  8066a0:	003f8f06 	br	8064e0 <_strtol_r+0x8c>

008066a4 <strtol>:
  8066a4:	00802074 	movhi	r2,129
  8066a8:	1095d704 	addi	r2,r2,22364
  8066ac:	2013883a 	mov	r9,r4
  8066b0:	11000017 	ldw	r4,0(r2)
  8066b4:	2805883a 	mov	r2,r5
  8066b8:	300f883a 	mov	r7,r6
  8066bc:	480b883a 	mov	r5,r9
  8066c0:	100d883a 	mov	r6,r2
  8066c4:	08064541 	jmpi	806454 <_strtol_r>

008066c8 <__sprint_r>:
  8066c8:	30800217 	ldw	r2,8(r6)
  8066cc:	defffe04 	addi	sp,sp,-8
  8066d0:	dc000015 	stw	r16,0(sp)
  8066d4:	dfc00115 	stw	ra,4(sp)
  8066d8:	3021883a 	mov	r16,r6
  8066dc:	0007883a 	mov	r3,zero
  8066e0:	1000061e 	bne	r2,zero,8066fc <__sprint_r+0x34>
  8066e4:	1805883a 	mov	r2,r3
  8066e8:	30000115 	stw	zero,4(r6)
  8066ec:	dfc00117 	ldw	ra,4(sp)
  8066f0:	dc000017 	ldw	r16,0(sp)
  8066f4:	dec00204 	addi	sp,sp,8
  8066f8:	f800283a 	ret
  8066fc:	080a0c40 	call	80a0c4 <__sfvwrite_r>
  806700:	1007883a 	mov	r3,r2
  806704:	1805883a 	mov	r2,r3
  806708:	80000115 	stw	zero,4(r16)
  80670c:	80000215 	stw	zero,8(r16)
  806710:	dfc00117 	ldw	ra,4(sp)
  806714:	dc000017 	ldw	r16,0(sp)
  806718:	dec00204 	addi	sp,sp,8
  80671c:	f800283a 	ret

00806720 <___vfprintf_internal_r>:
  806720:	defea404 	addi	sp,sp,-1392
  806724:	dd815815 	stw	r22,1376(sp)
  806728:	dc015215 	stw	r16,1352(sp)
  80672c:	d9c15115 	stw	r7,1348(sp)
  806730:	dfc15b15 	stw	ra,1388(sp)
  806734:	df015a15 	stw	fp,1384(sp)
  806738:	ddc15915 	stw	r23,1380(sp)
  80673c:	dd415715 	stw	r21,1372(sp)
  806740:	dd015615 	stw	r20,1368(sp)
  806744:	dcc15515 	stw	r19,1364(sp)
  806748:	dc815415 	stw	r18,1360(sp)
  80674c:	dc415315 	stw	r17,1356(sp)
  806750:	282d883a 	mov	r22,r5
  806754:	3021883a 	mov	r16,r6
  806758:	d9014f15 	stw	r4,1340(sp)
  80675c:	080b1a40 	call	80b1a4 <_localeconv_r>
  806760:	10800017 	ldw	r2,0(r2)
  806764:	d9c15117 	ldw	r7,1348(sp)
  806768:	d8814915 	stw	r2,1316(sp)
  80676c:	d8814f17 	ldw	r2,1340(sp)
  806770:	10000226 	beq	r2,zero,80677c <___vfprintf_internal_r+0x5c>
  806774:	10800e17 	ldw	r2,56(r2)
  806778:	10020d26 	beq	r2,zero,806fb0 <___vfprintf_internal_r+0x890>
  80677c:	b080030b 	ldhu	r2,12(r22)
  806780:	1080020c 	andi	r2,r2,8
  806784:	10020e26 	beq	r2,zero,806fc0 <___vfprintf_internal_r+0x8a0>
  806788:	b0800417 	ldw	r2,16(r22)
  80678c:	10020c26 	beq	r2,zero,806fc0 <___vfprintf_internal_r+0x8a0>
  806790:	b200030b 	ldhu	r8,12(r22)
  806794:	00800284 	movi	r2,10
  806798:	40c0068c 	andi	r3,r8,26
  80679c:	18802f1e 	bne	r3,r2,80685c <___vfprintf_internal_r+0x13c>
  8067a0:	b080038f 	ldh	r2,14(r22)
  8067a4:	10002d16 	blt	r2,zero,80685c <___vfprintf_internal_r+0x13c>
  8067a8:	b240038b 	ldhu	r9,14(r22)
  8067ac:	b2800717 	ldw	r10,28(r22)
  8067b0:	b2c00917 	ldw	r11,36(r22)
  8067b4:	d9014f17 	ldw	r4,1340(sp)
  8067b8:	dc402904 	addi	r17,sp,164
  8067bc:	d8804004 	addi	r2,sp,256
  8067c0:	00c10004 	movi	r3,1024
  8067c4:	423fff4c 	andi	r8,r8,65533
  8067c8:	800d883a 	mov	r6,r16
  8067cc:	880b883a 	mov	r5,r17
  8067d0:	da002c0d 	sth	r8,176(sp)
  8067d4:	da402c8d 	sth	r9,178(sp)
  8067d8:	da803015 	stw	r10,192(sp)
  8067dc:	dac03215 	stw	r11,200(sp)
  8067e0:	d8802d15 	stw	r2,180(sp)
  8067e4:	d8c02e15 	stw	r3,184(sp)
  8067e8:	d8802915 	stw	r2,164(sp)
  8067ec:	d8c02b15 	stw	r3,172(sp)
  8067f0:	d8002f15 	stw	zero,188(sp)
  8067f4:	08067200 	call	806720 <___vfprintf_internal_r>
  8067f8:	d8814b15 	stw	r2,1324(sp)
  8067fc:	10000416 	blt	r2,zero,806810 <___vfprintf_internal_r+0xf0>
  806800:	d9014f17 	ldw	r4,1340(sp)
  806804:	880b883a 	mov	r5,r17
  806808:	0802bc00 	call	802bc0 <_fflush_r>
  80680c:	1002321e 	bne	r2,zero,8070d8 <___vfprintf_internal_r+0x9b8>
  806810:	d8802c0b 	ldhu	r2,176(sp)
  806814:	1080100c 	andi	r2,r2,64
  806818:	10000326 	beq	r2,zero,806828 <___vfprintf_internal_r+0x108>
  80681c:	b080030b 	ldhu	r2,12(r22)
  806820:	10801014 	ori	r2,r2,64
  806824:	b080030d 	sth	r2,12(r22)
  806828:	d8814b17 	ldw	r2,1324(sp)
  80682c:	dfc15b17 	ldw	ra,1388(sp)
  806830:	df015a17 	ldw	fp,1384(sp)
  806834:	ddc15917 	ldw	r23,1380(sp)
  806838:	dd815817 	ldw	r22,1376(sp)
  80683c:	dd415717 	ldw	r21,1372(sp)
  806840:	dd015617 	ldw	r20,1368(sp)
  806844:	dcc15517 	ldw	r19,1364(sp)
  806848:	dc815417 	ldw	r18,1360(sp)
  80684c:	dc415317 	ldw	r17,1356(sp)
  806850:	dc015217 	ldw	r16,1352(sp)
  806854:	dec15c04 	addi	sp,sp,1392
  806858:	f800283a 	ret
  80685c:	0005883a 	mov	r2,zero
  806860:	0007883a 	mov	r3,zero
  806864:	dd401904 	addi	r21,sp,100
  806868:	d8814215 	stw	r2,1288(sp)
  80686c:	802f883a 	mov	r23,r16
  806870:	d8c14315 	stw	r3,1292(sp)
  806874:	d8014b15 	stw	zero,1324(sp)
  806878:	d8014815 	stw	zero,1312(sp)
  80687c:	d8014415 	stw	zero,1296(sp)
  806880:	d8014715 	stw	zero,1308(sp)
  806884:	dd400c15 	stw	r21,48(sp)
  806888:	d8000e15 	stw	zero,56(sp)
  80688c:	d8000d15 	stw	zero,52(sp)
  806890:	b8800007 	ldb	r2,0(r23)
  806894:	10001926 	beq	r2,zero,8068fc <___vfprintf_internal_r+0x1dc>
  806898:	00c00944 	movi	r3,37
  80689c:	10c01726 	beq	r2,r3,8068fc <___vfprintf_internal_r+0x1dc>
  8068a0:	b821883a 	mov	r16,r23
  8068a4:	00000106 	br	8068ac <___vfprintf_internal_r+0x18c>
  8068a8:	10c00326 	beq	r2,r3,8068b8 <___vfprintf_internal_r+0x198>
  8068ac:	84000044 	addi	r16,r16,1
  8068b0:	80800007 	ldb	r2,0(r16)
  8068b4:	103ffc1e 	bne	r2,zero,8068a8 <___vfprintf_internal_r+0x188>
  8068b8:	85e7c83a 	sub	r19,r16,r23
  8068bc:	98000e26 	beq	r19,zero,8068f8 <___vfprintf_internal_r+0x1d8>
  8068c0:	dc800e17 	ldw	r18,56(sp)
  8068c4:	dc400d17 	ldw	r17,52(sp)
  8068c8:	008001c4 	movi	r2,7
  8068cc:	94e5883a 	add	r18,r18,r19
  8068d0:	8c400044 	addi	r17,r17,1
  8068d4:	adc00015 	stw	r23,0(r21)
  8068d8:	dc800e15 	stw	r18,56(sp)
  8068dc:	acc00115 	stw	r19,4(r21)
  8068e0:	dc400d15 	stw	r17,52(sp)
  8068e4:	14428b16 	blt	r2,r17,807314 <___vfprintf_internal_r+0xbf4>
  8068e8:	ad400204 	addi	r21,r21,8
  8068ec:	d9014b17 	ldw	r4,1324(sp)
  8068f0:	24c9883a 	add	r4,r4,r19
  8068f4:	d9014b15 	stw	r4,1324(sp)
  8068f8:	802f883a 	mov	r23,r16
  8068fc:	b8800007 	ldb	r2,0(r23)
  806900:	10013c26 	beq	r2,zero,806df4 <___vfprintf_internal_r+0x6d4>
  806904:	bdc00044 	addi	r23,r23,1
  806908:	d8000405 	stb	zero,16(sp)
  80690c:	b8c00007 	ldb	r3,0(r23)
  806910:	04ffffc4 	movi	r19,-1
  806914:	d8014c15 	stw	zero,1328(sp)
  806918:	d8014a15 	stw	zero,1320(sp)
  80691c:	d8c14d15 	stw	r3,1332(sp)
  806920:	bdc00044 	addi	r23,r23,1
  806924:	d9414d17 	ldw	r5,1332(sp)
  806928:	00801604 	movi	r2,88
  80692c:	28fff804 	addi	r3,r5,-32
  806930:	10c06036 	bltu	r2,r3,806ab4 <___vfprintf_internal_r+0x394>
  806934:	18c5883a 	add	r2,r3,r3
  806938:	1085883a 	add	r2,r2,r2
  80693c:	00c02034 	movhi	r3,128
  806940:	18da5404 	addi	r3,r3,26960
  806944:	10c5883a 	add	r2,r2,r3
  806948:	11000017 	ldw	r4,0(r2)
  80694c:	2000683a 	jmp	r4
  806950:	008078c4 	movi	r2,483
  806954:	00806ab4 	movhi	r2,426
  806958:	00806ab4 	movhi	r2,426
  80695c:	008078b0 	cmpltui	r2,zero,482
  806960:	00806ab4 	movhi	r2,426
  806964:	00806ab4 	movhi	r2,426
  806968:	00806ab4 	movhi	r2,426
  80696c:	00806ab4 	movhi	r2,426
  806970:	00806ab4 	movhi	r2,426
  806974:	00806ab4 	movhi	r2,426
  806978:	00807690 	cmplti	r2,zero,474
  80697c:	008078a0 	cmpeqi	r2,zero,482
  806980:	00806ab4 	movhi	r2,426
  806984:	008076a8 	cmpgeui	r2,zero,474
  806988:	00807948 	cmpgei	r2,zero,485
  80698c:	00806ab4 	movhi	r2,426
  806990:	00807934 	movhi	r2,484
  806994:	008078f0 	cmpltui	r2,zero,483
  806998:	008078f0 	cmpltui	r2,zero,483
  80699c:	008078f0 	cmpltui	r2,zero,483
  8069a0:	008078f0 	cmpltui	r2,zero,483
  8069a4:	008078f0 	cmpltui	r2,zero,483
  8069a8:	008078f0 	cmpltui	r2,zero,483
  8069ac:	008078f0 	cmpltui	r2,zero,483
  8069b0:	008078f0 	cmpltui	r2,zero,483
  8069b4:	008078f0 	cmpltui	r2,zero,483
  8069b8:	00806ab4 	movhi	r2,426
  8069bc:	00806ab4 	movhi	r2,426
  8069c0:	00806ab4 	movhi	r2,426
  8069c4:	00806ab4 	movhi	r2,426
  8069c8:	00806ab4 	movhi	r2,426
  8069cc:	00806ab4 	movhi	r2,426
  8069d0:	00806ab4 	movhi	r2,426
  8069d4:	00806ab4 	movhi	r2,426
  8069d8:	00806ab4 	movhi	r2,426
  8069dc:	00806ab4 	movhi	r2,426
  8069e0:	0080710c 	andi	r2,zero,452
  8069e4:	00807778 	rdprs	r2,zero,477
  8069e8:	00806ab4 	movhi	r2,426
  8069ec:	00807778 	rdprs	r2,zero,477
  8069f0:	00806ab4 	movhi	r2,426
  8069f4:	00806ab4 	movhi	r2,426
  8069f8:	00806ab4 	movhi	r2,426
  8069fc:	00806ab4 	movhi	r2,426
  806a00:	008078dc 	xori	r2,zero,483
  806a04:	00806ab4 	movhi	r2,426
  806a08:	00806ab4 	movhi	r2,426
  806a0c:	008071c0 	call	8071c <__reset-0x77f8e4>
  806a10:	00806ab4 	movhi	r2,426
  806a14:	00806ab4 	movhi	r2,426
  806a18:	00806ab4 	movhi	r2,426
  806a1c:	00806ab4 	movhi	r2,426
  806a20:	00806ab4 	movhi	r2,426
  806a24:	0080720c 	andi	r2,zero,456
  806a28:	00806ab4 	movhi	r2,426
  806a2c:	00806ab4 	movhi	r2,426
  806a30:	0080782c 	andhi	r2,zero,480
  806a34:	00806ab4 	movhi	r2,426
  806a38:	00806ab4 	movhi	r2,426
  806a3c:	00806ab4 	movhi	r2,426
  806a40:	00806ab4 	movhi	r2,426
  806a44:	00806ab4 	movhi	r2,426
  806a48:	00806ab4 	movhi	r2,426
  806a4c:	00806ab4 	movhi	r2,426
  806a50:	00806ab4 	movhi	r2,426
  806a54:	00806ab4 	movhi	r2,426
  806a58:	00806ab4 	movhi	r2,426
  806a5c:	00807800 	call	80780 <__reset-0x77f880>
  806a60:	00807118 	cmpnei	r2,zero,452
  806a64:	00807778 	rdprs	r2,zero,477
  806a68:	00807778 	rdprs	r2,zero,477
  806a6c:	00807778 	rdprs	r2,zero,477
  806a70:	00807764 	muli	r2,zero,477
  806a74:	00807118 	cmpnei	r2,zero,452
  806a78:	00806ab4 	movhi	r2,426
  806a7c:	00806ab4 	movhi	r2,426
  806a80:	008076ec 	andhi	r2,zero,475
  806a84:	00806ab4 	movhi	r2,426
  806a88:	008076bc 	xorhi	r2,zero,474
  806a8c:	008071cc 	andi	r2,zero,455
  806a90:	0080771c 	xori	r2,zero,476
  806a94:	00807708 	cmpgei	r2,zero,476
  806a98:	00806ab4 	movhi	r2,426
  806a9c:	008079b0 	cmpltui	r2,zero,486
  806aa0:	00806ab4 	movhi	r2,426
  806aa4:	00807218 	cmpnei	r2,zero,456
  806aa8:	00806ab4 	movhi	r2,426
  806aac:	00806ab4 	movhi	r2,426
  806ab0:	00807890 	cmplti	r2,zero,482
  806ab4:	d9014d17 	ldw	r4,1332(sp)
  806ab8:	2000ce26 	beq	r4,zero,806df4 <___vfprintf_internal_r+0x6d4>
  806abc:	01400044 	movi	r5,1
  806ac0:	d9800f04 	addi	r6,sp,60
  806ac4:	d9c14015 	stw	r7,1280(sp)
  806ac8:	d9414515 	stw	r5,1300(sp)
  806acc:	d9814115 	stw	r6,1284(sp)
  806ad0:	280f883a 	mov	r7,r5
  806ad4:	d9000f05 	stb	r4,60(sp)
  806ad8:	d8000405 	stb	zero,16(sp)
  806adc:	d8014615 	stw	zero,1304(sp)
  806ae0:	d8c14c17 	ldw	r3,1328(sp)
  806ae4:	1880008c 	andi	r2,r3,2
  806ae8:	1005003a 	cmpeq	r2,r2,zero
  806aec:	d8815015 	stw	r2,1344(sp)
  806af0:	1000031e 	bne	r2,zero,806b00 <___vfprintf_internal_r+0x3e0>
  806af4:	d9014517 	ldw	r4,1300(sp)
  806af8:	21000084 	addi	r4,r4,2
  806afc:	d9014515 	stw	r4,1300(sp)
  806b00:	d9414c17 	ldw	r5,1328(sp)
  806b04:	2940210c 	andi	r5,r5,132
  806b08:	d9414e15 	stw	r5,1336(sp)
  806b0c:	28002d1e 	bne	r5,zero,806bc4 <___vfprintf_internal_r+0x4a4>
  806b10:	d9814a17 	ldw	r6,1320(sp)
  806b14:	d8814517 	ldw	r2,1300(sp)
  806b18:	30a1c83a 	sub	r16,r6,r2
  806b1c:	0400290e 	bge	zero,r16,806bc4 <___vfprintf_internal_r+0x4a4>
  806b20:	00800404 	movi	r2,16
  806b24:	14045e0e 	bge	r2,r16,807ca0 <___vfprintf_internal_r+0x1580>
  806b28:	dc800e17 	ldw	r18,56(sp)
  806b2c:	dc400d17 	ldw	r17,52(sp)
  806b30:	1027883a 	mov	r19,r2
  806b34:	07002074 	movhi	fp,129
  806b38:	e70d7084 	addi	fp,fp,13762
  806b3c:	050001c4 	movi	r20,7
  806b40:	00000306 	br	806b50 <___vfprintf_internal_r+0x430>
  806b44:	843ffc04 	addi	r16,r16,-16
  806b48:	ad400204 	addi	r21,r21,8
  806b4c:	9c00130e 	bge	r19,r16,806b9c <___vfprintf_internal_r+0x47c>
  806b50:	94800404 	addi	r18,r18,16
  806b54:	8c400044 	addi	r17,r17,1
  806b58:	af000015 	stw	fp,0(r21)
  806b5c:	acc00115 	stw	r19,4(r21)
  806b60:	dc800e15 	stw	r18,56(sp)
  806b64:	dc400d15 	stw	r17,52(sp)
  806b68:	a47ff60e 	bge	r20,r17,806b44 <___vfprintf_internal_r+0x424>
  806b6c:	d9014f17 	ldw	r4,1340(sp)
  806b70:	b00b883a 	mov	r5,r22
  806b74:	d9800c04 	addi	r6,sp,48
  806b78:	d9c15115 	stw	r7,1348(sp)
  806b7c:	08066c80 	call	8066c8 <__sprint_r>
  806b80:	d9c15117 	ldw	r7,1348(sp)
  806b84:	10009e1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  806b88:	843ffc04 	addi	r16,r16,-16
  806b8c:	dc800e17 	ldw	r18,56(sp)
  806b90:	dc400d17 	ldw	r17,52(sp)
  806b94:	dd401904 	addi	r21,sp,100
  806b98:	9c3fed16 	blt	r19,r16,806b50 <___vfprintf_internal_r+0x430>
  806b9c:	9425883a 	add	r18,r18,r16
  806ba0:	8c400044 	addi	r17,r17,1
  806ba4:	008001c4 	movi	r2,7
  806ba8:	af000015 	stw	fp,0(r21)
  806bac:	ac000115 	stw	r16,4(r21)
  806bb0:	dc800e15 	stw	r18,56(sp)
  806bb4:	dc400d15 	stw	r17,52(sp)
  806bb8:	1441f516 	blt	r2,r17,807390 <___vfprintf_internal_r+0xc70>
  806bbc:	ad400204 	addi	r21,r21,8
  806bc0:	00000206 	br	806bcc <___vfprintf_internal_r+0x4ac>
  806bc4:	dc800e17 	ldw	r18,56(sp)
  806bc8:	dc400d17 	ldw	r17,52(sp)
  806bcc:	d8800407 	ldb	r2,16(sp)
  806bd0:	10000b26 	beq	r2,zero,806c00 <___vfprintf_internal_r+0x4e0>
  806bd4:	00800044 	movi	r2,1
  806bd8:	94800044 	addi	r18,r18,1
  806bdc:	8c400044 	addi	r17,r17,1
  806be0:	a8800115 	stw	r2,4(r21)
  806be4:	d8c00404 	addi	r3,sp,16
  806be8:	008001c4 	movi	r2,7
  806bec:	a8c00015 	stw	r3,0(r21)
  806bf0:	dc800e15 	stw	r18,56(sp)
  806bf4:	dc400d15 	stw	r17,52(sp)
  806bf8:	1441da16 	blt	r2,r17,807364 <___vfprintf_internal_r+0xc44>
  806bfc:	ad400204 	addi	r21,r21,8
  806c00:	d9015017 	ldw	r4,1344(sp)
  806c04:	20000b1e 	bne	r4,zero,806c34 <___vfprintf_internal_r+0x514>
  806c08:	d8800444 	addi	r2,sp,17
  806c0c:	94800084 	addi	r18,r18,2
  806c10:	8c400044 	addi	r17,r17,1
  806c14:	a8800015 	stw	r2,0(r21)
  806c18:	00c00084 	movi	r3,2
  806c1c:	008001c4 	movi	r2,7
  806c20:	a8c00115 	stw	r3,4(r21)
  806c24:	dc800e15 	stw	r18,56(sp)
  806c28:	dc400d15 	stw	r17,52(sp)
  806c2c:	1441c216 	blt	r2,r17,807338 <___vfprintf_internal_r+0xc18>
  806c30:	ad400204 	addi	r21,r21,8
  806c34:	d9414e17 	ldw	r5,1336(sp)
  806c38:	00802004 	movi	r2,128
  806c3c:	2880b126 	beq	r5,r2,806f04 <___vfprintf_internal_r+0x7e4>
  806c40:	d8c14617 	ldw	r3,1304(sp)
  806c44:	19e1c83a 	sub	r16,r3,r7
  806c48:	0400260e 	bge	zero,r16,806ce4 <___vfprintf_internal_r+0x5c4>
  806c4c:	00800404 	movi	r2,16
  806c50:	1403cf0e 	bge	r2,r16,807b90 <___vfprintf_internal_r+0x1470>
  806c54:	1027883a 	mov	r19,r2
  806c58:	07002074 	movhi	fp,129
  806c5c:	e70d6c84 	addi	fp,fp,13746
  806c60:	050001c4 	movi	r20,7
  806c64:	00000306 	br	806c74 <___vfprintf_internal_r+0x554>
  806c68:	843ffc04 	addi	r16,r16,-16
  806c6c:	ad400204 	addi	r21,r21,8
  806c70:	9c00130e 	bge	r19,r16,806cc0 <___vfprintf_internal_r+0x5a0>
  806c74:	94800404 	addi	r18,r18,16
  806c78:	8c400044 	addi	r17,r17,1
  806c7c:	af000015 	stw	fp,0(r21)
  806c80:	acc00115 	stw	r19,4(r21)
  806c84:	dc800e15 	stw	r18,56(sp)
  806c88:	dc400d15 	stw	r17,52(sp)
  806c8c:	a47ff60e 	bge	r20,r17,806c68 <___vfprintf_internal_r+0x548>
  806c90:	d9014f17 	ldw	r4,1340(sp)
  806c94:	b00b883a 	mov	r5,r22
  806c98:	d9800c04 	addi	r6,sp,48
  806c9c:	d9c15115 	stw	r7,1348(sp)
  806ca0:	08066c80 	call	8066c8 <__sprint_r>
  806ca4:	d9c15117 	ldw	r7,1348(sp)
  806ca8:	1000551e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  806cac:	843ffc04 	addi	r16,r16,-16
  806cb0:	dc800e17 	ldw	r18,56(sp)
  806cb4:	dc400d17 	ldw	r17,52(sp)
  806cb8:	dd401904 	addi	r21,sp,100
  806cbc:	9c3fed16 	blt	r19,r16,806c74 <___vfprintf_internal_r+0x554>
  806cc0:	9425883a 	add	r18,r18,r16
  806cc4:	8c400044 	addi	r17,r17,1
  806cc8:	008001c4 	movi	r2,7
  806ccc:	af000015 	stw	fp,0(r21)
  806cd0:	ac000115 	stw	r16,4(r21)
  806cd4:	dc800e15 	stw	r18,56(sp)
  806cd8:	dc400d15 	stw	r17,52(sp)
  806cdc:	14418216 	blt	r2,r17,8072e8 <___vfprintf_internal_r+0xbc8>
  806ce0:	ad400204 	addi	r21,r21,8
  806ce4:	d9014c17 	ldw	r4,1328(sp)
  806ce8:	2080400c 	andi	r2,r4,256
  806cec:	10004a1e 	bne	r2,zero,806e18 <___vfprintf_internal_r+0x6f8>
  806cf0:	d9414117 	ldw	r5,1284(sp)
  806cf4:	91e5883a 	add	r18,r18,r7
  806cf8:	8c400044 	addi	r17,r17,1
  806cfc:	008001c4 	movi	r2,7
  806d00:	a9400015 	stw	r5,0(r21)
  806d04:	a9c00115 	stw	r7,4(r21)
  806d08:	dc800e15 	stw	r18,56(sp)
  806d0c:	dc400d15 	stw	r17,52(sp)
  806d10:	14416716 	blt	r2,r17,8072b0 <___vfprintf_internal_r+0xb90>
  806d14:	a8c00204 	addi	r3,r21,8
  806d18:	d9814c17 	ldw	r6,1328(sp)
  806d1c:	3080010c 	andi	r2,r6,4
  806d20:	10002826 	beq	r2,zero,806dc4 <___vfprintf_internal_r+0x6a4>
  806d24:	d8814a17 	ldw	r2,1320(sp)
  806d28:	d9014517 	ldw	r4,1300(sp)
  806d2c:	1121c83a 	sub	r16,r2,r4
  806d30:	0400240e 	bge	zero,r16,806dc4 <___vfprintf_internal_r+0x6a4>
  806d34:	00800404 	movi	r2,16
  806d38:	1404550e 	bge	r2,r16,807e90 <___vfprintf_internal_r+0x1770>
  806d3c:	dc400d17 	ldw	r17,52(sp)
  806d40:	1027883a 	mov	r19,r2
  806d44:	07002074 	movhi	fp,129
  806d48:	e70d7084 	addi	fp,fp,13762
  806d4c:	050001c4 	movi	r20,7
  806d50:	00000306 	br	806d60 <___vfprintf_internal_r+0x640>
  806d54:	843ffc04 	addi	r16,r16,-16
  806d58:	18c00204 	addi	r3,r3,8
  806d5c:	9c00110e 	bge	r19,r16,806da4 <___vfprintf_internal_r+0x684>
  806d60:	94800404 	addi	r18,r18,16
  806d64:	8c400044 	addi	r17,r17,1
  806d68:	1f000015 	stw	fp,0(r3)
  806d6c:	1cc00115 	stw	r19,4(r3)
  806d70:	dc800e15 	stw	r18,56(sp)
  806d74:	dc400d15 	stw	r17,52(sp)
  806d78:	a47ff60e 	bge	r20,r17,806d54 <___vfprintf_internal_r+0x634>
  806d7c:	d9014f17 	ldw	r4,1340(sp)
  806d80:	b00b883a 	mov	r5,r22
  806d84:	d9800c04 	addi	r6,sp,48
  806d88:	08066c80 	call	8066c8 <__sprint_r>
  806d8c:	10001c1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  806d90:	843ffc04 	addi	r16,r16,-16
  806d94:	dc800e17 	ldw	r18,56(sp)
  806d98:	dc400d17 	ldw	r17,52(sp)
  806d9c:	d8c01904 	addi	r3,sp,100
  806da0:	9c3fef16 	blt	r19,r16,806d60 <___vfprintf_internal_r+0x640>
  806da4:	9425883a 	add	r18,r18,r16
  806da8:	8c400044 	addi	r17,r17,1
  806dac:	008001c4 	movi	r2,7
  806db0:	1f000015 	stw	fp,0(r3)
  806db4:	1c000115 	stw	r16,4(r3)
  806db8:	dc800e15 	stw	r18,56(sp)
  806dbc:	dc400d15 	stw	r17,52(sp)
  806dc0:	1440cb16 	blt	r2,r17,8070f0 <___vfprintf_internal_r+0x9d0>
  806dc4:	d8814a17 	ldw	r2,1320(sp)
  806dc8:	d9414517 	ldw	r5,1300(sp)
  806dcc:	1140010e 	bge	r2,r5,806dd4 <___vfprintf_internal_r+0x6b4>
  806dd0:	2805883a 	mov	r2,r5
  806dd4:	d9814b17 	ldw	r6,1324(sp)
  806dd8:	308d883a 	add	r6,r6,r2
  806ddc:	d9814b15 	stw	r6,1324(sp)
  806de0:	90013b1e 	bne	r18,zero,8072d0 <___vfprintf_internal_r+0xbb0>
  806de4:	d9c14017 	ldw	r7,1280(sp)
  806de8:	dd401904 	addi	r21,sp,100
  806dec:	d8000d15 	stw	zero,52(sp)
  806df0:	003ea706 	br	806890 <___vfprintf_internal_r+0x170>
  806df4:	d8800e17 	ldw	r2,56(sp)
  806df8:	1005451e 	bne	r2,zero,808310 <___vfprintf_internal_r+0x1bf0>
  806dfc:	d8000d15 	stw	zero,52(sp)
  806e00:	b080030b 	ldhu	r2,12(r22)
  806e04:	1080100c 	andi	r2,r2,64
  806e08:	103e8726 	beq	r2,zero,806828 <___vfprintf_internal_r+0x108>
  806e0c:	00bfffc4 	movi	r2,-1
  806e10:	d8814b15 	stw	r2,1324(sp)
  806e14:	003e8406 	br	806828 <___vfprintf_internal_r+0x108>
  806e18:	d9814d17 	ldw	r6,1332(sp)
  806e1c:	00801944 	movi	r2,101
  806e20:	11806e16 	blt	r2,r6,806fdc <___vfprintf_internal_r+0x8bc>
  806e24:	d9414717 	ldw	r5,1308(sp)
  806e28:	00c00044 	movi	r3,1
  806e2c:	1943490e 	bge	r3,r5,807b54 <___vfprintf_internal_r+0x1434>
  806e30:	d8814117 	ldw	r2,1284(sp)
  806e34:	94800044 	addi	r18,r18,1
  806e38:	8c400044 	addi	r17,r17,1
  806e3c:	a8800015 	stw	r2,0(r21)
  806e40:	008001c4 	movi	r2,7
  806e44:	a8c00115 	stw	r3,4(r21)
  806e48:	dc800e15 	stw	r18,56(sp)
  806e4c:	dc400d15 	stw	r17,52(sp)
  806e50:	1441ca16 	blt	r2,r17,80757c <___vfprintf_internal_r+0xe5c>
  806e54:	a8c00204 	addi	r3,r21,8
  806e58:	d9014917 	ldw	r4,1316(sp)
  806e5c:	00800044 	movi	r2,1
  806e60:	94800044 	addi	r18,r18,1
  806e64:	8c400044 	addi	r17,r17,1
  806e68:	18800115 	stw	r2,4(r3)
  806e6c:	008001c4 	movi	r2,7
  806e70:	19000015 	stw	r4,0(r3)
  806e74:	dc800e15 	stw	r18,56(sp)
  806e78:	dc400d15 	stw	r17,52(sp)
  806e7c:	1441b616 	blt	r2,r17,807558 <___vfprintf_internal_r+0xe38>
  806e80:	1cc00204 	addi	r19,r3,8
  806e84:	d9014217 	ldw	r4,1288(sp)
  806e88:	d9414317 	ldw	r5,1292(sp)
  806e8c:	000d883a 	mov	r6,zero
  806e90:	000f883a 	mov	r7,zero
  806e94:	080e0c00 	call	80e0c0 <__nedf2>
  806e98:	10017426 	beq	r2,zero,80746c <___vfprintf_internal_r+0xd4c>
  806e9c:	d9414717 	ldw	r5,1308(sp)
  806ea0:	d9814117 	ldw	r6,1284(sp)
  806ea4:	8c400044 	addi	r17,r17,1
  806ea8:	2c85883a 	add	r2,r5,r18
  806eac:	14bfffc4 	addi	r18,r2,-1
  806eb0:	28bfffc4 	addi	r2,r5,-1
  806eb4:	30c00044 	addi	r3,r6,1
  806eb8:	98800115 	stw	r2,4(r19)
  806ebc:	008001c4 	movi	r2,7
  806ec0:	98c00015 	stw	r3,0(r19)
  806ec4:	dc800e15 	stw	r18,56(sp)
  806ec8:	dc400d15 	stw	r17,52(sp)
  806ecc:	14418e16 	blt	r2,r17,807508 <___vfprintf_internal_r+0xde8>
  806ed0:	9cc00204 	addi	r19,r19,8
  806ed4:	d9414817 	ldw	r5,1312(sp)
  806ed8:	d8800804 	addi	r2,sp,32
  806edc:	8c400044 	addi	r17,r17,1
  806ee0:	9165883a 	add	r18,r18,r5
  806ee4:	98800015 	stw	r2,0(r19)
  806ee8:	008001c4 	movi	r2,7
  806eec:	99400115 	stw	r5,4(r19)
  806ef0:	dc800e15 	stw	r18,56(sp)
  806ef4:	dc400d15 	stw	r17,52(sp)
  806ef8:	1440ed16 	blt	r2,r17,8072b0 <___vfprintf_internal_r+0xb90>
  806efc:	98c00204 	addi	r3,r19,8
  806f00:	003f8506 	br	806d18 <___vfprintf_internal_r+0x5f8>
  806f04:	d9814a17 	ldw	r6,1320(sp)
  806f08:	d8814517 	ldw	r2,1300(sp)
  806f0c:	30a1c83a 	sub	r16,r6,r2
  806f10:	043f4b0e 	bge	zero,r16,806c40 <___vfprintf_internal_r+0x520>
  806f14:	00800404 	movi	r2,16
  806f18:	14043a0e 	bge	r2,r16,808004 <___vfprintf_internal_r+0x18e4>
  806f1c:	1027883a 	mov	r19,r2
  806f20:	07002074 	movhi	fp,129
  806f24:	e70d6c84 	addi	fp,fp,13746
  806f28:	050001c4 	movi	r20,7
  806f2c:	00000306 	br	806f3c <___vfprintf_internal_r+0x81c>
  806f30:	843ffc04 	addi	r16,r16,-16
  806f34:	ad400204 	addi	r21,r21,8
  806f38:	9c00130e 	bge	r19,r16,806f88 <___vfprintf_internal_r+0x868>
  806f3c:	94800404 	addi	r18,r18,16
  806f40:	8c400044 	addi	r17,r17,1
  806f44:	af000015 	stw	fp,0(r21)
  806f48:	acc00115 	stw	r19,4(r21)
  806f4c:	dc800e15 	stw	r18,56(sp)
  806f50:	dc400d15 	stw	r17,52(sp)
  806f54:	a47ff60e 	bge	r20,r17,806f30 <___vfprintf_internal_r+0x810>
  806f58:	d9014f17 	ldw	r4,1340(sp)
  806f5c:	b00b883a 	mov	r5,r22
  806f60:	d9800c04 	addi	r6,sp,48
  806f64:	d9c15115 	stw	r7,1348(sp)
  806f68:	08066c80 	call	8066c8 <__sprint_r>
  806f6c:	d9c15117 	ldw	r7,1348(sp)
  806f70:	103fa31e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  806f74:	843ffc04 	addi	r16,r16,-16
  806f78:	dc800e17 	ldw	r18,56(sp)
  806f7c:	dc400d17 	ldw	r17,52(sp)
  806f80:	dd401904 	addi	r21,sp,100
  806f84:	9c3fed16 	blt	r19,r16,806f3c <___vfprintf_internal_r+0x81c>
  806f88:	9425883a 	add	r18,r18,r16
  806f8c:	8c400044 	addi	r17,r17,1
  806f90:	008001c4 	movi	r2,7
  806f94:	af000015 	stw	fp,0(r21)
  806f98:	ac000115 	stw	r16,4(r21)
  806f9c:	dc800e15 	stw	r18,56(sp)
  806fa0:	dc400d15 	stw	r17,52(sp)
  806fa4:	14416116 	blt	r2,r17,80752c <___vfprintf_internal_r+0xe0c>
  806fa8:	ad400204 	addi	r21,r21,8
  806fac:	003f2406 	br	806c40 <___vfprintf_internal_r+0x520>
  806fb0:	d9014f17 	ldw	r4,1340(sp)
  806fb4:	0802e580 	call	802e58 <__sinit>
  806fb8:	d9c15117 	ldw	r7,1348(sp)
  806fbc:	003def06 	br	80677c <___vfprintf_internal_r+0x5c>
  806fc0:	d9014f17 	ldw	r4,1340(sp)
  806fc4:	b00b883a 	mov	r5,r22
  806fc8:	d9c15115 	stw	r7,1348(sp)
  806fcc:	08086800 	call	808680 <__swsetup_r>
  806fd0:	d9c15117 	ldw	r7,1348(sp)
  806fd4:	103dee26 	beq	r2,zero,806790 <___vfprintf_internal_r+0x70>
  806fd8:	003f8c06 	br	806e0c <___vfprintf_internal_r+0x6ec>
  806fdc:	d9014217 	ldw	r4,1288(sp)
  806fe0:	d9414317 	ldw	r5,1292(sp)
  806fe4:	000d883a 	mov	r6,zero
  806fe8:	000f883a 	mov	r7,zero
  806fec:	080e0380 	call	80e038 <__eqdf2>
  806ff0:	1000f21e 	bne	r2,zero,8073bc <___vfprintf_internal_r+0xc9c>
  806ff4:	00802074 	movhi	r2,129
  806ff8:	108d6c04 	addi	r2,r2,13744
  806ffc:	94800044 	addi	r18,r18,1
  807000:	8c400044 	addi	r17,r17,1
  807004:	a8800015 	stw	r2,0(r21)
  807008:	00c00044 	movi	r3,1
  80700c:	008001c4 	movi	r2,7
  807010:	a8c00115 	stw	r3,4(r21)
  807014:	dc800e15 	stw	r18,56(sp)
  807018:	dc400d15 	stw	r17,52(sp)
  80701c:	14430016 	blt	r2,r17,807c20 <___vfprintf_internal_r+0x1500>
  807020:	a8c00204 	addi	r3,r21,8
  807024:	d8800517 	ldw	r2,20(sp)
  807028:	d9014717 	ldw	r4,1308(sp)
  80702c:	11015c0e 	bge	r2,r4,8075a0 <___vfprintf_internal_r+0xe80>
  807030:	dc400d17 	ldw	r17,52(sp)
  807034:	d9814917 	ldw	r6,1316(sp)
  807038:	00800044 	movi	r2,1
  80703c:	94800044 	addi	r18,r18,1
  807040:	8c400044 	addi	r17,r17,1
  807044:	18800115 	stw	r2,4(r3)
  807048:	008001c4 	movi	r2,7
  80704c:	19800015 	stw	r6,0(r3)
  807050:	dc800e15 	stw	r18,56(sp)
  807054:	dc400d15 	stw	r17,52(sp)
  807058:	14431616 	blt	r2,r17,807cb4 <___vfprintf_internal_r+0x1594>
  80705c:	18c00204 	addi	r3,r3,8
  807060:	d8814717 	ldw	r2,1308(sp)
  807064:	143fffc4 	addi	r16,r2,-1
  807068:	043f2b0e 	bge	zero,r16,806d18 <___vfprintf_internal_r+0x5f8>
  80706c:	00800404 	movi	r2,16
  807070:	1402a80e 	bge	r2,r16,807b14 <___vfprintf_internal_r+0x13f4>
  807074:	dc400d17 	ldw	r17,52(sp)
  807078:	1027883a 	mov	r19,r2
  80707c:	07002074 	movhi	fp,129
  807080:	e70d6c84 	addi	fp,fp,13746
  807084:	050001c4 	movi	r20,7
  807088:	00000306 	br	807098 <___vfprintf_internal_r+0x978>
  80708c:	18c00204 	addi	r3,r3,8
  807090:	843ffc04 	addi	r16,r16,-16
  807094:	9c02a20e 	bge	r19,r16,807b20 <___vfprintf_internal_r+0x1400>
  807098:	94800404 	addi	r18,r18,16
  80709c:	8c400044 	addi	r17,r17,1
  8070a0:	1f000015 	stw	fp,0(r3)
  8070a4:	1cc00115 	stw	r19,4(r3)
  8070a8:	dc800e15 	stw	r18,56(sp)
  8070ac:	dc400d15 	stw	r17,52(sp)
  8070b0:	a47ff60e 	bge	r20,r17,80708c <___vfprintf_internal_r+0x96c>
  8070b4:	d9014f17 	ldw	r4,1340(sp)
  8070b8:	b00b883a 	mov	r5,r22
  8070bc:	d9800c04 	addi	r6,sp,48
  8070c0:	08066c80 	call	8066c8 <__sprint_r>
  8070c4:	103f4e1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  8070c8:	dc800e17 	ldw	r18,56(sp)
  8070cc:	dc400d17 	ldw	r17,52(sp)
  8070d0:	d8c01904 	addi	r3,sp,100
  8070d4:	003fee06 	br	807090 <___vfprintf_internal_r+0x970>
  8070d8:	d8802c0b 	ldhu	r2,176(sp)
  8070dc:	00ffffc4 	movi	r3,-1
  8070e0:	d8c14b15 	stw	r3,1324(sp)
  8070e4:	1080100c 	andi	r2,r2,64
  8070e8:	103dcc1e 	bne	r2,zero,80681c <___vfprintf_internal_r+0xfc>
  8070ec:	003dce06 	br	806828 <___vfprintf_internal_r+0x108>
  8070f0:	d9014f17 	ldw	r4,1340(sp)
  8070f4:	b00b883a 	mov	r5,r22
  8070f8:	d9800c04 	addi	r6,sp,48
  8070fc:	08066c80 	call	8066c8 <__sprint_r>
  807100:	103f3f1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807104:	dc800e17 	ldw	r18,56(sp)
  807108:	003f2e06 	br	806dc4 <___vfprintf_internal_r+0x6a4>
  80710c:	d9414c17 	ldw	r5,1328(sp)
  807110:	29400414 	ori	r5,r5,16
  807114:	d9414c15 	stw	r5,1328(sp)
  807118:	d9814c17 	ldw	r6,1328(sp)
  80711c:	3080080c 	andi	r2,r6,32
  807120:	10014f1e 	bne	r2,zero,807660 <___vfprintf_internal_r+0xf40>
  807124:	d8c14c17 	ldw	r3,1328(sp)
  807128:	1880040c 	andi	r2,r3,16
  80712c:	1002f01e 	bne	r2,zero,807cf0 <___vfprintf_internal_r+0x15d0>
  807130:	d9014c17 	ldw	r4,1328(sp)
  807134:	2080100c 	andi	r2,r4,64
  807138:	1002ed26 	beq	r2,zero,807cf0 <___vfprintf_internal_r+0x15d0>
  80713c:	3880000f 	ldh	r2,0(r7)
  807140:	39c00104 	addi	r7,r7,4
  807144:	d9c14015 	stw	r7,1280(sp)
  807148:	1023d7fa 	srai	r17,r2,31
  80714c:	1021883a 	mov	r16,r2
  807150:	88037816 	blt	r17,zero,807f34 <___vfprintf_internal_r+0x1814>
  807154:	01000044 	movi	r4,1
  807158:	98000416 	blt	r19,zero,80716c <___vfprintf_internal_r+0xa4c>
  80715c:	d8c14c17 	ldw	r3,1328(sp)
  807160:	00bfdfc4 	movi	r2,-129
  807164:	1886703a 	and	r3,r3,r2
  807168:	d8c14c15 	stw	r3,1328(sp)
  80716c:	8444b03a 	or	r2,r16,r17
  807170:	10022c1e 	bne	r2,zero,807a24 <___vfprintf_internal_r+0x1304>
  807174:	98022b1e 	bne	r19,zero,807a24 <___vfprintf_internal_r+0x1304>
  807178:	20803fcc 	andi	r2,r4,255
  80717c:	1002a126 	beq	r2,zero,807c04 <___vfprintf_internal_r+0x14e4>
  807180:	d8c01904 	addi	r3,sp,100
  807184:	dd000f04 	addi	r20,sp,60
  807188:	d8c14115 	stw	r3,1284(sp)
  80718c:	d8c14117 	ldw	r3,1284(sp)
  807190:	dcc14515 	stw	r19,1300(sp)
  807194:	a0c5c83a 	sub	r2,r20,r3
  807198:	11c00a04 	addi	r7,r2,40
  80719c:	99c0010e 	bge	r19,r7,8071a4 <___vfprintf_internal_r+0xa84>
  8071a0:	d9c14515 	stw	r7,1300(sp)
  8071a4:	dcc14615 	stw	r19,1304(sp)
  8071a8:	d8800407 	ldb	r2,16(sp)
  8071ac:	103e4c26 	beq	r2,zero,806ae0 <___vfprintf_internal_r+0x3c0>
  8071b0:	d8814517 	ldw	r2,1300(sp)
  8071b4:	10800044 	addi	r2,r2,1
  8071b8:	d8814515 	stw	r2,1300(sp)
  8071bc:	003e4806 	br	806ae0 <___vfprintf_internal_r+0x3c0>
  8071c0:	d9814c17 	ldw	r6,1328(sp)
  8071c4:	31800414 	ori	r6,r6,16
  8071c8:	d9814c15 	stw	r6,1328(sp)
  8071cc:	d8c14c17 	ldw	r3,1328(sp)
  8071d0:	1880080c 	andi	r2,r3,32
  8071d4:	1001271e 	bne	r2,zero,807674 <___vfprintf_internal_r+0xf54>
  8071d8:	d9414c17 	ldw	r5,1328(sp)
  8071dc:	2880040c 	andi	r2,r5,16
  8071e0:	1002bc1e 	bne	r2,zero,807cd4 <___vfprintf_internal_r+0x15b4>
  8071e4:	d9814c17 	ldw	r6,1328(sp)
  8071e8:	3080100c 	andi	r2,r6,64
  8071ec:	1002b926 	beq	r2,zero,807cd4 <___vfprintf_internal_r+0x15b4>
  8071f0:	3c00000b 	ldhu	r16,0(r7)
  8071f4:	0009883a 	mov	r4,zero
  8071f8:	39c00104 	addi	r7,r7,4
  8071fc:	0023883a 	mov	r17,zero
  807200:	d9c14015 	stw	r7,1280(sp)
  807204:	d8000405 	stb	zero,16(sp)
  807208:	003fd306 	br	807158 <___vfprintf_internal_r+0xa38>
  80720c:	d9014c17 	ldw	r4,1328(sp)
  807210:	21000414 	ori	r4,r4,16
  807214:	d9014c15 	stw	r4,1328(sp)
  807218:	d9414c17 	ldw	r5,1328(sp)
  80721c:	2880080c 	andi	r2,r5,32
  807220:	1001081e 	bne	r2,zero,807644 <___vfprintf_internal_r+0xf24>
  807224:	d8c14c17 	ldw	r3,1328(sp)
  807228:	1880040c 	andi	r2,r3,16
  80722c:	1002b61e 	bne	r2,zero,807d08 <___vfprintf_internal_r+0x15e8>
  807230:	d9014c17 	ldw	r4,1328(sp)
  807234:	2080100c 	andi	r2,r4,64
  807238:	1002b326 	beq	r2,zero,807d08 <___vfprintf_internal_r+0x15e8>
  80723c:	3c00000b 	ldhu	r16,0(r7)
  807240:	01000044 	movi	r4,1
  807244:	39c00104 	addi	r7,r7,4
  807248:	0023883a 	mov	r17,zero
  80724c:	d9c14015 	stw	r7,1280(sp)
  807250:	d8000405 	stb	zero,16(sp)
  807254:	003fc006 	br	807158 <___vfprintf_internal_r+0xa38>
  807258:	d9014f17 	ldw	r4,1340(sp)
  80725c:	b00b883a 	mov	r5,r22
  807260:	d9800c04 	addi	r6,sp,48
  807264:	08066c80 	call	8066c8 <__sprint_r>
  807268:	103ee51e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  80726c:	dc800e17 	ldw	r18,56(sp)
  807270:	d8c01904 	addi	r3,sp,100
  807274:	d9814c17 	ldw	r6,1328(sp)
  807278:	3080004c 	andi	r2,r6,1
  80727c:	1005003a 	cmpeq	r2,r2,zero
  807280:	103ea51e 	bne	r2,zero,806d18 <___vfprintf_internal_r+0x5f8>
  807284:	00800044 	movi	r2,1
  807288:	dc400d17 	ldw	r17,52(sp)
  80728c:	18800115 	stw	r2,4(r3)
  807290:	d8814917 	ldw	r2,1316(sp)
  807294:	94800044 	addi	r18,r18,1
  807298:	8c400044 	addi	r17,r17,1
  80729c:	18800015 	stw	r2,0(r3)
  8072a0:	008001c4 	movi	r2,7
  8072a4:	dc800e15 	stw	r18,56(sp)
  8072a8:	dc400d15 	stw	r17,52(sp)
  8072ac:	1442240e 	bge	r2,r17,807b40 <___vfprintf_internal_r+0x1420>
  8072b0:	d9014f17 	ldw	r4,1340(sp)
  8072b4:	b00b883a 	mov	r5,r22
  8072b8:	d9800c04 	addi	r6,sp,48
  8072bc:	08066c80 	call	8066c8 <__sprint_r>
  8072c0:	103ecf1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  8072c4:	dc800e17 	ldw	r18,56(sp)
  8072c8:	d8c01904 	addi	r3,sp,100
  8072cc:	003e9206 	br	806d18 <___vfprintf_internal_r+0x5f8>
  8072d0:	d9014f17 	ldw	r4,1340(sp)
  8072d4:	b00b883a 	mov	r5,r22
  8072d8:	d9800c04 	addi	r6,sp,48
  8072dc:	08066c80 	call	8066c8 <__sprint_r>
  8072e0:	103ec026 	beq	r2,zero,806de4 <___vfprintf_internal_r+0x6c4>
  8072e4:	003ec606 	br	806e00 <___vfprintf_internal_r+0x6e0>
  8072e8:	d9014f17 	ldw	r4,1340(sp)
  8072ec:	b00b883a 	mov	r5,r22
  8072f0:	d9800c04 	addi	r6,sp,48
  8072f4:	d9c15115 	stw	r7,1348(sp)
  8072f8:	08066c80 	call	8066c8 <__sprint_r>
  8072fc:	d9c15117 	ldw	r7,1348(sp)
  807300:	103ebf1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807304:	dc800e17 	ldw	r18,56(sp)
  807308:	dc400d17 	ldw	r17,52(sp)
  80730c:	dd401904 	addi	r21,sp,100
  807310:	003e7406 	br	806ce4 <___vfprintf_internal_r+0x5c4>
  807314:	d9014f17 	ldw	r4,1340(sp)
  807318:	b00b883a 	mov	r5,r22
  80731c:	d9800c04 	addi	r6,sp,48
  807320:	d9c15115 	stw	r7,1348(sp)
  807324:	08066c80 	call	8066c8 <__sprint_r>
  807328:	d9c15117 	ldw	r7,1348(sp)
  80732c:	103eb41e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807330:	dd401904 	addi	r21,sp,100
  807334:	003d6d06 	br	8068ec <___vfprintf_internal_r+0x1cc>
  807338:	d9014f17 	ldw	r4,1340(sp)
  80733c:	b00b883a 	mov	r5,r22
  807340:	d9800c04 	addi	r6,sp,48
  807344:	d9c15115 	stw	r7,1348(sp)
  807348:	08066c80 	call	8066c8 <__sprint_r>
  80734c:	d9c15117 	ldw	r7,1348(sp)
  807350:	103eab1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807354:	dc800e17 	ldw	r18,56(sp)
  807358:	dc400d17 	ldw	r17,52(sp)
  80735c:	dd401904 	addi	r21,sp,100
  807360:	003e3406 	br	806c34 <___vfprintf_internal_r+0x514>
  807364:	d9014f17 	ldw	r4,1340(sp)
  807368:	b00b883a 	mov	r5,r22
  80736c:	d9800c04 	addi	r6,sp,48
  807370:	d9c15115 	stw	r7,1348(sp)
  807374:	08066c80 	call	8066c8 <__sprint_r>
  807378:	d9c15117 	ldw	r7,1348(sp)
  80737c:	103ea01e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807380:	dc800e17 	ldw	r18,56(sp)
  807384:	dc400d17 	ldw	r17,52(sp)
  807388:	dd401904 	addi	r21,sp,100
  80738c:	003e1c06 	br	806c00 <___vfprintf_internal_r+0x4e0>
  807390:	d9014f17 	ldw	r4,1340(sp)
  807394:	b00b883a 	mov	r5,r22
  807398:	d9800c04 	addi	r6,sp,48
  80739c:	d9c15115 	stw	r7,1348(sp)
  8073a0:	08066c80 	call	8066c8 <__sprint_r>
  8073a4:	d9c15117 	ldw	r7,1348(sp)
  8073a8:	103e951e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  8073ac:	dc800e17 	ldw	r18,56(sp)
  8073b0:	dc400d17 	ldw	r17,52(sp)
  8073b4:	dd401904 	addi	r21,sp,100
  8073b8:	003e0406 	br	806bcc <___vfprintf_internal_r+0x4ac>
  8073bc:	d9000517 	ldw	r4,20(sp)
  8073c0:	0102580e 	bge	zero,r4,807d24 <___vfprintf_internal_r+0x1604>
  8073c4:	d9814717 	ldw	r6,1308(sp)
  8073c8:	21807a16 	blt	r4,r6,8075b4 <___vfprintf_internal_r+0xe94>
  8073cc:	d8814117 	ldw	r2,1284(sp)
  8073d0:	91a5883a 	add	r18,r18,r6
  8073d4:	8c400044 	addi	r17,r17,1
  8073d8:	a8800015 	stw	r2,0(r21)
  8073dc:	008001c4 	movi	r2,7
  8073e0:	a9800115 	stw	r6,4(r21)
  8073e4:	dc800e15 	stw	r18,56(sp)
  8073e8:	dc400d15 	stw	r17,52(sp)
  8073ec:	1442fc16 	blt	r2,r17,807fe0 <___vfprintf_internal_r+0x18c0>
  8073f0:	a8c00204 	addi	r3,r21,8
  8073f4:	d9414717 	ldw	r5,1308(sp)
  8073f8:	2161c83a 	sub	r16,r4,r5
  8073fc:	043f9d0e 	bge	zero,r16,807274 <___vfprintf_internal_r+0xb54>
  807400:	00800404 	movi	r2,16
  807404:	1402190e 	bge	r2,r16,807c6c <___vfprintf_internal_r+0x154c>
  807408:	dc400d17 	ldw	r17,52(sp)
  80740c:	1027883a 	mov	r19,r2
  807410:	07002074 	movhi	fp,129
  807414:	e70d6c84 	addi	fp,fp,13746
  807418:	050001c4 	movi	r20,7
  80741c:	00000306 	br	80742c <___vfprintf_internal_r+0xd0c>
  807420:	18c00204 	addi	r3,r3,8
  807424:	843ffc04 	addi	r16,r16,-16
  807428:	9c02130e 	bge	r19,r16,807c78 <___vfprintf_internal_r+0x1558>
  80742c:	94800404 	addi	r18,r18,16
  807430:	8c400044 	addi	r17,r17,1
  807434:	1f000015 	stw	fp,0(r3)
  807438:	1cc00115 	stw	r19,4(r3)
  80743c:	dc800e15 	stw	r18,56(sp)
  807440:	dc400d15 	stw	r17,52(sp)
  807444:	a47ff60e 	bge	r20,r17,807420 <___vfprintf_internal_r+0xd00>
  807448:	d9014f17 	ldw	r4,1340(sp)
  80744c:	b00b883a 	mov	r5,r22
  807450:	d9800c04 	addi	r6,sp,48
  807454:	08066c80 	call	8066c8 <__sprint_r>
  807458:	103e691e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  80745c:	dc800e17 	ldw	r18,56(sp)
  807460:	dc400d17 	ldw	r17,52(sp)
  807464:	d8c01904 	addi	r3,sp,100
  807468:	003fee06 	br	807424 <___vfprintf_internal_r+0xd04>
  80746c:	d8814717 	ldw	r2,1308(sp)
  807470:	143fffc4 	addi	r16,r2,-1
  807474:	043e970e 	bge	zero,r16,806ed4 <___vfprintf_internal_r+0x7b4>
  807478:	00800404 	movi	r2,16
  80747c:	1400180e 	bge	r2,r16,8074e0 <___vfprintf_internal_r+0xdc0>
  807480:	1029883a 	mov	r20,r2
  807484:	07002074 	movhi	fp,129
  807488:	e70d6c84 	addi	fp,fp,13746
  80748c:	054001c4 	movi	r21,7
  807490:	00000306 	br	8074a0 <___vfprintf_internal_r+0xd80>
  807494:	9cc00204 	addi	r19,r19,8
  807498:	843ffc04 	addi	r16,r16,-16
  80749c:	a400120e 	bge	r20,r16,8074e8 <___vfprintf_internal_r+0xdc8>
  8074a0:	94800404 	addi	r18,r18,16
  8074a4:	8c400044 	addi	r17,r17,1
  8074a8:	9f000015 	stw	fp,0(r19)
  8074ac:	9d000115 	stw	r20,4(r19)
  8074b0:	dc800e15 	stw	r18,56(sp)
  8074b4:	dc400d15 	stw	r17,52(sp)
  8074b8:	ac7ff60e 	bge	r21,r17,807494 <___vfprintf_internal_r+0xd74>
  8074bc:	d9014f17 	ldw	r4,1340(sp)
  8074c0:	b00b883a 	mov	r5,r22
  8074c4:	d9800c04 	addi	r6,sp,48
  8074c8:	08066c80 	call	8066c8 <__sprint_r>
  8074cc:	103e4c1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  8074d0:	dc800e17 	ldw	r18,56(sp)
  8074d4:	dc400d17 	ldw	r17,52(sp)
  8074d8:	dcc01904 	addi	r19,sp,100
  8074dc:	003fee06 	br	807498 <___vfprintf_internal_r+0xd78>
  8074e0:	07002074 	movhi	fp,129
  8074e4:	e70d6c84 	addi	fp,fp,13746
  8074e8:	9425883a 	add	r18,r18,r16
  8074ec:	8c400044 	addi	r17,r17,1
  8074f0:	008001c4 	movi	r2,7
  8074f4:	9f000015 	stw	fp,0(r19)
  8074f8:	9c000115 	stw	r16,4(r19)
  8074fc:	dc800e15 	stw	r18,56(sp)
  807500:	dc400d15 	stw	r17,52(sp)
  807504:	147e720e 	bge	r2,r17,806ed0 <___vfprintf_internal_r+0x7b0>
  807508:	d9014f17 	ldw	r4,1340(sp)
  80750c:	b00b883a 	mov	r5,r22
  807510:	d9800c04 	addi	r6,sp,48
  807514:	08066c80 	call	8066c8 <__sprint_r>
  807518:	103e391e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  80751c:	dc800e17 	ldw	r18,56(sp)
  807520:	dc400d17 	ldw	r17,52(sp)
  807524:	dcc01904 	addi	r19,sp,100
  807528:	003e6a06 	br	806ed4 <___vfprintf_internal_r+0x7b4>
  80752c:	d9014f17 	ldw	r4,1340(sp)
  807530:	b00b883a 	mov	r5,r22
  807534:	d9800c04 	addi	r6,sp,48
  807538:	d9c15115 	stw	r7,1348(sp)
  80753c:	08066c80 	call	8066c8 <__sprint_r>
  807540:	d9c15117 	ldw	r7,1348(sp)
  807544:	103e2e1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807548:	dc800e17 	ldw	r18,56(sp)
  80754c:	dc400d17 	ldw	r17,52(sp)
  807550:	dd401904 	addi	r21,sp,100
  807554:	003dba06 	br	806c40 <___vfprintf_internal_r+0x520>
  807558:	d9014f17 	ldw	r4,1340(sp)
  80755c:	b00b883a 	mov	r5,r22
  807560:	d9800c04 	addi	r6,sp,48
  807564:	08066c80 	call	8066c8 <__sprint_r>
  807568:	103e251e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  80756c:	dc800e17 	ldw	r18,56(sp)
  807570:	dc400d17 	ldw	r17,52(sp)
  807574:	dcc01904 	addi	r19,sp,100
  807578:	003e4206 	br	806e84 <___vfprintf_internal_r+0x764>
  80757c:	d9014f17 	ldw	r4,1340(sp)
  807580:	b00b883a 	mov	r5,r22
  807584:	d9800c04 	addi	r6,sp,48
  807588:	08066c80 	call	8066c8 <__sprint_r>
  80758c:	103e1c1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807590:	dc800e17 	ldw	r18,56(sp)
  807594:	dc400d17 	ldw	r17,52(sp)
  807598:	d8c01904 	addi	r3,sp,100
  80759c:	003e2e06 	br	806e58 <___vfprintf_internal_r+0x738>
  8075a0:	d9414c17 	ldw	r5,1328(sp)
  8075a4:	2880004c 	andi	r2,r5,1
  8075a8:	1005003a 	cmpeq	r2,r2,zero
  8075ac:	103dda1e 	bne	r2,zero,806d18 <___vfprintf_internal_r+0x5f8>
  8075b0:	003e9f06 	br	807030 <___vfprintf_internal_r+0x910>
  8075b4:	d8c14117 	ldw	r3,1284(sp)
  8075b8:	9125883a 	add	r18,r18,r4
  8075bc:	8c400044 	addi	r17,r17,1
  8075c0:	008001c4 	movi	r2,7
  8075c4:	a8c00015 	stw	r3,0(r21)
  8075c8:	a9000115 	stw	r4,4(r21)
  8075cc:	dc800e15 	stw	r18,56(sp)
  8075d0:	dc400d15 	stw	r17,52(sp)
  8075d4:	14426c16 	blt	r2,r17,807f88 <___vfprintf_internal_r+0x1868>
  8075d8:	a8c00204 	addi	r3,r21,8
  8075dc:	d9414917 	ldw	r5,1316(sp)
  8075e0:	00800044 	movi	r2,1
  8075e4:	94800044 	addi	r18,r18,1
  8075e8:	8c400044 	addi	r17,r17,1
  8075ec:	18800115 	stw	r2,4(r3)
  8075f0:	008001c4 	movi	r2,7
  8075f4:	19400015 	stw	r5,0(r3)
  8075f8:	dc800e15 	stw	r18,56(sp)
  8075fc:	dc400d15 	stw	r17,52(sp)
  807600:	2021883a 	mov	r16,r4
  807604:	14425616 	blt	r2,r17,807f60 <___vfprintf_internal_r+0x1840>
  807608:	19400204 	addi	r5,r3,8
  80760c:	d9814717 	ldw	r6,1308(sp)
  807610:	8c400044 	addi	r17,r17,1
  807614:	dc400d15 	stw	r17,52(sp)
  807618:	3107c83a 	sub	r3,r6,r4
  80761c:	d9014117 	ldw	r4,1284(sp)
  807620:	90e5883a 	add	r18,r18,r3
  807624:	28c00115 	stw	r3,4(r5)
  807628:	8105883a 	add	r2,r16,r4
  80762c:	28800015 	stw	r2,0(r5)
  807630:	008001c4 	movi	r2,7
  807634:	dc800e15 	stw	r18,56(sp)
  807638:	147f1d16 	blt	r2,r17,8072b0 <___vfprintf_internal_r+0xb90>
  80763c:	28c00204 	addi	r3,r5,8
  807640:	003db506 	br	806d18 <___vfprintf_internal_r+0x5f8>
  807644:	3c000017 	ldw	r16,0(r7)
  807648:	3c400117 	ldw	r17,4(r7)
  80764c:	39800204 	addi	r6,r7,8
  807650:	01000044 	movi	r4,1
  807654:	d9814015 	stw	r6,1280(sp)
  807658:	d8000405 	stb	zero,16(sp)
  80765c:	003ebe06 	br	807158 <___vfprintf_internal_r+0xa38>
  807660:	3c000017 	ldw	r16,0(r7)
  807664:	3c400117 	ldw	r17,4(r7)
  807668:	38800204 	addi	r2,r7,8
  80766c:	d8814015 	stw	r2,1280(sp)
  807670:	003eb706 	br	807150 <___vfprintf_internal_r+0xa30>
  807674:	3c000017 	ldw	r16,0(r7)
  807678:	3c400117 	ldw	r17,4(r7)
  80767c:	39000204 	addi	r4,r7,8
  807680:	d9014015 	stw	r4,1280(sp)
  807684:	0009883a 	mov	r4,zero
  807688:	d8000405 	stb	zero,16(sp)
  80768c:	003eb206 	br	807158 <___vfprintf_internal_r+0xa38>
  807690:	38c00017 	ldw	r3,0(r7)
  807694:	39c00104 	addi	r7,r7,4
  807698:	d8c14a15 	stw	r3,1320(sp)
  80769c:	1800d70e 	bge	r3,zero,8079fc <___vfprintf_internal_r+0x12dc>
  8076a0:	00c7c83a 	sub	r3,zero,r3
  8076a4:	d8c14a15 	stw	r3,1320(sp)
  8076a8:	d9014c17 	ldw	r4,1328(sp)
  8076ac:	b8c00007 	ldb	r3,0(r23)
  8076b0:	21000114 	ori	r4,r4,4
  8076b4:	d9014c15 	stw	r4,1328(sp)
  8076b8:	003c9806 	br	80691c <___vfprintf_internal_r+0x1fc>
  8076bc:	d9814c17 	ldw	r6,1328(sp)
  8076c0:	3080080c 	andi	r2,r6,32
  8076c4:	1001f626 	beq	r2,zero,807ea0 <___vfprintf_internal_r+0x1780>
  8076c8:	d9014b17 	ldw	r4,1324(sp)
  8076cc:	38800017 	ldw	r2,0(r7)
  8076d0:	39c00104 	addi	r7,r7,4
  8076d4:	d9c14015 	stw	r7,1280(sp)
  8076d8:	2007d7fa 	srai	r3,r4,31
  8076dc:	d9c14017 	ldw	r7,1280(sp)
  8076e0:	11000015 	stw	r4,0(r2)
  8076e4:	10c00115 	stw	r3,4(r2)
  8076e8:	003c6906 	br	806890 <___vfprintf_internal_r+0x170>
  8076ec:	b8c00007 	ldb	r3,0(r23)
  8076f0:	00801b04 	movi	r2,108
  8076f4:	18825526 	beq	r3,r2,80804c <___vfprintf_internal_r+0x192c>
  8076f8:	d9414c17 	ldw	r5,1328(sp)
  8076fc:	29400414 	ori	r5,r5,16
  807700:	d9414c15 	stw	r5,1328(sp)
  807704:	003c8506 	br	80691c <___vfprintf_internal_r+0x1fc>
  807708:	d9814c17 	ldw	r6,1328(sp)
  80770c:	b8c00007 	ldb	r3,0(r23)
  807710:	31800814 	ori	r6,r6,32
  807714:	d9814c15 	stw	r6,1328(sp)
  807718:	003c8006 	br	80691c <___vfprintf_internal_r+0x1fc>
  80771c:	d8814c17 	ldw	r2,1328(sp)
  807720:	3c000017 	ldw	r16,0(r7)
  807724:	00c01e04 	movi	r3,120
  807728:	10800094 	ori	r2,r2,2
  80772c:	d8814c15 	stw	r2,1328(sp)
  807730:	39c00104 	addi	r7,r7,4
  807734:	01402074 	movhi	r5,129
  807738:	294d5504 	addi	r5,r5,13652
  80773c:	00800c04 	movi	r2,48
  807740:	0023883a 	mov	r17,zero
  807744:	01000084 	movi	r4,2
  807748:	d9c14015 	stw	r7,1280(sp)
  80774c:	d8c14d15 	stw	r3,1332(sp)
  807750:	d9414415 	stw	r5,1296(sp)
  807754:	d8800445 	stb	r2,17(sp)
  807758:	d8c00485 	stb	r3,18(sp)
  80775c:	d8000405 	stb	zero,16(sp)
  807760:	003e7d06 	br	807158 <___vfprintf_internal_r+0xa38>
  807764:	d8814c17 	ldw	r2,1328(sp)
  807768:	b8c00007 	ldb	r3,0(r23)
  80776c:	10801014 	ori	r2,r2,64
  807770:	d8814c15 	stw	r2,1328(sp)
  807774:	003c6906 	br	80691c <___vfprintf_internal_r+0x1fc>
  807778:	d9414c17 	ldw	r5,1328(sp)
  80777c:	2880020c 	andi	r2,r5,8
  807780:	1001e526 	beq	r2,zero,807f18 <___vfprintf_internal_r+0x17f8>
  807784:	39800017 	ldw	r6,0(r7)
  807788:	38800204 	addi	r2,r7,8
  80778c:	d8814015 	stw	r2,1280(sp)
  807790:	d9814215 	stw	r6,1288(sp)
  807794:	39c00117 	ldw	r7,4(r7)
  807798:	d9c14315 	stw	r7,1292(sp)
  80779c:	d9014217 	ldw	r4,1288(sp)
  8077a0:	d9414317 	ldw	r5,1292(sp)
  8077a4:	080ce200 	call	80ce20 <__isinfd>
  8077a8:	10021d26 	beq	r2,zero,808020 <___vfprintf_internal_r+0x1900>
  8077ac:	d9014217 	ldw	r4,1288(sp)
  8077b0:	d9414317 	ldw	r5,1292(sp)
  8077b4:	000d883a 	mov	r6,zero
  8077b8:	000f883a 	mov	r7,zero
  8077bc:	080e2580 	call	80e258 <__ltdf2>
  8077c0:	1002d016 	blt	r2,zero,808304 <___vfprintf_internal_r+0x1be4>
  8077c4:	d9414d17 	ldw	r5,1332(sp)
  8077c8:	008011c4 	movi	r2,71
  8077cc:	11421016 	blt	r2,r5,808010 <___vfprintf_internal_r+0x18f0>
  8077d0:	01802074 	movhi	r6,129
  8077d4:	318d5a04 	addi	r6,r6,13672
  8077d8:	d9814115 	stw	r6,1284(sp)
  8077dc:	d9014c17 	ldw	r4,1328(sp)
  8077e0:	00c000c4 	movi	r3,3
  8077e4:	00bfdfc4 	movi	r2,-129
  8077e8:	2088703a 	and	r4,r4,r2
  8077ec:	180f883a 	mov	r7,r3
  8077f0:	d8c14515 	stw	r3,1300(sp)
  8077f4:	d9014c15 	stw	r4,1328(sp)
  8077f8:	d8014615 	stw	zero,1304(sp)
  8077fc:	003e6a06 	br	8071a8 <___vfprintf_internal_r+0xa88>
  807800:	38800017 	ldw	r2,0(r7)
  807804:	00c00044 	movi	r3,1
  807808:	39c00104 	addi	r7,r7,4
  80780c:	d9c14015 	stw	r7,1280(sp)
  807810:	d9000f04 	addi	r4,sp,60
  807814:	180f883a 	mov	r7,r3
  807818:	d8c14515 	stw	r3,1300(sp)
  80781c:	d9014115 	stw	r4,1284(sp)
  807820:	d8800f05 	stb	r2,60(sp)
  807824:	d8000405 	stb	zero,16(sp)
  807828:	003cac06 	br	806adc <___vfprintf_internal_r+0x3bc>
  80782c:	01402074 	movhi	r5,129
  807830:	294d6004 	addi	r5,r5,13696
  807834:	d9414415 	stw	r5,1296(sp)
  807838:	d9814c17 	ldw	r6,1328(sp)
  80783c:	3080080c 	andi	r2,r6,32
  807840:	1000ff26 	beq	r2,zero,807c40 <___vfprintf_internal_r+0x1520>
  807844:	3c000017 	ldw	r16,0(r7)
  807848:	3c400117 	ldw	r17,4(r7)
  80784c:	38800204 	addi	r2,r7,8
  807850:	d8814015 	stw	r2,1280(sp)
  807854:	d9414c17 	ldw	r5,1328(sp)
  807858:	2880004c 	andi	r2,r5,1
  80785c:	1005003a 	cmpeq	r2,r2,zero
  807860:	1000b91e 	bne	r2,zero,807b48 <___vfprintf_internal_r+0x1428>
  807864:	8444b03a 	or	r2,r16,r17
  807868:	1000b726 	beq	r2,zero,807b48 <___vfprintf_internal_r+0x1428>
  80786c:	d9814d17 	ldw	r6,1332(sp)
  807870:	29400094 	ori	r5,r5,2
  807874:	00800c04 	movi	r2,48
  807878:	01000084 	movi	r4,2
  80787c:	d9414c15 	stw	r5,1328(sp)
  807880:	d8800445 	stb	r2,17(sp)
  807884:	d9800485 	stb	r6,18(sp)
  807888:	d8000405 	stb	zero,16(sp)
  80788c:	003e3206 	br	807158 <___vfprintf_internal_r+0xa38>
  807890:	01802074 	movhi	r6,129
  807894:	318d5504 	addi	r6,r6,13652
  807898:	d9814415 	stw	r6,1296(sp)
  80789c:	003fe606 	br	807838 <___vfprintf_internal_r+0x1118>
  8078a0:	00800ac4 	movi	r2,43
  8078a4:	d8800405 	stb	r2,16(sp)
  8078a8:	b8c00007 	ldb	r3,0(r23)
  8078ac:	003c1b06 	br	80691c <___vfprintf_internal_r+0x1fc>
  8078b0:	d8814c17 	ldw	r2,1328(sp)
  8078b4:	b8c00007 	ldb	r3,0(r23)
  8078b8:	10800054 	ori	r2,r2,1
  8078bc:	d8814c15 	stw	r2,1328(sp)
  8078c0:	003c1606 	br	80691c <___vfprintf_internal_r+0x1fc>
  8078c4:	d8800407 	ldb	r2,16(sp)
  8078c8:	10004c1e 	bne	r2,zero,8079fc <___vfprintf_internal_r+0x12dc>
  8078cc:	00800804 	movi	r2,32
  8078d0:	d8800405 	stb	r2,16(sp)
  8078d4:	b8c00007 	ldb	r3,0(r23)
  8078d8:	003c1006 	br	80691c <___vfprintf_internal_r+0x1fc>
  8078dc:	d9814c17 	ldw	r6,1328(sp)
  8078e0:	b8c00007 	ldb	r3,0(r23)
  8078e4:	31800214 	ori	r6,r6,8
  8078e8:	d9814c15 	stw	r6,1328(sp)
  8078ec:	003c0b06 	br	80691c <___vfprintf_internal_r+0x1fc>
  8078f0:	0009883a 	mov	r4,zero
  8078f4:	04000244 	movi	r16,9
  8078f8:	01400284 	movi	r5,10
  8078fc:	d9c15115 	stw	r7,1348(sp)
  807900:	0802a640 	call	802a64 <__mulsi3>
  807904:	b9000007 	ldb	r4,0(r23)
  807908:	d8c14d17 	ldw	r3,1332(sp)
  80790c:	bdc00044 	addi	r23,r23,1
  807910:	d9014d15 	stw	r4,1332(sp)
  807914:	d9414d17 	ldw	r5,1332(sp)
  807918:	1885883a 	add	r2,r3,r2
  80791c:	113ff404 	addi	r4,r2,-48
  807920:	28bff404 	addi	r2,r5,-48
  807924:	d9c15117 	ldw	r7,1348(sp)
  807928:	80bff32e 	bgeu	r16,r2,8078f8 <___vfprintf_internal_r+0x11d8>
  80792c:	d9014a15 	stw	r4,1320(sp)
  807930:	003bfc06 	br	806924 <___vfprintf_internal_r+0x204>
  807934:	d8814c17 	ldw	r2,1328(sp)
  807938:	b8c00007 	ldb	r3,0(r23)
  80793c:	10802014 	ori	r2,r2,128
  807940:	d8814c15 	stw	r2,1328(sp)
  807944:	003bf506 	br	80691c <___vfprintf_internal_r+0x1fc>
  807948:	b8c00007 	ldb	r3,0(r23)
  80794c:	00800a84 	movi	r2,42
  807950:	bdc00044 	addi	r23,r23,1
  807954:	18831826 	beq	r3,r2,8085b8 <___vfprintf_internal_r+0x1e98>
  807958:	d8c14d15 	stw	r3,1332(sp)
  80795c:	18bff404 	addi	r2,r3,-48
  807960:	00c00244 	movi	r3,9
  807964:	18827b36 	bltu	r3,r2,808354 <___vfprintf_internal_r+0x1c34>
  807968:	1821883a 	mov	r16,r3
  80796c:	0009883a 	mov	r4,zero
  807970:	01400284 	movi	r5,10
  807974:	d9c15115 	stw	r7,1348(sp)
  807978:	0802a640 	call	802a64 <__mulsi3>
  80797c:	d9414d17 	ldw	r5,1332(sp)
  807980:	b9800007 	ldb	r6,0(r23)
  807984:	d9c15117 	ldw	r7,1348(sp)
  807988:	1145883a 	add	r2,r2,r5
  80798c:	113ff404 	addi	r4,r2,-48
  807990:	30bff404 	addi	r2,r6,-48
  807994:	d9814d15 	stw	r6,1332(sp)
  807998:	bdc00044 	addi	r23,r23,1
  80799c:	80bff42e 	bgeu	r16,r2,807970 <___vfprintf_internal_r+0x1250>
  8079a0:	2027883a 	mov	r19,r4
  8079a4:	203bdf0e 	bge	r4,zero,806924 <___vfprintf_internal_r+0x204>
  8079a8:	04ffffc4 	movi	r19,-1
  8079ac:	003bdd06 	br	806924 <___vfprintf_internal_r+0x204>
  8079b0:	d8000405 	stb	zero,16(sp)
  8079b4:	39800017 	ldw	r6,0(r7)
  8079b8:	39c00104 	addi	r7,r7,4
  8079bc:	d9c14015 	stw	r7,1280(sp)
  8079c0:	d9814115 	stw	r6,1284(sp)
  8079c4:	3001c926 	beq	r6,zero,8080ec <___vfprintf_internal_r+0x19cc>
  8079c8:	98000e16 	blt	r19,zero,807a04 <___vfprintf_internal_r+0x12e4>
  8079cc:	d9014117 	ldw	r4,1284(sp)
  8079d0:	000b883a 	mov	r5,zero
  8079d4:	980d883a 	mov	r6,r19
  8079d8:	080b2d80 	call	80b2d8 <memchr>
  8079dc:	10025926 	beq	r2,zero,808344 <___vfprintf_internal_r+0x1c24>
  8079e0:	d8c14117 	ldw	r3,1284(sp)
  8079e4:	10cfc83a 	sub	r7,r2,r3
  8079e8:	99c19e16 	blt	r19,r7,808064 <___vfprintf_internal_r+0x1944>
  8079ec:	d9c14515 	stw	r7,1300(sp)
  8079f0:	38000916 	blt	r7,zero,807a18 <___vfprintf_internal_r+0x12f8>
  8079f4:	d8014615 	stw	zero,1304(sp)
  8079f8:	003deb06 	br	8071a8 <___vfprintf_internal_r+0xa88>
  8079fc:	b8c00007 	ldb	r3,0(r23)
  807a00:	003bc606 	br	80691c <___vfprintf_internal_r+0x1fc>
  807a04:	d9014117 	ldw	r4,1284(sp)
  807a08:	0804c8c0 	call	804c8c <strlen>
  807a0c:	d8814515 	stw	r2,1300(sp)
  807a10:	100f883a 	mov	r7,r2
  807a14:	103ff70e 	bge	r2,zero,8079f4 <___vfprintf_internal_r+0x12d4>
  807a18:	d8014515 	stw	zero,1300(sp)
  807a1c:	d8014615 	stw	zero,1304(sp)
  807a20:	003de106 	br	8071a8 <___vfprintf_internal_r+0xa88>
  807a24:	20c03fcc 	andi	r3,r4,255
  807a28:	00800044 	movi	r2,1
  807a2c:	18802d26 	beq	r3,r2,807ae4 <___vfprintf_internal_r+0x13c4>
  807a30:	18800e36 	bltu	r3,r2,807a6c <___vfprintf_internal_r+0x134c>
  807a34:	00800084 	movi	r2,2
  807a38:	1880fa26 	beq	r3,r2,807e24 <___vfprintf_internal_r+0x1704>
  807a3c:	01002074 	movhi	r4,129
  807a40:	210d6504 	addi	r4,r4,13716
  807a44:	0804c8c0 	call	804c8c <strlen>
  807a48:	100f883a 	mov	r7,r2
  807a4c:	dcc14515 	stw	r19,1300(sp)
  807a50:	9880010e 	bge	r19,r2,807a58 <___vfprintf_internal_r+0x1338>
  807a54:	d8814515 	stw	r2,1300(sp)
  807a58:	00802074 	movhi	r2,129
  807a5c:	108d6504 	addi	r2,r2,13716
  807a60:	dcc14615 	stw	r19,1304(sp)
  807a64:	d8814115 	stw	r2,1284(sp)
  807a68:	003dcf06 	br	8071a8 <___vfprintf_internal_r+0xa88>
  807a6c:	d9401904 	addi	r5,sp,100
  807a70:	dd000f04 	addi	r20,sp,60
  807a74:	d9414115 	stw	r5,1284(sp)
  807a78:	880a977a 	slli	r5,r17,29
  807a7c:	d9814117 	ldw	r6,1284(sp)
  807a80:	8004d0fa 	srli	r2,r16,3
  807a84:	8806d0fa 	srli	r3,r17,3
  807a88:	810001cc 	andi	r4,r16,7
  807a8c:	2884b03a 	or	r2,r5,r2
  807a90:	31bfffc4 	addi	r6,r6,-1
  807a94:	21000c04 	addi	r4,r4,48
  807a98:	d9814115 	stw	r6,1284(sp)
  807a9c:	10cab03a 	or	r5,r2,r3
  807aa0:	31000005 	stb	r4,0(r6)
  807aa4:	1021883a 	mov	r16,r2
  807aa8:	1823883a 	mov	r17,r3
  807aac:	283ff21e 	bne	r5,zero,807a78 <___vfprintf_internal_r+0x1358>
  807ab0:	d8c14c17 	ldw	r3,1328(sp)
  807ab4:	1880004c 	andi	r2,r3,1
  807ab8:	1005003a 	cmpeq	r2,r2,zero
  807abc:	103db31e 	bne	r2,zero,80718c <___vfprintf_internal_r+0xa6c>
  807ac0:	20803fcc 	andi	r2,r4,255
  807ac4:	1080201c 	xori	r2,r2,128
  807ac8:	10bfe004 	addi	r2,r2,-128
  807acc:	00c00c04 	movi	r3,48
  807ad0:	10fdae26 	beq	r2,r3,80718c <___vfprintf_internal_r+0xa6c>
  807ad4:	31bfffc4 	addi	r6,r6,-1
  807ad8:	d9814115 	stw	r6,1284(sp)
  807adc:	30c00005 	stb	r3,0(r6)
  807ae0:	003daa06 	br	80718c <___vfprintf_internal_r+0xa6c>
  807ae4:	88800068 	cmpgeui	r2,r17,1
  807ae8:	10002c1e 	bne	r2,zero,807b9c <___vfprintf_internal_r+0x147c>
  807aec:	8800021e 	bne	r17,zero,807af8 <___vfprintf_internal_r+0x13d8>
  807af0:	00800244 	movi	r2,9
  807af4:	14002936 	bltu	r2,r16,807b9c <___vfprintf_internal_r+0x147c>
  807af8:	d90018c4 	addi	r4,sp,99
  807afc:	dd000f04 	addi	r20,sp,60
  807b00:	d9014115 	stw	r4,1284(sp)
  807b04:	d9014117 	ldw	r4,1284(sp)
  807b08:	80800c04 	addi	r2,r16,48
  807b0c:	20800005 	stb	r2,0(r4)
  807b10:	003d9e06 	br	80718c <___vfprintf_internal_r+0xa6c>
  807b14:	dc400d17 	ldw	r17,52(sp)
  807b18:	07002074 	movhi	fp,129
  807b1c:	e70d6c84 	addi	fp,fp,13746
  807b20:	9425883a 	add	r18,r18,r16
  807b24:	8c400044 	addi	r17,r17,1
  807b28:	008001c4 	movi	r2,7
  807b2c:	1f000015 	stw	fp,0(r3)
  807b30:	1c000115 	stw	r16,4(r3)
  807b34:	dc800e15 	stw	r18,56(sp)
  807b38:	dc400d15 	stw	r17,52(sp)
  807b3c:	147ddc16 	blt	r2,r17,8072b0 <___vfprintf_internal_r+0xb90>
  807b40:	18c00204 	addi	r3,r3,8
  807b44:	003c7406 	br	806d18 <___vfprintf_internal_r+0x5f8>
  807b48:	01000084 	movi	r4,2
  807b4c:	d8000405 	stb	zero,16(sp)
  807b50:	003d8106 	br	807158 <___vfprintf_internal_r+0xa38>
  807b54:	d9814c17 	ldw	r6,1328(sp)
  807b58:	30c4703a 	and	r2,r6,r3
  807b5c:	1005003a 	cmpeq	r2,r2,zero
  807b60:	103cb326 	beq	r2,zero,806e30 <___vfprintf_internal_r+0x710>
  807b64:	d9014117 	ldw	r4,1284(sp)
  807b68:	94800044 	addi	r18,r18,1
  807b6c:	8c400044 	addi	r17,r17,1
  807b70:	008001c4 	movi	r2,7
  807b74:	a9000015 	stw	r4,0(r21)
  807b78:	a8c00115 	stw	r3,4(r21)
  807b7c:	dc800e15 	stw	r18,56(sp)
  807b80:	dc400d15 	stw	r17,52(sp)
  807b84:	147e6016 	blt	r2,r17,807508 <___vfprintf_internal_r+0xde8>
  807b88:	acc00204 	addi	r19,r21,8
  807b8c:	003cd106 	br	806ed4 <___vfprintf_internal_r+0x7b4>
  807b90:	07002074 	movhi	fp,129
  807b94:	e70d6c84 	addi	fp,fp,13746
  807b98:	003c4906 	br	806cc0 <___vfprintf_internal_r+0x5a0>
  807b9c:	dd000f04 	addi	r20,sp,60
  807ba0:	dc801904 	addi	r18,sp,100
  807ba4:	8009883a 	mov	r4,r16
  807ba8:	880b883a 	mov	r5,r17
  807bac:	01800284 	movi	r6,10
  807bb0:	000f883a 	mov	r7,zero
  807bb4:	080d8700 	call	80d870 <__umoddi3>
  807bb8:	12000c04 	addi	r8,r2,48
  807bbc:	94bfffc4 	addi	r18,r18,-1
  807bc0:	8009883a 	mov	r4,r16
  807bc4:	880b883a 	mov	r5,r17
  807bc8:	01800284 	movi	r6,10
  807bcc:	000f883a 	mov	r7,zero
  807bd0:	92000005 	stb	r8,0(r18)
  807bd4:	080d2040 	call	80d204 <__udivdi3>
  807bd8:	1009883a 	mov	r4,r2
  807bdc:	1021883a 	mov	r16,r2
  807be0:	18800068 	cmpgeui	r2,r3,1
  807be4:	1823883a 	mov	r17,r3
  807be8:	103fee1e 	bne	r2,zero,807ba4 <___vfprintf_internal_r+0x1484>
  807bec:	1800021e 	bne	r3,zero,807bf8 <___vfprintf_internal_r+0x14d8>
  807bf0:	00800244 	movi	r2,9
  807bf4:	113feb36 	bltu	r2,r4,807ba4 <___vfprintf_internal_r+0x1484>
  807bf8:	94bfffc4 	addi	r18,r18,-1
  807bfc:	dc814115 	stw	r18,1284(sp)
  807c00:	003fc006 	br	807b04 <___vfprintf_internal_r+0x13e4>
  807c04:	d9014c17 	ldw	r4,1328(sp)
  807c08:	2080004c 	andi	r2,r4,1
  807c0c:	10009a1e 	bne	r2,zero,807e78 <___vfprintf_internal_r+0x1758>
  807c10:	d9401904 	addi	r5,sp,100
  807c14:	dd000f04 	addi	r20,sp,60
  807c18:	d9414115 	stw	r5,1284(sp)
  807c1c:	003d5b06 	br	80718c <___vfprintf_internal_r+0xa6c>
  807c20:	d9014f17 	ldw	r4,1340(sp)
  807c24:	b00b883a 	mov	r5,r22
  807c28:	d9800c04 	addi	r6,sp,48
  807c2c:	08066c80 	call	8066c8 <__sprint_r>
  807c30:	103c731e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807c34:	dc800e17 	ldw	r18,56(sp)
  807c38:	d8c01904 	addi	r3,sp,100
  807c3c:	003cf906 	br	807024 <___vfprintf_internal_r+0x904>
  807c40:	d8c14c17 	ldw	r3,1328(sp)
  807c44:	1880040c 	andi	r2,r3,16
  807c48:	1000711e 	bne	r2,zero,807e10 <___vfprintf_internal_r+0x16f0>
  807c4c:	d9014c17 	ldw	r4,1328(sp)
  807c50:	2080100c 	andi	r2,r4,64
  807c54:	10006e26 	beq	r2,zero,807e10 <___vfprintf_internal_r+0x16f0>
  807c58:	3c00000b 	ldhu	r16,0(r7)
  807c5c:	0023883a 	mov	r17,zero
  807c60:	39c00104 	addi	r7,r7,4
  807c64:	d9c14015 	stw	r7,1280(sp)
  807c68:	003efa06 	br	807854 <___vfprintf_internal_r+0x1134>
  807c6c:	dc400d17 	ldw	r17,52(sp)
  807c70:	07002074 	movhi	fp,129
  807c74:	e70d6c84 	addi	fp,fp,13746
  807c78:	9425883a 	add	r18,r18,r16
  807c7c:	8c400044 	addi	r17,r17,1
  807c80:	008001c4 	movi	r2,7
  807c84:	1f000015 	stw	fp,0(r3)
  807c88:	1c000115 	stw	r16,4(r3)
  807c8c:	dc800e15 	stw	r18,56(sp)
  807c90:	dc400d15 	stw	r17,52(sp)
  807c94:	147d7016 	blt	r2,r17,807258 <___vfprintf_internal_r+0xb38>
  807c98:	18c00204 	addi	r3,r3,8
  807c9c:	003d7506 	br	807274 <___vfprintf_internal_r+0xb54>
  807ca0:	dc800e17 	ldw	r18,56(sp)
  807ca4:	dc400d17 	ldw	r17,52(sp)
  807ca8:	07002074 	movhi	fp,129
  807cac:	e70d7084 	addi	fp,fp,13762
  807cb0:	003bba06 	br	806b9c <___vfprintf_internal_r+0x47c>
  807cb4:	d9014f17 	ldw	r4,1340(sp)
  807cb8:	b00b883a 	mov	r5,r22
  807cbc:	d9800c04 	addi	r6,sp,48
  807cc0:	08066c80 	call	8066c8 <__sprint_r>
  807cc4:	103c4e1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807cc8:	dc800e17 	ldw	r18,56(sp)
  807ccc:	d8c01904 	addi	r3,sp,100
  807cd0:	003ce306 	br	807060 <___vfprintf_internal_r+0x940>
  807cd4:	3c000017 	ldw	r16,0(r7)
  807cd8:	0009883a 	mov	r4,zero
  807cdc:	39c00104 	addi	r7,r7,4
  807ce0:	0023883a 	mov	r17,zero
  807ce4:	d9c14015 	stw	r7,1280(sp)
  807ce8:	d8000405 	stb	zero,16(sp)
  807cec:	003d1a06 	br	807158 <___vfprintf_internal_r+0xa38>
  807cf0:	38800017 	ldw	r2,0(r7)
  807cf4:	39c00104 	addi	r7,r7,4
  807cf8:	d9c14015 	stw	r7,1280(sp)
  807cfc:	1023d7fa 	srai	r17,r2,31
  807d00:	1021883a 	mov	r16,r2
  807d04:	003d1206 	br	807150 <___vfprintf_internal_r+0xa30>
  807d08:	3c000017 	ldw	r16,0(r7)
  807d0c:	01000044 	movi	r4,1
  807d10:	39c00104 	addi	r7,r7,4
  807d14:	0023883a 	mov	r17,zero
  807d18:	d9c14015 	stw	r7,1280(sp)
  807d1c:	d8000405 	stb	zero,16(sp)
  807d20:	003d0d06 	br	807158 <___vfprintf_internal_r+0xa38>
  807d24:	00802074 	movhi	r2,129
  807d28:	108d6c04 	addi	r2,r2,13744
  807d2c:	94800044 	addi	r18,r18,1
  807d30:	8c400044 	addi	r17,r17,1
  807d34:	a8800015 	stw	r2,0(r21)
  807d38:	00c00044 	movi	r3,1
  807d3c:	008001c4 	movi	r2,7
  807d40:	a8c00115 	stw	r3,4(r21)
  807d44:	dc800e15 	stw	r18,56(sp)
  807d48:	dc400d15 	stw	r17,52(sp)
  807d4c:	1440ca16 	blt	r2,r17,808078 <___vfprintf_internal_r+0x1958>
  807d50:	a8c00204 	addi	r3,r21,8
  807d54:	2000061e 	bne	r4,zero,807d70 <___vfprintf_internal_r+0x1650>
  807d58:	d9414717 	ldw	r5,1308(sp)
  807d5c:	2800041e 	bne	r5,zero,807d70 <___vfprintf_internal_r+0x1650>
  807d60:	d9814c17 	ldw	r6,1328(sp)
  807d64:	3080004c 	andi	r2,r6,1
  807d68:	1005003a 	cmpeq	r2,r2,zero
  807d6c:	103bea1e 	bne	r2,zero,806d18 <___vfprintf_internal_r+0x5f8>
  807d70:	00800044 	movi	r2,1
  807d74:	dc400d17 	ldw	r17,52(sp)
  807d78:	18800115 	stw	r2,4(r3)
  807d7c:	d8814917 	ldw	r2,1316(sp)
  807d80:	94800044 	addi	r18,r18,1
  807d84:	8c400044 	addi	r17,r17,1
  807d88:	18800015 	stw	r2,0(r3)
  807d8c:	008001c4 	movi	r2,7
  807d90:	dc800e15 	stw	r18,56(sp)
  807d94:	dc400d15 	stw	r17,52(sp)
  807d98:	1440ca16 	blt	r2,r17,8080c4 <___vfprintf_internal_r+0x19a4>
  807d9c:	18c00204 	addi	r3,r3,8
  807da0:	0121c83a 	sub	r16,zero,r4
  807da4:	0400500e 	bge	zero,r16,807ee8 <___vfprintf_internal_r+0x17c8>
  807da8:	00800404 	movi	r2,16
  807dac:	1400800e 	bge	r2,r16,807fb0 <___vfprintf_internal_r+0x1890>
  807db0:	1027883a 	mov	r19,r2
  807db4:	07002074 	movhi	fp,129
  807db8:	e70d6c84 	addi	fp,fp,13746
  807dbc:	050001c4 	movi	r20,7
  807dc0:	00000306 	br	807dd0 <___vfprintf_internal_r+0x16b0>
  807dc4:	18c00204 	addi	r3,r3,8
  807dc8:	843ffc04 	addi	r16,r16,-16
  807dcc:	9c007a0e 	bge	r19,r16,807fb8 <___vfprintf_internal_r+0x1898>
  807dd0:	94800404 	addi	r18,r18,16
  807dd4:	8c400044 	addi	r17,r17,1
  807dd8:	1f000015 	stw	fp,0(r3)
  807ddc:	1cc00115 	stw	r19,4(r3)
  807de0:	dc800e15 	stw	r18,56(sp)
  807de4:	dc400d15 	stw	r17,52(sp)
  807de8:	a47ff60e 	bge	r20,r17,807dc4 <___vfprintf_internal_r+0x16a4>
  807dec:	d9014f17 	ldw	r4,1340(sp)
  807df0:	b00b883a 	mov	r5,r22
  807df4:	d9800c04 	addi	r6,sp,48
  807df8:	08066c80 	call	8066c8 <__sprint_r>
  807dfc:	103c001e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807e00:	dc800e17 	ldw	r18,56(sp)
  807e04:	dc400d17 	ldw	r17,52(sp)
  807e08:	d8c01904 	addi	r3,sp,100
  807e0c:	003fee06 	br	807dc8 <___vfprintf_internal_r+0x16a8>
  807e10:	3c000017 	ldw	r16,0(r7)
  807e14:	0023883a 	mov	r17,zero
  807e18:	39c00104 	addi	r7,r7,4
  807e1c:	d9c14015 	stw	r7,1280(sp)
  807e20:	003e8c06 	br	807854 <___vfprintf_internal_r+0x1134>
  807e24:	d9401904 	addi	r5,sp,100
  807e28:	dd000f04 	addi	r20,sp,60
  807e2c:	d9414115 	stw	r5,1284(sp)
  807e30:	d9814417 	ldw	r6,1296(sp)
  807e34:	880a973a 	slli	r5,r17,28
  807e38:	8004d13a 	srli	r2,r16,4
  807e3c:	810003cc 	andi	r4,r16,15
  807e40:	3109883a 	add	r4,r6,r4
  807e44:	2884b03a 	or	r2,r5,r2
  807e48:	21400003 	ldbu	r5,0(r4)
  807e4c:	d9014117 	ldw	r4,1284(sp)
  807e50:	8806d13a 	srli	r3,r17,4
  807e54:	1021883a 	mov	r16,r2
  807e58:	213fffc4 	addi	r4,r4,-1
  807e5c:	d9014115 	stw	r4,1284(sp)
  807e60:	d9814117 	ldw	r6,1284(sp)
  807e64:	10c8b03a 	or	r4,r2,r3
  807e68:	1823883a 	mov	r17,r3
  807e6c:	31400005 	stb	r5,0(r6)
  807e70:	203fef1e 	bne	r4,zero,807e30 <___vfprintf_internal_r+0x1710>
  807e74:	003cc506 	br	80718c <___vfprintf_internal_r+0xa6c>
  807e78:	00800c04 	movi	r2,48
  807e7c:	d98018c4 	addi	r6,sp,99
  807e80:	dd000f04 	addi	r20,sp,60
  807e84:	d88018c5 	stb	r2,99(sp)
  807e88:	d9814115 	stw	r6,1284(sp)
  807e8c:	003cbf06 	br	80718c <___vfprintf_internal_r+0xa6c>
  807e90:	dc400d17 	ldw	r17,52(sp)
  807e94:	07002074 	movhi	fp,129
  807e98:	e70d7084 	addi	fp,fp,13762
  807e9c:	003bc106 	br	806da4 <___vfprintf_internal_r+0x684>
  807ea0:	d9414c17 	ldw	r5,1328(sp)
  807ea4:	2880040c 	andi	r2,r5,16
  807ea8:	10007c26 	beq	r2,zero,80809c <___vfprintf_internal_r+0x197c>
  807eac:	38800017 	ldw	r2,0(r7)
  807eb0:	39c00104 	addi	r7,r7,4
  807eb4:	d9c14015 	stw	r7,1280(sp)
  807eb8:	d9814b17 	ldw	r6,1324(sp)
  807ebc:	d9c14017 	ldw	r7,1280(sp)
  807ec0:	11800015 	stw	r6,0(r2)
  807ec4:	003a7206 	br	806890 <___vfprintf_internal_r+0x170>
  807ec8:	d9014f17 	ldw	r4,1340(sp)
  807ecc:	b00b883a 	mov	r5,r22
  807ed0:	d9800c04 	addi	r6,sp,48
  807ed4:	08066c80 	call	8066c8 <__sprint_r>
  807ed8:	103bc91e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807edc:	dc800e17 	ldw	r18,56(sp)
  807ee0:	dc400d17 	ldw	r17,52(sp)
  807ee4:	d8c01904 	addi	r3,sp,100
  807ee8:	d9014717 	ldw	r4,1308(sp)
  807eec:	d9414117 	ldw	r5,1284(sp)
  807ef0:	8c400044 	addi	r17,r17,1
  807ef4:	9125883a 	add	r18,r18,r4
  807ef8:	008001c4 	movi	r2,7
  807efc:	19400015 	stw	r5,0(r3)
  807f00:	19000115 	stw	r4,4(r3)
  807f04:	dc800e15 	stw	r18,56(sp)
  807f08:	dc400d15 	stw	r17,52(sp)
  807f0c:	147ce816 	blt	r2,r17,8072b0 <___vfprintf_internal_r+0xb90>
  807f10:	18c00204 	addi	r3,r3,8
  807f14:	003b8006 	br	806d18 <___vfprintf_internal_r+0x5f8>
  807f18:	38c00017 	ldw	r3,0(r7)
  807f1c:	39000204 	addi	r4,r7,8
  807f20:	d9014015 	stw	r4,1280(sp)
  807f24:	d8c14215 	stw	r3,1288(sp)
  807f28:	39c00117 	ldw	r7,4(r7)
  807f2c:	d9c14315 	stw	r7,1292(sp)
  807f30:	003e1a06 	br	80779c <___vfprintf_internal_r+0x107c>
  807f34:	0005883a 	mov	r2,zero
  807f38:	1409c83a 	sub	r4,r2,r16
  807f3c:	1105803a 	cmpltu	r2,r2,r4
  807f40:	044bc83a 	sub	r5,zero,r17
  807f44:	2885c83a 	sub	r2,r5,r2
  807f48:	2021883a 	mov	r16,r4
  807f4c:	1023883a 	mov	r17,r2
  807f50:	01000044 	movi	r4,1
  807f54:	00800b44 	movi	r2,45
  807f58:	d8800405 	stb	r2,16(sp)
  807f5c:	003c7e06 	br	807158 <___vfprintf_internal_r+0xa38>
  807f60:	d9014f17 	ldw	r4,1340(sp)
  807f64:	b00b883a 	mov	r5,r22
  807f68:	d9800c04 	addi	r6,sp,48
  807f6c:	08066c80 	call	8066c8 <__sprint_r>
  807f70:	103ba31e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807f74:	dc800e17 	ldw	r18,56(sp)
  807f78:	dc400d17 	ldw	r17,52(sp)
  807f7c:	d9000517 	ldw	r4,20(sp)
  807f80:	d9401904 	addi	r5,sp,100
  807f84:	003da106 	br	80760c <___vfprintf_internal_r+0xeec>
  807f88:	d9014f17 	ldw	r4,1340(sp)
  807f8c:	b00b883a 	mov	r5,r22
  807f90:	d9800c04 	addi	r6,sp,48
  807f94:	08066c80 	call	8066c8 <__sprint_r>
  807f98:	103b991e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807f9c:	dc800e17 	ldw	r18,56(sp)
  807fa0:	dc400d17 	ldw	r17,52(sp)
  807fa4:	d9000517 	ldw	r4,20(sp)
  807fa8:	d8c01904 	addi	r3,sp,100
  807fac:	003d8b06 	br	8075dc <___vfprintf_internal_r+0xebc>
  807fb0:	07002074 	movhi	fp,129
  807fb4:	e70d6c84 	addi	fp,fp,13746
  807fb8:	9425883a 	add	r18,r18,r16
  807fbc:	8c400044 	addi	r17,r17,1
  807fc0:	008001c4 	movi	r2,7
  807fc4:	1f000015 	stw	fp,0(r3)
  807fc8:	1c000115 	stw	r16,4(r3)
  807fcc:	dc800e15 	stw	r18,56(sp)
  807fd0:	dc400d15 	stw	r17,52(sp)
  807fd4:	147fbc16 	blt	r2,r17,807ec8 <___vfprintf_internal_r+0x17a8>
  807fd8:	18c00204 	addi	r3,r3,8
  807fdc:	003fc206 	br	807ee8 <___vfprintf_internal_r+0x17c8>
  807fe0:	d9014f17 	ldw	r4,1340(sp)
  807fe4:	b00b883a 	mov	r5,r22
  807fe8:	d9800c04 	addi	r6,sp,48
  807fec:	08066c80 	call	8066c8 <__sprint_r>
  807ff0:	103b831e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  807ff4:	dc800e17 	ldw	r18,56(sp)
  807ff8:	d9000517 	ldw	r4,20(sp)
  807ffc:	d8c01904 	addi	r3,sp,100
  808000:	003cfc06 	br	8073f4 <___vfprintf_internal_r+0xcd4>
  808004:	07002074 	movhi	fp,129
  808008:	e70d6c84 	addi	fp,fp,13746
  80800c:	003bde06 	br	806f88 <___vfprintf_internal_r+0x868>
  808010:	00802074 	movhi	r2,129
  808014:	108d5b04 	addi	r2,r2,13676
  808018:	d8814115 	stw	r2,1284(sp)
  80801c:	003def06 	br	8077dc <___vfprintf_internal_r+0x10bc>
  808020:	d9014217 	ldw	r4,1288(sp)
  808024:	d9414317 	ldw	r5,1292(sp)
  808028:	080ce600 	call	80ce60 <__isnand>
  80802c:	10003926 	beq	r2,zero,808114 <___vfprintf_internal_r+0x19f4>
  808030:	d9414d17 	ldw	r5,1332(sp)
  808034:	008011c4 	movi	r2,71
  808038:	1140ce16 	blt	r2,r5,808374 <___vfprintf_internal_r+0x1c54>
  80803c:	01802074 	movhi	r6,129
  808040:	318d5c04 	addi	r6,r6,13680
  808044:	d9814115 	stw	r6,1284(sp)
  808048:	003de406 	br	8077dc <___vfprintf_internal_r+0x10bc>
  80804c:	d9014c17 	ldw	r4,1328(sp)
  808050:	bdc00044 	addi	r23,r23,1
  808054:	b8c00007 	ldb	r3,0(r23)
  808058:	21000814 	ori	r4,r4,32
  80805c:	d9014c15 	stw	r4,1328(sp)
  808060:	003a2e06 	br	80691c <___vfprintf_internal_r+0x1fc>
  808064:	dcc14515 	stw	r19,1300(sp)
  808068:	98011016 	blt	r19,zero,8084ac <___vfprintf_internal_r+0x1d8c>
  80806c:	980f883a 	mov	r7,r19
  808070:	d8014615 	stw	zero,1304(sp)
  808074:	003c4c06 	br	8071a8 <___vfprintf_internal_r+0xa88>
  808078:	d9014f17 	ldw	r4,1340(sp)
  80807c:	b00b883a 	mov	r5,r22
  808080:	d9800c04 	addi	r6,sp,48
  808084:	08066c80 	call	8066c8 <__sprint_r>
  808088:	103b5d1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  80808c:	dc800e17 	ldw	r18,56(sp)
  808090:	d9000517 	ldw	r4,20(sp)
  808094:	d8c01904 	addi	r3,sp,100
  808098:	003f2e06 	br	807d54 <___vfprintf_internal_r+0x1634>
  80809c:	d8c14c17 	ldw	r3,1328(sp)
  8080a0:	1880100c 	andi	r2,r3,64
  8080a4:	1000a026 	beq	r2,zero,808328 <___vfprintf_internal_r+0x1c08>
  8080a8:	38800017 	ldw	r2,0(r7)
  8080ac:	39c00104 	addi	r7,r7,4
  8080b0:	d9c14015 	stw	r7,1280(sp)
  8080b4:	d9014b17 	ldw	r4,1324(sp)
  8080b8:	d9c14017 	ldw	r7,1280(sp)
  8080bc:	1100000d 	sth	r4,0(r2)
  8080c0:	0039f306 	br	806890 <___vfprintf_internal_r+0x170>
  8080c4:	d9014f17 	ldw	r4,1340(sp)
  8080c8:	b00b883a 	mov	r5,r22
  8080cc:	d9800c04 	addi	r6,sp,48
  8080d0:	08066c80 	call	8066c8 <__sprint_r>
  8080d4:	103b4a1e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  8080d8:	dc800e17 	ldw	r18,56(sp)
  8080dc:	dc400d17 	ldw	r17,52(sp)
  8080e0:	d9000517 	ldw	r4,20(sp)
  8080e4:	d8c01904 	addi	r3,sp,100
  8080e8:	003f2d06 	br	807da0 <___vfprintf_internal_r+0x1680>
  8080ec:	00800184 	movi	r2,6
  8080f0:	14c09a36 	bltu	r2,r19,80835c <___vfprintf_internal_r+0x1c3c>
  8080f4:	dcc14515 	stw	r19,1300(sp)
  8080f8:	9800010e 	bge	r19,zero,808100 <___vfprintf_internal_r+0x19e0>
  8080fc:	d8014515 	stw	zero,1300(sp)
  808100:	00802074 	movhi	r2,129
  808104:	108d5e04 	addi	r2,r2,13688
  808108:	980f883a 	mov	r7,r19
  80810c:	d8814115 	stw	r2,1284(sp)
  808110:	003a7206 	br	806adc <___vfprintf_internal_r+0x3bc>
  808114:	00bfffc4 	movi	r2,-1
  808118:	9880e226 	beq	r19,r2,8084a4 <___vfprintf_internal_r+0x1d84>
  80811c:	d9414d17 	ldw	r5,1332(sp)
  808120:	008019c4 	movi	r2,103
  808124:	2880dc26 	beq	r5,r2,808498 <___vfprintf_internal_r+0x1d78>
  808128:	008011c4 	movi	r2,71
  80812c:	2880da26 	beq	r5,r2,808498 <___vfprintf_internal_r+0x1d78>
  808130:	d9414c17 	ldw	r5,1328(sp)
  808134:	d9014317 	ldw	r4,1292(sp)
  808138:	d9814217 	ldw	r6,1288(sp)
  80813c:	29404014 	ori	r5,r5,256
  808140:	d9414c15 	stw	r5,1328(sp)
  808144:	2000cc16 	blt	r4,zero,808478 <___vfprintf_internal_r+0x1d58>
  808148:	3021883a 	mov	r16,r6
  80814c:	2023883a 	mov	r17,r4
  808150:	0039883a 	mov	fp,zero
  808154:	d9414d17 	ldw	r5,1332(sp)
  808158:	00801984 	movi	r2,102
  80815c:	2880b726 	beq	r5,r2,80843c <___vfprintf_internal_r+0x1d1c>
  808160:	00801184 	movi	r2,70
  808164:	2880b526 	beq	r5,r2,80843c <___vfprintf_internal_r+0x1d1c>
  808168:	00801944 	movi	r2,101
  80816c:	2880c826 	beq	r5,r2,808490 <___vfprintf_internal_r+0x1d70>
  808170:	00801144 	movi	r2,69
  808174:	2880c626 	beq	r5,r2,808490 <___vfprintf_internal_r+0x1d70>
  808178:	9829883a 	mov	r20,r19
  80817c:	d9014f17 	ldw	r4,1340(sp)
  808180:	d8800504 	addi	r2,sp,20
  808184:	880d883a 	mov	r6,r17
  808188:	d8800115 	stw	r2,4(sp)
  80818c:	d8c00604 	addi	r3,sp,24
  808190:	d8800704 	addi	r2,sp,28
  808194:	800b883a 	mov	r5,r16
  808198:	01c00084 	movi	r7,2
  80819c:	d8c00215 	stw	r3,8(sp)
  8081a0:	d8800315 	stw	r2,12(sp)
  8081a4:	dd000015 	stw	r20,0(sp)
  8081a8:	0808a700 	call	808a70 <_dtoa_r>
  8081ac:	d9814d17 	ldw	r6,1332(sp)
  8081b0:	d8814115 	stw	r2,1284(sp)
  8081b4:	008019c4 	movi	r2,103
  8081b8:	30809526 	beq	r6,r2,808410 <___vfprintf_internal_r+0x1cf0>
  8081bc:	d8c14d17 	ldw	r3,1332(sp)
  8081c0:	008011c4 	movi	r2,71
  8081c4:	18809226 	beq	r3,r2,808410 <___vfprintf_internal_r+0x1cf0>
  8081c8:	d9414117 	ldw	r5,1284(sp)
  8081cc:	d9814d17 	ldw	r6,1332(sp)
  8081d0:	00801984 	movi	r2,102
  8081d4:	2d25883a 	add	r18,r5,r20
  8081d8:	30808626 	beq	r6,r2,8083f4 <___vfprintf_internal_r+0x1cd4>
  8081dc:	00801184 	movi	r2,70
  8081e0:	30808426 	beq	r6,r2,8083f4 <___vfprintf_internal_r+0x1cd4>
  8081e4:	000d883a 	mov	r6,zero
  8081e8:	000f883a 	mov	r7,zero
  8081ec:	880b883a 	mov	r5,r17
  8081f0:	8009883a 	mov	r4,r16
  8081f4:	080e0380 	call	80e038 <__eqdf2>
  8081f8:	1000751e 	bne	r2,zero,8083d0 <___vfprintf_internal_r+0x1cb0>
  8081fc:	9005883a 	mov	r2,r18
  808200:	dc800715 	stw	r18,28(sp)
  808204:	d9014117 	ldw	r4,1284(sp)
  808208:	d9414d17 	ldw	r5,1332(sp)
  80820c:	00c019c4 	movi	r3,103
  808210:	1125c83a 	sub	r18,r2,r4
  808214:	28c06826 	beq	r5,r3,8083b8 <___vfprintf_internal_r+0x1c98>
  808218:	008011c4 	movi	r2,71
  80821c:	28806626 	beq	r5,r2,8083b8 <___vfprintf_internal_r+0x1c98>
  808220:	d9000517 	ldw	r4,20(sp)
  808224:	d8c14d17 	ldw	r3,1332(sp)
  808228:	00801944 	movi	r2,101
  80822c:	10c05516 	blt	r2,r3,808384 <___vfprintf_internal_r+0x1c64>
  808230:	213fffc4 	addi	r4,r4,-1
  808234:	d9000515 	stw	r4,20(sp)
  808238:	d8c00805 	stb	r3,32(sp)
  80823c:	2021883a 	mov	r16,r4
  808240:	2000c116 	blt	r4,zero,808548 <___vfprintf_internal_r+0x1e28>
  808244:	00800ac4 	movi	r2,43
  808248:	d8800845 	stb	r2,33(sp)
  80824c:	00800244 	movi	r2,9
  808250:	1400af0e 	bge	r2,r16,808510 <___vfprintf_internal_r+0x1df0>
  808254:	1027883a 	mov	r19,r2
  808258:	dc400b84 	addi	r17,sp,46
  80825c:	8009883a 	mov	r4,r16
  808260:	01400284 	movi	r5,10
  808264:	08024840 	call	802484 <__modsi3>
  808268:	10800c04 	addi	r2,r2,48
  80826c:	8c7fffc4 	addi	r17,r17,-1
  808270:	8009883a 	mov	r4,r16
  808274:	01400284 	movi	r5,10
  808278:	88800005 	stb	r2,0(r17)
  80827c:	08024240 	call	802424 <__divsi3>
  808280:	1021883a 	mov	r16,r2
  808284:	98bff516 	blt	r19,r2,80825c <___vfprintf_internal_r+0x1b3c>
  808288:	10c00c04 	addi	r3,r2,48
  80828c:	d88009c4 	addi	r2,sp,39
  808290:	108001c4 	addi	r2,r2,7
  808294:	897fffc4 	addi	r5,r17,-1
  808298:	88ffffc5 	stb	r3,-1(r17)
  80829c:	2880a72e 	bgeu	r5,r2,80853c <___vfprintf_internal_r+0x1e1c>
  8082a0:	1009883a 	mov	r4,r2
  8082a4:	d9800804 	addi	r6,sp,32
  8082a8:	d8c00884 	addi	r3,sp,34
  8082ac:	28800003 	ldbu	r2,0(r5)
  8082b0:	29400044 	addi	r5,r5,1
  8082b4:	18800005 	stb	r2,0(r3)
  8082b8:	18c00044 	addi	r3,r3,1
  8082bc:	293ffb36 	bltu	r5,r4,8082ac <___vfprintf_internal_r+0x1b8c>
  8082c0:	1987c83a 	sub	r3,r3,r6
  8082c4:	00800044 	movi	r2,1
  8082c8:	d8c14815 	stw	r3,1312(sp)
  8082cc:	90cf883a 	add	r7,r18,r3
  8082d0:	1480960e 	bge	r2,r18,80852c <___vfprintf_internal_r+0x1e0c>
  8082d4:	39c00044 	addi	r7,r7,1
  8082d8:	d9c14515 	stw	r7,1300(sp)
  8082dc:	38003416 	blt	r7,zero,8083b0 <___vfprintf_internal_r+0x1c90>
  8082e0:	e0803fcc 	andi	r2,fp,255
  8082e4:	1080201c 	xori	r2,r2,128
  8082e8:	10bfe004 	addi	r2,r2,-128
  8082ec:	10004e26 	beq	r2,zero,808428 <___vfprintf_internal_r+0x1d08>
  8082f0:	00800b44 	movi	r2,45
  8082f4:	dc814715 	stw	r18,1308(sp)
  8082f8:	d8014615 	stw	zero,1304(sp)
  8082fc:	d8800405 	stb	r2,16(sp)
  808300:	003bab06 	br	8071b0 <___vfprintf_internal_r+0xa90>
  808304:	00800b44 	movi	r2,45
  808308:	d8800405 	stb	r2,16(sp)
  80830c:	003d2d06 	br	8077c4 <___vfprintf_internal_r+0x10a4>
  808310:	d9014f17 	ldw	r4,1340(sp)
  808314:	b00b883a 	mov	r5,r22
  808318:	d9800c04 	addi	r6,sp,48
  80831c:	08066c80 	call	8066c8 <__sprint_r>
  808320:	103ab71e 	bne	r2,zero,806e00 <___vfprintf_internal_r+0x6e0>
  808324:	003ab506 	br	806dfc <___vfprintf_internal_r+0x6dc>
  808328:	38800017 	ldw	r2,0(r7)
  80832c:	39c00104 	addi	r7,r7,4
  808330:	d9c14015 	stw	r7,1280(sp)
  808334:	d9414b17 	ldw	r5,1324(sp)
  808338:	d9c14017 	ldw	r7,1280(sp)
  80833c:	11400015 	stw	r5,0(r2)
  808340:	00395306 	br	806890 <___vfprintf_internal_r+0x170>
  808344:	980f883a 	mov	r7,r19
  808348:	dcc14515 	stw	r19,1300(sp)
  80834c:	d8014615 	stw	zero,1304(sp)
  808350:	003b9506 	br	8071a8 <___vfprintf_internal_r+0xa88>
  808354:	0027883a 	mov	r19,zero
  808358:	00397206 	br	806924 <___vfprintf_internal_r+0x204>
  80835c:	00c02074 	movhi	r3,129
  808360:	18cd5e04 	addi	r3,r3,13688
  808364:	100f883a 	mov	r7,r2
  808368:	d8814515 	stw	r2,1300(sp)
  80836c:	d8c14115 	stw	r3,1284(sp)
  808370:	0039da06 	br	806adc <___vfprintf_internal_r+0x3bc>
  808374:	00802074 	movhi	r2,129
  808378:	108d5d04 	addi	r2,r2,13684
  80837c:	d8814115 	stw	r2,1284(sp)
  808380:	003d1606 	br	8077dc <___vfprintf_internal_r+0x10bc>
  808384:	d9414d17 	ldw	r5,1332(sp)
  808388:	00801984 	movi	r2,102
  80838c:	28804926 	beq	r5,r2,8084b4 <___vfprintf_internal_r+0x1d94>
  808390:	200f883a 	mov	r7,r4
  808394:	24805716 	blt	r4,r18,8084f4 <___vfprintf_internal_r+0x1dd4>
  808398:	d9414c17 	ldw	r5,1328(sp)
  80839c:	2880004c 	andi	r2,r5,1
  8083a0:	10000126 	beq	r2,zero,8083a8 <___vfprintf_internal_r+0x1c88>
  8083a4:	21c00044 	addi	r7,r4,1
  8083a8:	d9c14515 	stw	r7,1300(sp)
  8083ac:	383fcc0e 	bge	r7,zero,8082e0 <___vfprintf_internal_r+0x1bc0>
  8083b0:	d8014515 	stw	zero,1300(sp)
  8083b4:	003fca06 	br	8082e0 <___vfprintf_internal_r+0x1bc0>
  8083b8:	d9000517 	ldw	r4,20(sp)
  8083bc:	00bfff04 	movi	r2,-4
  8083c0:	1100480e 	bge	r2,r4,8084e4 <___vfprintf_internal_r+0x1dc4>
  8083c4:	99004716 	blt	r19,r4,8084e4 <___vfprintf_internal_r+0x1dc4>
  8083c8:	d8c14d15 	stw	r3,1332(sp)
  8083cc:	003ff006 	br	808390 <___vfprintf_internal_r+0x1c70>
  8083d0:	d8800717 	ldw	r2,28(sp)
  8083d4:	14bf8b2e 	bgeu	r2,r18,808204 <___vfprintf_internal_r+0x1ae4>
  8083d8:	9007883a 	mov	r3,r18
  8083dc:	01000c04 	movi	r4,48
  8083e0:	11000005 	stb	r4,0(r2)
  8083e4:	10800044 	addi	r2,r2,1
  8083e8:	d8800715 	stw	r2,28(sp)
  8083ec:	18bffc1e 	bne	r3,r2,8083e0 <___vfprintf_internal_r+0x1cc0>
  8083f0:	003f8406 	br	808204 <___vfprintf_internal_r+0x1ae4>
  8083f4:	d8814117 	ldw	r2,1284(sp)
  8083f8:	10c00007 	ldb	r3,0(r2)
  8083fc:	00800c04 	movi	r2,48
  808400:	18805b26 	beq	r3,r2,808570 <___vfprintf_internal_r+0x1e50>
  808404:	d9000517 	ldw	r4,20(sp)
  808408:	9125883a 	add	r18,r18,r4
  80840c:	003f7506 	br	8081e4 <___vfprintf_internal_r+0x1ac4>
  808410:	d9014c17 	ldw	r4,1328(sp)
  808414:	2080004c 	andi	r2,r4,1
  808418:	1005003a 	cmpeq	r2,r2,zero
  80841c:	103f6a26 	beq	r2,zero,8081c8 <___vfprintf_internal_r+0x1aa8>
  808420:	d8800717 	ldw	r2,28(sp)
  808424:	003f7706 	br	808204 <___vfprintf_internal_r+0x1ae4>
  808428:	d9c14515 	stw	r7,1300(sp)
  80842c:	38004d16 	blt	r7,zero,808564 <___vfprintf_internal_r+0x1e44>
  808430:	dc814715 	stw	r18,1308(sp)
  808434:	d8014615 	stw	zero,1304(sp)
  808438:	003b5b06 	br	8071a8 <___vfprintf_internal_r+0xa88>
  80843c:	d9014f17 	ldw	r4,1340(sp)
  808440:	d8800504 	addi	r2,sp,20
  808444:	d8800115 	stw	r2,4(sp)
  808448:	d8c00604 	addi	r3,sp,24
  80844c:	d8800704 	addi	r2,sp,28
  808450:	800b883a 	mov	r5,r16
  808454:	880d883a 	mov	r6,r17
  808458:	01c000c4 	movi	r7,3
  80845c:	d8c00215 	stw	r3,8(sp)
  808460:	d8800315 	stw	r2,12(sp)
  808464:	dcc00015 	stw	r19,0(sp)
  808468:	9829883a 	mov	r20,r19
  80846c:	0808a700 	call	808a70 <_dtoa_r>
  808470:	d8814115 	stw	r2,1284(sp)
  808474:	003f5106 	br	8081bc <___vfprintf_internal_r+0x1a9c>
  808478:	d8c14217 	ldw	r3,1288(sp)
  80847c:	d9014317 	ldw	r4,1292(sp)
  808480:	07000b44 	movi	fp,45
  808484:	1821883a 	mov	r16,r3
  808488:	2460003c 	xorhi	r17,r4,32768
  80848c:	003f3106 	br	808154 <___vfprintf_internal_r+0x1a34>
  808490:	9d000044 	addi	r20,r19,1
  808494:	003f3906 	br	80817c <___vfprintf_internal_r+0x1a5c>
  808498:	983f251e 	bne	r19,zero,808130 <___vfprintf_internal_r+0x1a10>
  80849c:	04c00044 	movi	r19,1
  8084a0:	003f2306 	br	808130 <___vfprintf_internal_r+0x1a10>
  8084a4:	04c00184 	movi	r19,6
  8084a8:	003f2106 	br	808130 <___vfprintf_internal_r+0x1a10>
  8084ac:	d8014515 	stw	zero,1300(sp)
  8084b0:	003eee06 	br	80806c <___vfprintf_internal_r+0x194c>
  8084b4:	200f883a 	mov	r7,r4
  8084b8:	0100370e 	bge	zero,r4,808598 <___vfprintf_internal_r+0x1e78>
  8084bc:	9800031e 	bne	r19,zero,8084cc <___vfprintf_internal_r+0x1dac>
  8084c0:	d9814c17 	ldw	r6,1328(sp)
  8084c4:	3080004c 	andi	r2,r6,1
  8084c8:	103fb726 	beq	r2,zero,8083a8 <___vfprintf_internal_r+0x1c88>
  8084cc:	20800044 	addi	r2,r4,1
  8084d0:	98a7883a 	add	r19,r19,r2
  8084d4:	dcc14515 	stw	r19,1300(sp)
  8084d8:	980f883a 	mov	r7,r19
  8084dc:	983f800e 	bge	r19,zero,8082e0 <___vfprintf_internal_r+0x1bc0>
  8084e0:	003fb306 	br	8083b0 <___vfprintf_internal_r+0x1c90>
  8084e4:	d9814d17 	ldw	r6,1332(sp)
  8084e8:	31bfff84 	addi	r6,r6,-2
  8084ec:	d9814d15 	stw	r6,1332(sp)
  8084f0:	003f4c06 	br	808224 <___vfprintf_internal_r+0x1b04>
  8084f4:	0100180e 	bge	zero,r4,808558 <___vfprintf_internal_r+0x1e38>
  8084f8:	00800044 	movi	r2,1
  8084fc:	1485883a 	add	r2,r2,r18
  808500:	d8814515 	stw	r2,1300(sp)
  808504:	100f883a 	mov	r7,r2
  808508:	103f750e 	bge	r2,zero,8082e0 <___vfprintf_internal_r+0x1bc0>
  80850c:	003fa806 	br	8083b0 <___vfprintf_internal_r+0x1c90>
  808510:	80c00c04 	addi	r3,r16,48
  808514:	00800c04 	movi	r2,48
  808518:	d8c008c5 	stb	r3,35(sp)
  80851c:	d9800804 	addi	r6,sp,32
  808520:	d8c00904 	addi	r3,sp,36
  808524:	d8800885 	stb	r2,34(sp)
  808528:	003f6506 	br	8082c0 <___vfprintf_internal_r+0x1ba0>
  80852c:	d9014c17 	ldw	r4,1328(sp)
  808530:	2084703a 	and	r2,r4,r2
  808534:	103f9c26 	beq	r2,zero,8083a8 <___vfprintf_internal_r+0x1c88>
  808538:	003f6606 	br	8082d4 <___vfprintf_internal_r+0x1bb4>
  80853c:	d9800804 	addi	r6,sp,32
  808540:	d8c00884 	addi	r3,sp,34
  808544:	003f5e06 	br	8082c0 <___vfprintf_internal_r+0x1ba0>
  808548:	00800b44 	movi	r2,45
  80854c:	0121c83a 	sub	r16,zero,r4
  808550:	d8800845 	stb	r2,33(sp)
  808554:	003f3d06 	br	80824c <___vfprintf_internal_r+0x1b2c>
  808558:	00800084 	movi	r2,2
  80855c:	1105c83a 	sub	r2,r2,r4
  808560:	003fe606 	br	8084fc <___vfprintf_internal_r+0x1ddc>
  808564:	d8014515 	stw	zero,1300(sp)
  808568:	dc814715 	stw	r18,1308(sp)
  80856c:	003fb106 	br	808434 <___vfprintf_internal_r+0x1d14>
  808570:	000d883a 	mov	r6,zero
  808574:	000f883a 	mov	r7,zero
  808578:	8009883a 	mov	r4,r16
  80857c:	880b883a 	mov	r5,r17
  808580:	080e0c00 	call	80e0c0 <__nedf2>
  808584:	103f9f26 	beq	r2,zero,808404 <___vfprintf_internal_r+0x1ce4>
  808588:	00800044 	movi	r2,1
  80858c:	1509c83a 	sub	r4,r2,r20
  808590:	d9000515 	stw	r4,20(sp)
  808594:	003f9b06 	br	808404 <___vfprintf_internal_r+0x1ce4>
  808598:	98000d1e 	bne	r19,zero,8085d0 <___vfprintf_internal_r+0x1eb0>
  80859c:	d8c14c17 	ldw	r3,1328(sp)
  8085a0:	1880004c 	andi	r2,r3,1
  8085a4:	10000a1e 	bne	r2,zero,8085d0 <___vfprintf_internal_r+0x1eb0>
  8085a8:	01000044 	movi	r4,1
  8085ac:	200f883a 	mov	r7,r4
  8085b0:	d9014515 	stw	r4,1300(sp)
  8085b4:	003f4a06 	br	8082e0 <___vfprintf_internal_r+0x1bc0>
  8085b8:	3cc00017 	ldw	r19,0(r7)
  8085bc:	39c00104 	addi	r7,r7,4
  8085c0:	983d0e0e 	bge	r19,zero,8079fc <___vfprintf_internal_r+0x12dc>
  8085c4:	b8c00007 	ldb	r3,0(r23)
  8085c8:	04ffffc4 	movi	r19,-1
  8085cc:	0038d306 	br	80691c <___vfprintf_internal_r+0x1fc>
  8085d0:	9cc00084 	addi	r19,r19,2
  8085d4:	dcc14515 	stw	r19,1300(sp)
  8085d8:	980f883a 	mov	r7,r19
  8085dc:	983f400e 	bge	r19,zero,8082e0 <___vfprintf_internal_r+0x1bc0>
  8085e0:	003f7306 	br	8083b0 <___vfprintf_internal_r+0x1c90>

008085e4 <__vfprintf_internal>:
  8085e4:	00802074 	movhi	r2,129
  8085e8:	1095d704 	addi	r2,r2,22364
  8085ec:	2013883a 	mov	r9,r4
  8085f0:	11000017 	ldw	r4,0(r2)
  8085f4:	2805883a 	mov	r2,r5
  8085f8:	300f883a 	mov	r7,r6
  8085fc:	480b883a 	mov	r5,r9
  808600:	100d883a 	mov	r6,r2
  808604:	08067201 	jmpi	806720 <___vfprintf_internal_r>

00808608 <_write_r>:
  808608:	defffd04 	addi	sp,sp,-12
  80860c:	dc000015 	stw	r16,0(sp)
  808610:	04002074 	movhi	r16,129
  808614:	841d1404 	addi	r16,r16,29776
  808618:	dc400115 	stw	r17,4(sp)
  80861c:	80000015 	stw	zero,0(r16)
  808620:	2023883a 	mov	r17,r4
  808624:	2809883a 	mov	r4,r5
  808628:	300b883a 	mov	r5,r6
  80862c:	380d883a 	mov	r6,r7
  808630:	dfc00215 	stw	ra,8(sp)
  808634:	080f9e40 	call	80f9e4 <write>
  808638:	1007883a 	mov	r3,r2
  80863c:	00bfffc4 	movi	r2,-1
  808640:	18800626 	beq	r3,r2,80865c <_write_r+0x54>
  808644:	1805883a 	mov	r2,r3
  808648:	dfc00217 	ldw	ra,8(sp)
  80864c:	dc400117 	ldw	r17,4(sp)
  808650:	dc000017 	ldw	r16,0(sp)
  808654:	dec00304 	addi	sp,sp,12
  808658:	f800283a 	ret
  80865c:	80800017 	ldw	r2,0(r16)
  808660:	103ff826 	beq	r2,zero,808644 <_write_r+0x3c>
  808664:	88800015 	stw	r2,0(r17)
  808668:	1805883a 	mov	r2,r3
  80866c:	dfc00217 	ldw	ra,8(sp)
  808670:	dc400117 	ldw	r17,4(sp)
  808674:	dc000017 	ldw	r16,0(sp)
  808678:	dec00304 	addi	sp,sp,12
  80867c:	f800283a 	ret

00808680 <__swsetup_r>:
  808680:	00802074 	movhi	r2,129
  808684:	1095d704 	addi	r2,r2,22364
  808688:	10c00017 	ldw	r3,0(r2)
  80868c:	defffd04 	addi	sp,sp,-12
  808690:	dc400115 	stw	r17,4(sp)
  808694:	dc000015 	stw	r16,0(sp)
  808698:	dfc00215 	stw	ra,8(sp)
  80869c:	2023883a 	mov	r17,r4
  8086a0:	2821883a 	mov	r16,r5
  8086a4:	18000226 	beq	r3,zero,8086b0 <__swsetup_r+0x30>
  8086a8:	18800e17 	ldw	r2,56(r3)
  8086ac:	10001f26 	beq	r2,zero,80872c <__swsetup_r+0xac>
  8086b0:	8100030b 	ldhu	r4,12(r16)
  8086b4:	2080020c 	andi	r2,r4,8
  8086b8:	10002826 	beq	r2,zero,80875c <__swsetup_r+0xdc>
  8086bc:	81400417 	ldw	r5,16(r16)
  8086c0:	28001d26 	beq	r5,zero,808738 <__swsetup_r+0xb8>
  8086c4:	2080004c 	andi	r2,r4,1
  8086c8:	1005003a 	cmpeq	r2,r2,zero
  8086cc:	10000b26 	beq	r2,zero,8086fc <__swsetup_r+0x7c>
  8086d0:	2080008c 	andi	r2,r4,2
  8086d4:	10001226 	beq	r2,zero,808720 <__swsetup_r+0xa0>
  8086d8:	0005883a 	mov	r2,zero
  8086dc:	80800215 	stw	r2,8(r16)
  8086e0:	28000b26 	beq	r5,zero,808710 <__swsetup_r+0x90>
  8086e4:	0005883a 	mov	r2,zero
  8086e8:	dfc00217 	ldw	ra,8(sp)
  8086ec:	dc400117 	ldw	r17,4(sp)
  8086f0:	dc000017 	ldw	r16,0(sp)
  8086f4:	dec00304 	addi	sp,sp,12
  8086f8:	f800283a 	ret
  8086fc:	80800517 	ldw	r2,20(r16)
  808700:	80000215 	stw	zero,8(r16)
  808704:	0085c83a 	sub	r2,zero,r2
  808708:	80800615 	stw	r2,24(r16)
  80870c:	283ff51e 	bne	r5,zero,8086e4 <__swsetup_r+0x64>
  808710:	2080200c 	andi	r2,r4,128
  808714:	103ff326 	beq	r2,zero,8086e4 <__swsetup_r+0x64>
  808718:	00bfffc4 	movi	r2,-1
  80871c:	003ff206 	br	8086e8 <__swsetup_r+0x68>
  808720:	80800517 	ldw	r2,20(r16)
  808724:	80800215 	stw	r2,8(r16)
  808728:	003fed06 	br	8086e0 <__swsetup_r+0x60>
  80872c:	1809883a 	mov	r4,r3
  808730:	0802e580 	call	802e58 <__sinit>
  808734:	003fde06 	br	8086b0 <__swsetup_r+0x30>
  808738:	20c0a00c 	andi	r3,r4,640
  80873c:	00808004 	movi	r2,512
  808740:	18bfe026 	beq	r3,r2,8086c4 <__swsetup_r+0x44>
  808744:	8809883a 	mov	r4,r17
  808748:	800b883a 	mov	r5,r16
  80874c:	0803ce80 	call	803ce8 <__smakebuf_r>
  808750:	8100030b 	ldhu	r4,12(r16)
  808754:	81400417 	ldw	r5,16(r16)
  808758:	003fda06 	br	8086c4 <__swsetup_r+0x44>
  80875c:	2080040c 	andi	r2,r4,16
  808760:	103fed26 	beq	r2,zero,808718 <__swsetup_r+0x98>
  808764:	2080010c 	andi	r2,r4,4
  808768:	10001226 	beq	r2,zero,8087b4 <__swsetup_r+0x134>
  80876c:	81400c17 	ldw	r5,48(r16)
  808770:	28000526 	beq	r5,zero,808788 <__swsetup_r+0x108>
  808774:	80801004 	addi	r2,r16,64
  808778:	28800226 	beq	r5,r2,808784 <__swsetup_r+0x104>
  80877c:	8809883a 	mov	r4,r17
  808780:	08033800 	call	803380 <_free_r>
  808784:	80000c15 	stw	zero,48(r16)
  808788:	8080030b 	ldhu	r2,12(r16)
  80878c:	81400417 	ldw	r5,16(r16)
  808790:	80000115 	stw	zero,4(r16)
  808794:	10bff6cc 	andi	r2,r2,65499
  808798:	8080030d 	sth	r2,12(r16)
  80879c:	81400015 	stw	r5,0(r16)
  8087a0:	8080030b 	ldhu	r2,12(r16)
  8087a4:	10800214 	ori	r2,r2,8
  8087a8:	113fffcc 	andi	r4,r2,65535
  8087ac:	8080030d 	sth	r2,12(r16)
  8087b0:	003fc306 	br	8086c0 <__swsetup_r+0x40>
  8087b4:	81400417 	ldw	r5,16(r16)
  8087b8:	003ff906 	br	8087a0 <__swsetup_r+0x120>

008087bc <_close_r>:
  8087bc:	defffd04 	addi	sp,sp,-12
  8087c0:	dc000015 	stw	r16,0(sp)
  8087c4:	04002074 	movhi	r16,129
  8087c8:	841d1404 	addi	r16,r16,29776
  8087cc:	dc400115 	stw	r17,4(sp)
  8087d0:	80000015 	stw	zero,0(r16)
  8087d4:	2023883a 	mov	r17,r4
  8087d8:	2809883a 	mov	r4,r5
  8087dc:	dfc00215 	stw	ra,8(sp)
  8087e0:	080eb840 	call	80eb84 <close>
  8087e4:	1007883a 	mov	r3,r2
  8087e8:	00bfffc4 	movi	r2,-1
  8087ec:	18800626 	beq	r3,r2,808808 <_close_r+0x4c>
  8087f0:	1805883a 	mov	r2,r3
  8087f4:	dfc00217 	ldw	ra,8(sp)
  8087f8:	dc400117 	ldw	r17,4(sp)
  8087fc:	dc000017 	ldw	r16,0(sp)
  808800:	dec00304 	addi	sp,sp,12
  808804:	f800283a 	ret
  808808:	80800017 	ldw	r2,0(r16)
  80880c:	103ff826 	beq	r2,zero,8087f0 <_close_r+0x34>
  808810:	88800015 	stw	r2,0(r17)
  808814:	1805883a 	mov	r2,r3
  808818:	dfc00217 	ldw	ra,8(sp)
  80881c:	dc400117 	ldw	r17,4(sp)
  808820:	dc000017 	ldw	r16,0(sp)
  808824:	dec00304 	addi	sp,sp,12
  808828:	f800283a 	ret

0080882c <quorem>:
  80882c:	28c00417 	ldw	r3,16(r5)
  808830:	20800417 	ldw	r2,16(r4)
  808834:	defff104 	addi	sp,sp,-60
  808838:	dfc00e15 	stw	ra,56(sp)
  80883c:	df000d15 	stw	fp,52(sp)
  808840:	ddc00c15 	stw	r23,48(sp)
  808844:	dd800b15 	stw	r22,44(sp)
  808848:	dd400a15 	stw	r21,40(sp)
  80884c:	dd000915 	stw	r20,36(sp)
  808850:	dcc00815 	stw	r19,32(sp)
  808854:	dc800715 	stw	r18,28(sp)
  808858:	dc400615 	stw	r17,24(sp)
  80885c:	dc000515 	stw	r16,20(sp)
  808860:	d9000315 	stw	r4,12(sp)
  808864:	d9400415 	stw	r5,16(sp)
  808868:	10c07f16 	blt	r2,r3,808a68 <quorem+0x23c>
  80886c:	1d3fffc4 	addi	r20,r3,-1
  808870:	d8c00417 	ldw	r3,16(sp)
  808874:	d9000317 	ldw	r4,12(sp)
  808878:	a505883a 	add	r2,r20,r20
  80887c:	1085883a 	add	r2,r2,r2
  808880:	1cc00504 	addi	r19,r3,20
  808884:	25c00504 	addi	r23,r4,20
  808888:	98ad883a 	add	r22,r19,r2
  80888c:	15c7883a 	add	r3,r2,r23
  808890:	b1400017 	ldw	r5,0(r22)
  808894:	19000017 	ldw	r4,0(r3)
  808898:	d8c00015 	stw	r3,0(sp)
  80889c:	29400044 	addi	r5,r5,1
  8088a0:	d9000215 	stw	r4,8(sp)
  8088a4:	08024e40 	call	8024e4 <__udivsi3>
  8088a8:	1039883a 	mov	fp,r2
  8088ac:	10003d1e 	bne	r2,zero,8089a4 <quorem+0x178>
  8088b0:	d9400417 	ldw	r5,16(sp)
  8088b4:	d9000317 	ldw	r4,12(sp)
  8088b8:	080b6980 	call	80b698 <__mcmp>
  8088bc:	10002c16 	blt	r2,zero,808970 <quorem+0x144>
  8088c0:	e7000044 	addi	fp,fp,1
  8088c4:	b80f883a 	mov	r7,r23
  8088c8:	0011883a 	mov	r8,zero
  8088cc:	0009883a 	mov	r4,zero
  8088d0:	99400017 	ldw	r5,0(r19)
  8088d4:	38c00017 	ldw	r3,0(r7)
  8088d8:	9cc00104 	addi	r19,r19,4
  8088dc:	28bfffcc 	andi	r2,r5,65535
  8088e0:	2085883a 	add	r2,r4,r2
  8088e4:	11bfffcc 	andi	r6,r2,65535
  8088e8:	193fffcc 	andi	r4,r3,65535
  8088ec:	1004d43a 	srli	r2,r2,16
  8088f0:	280ad43a 	srli	r5,r5,16
  8088f4:	2189c83a 	sub	r4,r4,r6
  8088f8:	2209883a 	add	r4,r4,r8
  8088fc:	1806d43a 	srli	r3,r3,16
  808900:	288b883a 	add	r5,r5,r2
  808904:	200dd43a 	srai	r6,r4,16
  808908:	28bfffcc 	andi	r2,r5,65535
  80890c:	1887c83a 	sub	r3,r3,r2
  808910:	1987883a 	add	r3,r3,r6
  808914:	3900000d 	sth	r4,0(r7)
  808918:	38c0008d 	sth	r3,2(r7)
  80891c:	2808d43a 	srli	r4,r5,16
  808920:	39c00104 	addi	r7,r7,4
  808924:	1811d43a 	srai	r8,r3,16
  808928:	b4ffe92e 	bgeu	r22,r19,8088d0 <quorem+0xa4>
  80892c:	a505883a 	add	r2,r20,r20
  808930:	1085883a 	add	r2,r2,r2
  808934:	b885883a 	add	r2,r23,r2
  808938:	10c00017 	ldw	r3,0(r2)
  80893c:	18000c1e 	bne	r3,zero,808970 <quorem+0x144>
  808940:	113fff04 	addi	r4,r2,-4
  808944:	b900082e 	bgeu	r23,r4,808968 <quorem+0x13c>
  808948:	10bfff17 	ldw	r2,-4(r2)
  80894c:	10000326 	beq	r2,zero,80895c <quorem+0x130>
  808950:	00000506 	br	808968 <quorem+0x13c>
  808954:	20800017 	ldw	r2,0(r4)
  808958:	1000031e 	bne	r2,zero,808968 <quorem+0x13c>
  80895c:	213fff04 	addi	r4,r4,-4
  808960:	a53fffc4 	addi	r20,r20,-1
  808964:	b93ffb36 	bltu	r23,r4,808954 <quorem+0x128>
  808968:	d9000317 	ldw	r4,12(sp)
  80896c:	25000415 	stw	r20,16(r4)
  808970:	e005883a 	mov	r2,fp
  808974:	dfc00e17 	ldw	ra,56(sp)
  808978:	df000d17 	ldw	fp,52(sp)
  80897c:	ddc00c17 	ldw	r23,48(sp)
  808980:	dd800b17 	ldw	r22,44(sp)
  808984:	dd400a17 	ldw	r21,40(sp)
  808988:	dd000917 	ldw	r20,36(sp)
  80898c:	dcc00817 	ldw	r19,32(sp)
  808990:	dc800717 	ldw	r18,28(sp)
  808994:	dc400617 	ldw	r17,24(sp)
  808998:	dc000517 	ldw	r16,20(sp)
  80899c:	dec00f04 	addi	sp,sp,60
  8089a0:	f800283a 	ret
  8089a4:	b823883a 	mov	r17,r23
  8089a8:	9825883a 	mov	r18,r19
  8089ac:	d8000115 	stw	zero,4(sp)
  8089b0:	002b883a 	mov	r21,zero
  8089b4:	94000017 	ldw	r16,0(r18)
  8089b8:	e009883a 	mov	r4,fp
  8089bc:	94800104 	addi	r18,r18,4
  8089c0:	817fffcc 	andi	r5,r16,65535
  8089c4:	0802a640 	call	802a64 <__mulsi3>
  8089c8:	800ad43a 	srli	r5,r16,16
  8089cc:	e009883a 	mov	r4,fp
  8089d0:	a8a1883a 	add	r16,r21,r2
  8089d4:	0802a640 	call	802a64 <__mulsi3>
  8089d8:	89000017 	ldw	r4,0(r17)
  8089dc:	80ffffcc 	andi	r3,r16,65535
  8089e0:	8020d43a 	srli	r16,r16,16
  8089e4:	217fffcc 	andi	r5,r4,65535
  8089e8:	28cbc83a 	sub	r5,r5,r3
  8089ec:	d8c00117 	ldw	r3,4(sp)
  8089f0:	2008d43a 	srli	r4,r4,16
  8089f4:	1405883a 	add	r2,r2,r16
  8089f8:	28cb883a 	add	r5,r5,r3
  8089fc:	280dd43a 	srai	r6,r5,16
  808a00:	10ffffcc 	andi	r3,r2,65535
  808a04:	20c9c83a 	sub	r4,r4,r3
  808a08:	2189883a 	add	r4,r4,r6
  808a0c:	8900008d 	sth	r4,2(r17)
  808a10:	2009d43a 	srai	r4,r4,16
  808a14:	8940000d 	sth	r5,0(r17)
  808a18:	102ad43a 	srli	r21,r2,16
  808a1c:	8c400104 	addi	r17,r17,4
  808a20:	d9000115 	stw	r4,4(sp)
  808a24:	b4bfe32e 	bgeu	r22,r18,8089b4 <quorem+0x188>
  808a28:	d9000217 	ldw	r4,8(sp)
  808a2c:	203fa01e 	bne	r4,zero,8088b0 <quorem+0x84>
  808a30:	d8800017 	ldw	r2,0(sp)
  808a34:	10ffff04 	addi	r3,r2,-4
  808a38:	b8c0082e 	bgeu	r23,r3,808a5c <quorem+0x230>
  808a3c:	10bfff17 	ldw	r2,-4(r2)
  808a40:	10000326 	beq	r2,zero,808a50 <quorem+0x224>
  808a44:	00000506 	br	808a5c <quorem+0x230>
  808a48:	18800017 	ldw	r2,0(r3)
  808a4c:	1000031e 	bne	r2,zero,808a5c <quorem+0x230>
  808a50:	18ffff04 	addi	r3,r3,-4
  808a54:	a53fffc4 	addi	r20,r20,-1
  808a58:	b8fffb36 	bltu	r23,r3,808a48 <quorem+0x21c>
  808a5c:	d8c00317 	ldw	r3,12(sp)
  808a60:	1d000415 	stw	r20,16(r3)
  808a64:	003f9206 	br	8088b0 <quorem+0x84>
  808a68:	0005883a 	mov	r2,zero
  808a6c:	003fc106 	br	808974 <quorem+0x148>

00808a70 <_dtoa_r>:
  808a70:	22001017 	ldw	r8,64(r4)
  808a74:	deffda04 	addi	sp,sp,-152
  808a78:	dd402115 	stw	r21,132(sp)
  808a7c:	dd002015 	stw	r20,128(sp)
  808a80:	dc801e15 	stw	r18,120(sp)
  808a84:	dc401d15 	stw	r17,116(sp)
  808a88:	dfc02515 	stw	ra,148(sp)
  808a8c:	df002415 	stw	fp,144(sp)
  808a90:	ddc02315 	stw	r23,140(sp)
  808a94:	dd802215 	stw	r22,136(sp)
  808a98:	dcc01f15 	stw	r19,124(sp)
  808a9c:	dc001c15 	stw	r16,112(sp)
  808aa0:	d9001615 	stw	r4,88(sp)
  808aa4:	3023883a 	mov	r17,r6
  808aa8:	2829883a 	mov	r20,r5
  808aac:	d9c01715 	stw	r7,92(sp)
  808ab0:	dc802817 	ldw	r18,160(sp)
  808ab4:	302b883a 	mov	r21,r6
  808ab8:	40000a26 	beq	r8,zero,808ae4 <_dtoa_r+0x74>
  808abc:	20801117 	ldw	r2,68(r4)
  808ac0:	400b883a 	mov	r5,r8
  808ac4:	40800115 	stw	r2,4(r8)
  808ac8:	20c01117 	ldw	r3,68(r4)
  808acc:	00800044 	movi	r2,1
  808ad0:	10c4983a 	sll	r2,r2,r3
  808ad4:	40800215 	stw	r2,8(r8)
  808ad8:	080b53c0 	call	80b53c <_Bfree>
  808adc:	d8c01617 	ldw	r3,88(sp)
  808ae0:	18001015 	stw	zero,64(r3)
  808ae4:	8800a316 	blt	r17,zero,808d74 <_dtoa_r+0x304>
  808ae8:	90000015 	stw	zero,0(r18)
  808aec:	a8dffc2c 	andhi	r3,r21,32752
  808af0:	009ffc34 	movhi	r2,32752
  808af4:	18809126 	beq	r3,r2,808d3c <_dtoa_r+0x2cc>
  808af8:	000d883a 	mov	r6,zero
  808afc:	000f883a 	mov	r7,zero
  808b00:	a009883a 	mov	r4,r20
  808b04:	a80b883a 	mov	r5,r21
  808b08:	dd001215 	stw	r20,72(sp)
  808b0c:	dd401315 	stw	r21,76(sp)
  808b10:	080e0c00 	call	80e0c0 <__nedf2>
  808b14:	1000171e 	bne	r2,zero,808b74 <_dtoa_r+0x104>
  808b18:	d9802717 	ldw	r6,156(sp)
  808b1c:	00800044 	movi	r2,1
  808b20:	30800015 	stw	r2,0(r6)
  808b24:	d8802917 	ldw	r2,164(sp)
  808b28:	10029b26 	beq	r2,zero,809598 <_dtoa_r+0xb28>
  808b2c:	d9002917 	ldw	r4,164(sp)
  808b30:	00802074 	movhi	r2,129
  808b34:	108d6c44 	addi	r2,r2,13745
  808b38:	10ffffc4 	addi	r3,r2,-1
  808b3c:	20800015 	stw	r2,0(r4)
  808b40:	1805883a 	mov	r2,r3
  808b44:	dfc02517 	ldw	ra,148(sp)
  808b48:	df002417 	ldw	fp,144(sp)
  808b4c:	ddc02317 	ldw	r23,140(sp)
  808b50:	dd802217 	ldw	r22,136(sp)
  808b54:	dd402117 	ldw	r21,132(sp)
  808b58:	dd002017 	ldw	r20,128(sp)
  808b5c:	dcc01f17 	ldw	r19,124(sp)
  808b60:	dc801e17 	ldw	r18,120(sp)
  808b64:	dc401d17 	ldw	r17,116(sp)
  808b68:	dc001c17 	ldw	r16,112(sp)
  808b6c:	dec02604 	addi	sp,sp,152
  808b70:	f800283a 	ret
  808b74:	d9001617 	ldw	r4,88(sp)
  808b78:	d9401217 	ldw	r5,72(sp)
  808b7c:	d8800104 	addi	r2,sp,4
  808b80:	a80d883a 	mov	r6,r21
  808b84:	d9c00204 	addi	r7,sp,8
  808b88:	d8800015 	stw	r2,0(sp)
  808b8c:	080bb780 	call	80bb78 <__d2b>
  808b90:	d8800715 	stw	r2,28(sp)
  808b94:	a804d53a 	srli	r2,r21,20
  808b98:	1101ffcc 	andi	r4,r2,2047
  808b9c:	20008626 	beq	r4,zero,808db8 <_dtoa_r+0x348>
  808ba0:	d8c01217 	ldw	r3,72(sp)
  808ba4:	00800434 	movhi	r2,16
  808ba8:	10bfffc4 	addi	r2,r2,-1
  808bac:	ddc00117 	ldw	r23,4(sp)
  808bb0:	a884703a 	and	r2,r21,r2
  808bb4:	1811883a 	mov	r8,r3
  808bb8:	124ffc34 	orhi	r9,r2,16368
  808bbc:	25bf0044 	addi	r22,r4,-1023
  808bc0:	d8000815 	stw	zero,32(sp)
  808bc4:	0005883a 	mov	r2,zero
  808bc8:	00cffe34 	movhi	r3,16376
  808bcc:	480b883a 	mov	r5,r9
  808bd0:	4009883a 	mov	r4,r8
  808bd4:	180f883a 	mov	r7,r3
  808bd8:	100d883a 	mov	r6,r2
  808bdc:	0801c980 	call	801c98 <__subdf3>
  808be0:	0218dbf4 	movhi	r8,25455
  808be4:	4210d844 	addi	r8,r8,17249
  808be8:	024ff4f4 	movhi	r9,16339
  808bec:	4a61e9c4 	addi	r9,r9,-30809
  808bf0:	480f883a 	mov	r7,r9
  808bf4:	400d883a 	mov	r6,r8
  808bf8:	180b883a 	mov	r5,r3
  808bfc:	1009883a 	mov	r4,r2
  808c00:	0801d8c0 	call	801d8c <__muldf3>
  808c04:	0222d874 	movhi	r8,35681
  808c08:	42322cc4 	addi	r8,r8,-14157
  808c0c:	024ff1f4 	movhi	r9,16327
  808c10:	4a628a04 	addi	r9,r9,-30168
  808c14:	480f883a 	mov	r7,r9
  808c18:	400d883a 	mov	r6,r8
  808c1c:	180b883a 	mov	r5,r3
  808c20:	1009883a 	mov	r4,r2
  808c24:	0801d180 	call	801d18 <__adddf3>
  808c28:	b009883a 	mov	r4,r22
  808c2c:	1021883a 	mov	r16,r2
  808c30:	1823883a 	mov	r17,r3
  808c34:	080e3680 	call	80e368 <__floatsidf>
  808c38:	021427f4 	movhi	r8,20639
  808c3c:	421e7ec4 	addi	r8,r8,31227
  808c40:	024ff4f4 	movhi	r9,16339
  808c44:	4a5104c4 	addi	r9,r9,17427
  808c48:	480f883a 	mov	r7,r9
  808c4c:	400d883a 	mov	r6,r8
  808c50:	180b883a 	mov	r5,r3
  808c54:	1009883a 	mov	r4,r2
  808c58:	0801d8c0 	call	801d8c <__muldf3>
  808c5c:	180f883a 	mov	r7,r3
  808c60:	880b883a 	mov	r5,r17
  808c64:	100d883a 	mov	r6,r2
  808c68:	8009883a 	mov	r4,r16
  808c6c:	0801d180 	call	801d18 <__adddf3>
  808c70:	1009883a 	mov	r4,r2
  808c74:	180b883a 	mov	r5,r3
  808c78:	1021883a 	mov	r16,r2
  808c7c:	1823883a 	mov	r17,r3
  808c80:	080e4600 	call	80e460 <__fixdfsi>
  808c84:	000d883a 	mov	r6,zero
  808c88:	000f883a 	mov	r7,zero
  808c8c:	8009883a 	mov	r4,r16
  808c90:	880b883a 	mov	r5,r17
  808c94:	d8800d15 	stw	r2,52(sp)
  808c98:	080e2580 	call	80e258 <__ltdf2>
  808c9c:	10031716 	blt	r2,zero,8098fc <_dtoa_r+0xe8c>
  808ca0:	d8c00d17 	ldw	r3,52(sp)
  808ca4:	00800584 	movi	r2,22
  808ca8:	10c1482e 	bgeu	r2,r3,8091cc <_dtoa_r+0x75c>
  808cac:	01000044 	movi	r4,1
  808cb0:	d9000c15 	stw	r4,48(sp)
  808cb4:	bd85c83a 	sub	r2,r23,r22
  808cb8:	11bfffc4 	addi	r6,r2,-1
  808cbc:	30030b16 	blt	r6,zero,8098ec <_dtoa_r+0xe7c>
  808cc0:	d9800a15 	stw	r6,40(sp)
  808cc4:	d8001115 	stw	zero,68(sp)
  808cc8:	d8c00d17 	ldw	r3,52(sp)
  808ccc:	1802ff16 	blt	r3,zero,8098cc <_dtoa_r+0xe5c>
  808cd0:	d9000a17 	ldw	r4,40(sp)
  808cd4:	d8c00915 	stw	r3,36(sp)
  808cd8:	d8001015 	stw	zero,64(sp)
  808cdc:	20c9883a 	add	r4,r4,r3
  808ce0:	d9000a15 	stw	r4,40(sp)
  808ce4:	d9001717 	ldw	r4,92(sp)
  808ce8:	00800244 	movi	r2,9
  808cec:	11004636 	bltu	r2,r4,808e08 <_dtoa_r+0x398>
  808cf0:	00800144 	movi	r2,5
  808cf4:	11020416 	blt	r2,r4,809508 <_dtoa_r+0xa98>
  808cf8:	04400044 	movi	r17,1
  808cfc:	d8c01717 	ldw	r3,92(sp)
  808d00:	00800144 	movi	r2,5
  808d04:	10c1ed36 	bltu	r2,r3,8094bc <_dtoa_r+0xa4c>
  808d08:	18c5883a 	add	r2,r3,r3
  808d0c:	1085883a 	add	r2,r2,r2
  808d10:	00c02074 	movhi	r3,129
  808d14:	18e34904 	addi	r3,r3,-29404
  808d18:	10c5883a 	add	r2,r2,r3
  808d1c:	11000017 	ldw	r4,0(r2)
  808d20:	2000683a 	jmp	r4
  808d24:	00808e10 	cmplti	r2,zero,568
  808d28:	00808e10 	cmplti	r2,zero,568
  808d2c:	00809810 	cmplti	r2,zero,608
  808d30:	008097e8 	cmpgeui	r2,zero,607
  808d34:	0080982c 	andhi	r2,zero,608
  808d38:	00809838 	rdprs	r2,zero,608
  808d3c:	d9002717 	ldw	r4,156(sp)
  808d40:	0089c3c4 	movi	r2,9999
  808d44:	20800015 	stw	r2,0(r4)
  808d48:	a0001026 	beq	r20,zero,808d8c <_dtoa_r+0x31c>
  808d4c:	00c02074 	movhi	r3,129
  808d50:	18ce1804 	addi	r3,r3,14432
  808d54:	d9802917 	ldw	r6,164(sp)
  808d58:	303f7926 	beq	r6,zero,808b40 <_dtoa_r+0xd0>
  808d5c:	188000c7 	ldb	r2,3(r3)
  808d60:	190000c4 	addi	r4,r3,3
  808d64:	1000101e 	bne	r2,zero,808da8 <_dtoa_r+0x338>
  808d68:	d8802917 	ldw	r2,164(sp)
  808d6c:	11000015 	stw	r4,0(r2)
  808d70:	003f7306 	br	808b40 <_dtoa_r+0xd0>
  808d74:	00a00034 	movhi	r2,32768
  808d78:	10bfffc4 	addi	r2,r2,-1
  808d7c:	00c00044 	movi	r3,1
  808d80:	88aa703a 	and	r21,r17,r2
  808d84:	90c00015 	stw	r3,0(r18)
  808d88:	003f5806 	br	808aec <_dtoa_r+0x7c>
  808d8c:	00800434 	movhi	r2,16
  808d90:	10bfffc4 	addi	r2,r2,-1
  808d94:	a884703a 	and	r2,r21,r2
  808d98:	103fec1e 	bne	r2,zero,808d4c <_dtoa_r+0x2dc>
  808d9c:	00c02074 	movhi	r3,129
  808da0:	18ce1504 	addi	r3,r3,14420
  808da4:	003feb06 	br	808d54 <_dtoa_r+0x2e4>
  808da8:	d8802917 	ldw	r2,164(sp)
  808dac:	19000204 	addi	r4,r3,8
  808db0:	11000015 	stw	r4,0(r2)
  808db4:	003f6206 	br	808b40 <_dtoa_r+0xd0>
  808db8:	ddc00117 	ldw	r23,4(sp)
  808dbc:	d8800217 	ldw	r2,8(sp)
  808dc0:	01000804 	movi	r4,32
  808dc4:	b8c10c84 	addi	r3,r23,1074
  808dc8:	18a3883a 	add	r17,r3,r2
  808dcc:	2441b80e 	bge	r4,r17,8094b0 <_dtoa_r+0xa40>
  808dd0:	00c01004 	movi	r3,64
  808dd4:	1c47c83a 	sub	r3,r3,r17
  808dd8:	88bff804 	addi	r2,r17,-32
  808ddc:	a8c6983a 	sll	r3,r21,r3
  808de0:	a084d83a 	srl	r2,r20,r2
  808de4:	1888b03a 	or	r4,r3,r2
  808de8:	080e5ac0 	call	80e5ac <__floatunsidf>
  808dec:	1011883a 	mov	r8,r2
  808df0:	00bf8434 	movhi	r2,65040
  808df4:	01000044 	movi	r4,1
  808df8:	10d3883a 	add	r9,r2,r3
  808dfc:	8dbef344 	addi	r22,r17,-1075
  808e00:	d9000815 	stw	r4,32(sp)
  808e04:	003f6f06 	br	808bc4 <_dtoa_r+0x154>
  808e08:	d8001715 	stw	zero,92(sp)
  808e0c:	04400044 	movi	r17,1
  808e10:	00bfffc4 	movi	r2,-1
  808e14:	00c00044 	movi	r3,1
  808e18:	d8800e15 	stw	r2,56(sp)
  808e1c:	d8002615 	stw	zero,152(sp)
  808e20:	d8800f15 	stw	r2,60(sp)
  808e24:	d8c00b15 	stw	r3,44(sp)
  808e28:	1021883a 	mov	r16,r2
  808e2c:	d8801617 	ldw	r2,88(sp)
  808e30:	10001115 	stw	zero,68(r2)
  808e34:	d8801617 	ldw	r2,88(sp)
  808e38:	11401117 	ldw	r5,68(r2)
  808e3c:	1009883a 	mov	r4,r2
  808e40:	080babc0 	call	80babc <_Balloc>
  808e44:	d8c01617 	ldw	r3,88(sp)
  808e48:	d8800515 	stw	r2,20(sp)
  808e4c:	18801015 	stw	r2,64(r3)
  808e50:	00800384 	movi	r2,14
  808e54:	14006836 	bltu	r2,r16,808ff8 <_dtoa_r+0x588>
  808e58:	8805003a 	cmpeq	r2,r17,zero
  808e5c:	1000661e 	bne	r2,zero,808ff8 <_dtoa_r+0x588>
  808e60:	d9000d17 	ldw	r4,52(sp)
  808e64:	0102300e 	bge	zero,r4,809728 <_dtoa_r+0xcb8>
  808e68:	208003cc 	andi	r2,r4,15
  808e6c:	100490fa 	slli	r2,r2,3
  808e70:	2025d13a 	srai	r18,r4,4
  808e74:	00c02074 	movhi	r3,129
  808e78:	18ce3004 	addi	r3,r3,14528
  808e7c:	10c5883a 	add	r2,r2,r3
  808e80:	90c0040c 	andi	r3,r18,16
  808e84:	14000017 	ldw	r16,0(r2)
  808e88:	14400117 	ldw	r17,4(r2)
  808e8c:	18036a1e 	bne	r3,zero,809c38 <_dtoa_r+0x11c8>
  808e90:	05800084 	movi	r22,2
  808e94:	90001026 	beq	r18,zero,808ed8 <_dtoa_r+0x468>
  808e98:	04c02074 	movhi	r19,129
  808e9c:	9cce6204 	addi	r19,r19,14728
  808ea0:	9080004c 	andi	r2,r18,1
  808ea4:	1005003a 	cmpeq	r2,r2,zero
  808ea8:	1000081e 	bne	r2,zero,808ecc <_dtoa_r+0x45c>
  808eac:	99800017 	ldw	r6,0(r19)
  808eb0:	99c00117 	ldw	r7,4(r19)
  808eb4:	880b883a 	mov	r5,r17
  808eb8:	8009883a 	mov	r4,r16
  808ebc:	0801d8c0 	call	801d8c <__muldf3>
  808ec0:	1021883a 	mov	r16,r2
  808ec4:	b5800044 	addi	r22,r22,1
  808ec8:	1823883a 	mov	r17,r3
  808ecc:	9025d07a 	srai	r18,r18,1
  808ed0:	9cc00204 	addi	r19,r19,8
  808ed4:	903ff21e 	bne	r18,zero,808ea0 <_dtoa_r+0x430>
  808ed8:	a80b883a 	mov	r5,r21
  808edc:	a009883a 	mov	r4,r20
  808ee0:	880f883a 	mov	r7,r17
  808ee4:	800d883a 	mov	r6,r16
  808ee8:	08021500 	call	802150 <__divdf3>
  808eec:	1029883a 	mov	r20,r2
  808ef0:	182b883a 	mov	r21,r3
  808ef4:	d8c00c17 	ldw	r3,48(sp)
  808ef8:	1805003a 	cmpeq	r2,r3,zero
  808efc:	1000081e 	bne	r2,zero,808f20 <_dtoa_r+0x4b0>
  808f00:	0005883a 	mov	r2,zero
  808f04:	00cffc34 	movhi	r3,16368
  808f08:	180f883a 	mov	r7,r3
  808f0c:	a009883a 	mov	r4,r20
  808f10:	a80b883a 	mov	r5,r21
  808f14:	100d883a 	mov	r6,r2
  808f18:	080e2580 	call	80e258 <__ltdf2>
  808f1c:	1003fe16 	blt	r2,zero,809f18 <_dtoa_r+0x14a8>
  808f20:	b009883a 	mov	r4,r22
  808f24:	080e3680 	call	80e368 <__floatsidf>
  808f28:	180b883a 	mov	r5,r3
  808f2c:	1009883a 	mov	r4,r2
  808f30:	a00d883a 	mov	r6,r20
  808f34:	a80f883a 	mov	r7,r21
  808f38:	0801d8c0 	call	801d8c <__muldf3>
  808f3c:	0011883a 	mov	r8,zero
  808f40:	02500734 	movhi	r9,16412
  808f44:	1009883a 	mov	r4,r2
  808f48:	180b883a 	mov	r5,r3
  808f4c:	480f883a 	mov	r7,r9
  808f50:	400d883a 	mov	r6,r8
  808f54:	0801d180 	call	801d18 <__adddf3>
  808f58:	d9000f17 	ldw	r4,60(sp)
  808f5c:	102d883a 	mov	r22,r2
  808f60:	00bf3034 	movhi	r2,64704
  808f64:	18b9883a 	add	fp,r3,r2
  808f68:	e02f883a 	mov	r23,fp
  808f6c:	20028f1e 	bne	r4,zero,8099ac <_dtoa_r+0xf3c>
  808f70:	0005883a 	mov	r2,zero
  808f74:	00d00534 	movhi	r3,16404
  808f78:	a009883a 	mov	r4,r20
  808f7c:	a80b883a 	mov	r5,r21
  808f80:	180f883a 	mov	r7,r3
  808f84:	100d883a 	mov	r6,r2
  808f88:	0801c980 	call	801c98 <__subdf3>
  808f8c:	1009883a 	mov	r4,r2
  808f90:	e00f883a 	mov	r7,fp
  808f94:	180b883a 	mov	r5,r3
  808f98:	b00d883a 	mov	r6,r22
  808f9c:	1025883a 	mov	r18,r2
  808fa0:	1827883a 	mov	r19,r3
  808fa4:	080e1480 	call	80e148 <__gtdf2>
  808fa8:	00834f16 	blt	zero,r2,809ce8 <_dtoa_r+0x1278>
  808fac:	e0e0003c 	xorhi	r3,fp,32768
  808fb0:	9009883a 	mov	r4,r18
  808fb4:	980b883a 	mov	r5,r19
  808fb8:	180f883a 	mov	r7,r3
  808fbc:	b00d883a 	mov	r6,r22
  808fc0:	080e2580 	call	80e258 <__ltdf2>
  808fc4:	1000080e 	bge	r2,zero,808fe8 <_dtoa_r+0x578>
  808fc8:	0027883a 	mov	r19,zero
  808fcc:	0025883a 	mov	r18,zero
  808fd0:	d8802617 	ldw	r2,152(sp)
  808fd4:	df000517 	ldw	fp,20(sp)
  808fd8:	d8000615 	stw	zero,24(sp)
  808fdc:	0084303a 	nor	r2,zero,r2
  808fe0:	d8800d15 	stw	r2,52(sp)
  808fe4:	00019b06 	br	809654 <_dtoa_r+0xbe4>
  808fe8:	d9801217 	ldw	r6,72(sp)
  808fec:	d8801317 	ldw	r2,76(sp)
  808ff0:	3029883a 	mov	r20,r6
  808ff4:	102b883a 	mov	r21,r2
  808ff8:	d8c00217 	ldw	r3,8(sp)
  808ffc:	18008516 	blt	r3,zero,809214 <_dtoa_r+0x7a4>
  809000:	d9000d17 	ldw	r4,52(sp)
  809004:	00800384 	movi	r2,14
  809008:	11008216 	blt	r2,r4,809214 <_dtoa_r+0x7a4>
  80900c:	200490fa 	slli	r2,r4,3
  809010:	d9802617 	ldw	r6,152(sp)
  809014:	00c02074 	movhi	r3,129
  809018:	18ce3004 	addi	r3,r3,14528
  80901c:	10c5883a 	add	r2,r2,r3
  809020:	14800017 	ldw	r18,0(r2)
  809024:	14c00117 	ldw	r19,4(r2)
  809028:	30031e16 	blt	r6,zero,809ca4 <_dtoa_r+0x1234>
  80902c:	d9000517 	ldw	r4,20(sp)
  809030:	d8c00f17 	ldw	r3,60(sp)
  809034:	a823883a 	mov	r17,r21
  809038:	a021883a 	mov	r16,r20
  80903c:	192b883a 	add	r21,r3,r4
  809040:	2039883a 	mov	fp,r4
  809044:	00000f06 	br	809084 <_dtoa_r+0x614>
  809048:	0005883a 	mov	r2,zero
  80904c:	00d00934 	movhi	r3,16420
  809050:	5009883a 	mov	r4,r10
  809054:	580b883a 	mov	r5,r11
  809058:	180f883a 	mov	r7,r3
  80905c:	100d883a 	mov	r6,r2
  809060:	0801d8c0 	call	801d8c <__muldf3>
  809064:	180b883a 	mov	r5,r3
  809068:	000d883a 	mov	r6,zero
  80906c:	000f883a 	mov	r7,zero
  809070:	1009883a 	mov	r4,r2
  809074:	1021883a 	mov	r16,r2
  809078:	1823883a 	mov	r17,r3
  80907c:	080e0c00 	call	80e0c0 <__nedf2>
  809080:	10004526 	beq	r2,zero,809198 <_dtoa_r+0x728>
  809084:	900d883a 	mov	r6,r18
  809088:	980f883a 	mov	r7,r19
  80908c:	8009883a 	mov	r4,r16
  809090:	880b883a 	mov	r5,r17
  809094:	08021500 	call	802150 <__divdf3>
  809098:	180b883a 	mov	r5,r3
  80909c:	1009883a 	mov	r4,r2
  8090a0:	080e4600 	call	80e460 <__fixdfsi>
  8090a4:	1009883a 	mov	r4,r2
  8090a8:	1029883a 	mov	r20,r2
  8090ac:	080e3680 	call	80e368 <__floatsidf>
  8090b0:	180f883a 	mov	r7,r3
  8090b4:	9009883a 	mov	r4,r18
  8090b8:	980b883a 	mov	r5,r19
  8090bc:	100d883a 	mov	r6,r2
  8090c0:	0801d8c0 	call	801d8c <__muldf3>
  8090c4:	180f883a 	mov	r7,r3
  8090c8:	880b883a 	mov	r5,r17
  8090cc:	8009883a 	mov	r4,r16
  8090d0:	100d883a 	mov	r6,r2
  8090d4:	0801c980 	call	801c98 <__subdf3>
  8090d8:	1015883a 	mov	r10,r2
  8090dc:	a0800c04 	addi	r2,r20,48
  8090e0:	e0800005 	stb	r2,0(fp)
  8090e4:	e7000044 	addi	fp,fp,1
  8090e8:	1817883a 	mov	r11,r3
  8090ec:	e57fd61e 	bne	fp,r21,809048 <_dtoa_r+0x5d8>
  8090f0:	500d883a 	mov	r6,r10
  8090f4:	180f883a 	mov	r7,r3
  8090f8:	5009883a 	mov	r4,r10
  8090fc:	180b883a 	mov	r5,r3
  809100:	0801d180 	call	801d18 <__adddf3>
  809104:	100d883a 	mov	r6,r2
  809108:	9009883a 	mov	r4,r18
  80910c:	980b883a 	mov	r5,r19
  809110:	180f883a 	mov	r7,r3
  809114:	1021883a 	mov	r16,r2
  809118:	1823883a 	mov	r17,r3
  80911c:	080e2580 	call	80e258 <__ltdf2>
  809120:	10000816 	blt	r2,zero,809144 <_dtoa_r+0x6d4>
  809124:	980b883a 	mov	r5,r19
  809128:	800d883a 	mov	r6,r16
  80912c:	880f883a 	mov	r7,r17
  809130:	9009883a 	mov	r4,r18
  809134:	080e0380 	call	80e038 <__eqdf2>
  809138:	1000171e 	bne	r2,zero,809198 <_dtoa_r+0x728>
  80913c:	a080004c 	andi	r2,r20,1
  809140:	10001526 	beq	r2,zero,809198 <_dtoa_r+0x728>
  809144:	d8800d17 	ldw	r2,52(sp)
  809148:	d8800415 	stw	r2,16(sp)
  80914c:	e009883a 	mov	r4,fp
  809150:	213fffc4 	addi	r4,r4,-1
  809154:	20c00007 	ldb	r3,0(r4)
  809158:	00800e44 	movi	r2,57
  80915c:	1880081e 	bne	r3,r2,809180 <_dtoa_r+0x710>
  809160:	d8800517 	ldw	r2,20(sp)
  809164:	113ffa1e 	bne	r2,r4,809150 <_dtoa_r+0x6e0>
  809168:	d8c00417 	ldw	r3,16(sp)
  80916c:	d9800517 	ldw	r6,20(sp)
  809170:	00800c04 	movi	r2,48
  809174:	18c00044 	addi	r3,r3,1
  809178:	d8c00415 	stw	r3,16(sp)
  80917c:	30800005 	stb	r2,0(r6)
  809180:	20800003 	ldbu	r2,0(r4)
  809184:	d8c00417 	ldw	r3,16(sp)
  809188:	27000044 	addi	fp,r4,1
  80918c:	10800044 	addi	r2,r2,1
  809190:	d8c00d15 	stw	r3,52(sp)
  809194:	20800005 	stb	r2,0(r4)
  809198:	d9001617 	ldw	r4,88(sp)
  80919c:	d9400717 	ldw	r5,28(sp)
  8091a0:	080b53c0 	call	80b53c <_Bfree>
  8091a4:	e0000005 	stb	zero,0(fp)
  8091a8:	d9800d17 	ldw	r6,52(sp)
  8091ac:	d8c02717 	ldw	r3,156(sp)
  8091b0:	d9002917 	ldw	r4,164(sp)
  8091b4:	30800044 	addi	r2,r6,1
  8091b8:	18800015 	stw	r2,0(r3)
  8091bc:	20029c26 	beq	r4,zero,809c30 <_dtoa_r+0x11c0>
  8091c0:	d8c00517 	ldw	r3,20(sp)
  8091c4:	27000015 	stw	fp,0(r4)
  8091c8:	003e5d06 	br	808b40 <_dtoa_r+0xd0>
  8091cc:	d9800d17 	ldw	r6,52(sp)
  8091d0:	00c02074 	movhi	r3,129
  8091d4:	18ce3004 	addi	r3,r3,14528
  8091d8:	d9001217 	ldw	r4,72(sp)
  8091dc:	300490fa 	slli	r2,r6,3
  8091e0:	d9401317 	ldw	r5,76(sp)
  8091e4:	10c5883a 	add	r2,r2,r3
  8091e8:	12000017 	ldw	r8,0(r2)
  8091ec:	12400117 	ldw	r9,4(r2)
  8091f0:	400d883a 	mov	r6,r8
  8091f4:	480f883a 	mov	r7,r9
  8091f8:	080e2580 	call	80e258 <__ltdf2>
  8091fc:	1000030e 	bge	r2,zero,80920c <_dtoa_r+0x79c>
  809200:	d8800d17 	ldw	r2,52(sp)
  809204:	10bfffc4 	addi	r2,r2,-1
  809208:	d8800d15 	stw	r2,52(sp)
  80920c:	d8000c15 	stw	zero,48(sp)
  809210:	003ea806 	br	808cb4 <_dtoa_r+0x244>
  809214:	d9000b17 	ldw	r4,44(sp)
  809218:	202cc03a 	cmpne	r22,r4,zero
  80921c:	b000c71e 	bne	r22,zero,80953c <_dtoa_r+0xacc>
  809220:	dc001117 	ldw	r16,68(sp)
  809224:	dc801017 	ldw	r18,64(sp)
  809228:	0027883a 	mov	r19,zero
  80922c:	04000b0e 	bge	zero,r16,80925c <_dtoa_r+0x7ec>
  809230:	d8c00a17 	ldw	r3,40(sp)
  809234:	00c0090e 	bge	zero,r3,80925c <_dtoa_r+0x7ec>
  809238:	8005883a 	mov	r2,r16
  80923c:	1c011316 	blt	r3,r16,80968c <_dtoa_r+0xc1c>
  809240:	d9000a17 	ldw	r4,40(sp)
  809244:	d9801117 	ldw	r6,68(sp)
  809248:	80a1c83a 	sub	r16,r16,r2
  80924c:	2089c83a 	sub	r4,r4,r2
  809250:	308dc83a 	sub	r6,r6,r2
  809254:	d9000a15 	stw	r4,40(sp)
  809258:	d9801115 	stw	r6,68(sp)
  80925c:	d8801017 	ldw	r2,64(sp)
  809260:	0080150e 	bge	zero,r2,8092b8 <_dtoa_r+0x848>
  809264:	d8c00b17 	ldw	r3,44(sp)
  809268:	1805003a 	cmpeq	r2,r3,zero
  80926c:	1001c91e 	bne	r2,zero,809994 <_dtoa_r+0xf24>
  809270:	04800e0e 	bge	zero,r18,8092ac <_dtoa_r+0x83c>
  809274:	d9001617 	ldw	r4,88(sp)
  809278:	980b883a 	mov	r5,r19
  80927c:	900d883a 	mov	r6,r18
  809280:	080c3880 	call	80c388 <__pow5mult>
  809284:	d9001617 	ldw	r4,88(sp)
  809288:	d9800717 	ldw	r6,28(sp)
  80928c:	100b883a 	mov	r5,r2
  809290:	1027883a 	mov	r19,r2
  809294:	080bfcc0 	call	80bfcc <__multiply>
  809298:	d9001617 	ldw	r4,88(sp)
  80929c:	d9400717 	ldw	r5,28(sp)
  8092a0:	1023883a 	mov	r17,r2
  8092a4:	080b53c0 	call	80b53c <_Bfree>
  8092a8:	dc400715 	stw	r17,28(sp)
  8092ac:	d9001017 	ldw	r4,64(sp)
  8092b0:	248dc83a 	sub	r6,r4,r18
  8092b4:	30010e1e 	bne	r6,zero,8096f0 <_dtoa_r+0xc80>
  8092b8:	d9001617 	ldw	r4,88(sp)
  8092bc:	04400044 	movi	r17,1
  8092c0:	880b883a 	mov	r5,r17
  8092c4:	080c2200 	call	80c220 <__i2b>
  8092c8:	d9800917 	ldw	r6,36(sp)
  8092cc:	1025883a 	mov	r18,r2
  8092d0:	0180040e 	bge	zero,r6,8092e4 <_dtoa_r+0x874>
  8092d4:	d9001617 	ldw	r4,88(sp)
  8092d8:	100b883a 	mov	r5,r2
  8092dc:	080c3880 	call	80c388 <__pow5mult>
  8092e0:	1025883a 	mov	r18,r2
  8092e4:	d8801717 	ldw	r2,92(sp)
  8092e8:	8880f30e 	bge	r17,r2,8096b8 <_dtoa_r+0xc48>
  8092ec:	0023883a 	mov	r17,zero
  8092f0:	d9800917 	ldw	r6,36(sp)
  8092f4:	30019e1e 	bne	r6,zero,809970 <_dtoa_r+0xf00>
  8092f8:	00c00044 	movi	r3,1
  8092fc:	d9000a17 	ldw	r4,40(sp)
  809300:	20c5883a 	add	r2,r4,r3
  809304:	10c007cc 	andi	r3,r2,31
  809308:	1800841e 	bne	r3,zero,80951c <_dtoa_r+0xaac>
  80930c:	00800704 	movi	r2,28
  809310:	d9000a17 	ldw	r4,40(sp)
  809314:	d9801117 	ldw	r6,68(sp)
  809318:	80a1883a 	add	r16,r16,r2
  80931c:	2089883a 	add	r4,r4,r2
  809320:	308d883a 	add	r6,r6,r2
  809324:	d9000a15 	stw	r4,40(sp)
  809328:	d9801115 	stw	r6,68(sp)
  80932c:	d8801117 	ldw	r2,68(sp)
  809330:	0080050e 	bge	zero,r2,809348 <_dtoa_r+0x8d8>
  809334:	d9400717 	ldw	r5,28(sp)
  809338:	d9001617 	ldw	r4,88(sp)
  80933c:	100d883a 	mov	r6,r2
  809340:	080be800 	call	80be80 <__lshift>
  809344:	d8800715 	stw	r2,28(sp)
  809348:	d8c00a17 	ldw	r3,40(sp)
  80934c:	00c0050e 	bge	zero,r3,809364 <_dtoa_r+0x8f4>
  809350:	d9001617 	ldw	r4,88(sp)
  809354:	900b883a 	mov	r5,r18
  809358:	180d883a 	mov	r6,r3
  80935c:	080be800 	call	80be80 <__lshift>
  809360:	1025883a 	mov	r18,r2
  809364:	d9000c17 	ldw	r4,48(sp)
  809368:	2005003a 	cmpeq	r2,r4,zero
  80936c:	10016f26 	beq	r2,zero,80992c <_dtoa_r+0xebc>
  809370:	d9000f17 	ldw	r4,60(sp)
  809374:	0102170e 	bge	zero,r4,809bd4 <_dtoa_r+0x1164>
  809378:	d9800b17 	ldw	r6,44(sp)
  80937c:	3005003a 	cmpeq	r2,r6,zero
  809380:	1000881e 	bne	r2,zero,8095a4 <_dtoa_r+0xb34>
  809384:	0400050e 	bge	zero,r16,80939c <_dtoa_r+0x92c>
  809388:	d9001617 	ldw	r4,88(sp)
  80938c:	980b883a 	mov	r5,r19
  809390:	800d883a 	mov	r6,r16
  809394:	080be800 	call	80be80 <__lshift>
  809398:	1027883a 	mov	r19,r2
  80939c:	8804c03a 	cmpne	r2,r17,zero
  8093a0:	1002541e 	bne	r2,zero,809cf4 <_dtoa_r+0x1284>
  8093a4:	980b883a 	mov	r5,r19
  8093a8:	dd800517 	ldw	r22,20(sp)
  8093ac:	dcc00615 	stw	r19,24(sp)
  8093b0:	a700004c 	andi	fp,r20,1
  8093b4:	2827883a 	mov	r19,r5
  8093b8:	d9000717 	ldw	r4,28(sp)
  8093bc:	900b883a 	mov	r5,r18
  8093c0:	080882c0 	call	80882c <quorem>
  8093c4:	d9000717 	ldw	r4,28(sp)
  8093c8:	d9400617 	ldw	r5,24(sp)
  8093cc:	1023883a 	mov	r17,r2
  8093d0:	8dc00c04 	addi	r23,r17,48
  8093d4:	080b6980 	call	80b698 <__mcmp>
  8093d8:	d9001617 	ldw	r4,88(sp)
  8093dc:	900b883a 	mov	r5,r18
  8093e0:	980d883a 	mov	r6,r19
  8093e4:	1029883a 	mov	r20,r2
  8093e8:	080bcf40 	call	80bcf4 <__mdiff>
  8093ec:	102b883a 	mov	r21,r2
  8093f0:	10800317 	ldw	r2,12(r2)
  8093f4:	1001281e 	bne	r2,zero,809898 <_dtoa_r+0xe28>
  8093f8:	d9000717 	ldw	r4,28(sp)
  8093fc:	a80b883a 	mov	r5,r21
  809400:	080b6980 	call	80b698 <__mcmp>
  809404:	d9001617 	ldw	r4,88(sp)
  809408:	1021883a 	mov	r16,r2
  80940c:	a80b883a 	mov	r5,r21
  809410:	080b53c0 	call	80b53c <_Bfree>
  809414:	8000041e 	bne	r16,zero,809428 <_dtoa_r+0x9b8>
  809418:	d8801717 	ldw	r2,92(sp)
  80941c:	1000021e 	bne	r2,zero,809428 <_dtoa_r+0x9b8>
  809420:	e004c03a 	cmpne	r2,fp,zero
  809424:	10011726 	beq	r2,zero,809884 <_dtoa_r+0xe14>
  809428:	a0010616 	blt	r20,zero,809844 <_dtoa_r+0xdd4>
  80942c:	a000041e 	bne	r20,zero,809440 <_dtoa_r+0x9d0>
  809430:	d8c01717 	ldw	r3,92(sp)
  809434:	1800021e 	bne	r3,zero,809440 <_dtoa_r+0x9d0>
  809438:	e004c03a 	cmpne	r2,fp,zero
  80943c:	10010126 	beq	r2,zero,809844 <_dtoa_r+0xdd4>
  809440:	04023d16 	blt	zero,r16,809d38 <_dtoa_r+0x12c8>
  809444:	b5c00005 	stb	r23,0(r22)
  809448:	d9800517 	ldw	r6,20(sp)
  80944c:	d9000f17 	ldw	r4,60(sp)
  809450:	b5800044 	addi	r22,r22,1
  809454:	3105883a 	add	r2,r6,r4
  809458:	b0806526 	beq	r22,r2,8095f0 <_dtoa_r+0xb80>
  80945c:	d9400717 	ldw	r5,28(sp)
  809460:	d9001617 	ldw	r4,88(sp)
  809464:	01800284 	movi	r6,10
  809468:	000f883a 	mov	r7,zero
  80946c:	080c25c0 	call	80c25c <__multadd>
  809470:	d8800715 	stw	r2,28(sp)
  809474:	d8800617 	ldw	r2,24(sp)
  809478:	14c10c26 	beq	r2,r19,8098ac <_dtoa_r+0xe3c>
  80947c:	d9400617 	ldw	r5,24(sp)
  809480:	d9001617 	ldw	r4,88(sp)
  809484:	01800284 	movi	r6,10
  809488:	000f883a 	mov	r7,zero
  80948c:	080c25c0 	call	80c25c <__multadd>
  809490:	d9001617 	ldw	r4,88(sp)
  809494:	980b883a 	mov	r5,r19
  809498:	01800284 	movi	r6,10
  80949c:	000f883a 	mov	r7,zero
  8094a0:	d8800615 	stw	r2,24(sp)
  8094a4:	080c25c0 	call	80c25c <__multadd>
  8094a8:	1027883a 	mov	r19,r2
  8094ac:	003fc206 	br	8093b8 <_dtoa_r+0x948>
  8094b0:	2445c83a 	sub	r2,r4,r17
  8094b4:	a088983a 	sll	r4,r20,r2
  8094b8:	003e4b06 	br	808de8 <_dtoa_r+0x378>
  8094bc:	01bfffc4 	movi	r6,-1
  8094c0:	00800044 	movi	r2,1
  8094c4:	d9800e15 	stw	r6,56(sp)
  8094c8:	d9800f15 	stw	r6,60(sp)
  8094cc:	d8800b15 	stw	r2,44(sp)
  8094d0:	d8c01617 	ldw	r3,88(sp)
  8094d4:	008005c4 	movi	r2,23
  8094d8:	18001115 	stw	zero,68(r3)
  8094dc:	1580082e 	bgeu	r2,r22,809500 <_dtoa_r+0xa90>
  8094e0:	00c00104 	movi	r3,4
  8094e4:	0009883a 	mov	r4,zero
  8094e8:	18c7883a 	add	r3,r3,r3
  8094ec:	18800504 	addi	r2,r3,20
  8094f0:	21000044 	addi	r4,r4,1
  8094f4:	b0bffc2e 	bgeu	r22,r2,8094e8 <_dtoa_r+0xa78>
  8094f8:	d9801617 	ldw	r6,88(sp)
  8094fc:	31001115 	stw	r4,68(r6)
  809500:	dc000f17 	ldw	r16,60(sp)
  809504:	003e4b06 	br	808e34 <_dtoa_r+0x3c4>
  809508:	d9801717 	ldw	r6,92(sp)
  80950c:	0023883a 	mov	r17,zero
  809510:	31bfff04 	addi	r6,r6,-4
  809514:	d9801715 	stw	r6,92(sp)
  809518:	003df806 	br	808cfc <_dtoa_r+0x28c>
  80951c:	00800804 	movi	r2,32
  809520:	10c9c83a 	sub	r4,r2,r3
  809524:	00c00104 	movi	r3,4
  809528:	19005a16 	blt	r3,r4,809694 <_dtoa_r+0xc24>
  80952c:	008000c4 	movi	r2,3
  809530:	113f7e16 	blt	r2,r4,80932c <_dtoa_r+0x8bc>
  809534:	20800704 	addi	r2,r4,28
  809538:	003f7506 	br	809310 <_dtoa_r+0x8a0>
  80953c:	d9801717 	ldw	r6,92(sp)
  809540:	00800044 	movi	r2,1
  809544:	1180a10e 	bge	r2,r6,8097cc <_dtoa_r+0xd5c>
  809548:	d9800f17 	ldw	r6,60(sp)
  80954c:	d8c01017 	ldw	r3,64(sp)
  809550:	30bfffc4 	addi	r2,r6,-1
  809554:	1881c616 	blt	r3,r2,809c70 <_dtoa_r+0x1200>
  809558:	18a5c83a 	sub	r18,r3,r2
  80955c:	d8800f17 	ldw	r2,60(sp)
  809560:	10026216 	blt	r2,zero,809eec <_dtoa_r+0x147c>
  809564:	dc001117 	ldw	r16,68(sp)
  809568:	1007883a 	mov	r3,r2
  80956c:	d9800a17 	ldw	r6,40(sp)
  809570:	d8801117 	ldw	r2,68(sp)
  809574:	d9001617 	ldw	r4,88(sp)
  809578:	30cd883a 	add	r6,r6,r3
  80957c:	10c5883a 	add	r2,r2,r3
  809580:	01400044 	movi	r5,1
  809584:	d9800a15 	stw	r6,40(sp)
  809588:	d8801115 	stw	r2,68(sp)
  80958c:	080c2200 	call	80c220 <__i2b>
  809590:	1027883a 	mov	r19,r2
  809594:	003f2506 	br	80922c <_dtoa_r+0x7bc>
  809598:	00c02074 	movhi	r3,129
  80959c:	18cd6c04 	addi	r3,r3,13744
  8095a0:	003d6706 	br	808b40 <_dtoa_r+0xd0>
  8095a4:	dd800517 	ldw	r22,20(sp)
  8095a8:	04000044 	movi	r16,1
  8095ac:	00000706 	br	8095cc <_dtoa_r+0xb5c>
  8095b0:	d9400717 	ldw	r5,28(sp)
  8095b4:	d9001617 	ldw	r4,88(sp)
  8095b8:	01800284 	movi	r6,10
  8095bc:	000f883a 	mov	r7,zero
  8095c0:	080c25c0 	call	80c25c <__multadd>
  8095c4:	d8800715 	stw	r2,28(sp)
  8095c8:	84000044 	addi	r16,r16,1
  8095cc:	d9000717 	ldw	r4,28(sp)
  8095d0:	900b883a 	mov	r5,r18
  8095d4:	080882c0 	call	80882c <quorem>
  8095d8:	15c00c04 	addi	r23,r2,48
  8095dc:	b5c00005 	stb	r23,0(r22)
  8095e0:	d8c00f17 	ldw	r3,60(sp)
  8095e4:	b5800044 	addi	r22,r22,1
  8095e8:	80fff116 	blt	r16,r3,8095b0 <_dtoa_r+0xb40>
  8095ec:	d8000615 	stw	zero,24(sp)
  8095f0:	d9400717 	ldw	r5,28(sp)
  8095f4:	d9001617 	ldw	r4,88(sp)
  8095f8:	01800044 	movi	r6,1
  8095fc:	080be800 	call	80be80 <__lshift>
  809600:	1009883a 	mov	r4,r2
  809604:	900b883a 	mov	r5,r18
  809608:	d8800715 	stw	r2,28(sp)
  80960c:	080b6980 	call	80b698 <__mcmp>
  809610:	00803c0e 	bge	zero,r2,809704 <_dtoa_r+0xc94>
  809614:	b009883a 	mov	r4,r22
  809618:	213fffc4 	addi	r4,r4,-1
  80961c:	21400003 	ldbu	r5,0(r4)
  809620:	00800e44 	movi	r2,57
  809624:	28c03fcc 	andi	r3,r5,255
  809628:	18c0201c 	xori	r3,r3,128
  80962c:	18ffe004 	addi	r3,r3,-128
  809630:	1881981e 	bne	r3,r2,809c94 <_dtoa_r+0x1224>
  809634:	d9800517 	ldw	r6,20(sp)
  809638:	21bff71e 	bne	r4,r6,809618 <_dtoa_r+0xba8>
  80963c:	d8800d17 	ldw	r2,52(sp)
  809640:	37000044 	addi	fp,r6,1
  809644:	10800044 	addi	r2,r2,1
  809648:	d8800d15 	stw	r2,52(sp)
  80964c:	00800c44 	movi	r2,49
  809650:	30800005 	stb	r2,0(r6)
  809654:	d9001617 	ldw	r4,88(sp)
  809658:	900b883a 	mov	r5,r18
  80965c:	080b53c0 	call	80b53c <_Bfree>
  809660:	983ecd26 	beq	r19,zero,809198 <_dtoa_r+0x728>
  809664:	d8c00617 	ldw	r3,24(sp)
  809668:	18000426 	beq	r3,zero,80967c <_dtoa_r+0xc0c>
  80966c:	1cc00326 	beq	r3,r19,80967c <_dtoa_r+0xc0c>
  809670:	d9001617 	ldw	r4,88(sp)
  809674:	180b883a 	mov	r5,r3
  809678:	080b53c0 	call	80b53c <_Bfree>
  80967c:	d9001617 	ldw	r4,88(sp)
  809680:	980b883a 	mov	r5,r19
  809684:	080b53c0 	call	80b53c <_Bfree>
  809688:	003ec306 	br	809198 <_dtoa_r+0x728>
  80968c:	1805883a 	mov	r2,r3
  809690:	003eeb06 	br	809240 <_dtoa_r+0x7d0>
  809694:	d9800a17 	ldw	r6,40(sp)
  809698:	d8c01117 	ldw	r3,68(sp)
  80969c:	20bfff04 	addi	r2,r4,-4
  8096a0:	308d883a 	add	r6,r6,r2
  8096a4:	1887883a 	add	r3,r3,r2
  8096a8:	80a1883a 	add	r16,r16,r2
  8096ac:	d9800a15 	stw	r6,40(sp)
  8096b0:	d8c01115 	stw	r3,68(sp)
  8096b4:	003f1d06 	br	80932c <_dtoa_r+0x8bc>
  8096b8:	a03f0c1e 	bne	r20,zero,8092ec <_dtoa_r+0x87c>
  8096bc:	00800434 	movhi	r2,16
  8096c0:	10bfffc4 	addi	r2,r2,-1
  8096c4:	a884703a 	and	r2,r21,r2
  8096c8:	103f081e 	bne	r2,zero,8092ec <_dtoa_r+0x87c>
  8096cc:	a89ffc2c 	andhi	r2,r21,32752
  8096d0:	103f0626 	beq	r2,zero,8092ec <_dtoa_r+0x87c>
  8096d4:	d8c01117 	ldw	r3,68(sp)
  8096d8:	d9000a17 	ldw	r4,40(sp)
  8096dc:	18c00044 	addi	r3,r3,1
  8096e0:	21000044 	addi	r4,r4,1
  8096e4:	d8c01115 	stw	r3,68(sp)
  8096e8:	d9000a15 	stw	r4,40(sp)
  8096ec:	003f0006 	br	8092f0 <_dtoa_r+0x880>
  8096f0:	d9400717 	ldw	r5,28(sp)
  8096f4:	d9001617 	ldw	r4,88(sp)
  8096f8:	080c3880 	call	80c388 <__pow5mult>
  8096fc:	d8800715 	stw	r2,28(sp)
  809700:	003eed06 	br	8092b8 <_dtoa_r+0x848>
  809704:	1000021e 	bne	r2,zero,809710 <_dtoa_r+0xca0>
  809708:	b880004c 	andi	r2,r23,1
  80970c:	103fc11e 	bne	r2,zero,809614 <_dtoa_r+0xba4>
  809710:	b5bfffc4 	addi	r22,r22,-1
  809714:	b0c00007 	ldb	r3,0(r22)
  809718:	00800c04 	movi	r2,48
  80971c:	18bffc26 	beq	r3,r2,809710 <_dtoa_r+0xca0>
  809720:	b7000044 	addi	fp,r22,1
  809724:	003fcb06 	br	809654 <_dtoa_r+0xbe4>
  809728:	d9800d17 	ldw	r6,52(sp)
  80972c:	018fc83a 	sub	r7,zero,r6
  809730:	3801f726 	beq	r7,zero,809f10 <_dtoa_r+0x14a0>
  809734:	398003cc 	andi	r6,r7,15
  809738:	300c90fa 	slli	r6,r6,3
  80973c:	01402074 	movhi	r5,129
  809740:	294e3004 	addi	r5,r5,14528
  809744:	d9001217 	ldw	r4,72(sp)
  809748:	314d883a 	add	r6,r6,r5
  80974c:	30c00117 	ldw	r3,4(r6)
  809750:	30800017 	ldw	r2,0(r6)
  809754:	d9401317 	ldw	r5,76(sp)
  809758:	3821d13a 	srai	r16,r7,4
  80975c:	100d883a 	mov	r6,r2
  809760:	180f883a 	mov	r7,r3
  809764:	0801d8c0 	call	801d8c <__muldf3>
  809768:	1011883a 	mov	r8,r2
  80976c:	1813883a 	mov	r9,r3
  809770:	1029883a 	mov	r20,r2
  809774:	182b883a 	mov	r21,r3
  809778:	8001e526 	beq	r16,zero,809f10 <_dtoa_r+0x14a0>
  80977c:	05800084 	movi	r22,2
  809780:	04402074 	movhi	r17,129
  809784:	8c4e6204 	addi	r17,r17,14728
  809788:	8080004c 	andi	r2,r16,1
  80978c:	1005003a 	cmpeq	r2,r2,zero
  809790:	1000081e 	bne	r2,zero,8097b4 <_dtoa_r+0xd44>
  809794:	89800017 	ldw	r6,0(r17)
  809798:	89c00117 	ldw	r7,4(r17)
  80979c:	480b883a 	mov	r5,r9
  8097a0:	4009883a 	mov	r4,r8
  8097a4:	0801d8c0 	call	801d8c <__muldf3>
  8097a8:	1011883a 	mov	r8,r2
  8097ac:	b5800044 	addi	r22,r22,1
  8097b0:	1813883a 	mov	r9,r3
  8097b4:	8021d07a 	srai	r16,r16,1
  8097b8:	8c400204 	addi	r17,r17,8
  8097bc:	803ff21e 	bne	r16,zero,809788 <_dtoa_r+0xd18>
  8097c0:	4029883a 	mov	r20,r8
  8097c4:	482b883a 	mov	r21,r9
  8097c8:	003dca06 	br	808ef4 <_dtoa_r+0x484>
  8097cc:	d9000817 	ldw	r4,32(sp)
  8097d0:	2005003a 	cmpeq	r2,r4,zero
  8097d4:	1001f61e 	bne	r2,zero,809fb0 <_dtoa_r+0x1540>
  8097d8:	dc001117 	ldw	r16,68(sp)
  8097dc:	dc801017 	ldw	r18,64(sp)
  8097e0:	18c10cc4 	addi	r3,r3,1075
  8097e4:	003f6106 	br	80956c <_dtoa_r+0xafc>
  8097e8:	d8000b15 	stw	zero,44(sp)
  8097ec:	d9802617 	ldw	r6,152(sp)
  8097f0:	d8c00d17 	ldw	r3,52(sp)
  8097f4:	30800044 	addi	r2,r6,1
  8097f8:	18ad883a 	add	r22,r3,r2
  8097fc:	b13fffc4 	addi	r4,r22,-1
  809800:	d9000e15 	stw	r4,56(sp)
  809804:	0581f60e 	bge	zero,r22,809fe0 <_dtoa_r+0x1570>
  809808:	dd800f15 	stw	r22,60(sp)
  80980c:	003f3006 	br	8094d0 <_dtoa_r+0xa60>
  809810:	d8000b15 	stw	zero,44(sp)
  809814:	d9002617 	ldw	r4,152(sp)
  809818:	0101eb0e 	bge	zero,r4,809fc8 <_dtoa_r+0x1558>
  80981c:	202d883a 	mov	r22,r4
  809820:	d9000e15 	stw	r4,56(sp)
  809824:	d9000f15 	stw	r4,60(sp)
  809828:	003f2906 	br	8094d0 <_dtoa_r+0xa60>
  80982c:	01800044 	movi	r6,1
  809830:	d9800b15 	stw	r6,44(sp)
  809834:	003ff706 	br	809814 <_dtoa_r+0xda4>
  809838:	01000044 	movi	r4,1
  80983c:	d9000b15 	stw	r4,44(sp)
  809840:	003fea06 	br	8097ec <_dtoa_r+0xd7c>
  809844:	04000c0e 	bge	zero,r16,809878 <_dtoa_r+0xe08>
  809848:	d9400717 	ldw	r5,28(sp)
  80984c:	d9001617 	ldw	r4,88(sp)
  809850:	01800044 	movi	r6,1
  809854:	080be800 	call	80be80 <__lshift>
  809858:	1009883a 	mov	r4,r2
  80985c:	900b883a 	mov	r5,r18
  809860:	d8800715 	stw	r2,28(sp)
  809864:	080b6980 	call	80b698 <__mcmp>
  809868:	0081e00e 	bge	zero,r2,809fec <_dtoa_r+0x157c>
  80986c:	bdc00044 	addi	r23,r23,1
  809870:	00800e84 	movi	r2,58
  809874:	b881a226 	beq	r23,r2,809f00 <_dtoa_r+0x1490>
  809878:	b7000044 	addi	fp,r22,1
  80987c:	b5c00005 	stb	r23,0(r22)
  809880:	003f7406 	br	809654 <_dtoa_r+0xbe4>
  809884:	00800e44 	movi	r2,57
  809888:	b8819d26 	beq	r23,r2,809f00 <_dtoa_r+0x1490>
  80988c:	053ffa0e 	bge	zero,r20,809878 <_dtoa_r+0xe08>
  809890:	8dc00c44 	addi	r23,r17,49
  809894:	003ff806 	br	809878 <_dtoa_r+0xe08>
  809898:	d9001617 	ldw	r4,88(sp)
  80989c:	a80b883a 	mov	r5,r21
  8098a0:	04000044 	movi	r16,1
  8098a4:	080b53c0 	call	80b53c <_Bfree>
  8098a8:	003edf06 	br	809428 <_dtoa_r+0x9b8>
  8098ac:	d9001617 	ldw	r4,88(sp)
  8098b0:	980b883a 	mov	r5,r19
  8098b4:	01800284 	movi	r6,10
  8098b8:	000f883a 	mov	r7,zero
  8098bc:	080c25c0 	call	80c25c <__multadd>
  8098c0:	1027883a 	mov	r19,r2
  8098c4:	d8800615 	stw	r2,24(sp)
  8098c8:	003ebb06 	br	8093b8 <_dtoa_r+0x948>
  8098cc:	d9801117 	ldw	r6,68(sp)
  8098d0:	d8800d17 	ldw	r2,52(sp)
  8098d4:	d8000915 	stw	zero,36(sp)
  8098d8:	308dc83a 	sub	r6,r6,r2
  8098dc:	0087c83a 	sub	r3,zero,r2
  8098e0:	d9801115 	stw	r6,68(sp)
  8098e4:	d8c01015 	stw	r3,64(sp)
  8098e8:	003cfe06 	br	808ce4 <_dtoa_r+0x274>
  8098ec:	018dc83a 	sub	r6,zero,r6
  8098f0:	d9801115 	stw	r6,68(sp)
  8098f4:	d8000a15 	stw	zero,40(sp)
  8098f8:	003cf306 	br	808cc8 <_dtoa_r+0x258>
  8098fc:	d9000d17 	ldw	r4,52(sp)
  809900:	080e3680 	call	80e368 <__floatsidf>
  809904:	880b883a 	mov	r5,r17
  809908:	8009883a 	mov	r4,r16
  80990c:	180f883a 	mov	r7,r3
  809910:	100d883a 	mov	r6,r2
  809914:	080e0c00 	call	80e0c0 <__nedf2>
  809918:	103ce126 	beq	r2,zero,808ca0 <_dtoa_r+0x230>
  80991c:	d9800d17 	ldw	r6,52(sp)
  809920:	31bfffc4 	addi	r6,r6,-1
  809924:	d9800d15 	stw	r6,52(sp)
  809928:	003cdd06 	br	808ca0 <_dtoa_r+0x230>
  80992c:	d9000717 	ldw	r4,28(sp)
  809930:	900b883a 	mov	r5,r18
  809934:	080b6980 	call	80b698 <__mcmp>
  809938:	103e8d0e 	bge	r2,zero,809370 <_dtoa_r+0x900>
  80993c:	d9400717 	ldw	r5,28(sp)
  809940:	d9001617 	ldw	r4,88(sp)
  809944:	01800284 	movi	r6,10
  809948:	000f883a 	mov	r7,zero
  80994c:	080c25c0 	call	80c25c <__multadd>
  809950:	d9800d17 	ldw	r6,52(sp)
  809954:	d8800715 	stw	r2,28(sp)
  809958:	31bfffc4 	addi	r6,r6,-1
  80995c:	d9800d15 	stw	r6,52(sp)
  809960:	b001a71e 	bne	r22,zero,80a000 <_dtoa_r+0x1590>
  809964:	d8800e17 	ldw	r2,56(sp)
  809968:	d8800f15 	stw	r2,60(sp)
  80996c:	003e8006 	br	809370 <_dtoa_r+0x900>
  809970:	90800417 	ldw	r2,16(r18)
  809974:	1085883a 	add	r2,r2,r2
  809978:	1085883a 	add	r2,r2,r2
  80997c:	1485883a 	add	r2,r2,r18
  809980:	11000417 	ldw	r4,16(r2)
  809984:	080b5640 	call	80b564 <__hi0bits>
  809988:	00c00804 	movi	r3,32
  80998c:	1887c83a 	sub	r3,r3,r2
  809990:	003e5a06 	br	8092fc <_dtoa_r+0x88c>
  809994:	d9400717 	ldw	r5,28(sp)
  809998:	d9801017 	ldw	r6,64(sp)
  80999c:	d9001617 	ldw	r4,88(sp)
  8099a0:	080c3880 	call	80c388 <__pow5mult>
  8099a4:	d8800715 	stw	r2,28(sp)
  8099a8:	003e4306 	br	8092b8 <_dtoa_r+0x848>
  8099ac:	d9800f17 	ldw	r6,60(sp)
  8099b0:	d8800d17 	ldw	r2,52(sp)
  8099b4:	d9800315 	stw	r6,12(sp)
  8099b8:	d8800415 	stw	r2,16(sp)
  8099bc:	d8c00b17 	ldw	r3,44(sp)
  8099c0:	1805003a 	cmpeq	r2,r3,zero
  8099c4:	1000e21e 	bne	r2,zero,809d50 <_dtoa_r+0x12e0>
  8099c8:	d9000317 	ldw	r4,12(sp)
  8099cc:	0005883a 	mov	r2,zero
  8099d0:	00cff834 	movhi	r3,16352
  8099d4:	200c90fa 	slli	r6,r4,3
  8099d8:	01002074 	movhi	r4,129
  8099dc:	210e3004 	addi	r4,r4,14528
  8099e0:	180b883a 	mov	r5,r3
  8099e4:	310d883a 	add	r6,r6,r4
  8099e8:	327fff17 	ldw	r9,-4(r6)
  8099ec:	323ffe17 	ldw	r8,-8(r6)
  8099f0:	1009883a 	mov	r4,r2
  8099f4:	480f883a 	mov	r7,r9
  8099f8:	400d883a 	mov	r6,r8
  8099fc:	08021500 	call	802150 <__divdf3>
  809a00:	180b883a 	mov	r5,r3
  809a04:	b00d883a 	mov	r6,r22
  809a08:	b80f883a 	mov	r7,r23
  809a0c:	1009883a 	mov	r4,r2
  809a10:	0801c980 	call	801c98 <__subdf3>
  809a14:	a80b883a 	mov	r5,r21
  809a18:	a009883a 	mov	r4,r20
  809a1c:	d8c01915 	stw	r3,100(sp)
  809a20:	d8801815 	stw	r2,96(sp)
  809a24:	080e4600 	call	80e460 <__fixdfsi>
  809a28:	1009883a 	mov	r4,r2
  809a2c:	1027883a 	mov	r19,r2
  809a30:	080e3680 	call	80e368 <__floatsidf>
  809a34:	a80b883a 	mov	r5,r21
  809a38:	a009883a 	mov	r4,r20
  809a3c:	180f883a 	mov	r7,r3
  809a40:	100d883a 	mov	r6,r2
  809a44:	0801c980 	call	801c98 <__subdf3>
  809a48:	d9801817 	ldw	r6,96(sp)
  809a4c:	1823883a 	mov	r17,r3
  809a50:	d8801415 	stw	r2,80(sp)
  809a54:	302d883a 	mov	r22,r6
  809a58:	d9800517 	ldw	r6,20(sp)
  809a5c:	9cc00c04 	addi	r19,r19,48
  809a60:	dc401515 	stw	r17,84(sp)
  809a64:	d8c01917 	ldw	r3,100(sp)
  809a68:	34c00005 	stb	r19,0(r6)
  809a6c:	d8800517 	ldw	r2,20(sp)
  809a70:	d9401917 	ldw	r5,100(sp)
  809a74:	d9801417 	ldw	r6,80(sp)
  809a78:	b009883a 	mov	r4,r22
  809a7c:	880f883a 	mov	r7,r17
  809a80:	182f883a 	mov	r23,r3
  809a84:	17000044 	addi	fp,r2,1
  809a88:	080e1480 	call	80e148 <__gtdf2>
  809a8c:	00804e16 	blt	zero,r2,809bc8 <_dtoa_r+0x1158>
  809a90:	d9801417 	ldw	r6,80(sp)
  809a94:	0005883a 	mov	r2,zero
  809a98:	00cffc34 	movhi	r3,16368
  809a9c:	180b883a 	mov	r5,r3
  809aa0:	880f883a 	mov	r7,r17
  809aa4:	1009883a 	mov	r4,r2
  809aa8:	0801c980 	call	801c98 <__subdf3>
  809aac:	d9401917 	ldw	r5,100(sp)
  809ab0:	180f883a 	mov	r7,r3
  809ab4:	b009883a 	mov	r4,r22
  809ab8:	100d883a 	mov	r6,r2
  809abc:	080e1480 	call	80e148 <__gtdf2>
  809ac0:	00bda216 	blt	zero,r2,80914c <_dtoa_r+0x6dc>
  809ac4:	d8c00317 	ldw	r3,12(sp)
  809ac8:	00800044 	movi	r2,1
  809acc:	10c01216 	blt	r2,r3,809b18 <_dtoa_r+0x10a8>
  809ad0:	003d4506 	br	808fe8 <_dtoa_r+0x578>
  809ad4:	d9801417 	ldw	r6,80(sp)
  809ad8:	0005883a 	mov	r2,zero
  809adc:	00cffc34 	movhi	r3,16368
  809ae0:	180b883a 	mov	r5,r3
  809ae4:	880f883a 	mov	r7,r17
  809ae8:	1009883a 	mov	r4,r2
  809aec:	0801c980 	call	801c98 <__subdf3>
  809af0:	d9c01b17 	ldw	r7,108(sp)
  809af4:	180b883a 	mov	r5,r3
  809af8:	1009883a 	mov	r4,r2
  809afc:	b00d883a 	mov	r6,r22
  809b00:	080e2580 	call	80e258 <__ltdf2>
  809b04:	103d9116 	blt	r2,zero,80914c <_dtoa_r+0x6dc>
  809b08:	d9800517 	ldw	r6,20(sp)
  809b0c:	d9000317 	ldw	r4,12(sp)
  809b10:	3105883a 	add	r2,r6,r4
  809b14:	e0bd3426 	beq	fp,r2,808fe8 <_dtoa_r+0x578>
  809b18:	04500934 	movhi	r17,16420
  809b1c:	0021883a 	mov	r16,zero
  809b20:	b80b883a 	mov	r5,r23
  809b24:	b009883a 	mov	r4,r22
  809b28:	800d883a 	mov	r6,r16
  809b2c:	880f883a 	mov	r7,r17
  809b30:	0801d8c0 	call	801d8c <__muldf3>
  809b34:	d9401517 	ldw	r5,84(sp)
  809b38:	d9001417 	ldw	r4,80(sp)
  809b3c:	880f883a 	mov	r7,r17
  809b40:	000d883a 	mov	r6,zero
  809b44:	d8801a15 	stw	r2,104(sp)
  809b48:	d8c01b15 	stw	r3,108(sp)
  809b4c:	0801d8c0 	call	801d8c <__muldf3>
  809b50:	180b883a 	mov	r5,r3
  809b54:	1009883a 	mov	r4,r2
  809b58:	1823883a 	mov	r17,r3
  809b5c:	1021883a 	mov	r16,r2
  809b60:	080e4600 	call	80e460 <__fixdfsi>
  809b64:	1009883a 	mov	r4,r2
  809b68:	102b883a 	mov	r21,r2
  809b6c:	080e3680 	call	80e368 <__floatsidf>
  809b70:	880b883a 	mov	r5,r17
  809b74:	8009883a 	mov	r4,r16
  809b78:	180f883a 	mov	r7,r3
  809b7c:	100d883a 	mov	r6,r2
  809b80:	0801c980 	call	801c98 <__subdf3>
  809b84:	1021883a 	mov	r16,r2
  809b88:	d9001b17 	ldw	r4,108(sp)
  809b8c:	1823883a 	mov	r17,r3
  809b90:	dc001415 	stw	r16,80(sp)
  809b94:	ad400c04 	addi	r21,r21,48
  809b98:	dc401515 	stw	r17,84(sp)
  809b9c:	d8801a17 	ldw	r2,104(sp)
  809ba0:	e5400005 	stb	r21,0(fp)
  809ba4:	202f883a 	mov	r23,r4
  809ba8:	d9c01b17 	ldw	r7,108(sp)
  809bac:	d9001417 	ldw	r4,80(sp)
  809bb0:	880b883a 	mov	r5,r17
  809bb4:	100d883a 	mov	r6,r2
  809bb8:	102d883a 	mov	r22,r2
  809bbc:	e7000044 	addi	fp,fp,1
  809bc0:	080e2580 	call	80e258 <__ltdf2>
  809bc4:	103fc30e 	bge	r2,zero,809ad4 <_dtoa_r+0x1064>
  809bc8:	d9000417 	ldw	r4,16(sp)
  809bcc:	d9000d15 	stw	r4,52(sp)
  809bd0:	003d7106 	br	809198 <_dtoa_r+0x728>
  809bd4:	d9801717 	ldw	r6,92(sp)
  809bd8:	00800084 	movi	r2,2
  809bdc:	11bde60e 	bge	r2,r6,809378 <_dtoa_r+0x908>
  809be0:	203cfb1e 	bne	r4,zero,808fd0 <_dtoa_r+0x560>
  809be4:	d9001617 	ldw	r4,88(sp)
  809be8:	900b883a 	mov	r5,r18
  809bec:	01800144 	movi	r6,5
  809bf0:	000f883a 	mov	r7,zero
  809bf4:	080c25c0 	call	80c25c <__multadd>
  809bf8:	d9000717 	ldw	r4,28(sp)
  809bfc:	100b883a 	mov	r5,r2
  809c00:	1025883a 	mov	r18,r2
  809c04:	080b6980 	call	80b698 <__mcmp>
  809c08:	00bcf10e 	bge	zero,r2,808fd0 <_dtoa_r+0x560>
  809c0c:	d8c00d17 	ldw	r3,52(sp)
  809c10:	d9000517 	ldw	r4,20(sp)
  809c14:	d8000615 	stw	zero,24(sp)
  809c18:	18c00044 	addi	r3,r3,1
  809c1c:	d8c00d15 	stw	r3,52(sp)
  809c20:	00800c44 	movi	r2,49
  809c24:	27000044 	addi	fp,r4,1
  809c28:	20800005 	stb	r2,0(r4)
  809c2c:	003e8906 	br	809654 <_dtoa_r+0xbe4>
  809c30:	d8c00517 	ldw	r3,20(sp)
  809c34:	003bc206 	br	808b40 <_dtoa_r+0xd0>
  809c38:	01802074 	movhi	r6,129
  809c3c:	318e6204 	addi	r6,r6,14728
  809c40:	30c00917 	ldw	r3,36(r6)
  809c44:	30800817 	ldw	r2,32(r6)
  809c48:	d9001217 	ldw	r4,72(sp)
  809c4c:	d9401317 	ldw	r5,76(sp)
  809c50:	180f883a 	mov	r7,r3
  809c54:	100d883a 	mov	r6,r2
  809c58:	08021500 	call	802150 <__divdf3>
  809c5c:	948003cc 	andi	r18,r18,15
  809c60:	058000c4 	movi	r22,3
  809c64:	1029883a 	mov	r20,r2
  809c68:	182b883a 	mov	r21,r3
  809c6c:	003c8906 	br	808e94 <_dtoa_r+0x424>
  809c70:	d9001017 	ldw	r4,64(sp)
  809c74:	d9800917 	ldw	r6,36(sp)
  809c78:	0025883a 	mov	r18,zero
  809c7c:	1105c83a 	sub	r2,r2,r4
  809c80:	2089883a 	add	r4,r4,r2
  809c84:	308d883a 	add	r6,r6,r2
  809c88:	d9001015 	stw	r4,64(sp)
  809c8c:	d9800915 	stw	r6,36(sp)
  809c90:	003e3206 	br	80955c <_dtoa_r+0xaec>
  809c94:	28800044 	addi	r2,r5,1
  809c98:	27000044 	addi	fp,r4,1
  809c9c:	20800005 	stb	r2,0(r4)
  809ca0:	003e6c06 	br	809654 <_dtoa_r+0xbe4>
  809ca4:	d8800f17 	ldw	r2,60(sp)
  809ca8:	00bce016 	blt	zero,r2,80902c <_dtoa_r+0x5bc>
  809cac:	d9800f17 	ldw	r6,60(sp)
  809cb0:	303cc51e 	bne	r6,zero,808fc8 <_dtoa_r+0x558>
  809cb4:	0005883a 	mov	r2,zero
  809cb8:	00d00534 	movhi	r3,16404
  809cbc:	980b883a 	mov	r5,r19
  809cc0:	180f883a 	mov	r7,r3
  809cc4:	9009883a 	mov	r4,r18
  809cc8:	100d883a 	mov	r6,r2
  809ccc:	0801d8c0 	call	801d8c <__muldf3>
  809cd0:	180b883a 	mov	r5,r3
  809cd4:	a80f883a 	mov	r7,r21
  809cd8:	1009883a 	mov	r4,r2
  809cdc:	a00d883a 	mov	r6,r20
  809ce0:	080e1d00 	call	80e1d0 <__gedf2>
  809ce4:	103cb80e 	bge	r2,zero,808fc8 <_dtoa_r+0x558>
  809ce8:	0027883a 	mov	r19,zero
  809cec:	0025883a 	mov	r18,zero
  809cf0:	003fc606 	br	809c0c <_dtoa_r+0x119c>
  809cf4:	99400117 	ldw	r5,4(r19)
  809cf8:	d9001617 	ldw	r4,88(sp)
  809cfc:	080babc0 	call	80babc <_Balloc>
  809d00:	99800417 	ldw	r6,16(r19)
  809d04:	11000304 	addi	r4,r2,12
  809d08:	99400304 	addi	r5,r19,12
  809d0c:	318d883a 	add	r6,r6,r6
  809d10:	318d883a 	add	r6,r6,r6
  809d14:	31800204 	addi	r6,r6,8
  809d18:	1023883a 	mov	r17,r2
  809d1c:	080b3bc0 	call	80b3bc <memcpy>
  809d20:	d9001617 	ldw	r4,88(sp)
  809d24:	880b883a 	mov	r5,r17
  809d28:	01800044 	movi	r6,1
  809d2c:	080be800 	call	80be80 <__lshift>
  809d30:	100b883a 	mov	r5,r2
  809d34:	003d9c06 	br	8093a8 <_dtoa_r+0x938>
  809d38:	00800e44 	movi	r2,57
  809d3c:	b8807026 	beq	r23,r2,809f00 <_dtoa_r+0x1490>
  809d40:	b8800044 	addi	r2,r23,1
  809d44:	b7000044 	addi	fp,r22,1
  809d48:	b0800005 	stb	r2,0(r22)
  809d4c:	003e4106 	br	809654 <_dtoa_r+0xbe4>
  809d50:	d8800317 	ldw	r2,12(sp)
  809d54:	01802074 	movhi	r6,129
  809d58:	318e3004 	addi	r6,r6,14528
  809d5c:	b009883a 	mov	r4,r22
  809d60:	100e90fa 	slli	r7,r2,3
  809d64:	b80b883a 	mov	r5,r23
  809d68:	398f883a 	add	r7,r7,r6
  809d6c:	38bffe17 	ldw	r2,-8(r7)
  809d70:	d9800517 	ldw	r6,20(sp)
  809d74:	38ffff17 	ldw	r3,-4(r7)
  809d78:	37000044 	addi	fp,r6,1
  809d7c:	180f883a 	mov	r7,r3
  809d80:	100d883a 	mov	r6,r2
  809d84:	0801d8c0 	call	801d8c <__muldf3>
  809d88:	a80b883a 	mov	r5,r21
  809d8c:	a009883a 	mov	r4,r20
  809d90:	182f883a 	mov	r23,r3
  809d94:	102d883a 	mov	r22,r2
  809d98:	080e4600 	call	80e460 <__fixdfsi>
  809d9c:	1009883a 	mov	r4,r2
  809da0:	1027883a 	mov	r19,r2
  809da4:	080e3680 	call	80e368 <__floatsidf>
  809da8:	a80b883a 	mov	r5,r21
  809dac:	a009883a 	mov	r4,r20
  809db0:	180f883a 	mov	r7,r3
  809db4:	100d883a 	mov	r6,r2
  809db8:	0801c980 	call	801c98 <__subdf3>
  809dbc:	180b883a 	mov	r5,r3
  809dc0:	d8c00517 	ldw	r3,20(sp)
  809dc4:	9cc00c04 	addi	r19,r19,48
  809dc8:	1009883a 	mov	r4,r2
  809dcc:	1cc00005 	stb	r19,0(r3)
  809dd0:	2021883a 	mov	r16,r4
  809dd4:	d9000317 	ldw	r4,12(sp)
  809dd8:	00800044 	movi	r2,1
  809ddc:	2823883a 	mov	r17,r5
  809de0:	20802226 	beq	r4,r2,809e6c <_dtoa_r+0x13fc>
  809de4:	1029883a 	mov	r20,r2
  809de8:	0005883a 	mov	r2,zero
  809dec:	00d00934 	movhi	r3,16420
  809df0:	180f883a 	mov	r7,r3
  809df4:	100d883a 	mov	r6,r2
  809df8:	880b883a 	mov	r5,r17
  809dfc:	8009883a 	mov	r4,r16
  809e00:	0801d8c0 	call	801d8c <__muldf3>
  809e04:	180b883a 	mov	r5,r3
  809e08:	1009883a 	mov	r4,r2
  809e0c:	1823883a 	mov	r17,r3
  809e10:	1021883a 	mov	r16,r2
  809e14:	080e4600 	call	80e460 <__fixdfsi>
  809e18:	1009883a 	mov	r4,r2
  809e1c:	102b883a 	mov	r21,r2
  809e20:	080e3680 	call	80e368 <__floatsidf>
  809e24:	880b883a 	mov	r5,r17
  809e28:	8009883a 	mov	r4,r16
  809e2c:	180f883a 	mov	r7,r3
  809e30:	100d883a 	mov	r6,r2
  809e34:	0801c980 	call	801c98 <__subdf3>
  809e38:	180b883a 	mov	r5,r3
  809e3c:	d8c00517 	ldw	r3,20(sp)
  809e40:	1009883a 	mov	r4,r2
  809e44:	ad400c04 	addi	r21,r21,48
  809e48:	1d05883a 	add	r2,r3,r20
  809e4c:	15400005 	stb	r21,0(r2)
  809e50:	2021883a 	mov	r16,r4
  809e54:	d9000317 	ldw	r4,12(sp)
  809e58:	a5000044 	addi	r20,r20,1
  809e5c:	2823883a 	mov	r17,r5
  809e60:	a13fe11e 	bne	r20,r4,809de8 <_dtoa_r+0x1378>
  809e64:	e505883a 	add	r2,fp,r20
  809e68:	173fffc4 	addi	fp,r2,-1
  809e6c:	0025883a 	mov	r18,zero
  809e70:	04cff834 	movhi	r19,16352
  809e74:	b009883a 	mov	r4,r22
  809e78:	b80b883a 	mov	r5,r23
  809e7c:	900d883a 	mov	r6,r18
  809e80:	980f883a 	mov	r7,r19
  809e84:	0801d180 	call	801d18 <__adddf3>
  809e88:	180b883a 	mov	r5,r3
  809e8c:	1009883a 	mov	r4,r2
  809e90:	800d883a 	mov	r6,r16
  809e94:	880f883a 	mov	r7,r17
  809e98:	080e2580 	call	80e258 <__ltdf2>
  809e9c:	103cab16 	blt	r2,zero,80914c <_dtoa_r+0x6dc>
  809ea0:	0009883a 	mov	r4,zero
  809ea4:	980b883a 	mov	r5,r19
  809ea8:	b80f883a 	mov	r7,r23
  809eac:	b00d883a 	mov	r6,r22
  809eb0:	0801c980 	call	801c98 <__subdf3>
  809eb4:	180b883a 	mov	r5,r3
  809eb8:	880f883a 	mov	r7,r17
  809ebc:	1009883a 	mov	r4,r2
  809ec0:	800d883a 	mov	r6,r16
  809ec4:	080e1480 	call	80e148 <__gtdf2>
  809ec8:	00bc470e 	bge	zero,r2,808fe8 <_dtoa_r+0x578>
  809ecc:	00c00c04 	movi	r3,48
  809ed0:	e73fffc4 	addi	fp,fp,-1
  809ed4:	e0800007 	ldb	r2,0(fp)
  809ed8:	10fffd26 	beq	r2,r3,809ed0 <_dtoa_r+0x1460>
  809edc:	d9800417 	ldw	r6,16(sp)
  809ee0:	e7000044 	addi	fp,fp,1
  809ee4:	d9800d15 	stw	r6,52(sp)
  809ee8:	003cab06 	br	809198 <_dtoa_r+0x728>
  809eec:	d8c00f17 	ldw	r3,60(sp)
  809ef0:	d9001117 	ldw	r4,68(sp)
  809ef4:	20e1c83a 	sub	r16,r4,r3
  809ef8:	0007883a 	mov	r3,zero
  809efc:	003d9b06 	br	80956c <_dtoa_r+0xafc>
  809f00:	00800e44 	movi	r2,57
  809f04:	b0800005 	stb	r2,0(r22)
  809f08:	b5800044 	addi	r22,r22,1
  809f0c:	003dc106 	br	809614 <_dtoa_r+0xba4>
  809f10:	05800084 	movi	r22,2
  809f14:	003bf706 	br	808ef4 <_dtoa_r+0x484>
  809f18:	d9000f17 	ldw	r4,60(sp)
  809f1c:	013c000e 	bge	zero,r4,808f20 <_dtoa_r+0x4b0>
  809f20:	d9800e17 	ldw	r6,56(sp)
  809f24:	01bc300e 	bge	zero,r6,808fe8 <_dtoa_r+0x578>
  809f28:	0005883a 	mov	r2,zero
  809f2c:	00d00934 	movhi	r3,16420
  809f30:	a80b883a 	mov	r5,r21
  809f34:	180f883a 	mov	r7,r3
  809f38:	a009883a 	mov	r4,r20
  809f3c:	100d883a 	mov	r6,r2
  809f40:	0801d8c0 	call	801d8c <__muldf3>
  809f44:	b1000044 	addi	r4,r22,1
  809f48:	1021883a 	mov	r16,r2
  809f4c:	1823883a 	mov	r17,r3
  809f50:	080e3680 	call	80e368 <__floatsidf>
  809f54:	880b883a 	mov	r5,r17
  809f58:	8009883a 	mov	r4,r16
  809f5c:	180f883a 	mov	r7,r3
  809f60:	100d883a 	mov	r6,r2
  809f64:	0801d8c0 	call	801d8c <__muldf3>
  809f68:	0011883a 	mov	r8,zero
  809f6c:	02500734 	movhi	r9,16412
  809f70:	180b883a 	mov	r5,r3
  809f74:	480f883a 	mov	r7,r9
  809f78:	1009883a 	mov	r4,r2
  809f7c:	400d883a 	mov	r6,r8
  809f80:	0801d180 	call	801d18 <__adddf3>
  809f84:	102d883a 	mov	r22,r2
  809f88:	00bf3034 	movhi	r2,64704
  809f8c:	10ef883a 	add	r23,r2,r3
  809f90:	d8800d17 	ldw	r2,52(sp)
  809f94:	d8c00e17 	ldw	r3,56(sp)
  809f98:	8029883a 	mov	r20,r16
  809f9c:	10bfffc4 	addi	r2,r2,-1
  809fa0:	882b883a 	mov	r21,r17
  809fa4:	d8800415 	stw	r2,16(sp)
  809fa8:	d8c00315 	stw	r3,12(sp)
  809fac:	003e8306 	br	8099bc <_dtoa_r+0xf4c>
  809fb0:	d8800117 	ldw	r2,4(sp)
  809fb4:	dc001117 	ldw	r16,68(sp)
  809fb8:	dc801017 	ldw	r18,64(sp)
  809fbc:	00c00d84 	movi	r3,54
  809fc0:	1887c83a 	sub	r3,r3,r2
  809fc4:	003d6906 	br	80956c <_dtoa_r+0xafc>
  809fc8:	01800044 	movi	r6,1
  809fcc:	3021883a 	mov	r16,r6
  809fd0:	d9800f15 	stw	r6,60(sp)
  809fd4:	d9802615 	stw	r6,152(sp)
  809fd8:	d9800e15 	stw	r6,56(sp)
  809fdc:	003b9306 	br	808e2c <_dtoa_r+0x3bc>
  809fe0:	b021883a 	mov	r16,r22
  809fe4:	dd800f15 	stw	r22,60(sp)
  809fe8:	003b9006 	br	808e2c <_dtoa_r+0x3bc>
  809fec:	103e221e 	bne	r2,zero,809878 <_dtoa_r+0xe08>
  809ff0:	b880004c 	andi	r2,r23,1
  809ff4:	1005003a 	cmpeq	r2,r2,zero
  809ff8:	103e1f1e 	bne	r2,zero,809878 <_dtoa_r+0xe08>
  809ffc:	003e1b06 	br	80986c <_dtoa_r+0xdfc>
  80a000:	d9001617 	ldw	r4,88(sp)
  80a004:	980b883a 	mov	r5,r19
  80a008:	01800284 	movi	r6,10
  80a00c:	000f883a 	mov	r7,zero
  80a010:	080c25c0 	call	80c25c <__multadd>
  80a014:	d8c00e17 	ldw	r3,56(sp)
  80a018:	1027883a 	mov	r19,r2
  80a01c:	d8c00f15 	stw	r3,60(sp)
  80a020:	003cd306 	br	809370 <_dtoa_r+0x900>

0080a024 <__sflags>:
  80a024:	28c00007 	ldb	r3,0(r5)
  80a028:	00801c84 	movi	r2,114
  80a02c:	18800926 	beq	r3,r2,80a054 <__sflags+0x30>
  80a030:	00801dc4 	movi	r2,119
  80a034:	18801426 	beq	r3,r2,80a088 <__sflags+0x64>
  80a038:	00801844 	movi	r2,97
  80a03c:	18801626 	beq	r3,r2,80a098 <__sflags+0x74>
  80a040:	0007883a 	mov	r3,zero
  80a044:	00800584 	movi	r2,22
  80a048:	20800015 	stw	r2,0(r4)
  80a04c:	1805883a 	mov	r2,r3
  80a050:	f800283a 	ret
  80a054:	000f883a 	mov	r7,zero
  80a058:	0011883a 	mov	r8,zero
  80a05c:	00c00104 	movi	r3,4
  80a060:	28800047 	ldb	r2,1(r5)
  80a064:	10000426 	beq	r2,zero,80a078 <__sflags+0x54>
  80a068:	01000ac4 	movi	r4,43
  80a06c:	11000e26 	beq	r2,r4,80a0a8 <__sflags+0x84>
  80a070:	28800087 	ldb	r2,2(r5)
  80a074:	11000c26 	beq	r2,r4,80a0a8 <__sflags+0x84>
  80a078:	3a04b03a 	or	r2,r7,r8
  80a07c:	30800015 	stw	r2,0(r6)
  80a080:	1805883a 	mov	r2,r3
  80a084:	f800283a 	ret
  80a088:	01c00044 	movi	r7,1
  80a08c:	02018004 	movi	r8,1536
  80a090:	00c00204 	movi	r3,8
  80a094:	003ff206 	br	80a060 <__sflags+0x3c>
  80a098:	01c00044 	movi	r7,1
  80a09c:	02008204 	movi	r8,520
  80a0a0:	00c04204 	movi	r3,264
  80a0a4:	003fee06 	br	80a060 <__sflags+0x3c>
  80a0a8:	00bffcc4 	movi	r2,-13
  80a0ac:	1884703a 	and	r2,r3,r2
  80a0b0:	01c00084 	movi	r7,2
  80a0b4:	10c00414 	ori	r3,r2,16
  80a0b8:	3a04b03a 	or	r2,r7,r8
  80a0bc:	30800015 	stw	r2,0(r6)
  80a0c0:	003fef06 	br	80a080 <__sflags+0x5c>

0080a0c4 <__sfvwrite_r>:
  80a0c4:	30800217 	ldw	r2,8(r6)
  80a0c8:	defff504 	addi	sp,sp,-44
  80a0cc:	df000915 	stw	fp,36(sp)
  80a0d0:	dd800715 	stw	r22,28(sp)
  80a0d4:	dc800315 	stw	r18,12(sp)
  80a0d8:	dfc00a15 	stw	ra,40(sp)
  80a0dc:	ddc00815 	stw	r23,32(sp)
  80a0e0:	dd400615 	stw	r21,24(sp)
  80a0e4:	dd000515 	stw	r20,20(sp)
  80a0e8:	dcc00415 	stw	r19,16(sp)
  80a0ec:	dc400215 	stw	r17,8(sp)
  80a0f0:	dc000115 	stw	r16,4(sp)
  80a0f4:	302d883a 	mov	r22,r6
  80a0f8:	2039883a 	mov	fp,r4
  80a0fc:	2825883a 	mov	r18,r5
  80a100:	10001c26 	beq	r2,zero,80a174 <__sfvwrite_r+0xb0>
  80a104:	29c0030b 	ldhu	r7,12(r5)
  80a108:	3880020c 	andi	r2,r7,8
  80a10c:	10002726 	beq	r2,zero,80a1ac <__sfvwrite_r+0xe8>
  80a110:	28800417 	ldw	r2,16(r5)
  80a114:	10002526 	beq	r2,zero,80a1ac <__sfvwrite_r+0xe8>
  80a118:	3880008c 	andi	r2,r7,2
  80a11c:	b5400017 	ldw	r21,0(r22)
  80a120:	10002826 	beq	r2,zero,80a1c4 <__sfvwrite_r+0x100>
  80a124:	0021883a 	mov	r16,zero
  80a128:	0023883a 	mov	r17,zero
  80a12c:	880d883a 	mov	r6,r17
  80a130:	e009883a 	mov	r4,fp
  80a134:	00810004 	movi	r2,1024
  80a138:	80006e26 	beq	r16,zero,80a2f4 <__sfvwrite_r+0x230>
  80a13c:	800f883a 	mov	r7,r16
  80a140:	91400717 	ldw	r5,28(r18)
  80a144:	1400012e 	bgeu	r2,r16,80a14c <__sfvwrite_r+0x88>
  80a148:	100f883a 	mov	r7,r2
  80a14c:	90c00917 	ldw	r3,36(r18)
  80a150:	183ee83a 	callr	r3
  80a154:	1007883a 	mov	r3,r2
  80a158:	80a1c83a 	sub	r16,r16,r2
  80a15c:	88a3883a 	add	r17,r17,r2
  80a160:	00806d0e 	bge	zero,r2,80a318 <__sfvwrite_r+0x254>
  80a164:	b0800217 	ldw	r2,8(r22)
  80a168:	10c5c83a 	sub	r2,r2,r3
  80a16c:	b0800215 	stw	r2,8(r22)
  80a170:	103fee1e 	bne	r2,zero,80a12c <__sfvwrite_r+0x68>
  80a174:	0009883a 	mov	r4,zero
  80a178:	2005883a 	mov	r2,r4
  80a17c:	dfc00a17 	ldw	ra,40(sp)
  80a180:	df000917 	ldw	fp,36(sp)
  80a184:	ddc00817 	ldw	r23,32(sp)
  80a188:	dd800717 	ldw	r22,28(sp)
  80a18c:	dd400617 	ldw	r21,24(sp)
  80a190:	dd000517 	ldw	r20,20(sp)
  80a194:	dcc00417 	ldw	r19,16(sp)
  80a198:	dc800317 	ldw	r18,12(sp)
  80a19c:	dc400217 	ldw	r17,8(sp)
  80a1a0:	dc000117 	ldw	r16,4(sp)
  80a1a4:	dec00b04 	addi	sp,sp,44
  80a1a8:	f800283a 	ret
  80a1ac:	08086800 	call	808680 <__swsetup_r>
  80a1b0:	1000e41e 	bne	r2,zero,80a544 <__sfvwrite_r+0x480>
  80a1b4:	91c0030b 	ldhu	r7,12(r18)
  80a1b8:	b5400017 	ldw	r21,0(r22)
  80a1bc:	3880008c 	andi	r2,r7,2
  80a1c0:	103fd81e 	bne	r2,zero,80a124 <__sfvwrite_r+0x60>
  80a1c4:	3880004c 	andi	r2,r7,1
  80a1c8:	1005003a 	cmpeq	r2,r2,zero
  80a1cc:	10005726 	beq	r2,zero,80a32c <__sfvwrite_r+0x268>
  80a1d0:	0029883a 	mov	r20,zero
  80a1d4:	002f883a 	mov	r23,zero
  80a1d8:	a0004226 	beq	r20,zero,80a2e4 <__sfvwrite_r+0x220>
  80a1dc:	3880800c 	andi	r2,r7,512
  80a1e0:	94000217 	ldw	r16,8(r18)
  80a1e4:	10008b26 	beq	r2,zero,80a414 <__sfvwrite_r+0x350>
  80a1e8:	800d883a 	mov	r6,r16
  80a1ec:	a400a536 	bltu	r20,r16,80a484 <__sfvwrite_r+0x3c0>
  80a1f0:	3881200c 	andi	r2,r7,1152
  80a1f4:	10002726 	beq	r2,zero,80a294 <__sfvwrite_r+0x1d0>
  80a1f8:	90800517 	ldw	r2,20(r18)
  80a1fc:	92000417 	ldw	r8,16(r18)
  80a200:	91400017 	ldw	r5,0(r18)
  80a204:	1087883a 	add	r3,r2,r2
  80a208:	1887883a 	add	r3,r3,r2
  80a20c:	1808d7fa 	srli	r4,r3,31
  80a210:	2a21c83a 	sub	r16,r5,r8
  80a214:	80800044 	addi	r2,r16,1
  80a218:	20c9883a 	add	r4,r4,r3
  80a21c:	2027d07a 	srai	r19,r4,1
  80a220:	a085883a 	add	r2,r20,r2
  80a224:	980d883a 	mov	r6,r19
  80a228:	9880022e 	bgeu	r19,r2,80a234 <__sfvwrite_r+0x170>
  80a22c:	1027883a 	mov	r19,r2
  80a230:	100d883a 	mov	r6,r2
  80a234:	3881000c 	andi	r2,r7,1024
  80a238:	1000b826 	beq	r2,zero,80a51c <__sfvwrite_r+0x458>
  80a23c:	300b883a 	mov	r5,r6
  80a240:	e009883a 	mov	r4,fp
  80a244:	0803e7c0 	call	803e7c <_malloc_r>
  80a248:	10003126 	beq	r2,zero,80a310 <__sfvwrite_r+0x24c>
  80a24c:	91400417 	ldw	r5,16(r18)
  80a250:	1009883a 	mov	r4,r2
  80a254:	800d883a 	mov	r6,r16
  80a258:	1023883a 	mov	r17,r2
  80a25c:	080b3bc0 	call	80b3bc <memcpy>
  80a260:	90c0030b 	ldhu	r3,12(r18)
  80a264:	00beffc4 	movi	r2,-1025
  80a268:	1886703a 	and	r3,r3,r2
  80a26c:	18c02014 	ori	r3,r3,128
  80a270:	90c0030d 	sth	r3,12(r18)
  80a274:	9c07c83a 	sub	r3,r19,r16
  80a278:	8c05883a 	add	r2,r17,r16
  80a27c:	a00d883a 	mov	r6,r20
  80a280:	a021883a 	mov	r16,r20
  80a284:	90800015 	stw	r2,0(r18)
  80a288:	90c00215 	stw	r3,8(r18)
  80a28c:	94400415 	stw	r17,16(r18)
  80a290:	94c00515 	stw	r19,20(r18)
  80a294:	91000017 	ldw	r4,0(r18)
  80a298:	b80b883a 	mov	r5,r23
  80a29c:	a023883a 	mov	r17,r20
  80a2a0:	080b45c0 	call	80b45c <memmove>
  80a2a4:	90c00217 	ldw	r3,8(r18)
  80a2a8:	90800017 	ldw	r2,0(r18)
  80a2ac:	a027883a 	mov	r19,r20
  80a2b0:	1c07c83a 	sub	r3,r3,r16
  80a2b4:	1405883a 	add	r2,r2,r16
  80a2b8:	90c00215 	stw	r3,8(r18)
  80a2bc:	a021883a 	mov	r16,r20
  80a2c0:	90800015 	stw	r2,0(r18)
  80a2c4:	b0800217 	ldw	r2,8(r22)
  80a2c8:	1405c83a 	sub	r2,r2,r16
  80a2cc:	b0800215 	stw	r2,8(r22)
  80a2d0:	103fa826 	beq	r2,zero,80a174 <__sfvwrite_r+0xb0>
  80a2d4:	a469c83a 	sub	r20,r20,r17
  80a2d8:	91c0030b 	ldhu	r7,12(r18)
  80a2dc:	bcef883a 	add	r23,r23,r19
  80a2e0:	a03fbe1e 	bne	r20,zero,80a1dc <__sfvwrite_r+0x118>
  80a2e4:	adc00017 	ldw	r23,0(r21)
  80a2e8:	ad000117 	ldw	r20,4(r21)
  80a2ec:	ad400204 	addi	r21,r21,8
  80a2f0:	003fb906 	br	80a1d8 <__sfvwrite_r+0x114>
  80a2f4:	ac400017 	ldw	r17,0(r21)
  80a2f8:	ac000117 	ldw	r16,4(r21)
  80a2fc:	ad400204 	addi	r21,r21,8
  80a300:	003f8a06 	br	80a12c <__sfvwrite_r+0x68>
  80a304:	91400417 	ldw	r5,16(r18)
  80a308:	e009883a 	mov	r4,fp
  80a30c:	08033800 	call	803380 <_free_r>
  80a310:	00800304 	movi	r2,12
  80a314:	e0800015 	stw	r2,0(fp)
  80a318:	9080030b 	ldhu	r2,12(r18)
  80a31c:	013fffc4 	movi	r4,-1
  80a320:	10801014 	ori	r2,r2,64
  80a324:	9080030d 	sth	r2,12(r18)
  80a328:	003f9306 	br	80a178 <__sfvwrite_r+0xb4>
  80a32c:	0027883a 	mov	r19,zero
  80a330:	002f883a 	mov	r23,zero
  80a334:	d8000015 	stw	zero,0(sp)
  80a338:	0029883a 	mov	r20,zero
  80a33c:	98001e26 	beq	r19,zero,80a3b8 <__sfvwrite_r+0x2f4>
  80a340:	d8c00017 	ldw	r3,0(sp)
  80a344:	1804c03a 	cmpne	r2,r3,zero
  80a348:	10005e26 	beq	r2,zero,80a4c4 <__sfvwrite_r+0x400>
  80a34c:	9821883a 	mov	r16,r19
  80a350:	a4c0012e 	bgeu	r20,r19,80a358 <__sfvwrite_r+0x294>
  80a354:	a021883a 	mov	r16,r20
  80a358:	91000017 	ldw	r4,0(r18)
  80a35c:	90800417 	ldw	r2,16(r18)
  80a360:	91800217 	ldw	r6,8(r18)
  80a364:	91c00517 	ldw	r7,20(r18)
  80a368:	1100022e 	bgeu	r2,r4,80a374 <__sfvwrite_r+0x2b0>
  80a36c:	31e3883a 	add	r17,r6,r7
  80a370:	8c001616 	blt	r17,r16,80a3cc <__sfvwrite_r+0x308>
  80a374:	81c03816 	blt	r16,r7,80a458 <__sfvwrite_r+0x394>
  80a378:	90c00917 	ldw	r3,36(r18)
  80a37c:	91400717 	ldw	r5,28(r18)
  80a380:	e009883a 	mov	r4,fp
  80a384:	b80d883a 	mov	r6,r23
  80a388:	183ee83a 	callr	r3
  80a38c:	1023883a 	mov	r17,r2
  80a390:	00bfe10e 	bge	zero,r2,80a318 <__sfvwrite_r+0x254>
  80a394:	a469c83a 	sub	r20,r20,r17
  80a398:	a0001826 	beq	r20,zero,80a3fc <__sfvwrite_r+0x338>
  80a39c:	b0800217 	ldw	r2,8(r22)
  80a3a0:	1445c83a 	sub	r2,r2,r17
  80a3a4:	b0800215 	stw	r2,8(r22)
  80a3a8:	103f7226 	beq	r2,zero,80a174 <__sfvwrite_r+0xb0>
  80a3ac:	9c67c83a 	sub	r19,r19,r17
  80a3b0:	bc6f883a 	add	r23,r23,r17
  80a3b4:	983fe21e 	bne	r19,zero,80a340 <__sfvwrite_r+0x27c>
  80a3b8:	adc00017 	ldw	r23,0(r21)
  80a3bc:	acc00117 	ldw	r19,4(r21)
  80a3c0:	ad400204 	addi	r21,r21,8
  80a3c4:	d8000015 	stw	zero,0(sp)
  80a3c8:	003fdc06 	br	80a33c <__sfvwrite_r+0x278>
  80a3cc:	b80b883a 	mov	r5,r23
  80a3d0:	880d883a 	mov	r6,r17
  80a3d4:	080b45c0 	call	80b45c <memmove>
  80a3d8:	90c00017 	ldw	r3,0(r18)
  80a3dc:	e009883a 	mov	r4,fp
  80a3e0:	900b883a 	mov	r5,r18
  80a3e4:	1c47883a 	add	r3,r3,r17
  80a3e8:	90c00015 	stw	r3,0(r18)
  80a3ec:	0802bc00 	call	802bc0 <_fflush_r>
  80a3f0:	103fc91e 	bne	r2,zero,80a318 <__sfvwrite_r+0x254>
  80a3f4:	a469c83a 	sub	r20,r20,r17
  80a3f8:	a03fe81e 	bne	r20,zero,80a39c <__sfvwrite_r+0x2d8>
  80a3fc:	e009883a 	mov	r4,fp
  80a400:	900b883a 	mov	r5,r18
  80a404:	0802bc00 	call	802bc0 <_fflush_r>
  80a408:	103fc31e 	bne	r2,zero,80a318 <__sfvwrite_r+0x254>
  80a40c:	d8000015 	stw	zero,0(sp)
  80a410:	003fe206 	br	80a39c <__sfvwrite_r+0x2d8>
  80a414:	91000017 	ldw	r4,0(r18)
  80a418:	90800417 	ldw	r2,16(r18)
  80a41c:	1100022e 	bgeu	r2,r4,80a428 <__sfvwrite_r+0x364>
  80a420:	8023883a 	mov	r17,r16
  80a424:	85003136 	bltu	r16,r20,80a4ec <__sfvwrite_r+0x428>
  80a428:	91c00517 	ldw	r7,20(r18)
  80a42c:	a1c01836 	bltu	r20,r7,80a490 <__sfvwrite_r+0x3cc>
  80a430:	90c00917 	ldw	r3,36(r18)
  80a434:	91400717 	ldw	r5,28(r18)
  80a438:	e009883a 	mov	r4,fp
  80a43c:	b80d883a 	mov	r6,r23
  80a440:	183ee83a 	callr	r3
  80a444:	1021883a 	mov	r16,r2
  80a448:	00bfb30e 	bge	zero,r2,80a318 <__sfvwrite_r+0x254>
  80a44c:	1023883a 	mov	r17,r2
  80a450:	1027883a 	mov	r19,r2
  80a454:	003f9b06 	br	80a2c4 <__sfvwrite_r+0x200>
  80a458:	b80b883a 	mov	r5,r23
  80a45c:	800d883a 	mov	r6,r16
  80a460:	080b45c0 	call	80b45c <memmove>
  80a464:	90c00217 	ldw	r3,8(r18)
  80a468:	90800017 	ldw	r2,0(r18)
  80a46c:	8023883a 	mov	r17,r16
  80a470:	1c07c83a 	sub	r3,r3,r16
  80a474:	1405883a 	add	r2,r2,r16
  80a478:	90c00215 	stw	r3,8(r18)
  80a47c:	90800015 	stw	r2,0(r18)
  80a480:	003fc406 	br	80a394 <__sfvwrite_r+0x2d0>
  80a484:	a00d883a 	mov	r6,r20
  80a488:	a021883a 	mov	r16,r20
  80a48c:	003f8106 	br	80a294 <__sfvwrite_r+0x1d0>
  80a490:	b80b883a 	mov	r5,r23
  80a494:	a00d883a 	mov	r6,r20
  80a498:	080b45c0 	call	80b45c <memmove>
  80a49c:	90c00217 	ldw	r3,8(r18)
  80a4a0:	90800017 	ldw	r2,0(r18)
  80a4a4:	a021883a 	mov	r16,r20
  80a4a8:	1d07c83a 	sub	r3,r3,r20
  80a4ac:	1505883a 	add	r2,r2,r20
  80a4b0:	a023883a 	mov	r17,r20
  80a4b4:	a027883a 	mov	r19,r20
  80a4b8:	90c00215 	stw	r3,8(r18)
  80a4bc:	90800015 	stw	r2,0(r18)
  80a4c0:	003f8006 	br	80a2c4 <__sfvwrite_r+0x200>
  80a4c4:	b809883a 	mov	r4,r23
  80a4c8:	01400284 	movi	r5,10
  80a4cc:	980d883a 	mov	r6,r19
  80a4d0:	080b2d80 	call	80b2d8 <memchr>
  80a4d4:	10001726 	beq	r2,zero,80a534 <__sfvwrite_r+0x470>
  80a4d8:	15c5c83a 	sub	r2,r2,r23
  80a4dc:	15000044 	addi	r20,r2,1
  80a4e0:	00800044 	movi	r2,1
  80a4e4:	d8800015 	stw	r2,0(sp)
  80a4e8:	003f9806 	br	80a34c <__sfvwrite_r+0x288>
  80a4ec:	b80b883a 	mov	r5,r23
  80a4f0:	800d883a 	mov	r6,r16
  80a4f4:	080b45c0 	call	80b45c <memmove>
  80a4f8:	90c00017 	ldw	r3,0(r18)
  80a4fc:	e009883a 	mov	r4,fp
  80a500:	900b883a 	mov	r5,r18
  80a504:	1c07883a 	add	r3,r3,r16
  80a508:	90c00015 	stw	r3,0(r18)
  80a50c:	8027883a 	mov	r19,r16
  80a510:	0802bc00 	call	802bc0 <_fflush_r>
  80a514:	103f6b26 	beq	r2,zero,80a2c4 <__sfvwrite_r+0x200>
  80a518:	003f7f06 	br	80a318 <__sfvwrite_r+0x254>
  80a51c:	400b883a 	mov	r5,r8
  80a520:	e009883a 	mov	r4,fp
  80a524:	080c82c0 	call	80c82c <_realloc_r>
  80a528:	103f7626 	beq	r2,zero,80a304 <__sfvwrite_r+0x240>
  80a52c:	1023883a 	mov	r17,r2
  80a530:	003f5006 	br	80a274 <__sfvwrite_r+0x1b0>
  80a534:	00c00044 	movi	r3,1
  80a538:	9d000044 	addi	r20,r19,1
  80a53c:	d8c00015 	stw	r3,0(sp)
  80a540:	003f8206 	br	80a34c <__sfvwrite_r+0x288>
  80a544:	9080030b 	ldhu	r2,12(r18)
  80a548:	00c00244 	movi	r3,9
  80a54c:	013fffc4 	movi	r4,-1
  80a550:	10801014 	ori	r2,r2,64
  80a554:	9080030d 	sth	r2,12(r18)
  80a558:	e0c00015 	stw	r3,0(fp)
  80a55c:	003f0606 	br	80a178 <__sfvwrite_r+0xb4>

0080a560 <htinit>:
  80a560:	28800003 	ldbu	r2,0(r5)
  80a564:	10000626 	beq	r2,zero,80a580 <htinit+0x20>
  80a568:	1105883a 	add	r2,r2,r4
  80a56c:	11800005 	stb	r6,0(r2)
  80a570:	28800043 	ldbu	r2,1(r5)
  80a574:	31800044 	addi	r6,r6,1
  80a578:	29400044 	addi	r5,r5,1
  80a57c:	103ffa1e 	bne	r2,zero,80a568 <htinit+0x8>
  80a580:	f800283a 	ret

0080a584 <__hexdig_init>:
  80a584:	defffd04 	addi	sp,sp,-12
  80a588:	dc400015 	stw	r17,0(sp)
  80a58c:	044020b4 	movhi	r17,130
  80a590:	8c615904 	addi	r17,r17,-31388
  80a594:	dcc00115 	stw	r19,4(sp)
  80a598:	8809883a 	mov	r4,r17
  80a59c:	04c00684 	movi	r19,26
  80a5a0:	01402074 	movhi	r5,129
  80a5a4:	294e1904 	addi	r5,r5,14436
  80a5a8:	01800404 	movi	r6,16
  80a5ac:	dfc00215 	stw	ra,8(sp)
  80a5b0:	080a5600 	call	80a560 <htinit>
  80a5b4:	980d883a 	mov	r6,r19
  80a5b8:	8809883a 	mov	r4,r17
  80a5bc:	01402074 	movhi	r5,129
  80a5c0:	294e1c04 	addi	r5,r5,14448
  80a5c4:	080a5600 	call	80a560 <htinit>
  80a5c8:	8809883a 	mov	r4,r17
  80a5cc:	980d883a 	mov	r6,r19
  80a5d0:	01402074 	movhi	r5,129
  80a5d4:	294e1e04 	addi	r5,r5,14456
  80a5d8:	dfc00217 	ldw	ra,8(sp)
  80a5dc:	dcc00117 	ldw	r19,4(sp)
  80a5e0:	dc400017 	ldw	r17,0(sp)
  80a5e4:	dec00304 	addi	sp,sp,12
  80a5e8:	080a5601 	jmpi	80a560 <htinit>

0080a5ec <rshift>:
  80a5ec:	2807d17a 	srai	r3,r5,5
  80a5f0:	20800417 	ldw	r2,16(r4)
  80a5f4:	22400504 	addi	r9,r4,20
  80a5f8:	480f883a 	mov	r7,r9
  80a5fc:	1880190e 	bge	r3,r2,80a664 <rshift+0x78>
  80a600:	1085883a 	add	r2,r2,r2
  80a604:	18c7883a 	add	r3,r3,r3
  80a608:	1085883a 	add	r2,r2,r2
  80a60c:	18c7883a 	add	r3,r3,r3
  80a610:	294007cc 	andi	r5,r5,31
  80a614:	4891883a 	add	r8,r9,r2
  80a618:	48cd883a 	add	r6,r9,r3
  80a61c:	28001726 	beq	r5,zero,80a67c <rshift+0x90>
  80a620:	30c00017 	ldw	r3,0(r6)
  80a624:	00800804 	movi	r2,32
  80a628:	31800104 	addi	r6,r6,4
  80a62c:	1155c83a 	sub	r10,r2,r5
  80a630:	1946d83a 	srl	r3,r3,r5
  80a634:	3200092e 	bgeu	r6,r8,80a65c <rshift+0x70>
  80a638:	30800017 	ldw	r2,0(r6)
  80a63c:	1284983a 	sll	r2,r2,r10
  80a640:	10c4b03a 	or	r2,r2,r3
  80a644:	38800015 	stw	r2,0(r7)
  80a648:	30c00017 	ldw	r3,0(r6)
  80a64c:	31800104 	addi	r6,r6,4
  80a650:	39c00104 	addi	r7,r7,4
  80a654:	1946d83a 	srl	r3,r3,r5
  80a658:	323ff736 	bltu	r6,r8,80a638 <rshift+0x4c>
  80a65c:	38c00015 	stw	r3,0(r7)
  80a660:	18000c1e 	bne	r3,zero,80a694 <rshift+0xa8>
  80a664:	3a45c83a 	sub	r2,r7,r9
  80a668:	1005d0ba 	srai	r2,r2,2
  80a66c:	20800415 	stw	r2,16(r4)
  80a670:	1000011e 	bne	r2,zero,80a678 <rshift+0x8c>
  80a674:	20000515 	stw	zero,20(r4)
  80a678:	f800283a 	ret
  80a67c:	323ff92e 	bgeu	r6,r8,80a664 <rshift+0x78>
  80a680:	30800017 	ldw	r2,0(r6)
  80a684:	31800104 	addi	r6,r6,4
  80a688:	38800015 	stw	r2,0(r7)
  80a68c:	39c00104 	addi	r7,r7,4
  80a690:	003ffa06 	br	80a67c <rshift+0x90>
  80a694:	39c00104 	addi	r7,r7,4
  80a698:	003ff206 	br	80a664 <rshift+0x78>

0080a69c <__gethex>:
  80a69c:	defff104 	addi	sp,sp,-60
  80a6a0:	df000d15 	stw	fp,52(sp)
  80a6a4:	dcc00815 	stw	r19,32(sp)
  80a6a8:	dfc00e15 	stw	ra,56(sp)
  80a6ac:	ddc00c15 	stw	r23,48(sp)
  80a6b0:	dd800b15 	stw	r22,44(sp)
  80a6b4:	dd400a15 	stw	r21,40(sp)
  80a6b8:	dd000915 	stw	r20,36(sp)
  80a6bc:	dc800715 	stw	r18,28(sp)
  80a6c0:	dc400615 	stw	r17,24(sp)
  80a6c4:	dc000515 	stw	r16,20(sp)
  80a6c8:	04c020b4 	movhi	r19,130
  80a6cc:	9ce15904 	addi	r19,r19,-31388
  80a6d0:	98800c03 	ldbu	r2,48(r19)
  80a6d4:	d9000115 	stw	r4,4(sp)
  80a6d8:	2839883a 	mov	fp,r5
  80a6dc:	d9800215 	stw	r6,8(sp)
  80a6e0:	d9c00315 	stw	r7,12(sp)
  80a6e4:	10007526 	beq	r2,zero,80a8bc <__gethex+0x220>
  80a6e8:	e1800017 	ldw	r6,0(fp)
  80a6ec:	00800c04 	movi	r2,48
  80a6f0:	31000083 	ldbu	r4,2(r6)
  80a6f4:	30c00084 	addi	r3,r6,2
  80a6f8:	2080761e 	bne	r4,r2,80a8d4 <__gethex+0x238>
  80a6fc:	200b883a 	mov	r5,r4
  80a700:	3007883a 	mov	r3,r6
  80a704:	188000c3 	ldbu	r2,3(r3)
  80a708:	18c00044 	addi	r3,r3,1
  80a70c:	1009883a 	mov	r4,r2
  80a710:	117ffc26 	beq	r2,r5,80a704 <__gethex+0x68>
  80a714:	198fc83a 	sub	r7,r3,r6
  80a718:	19400084 	addi	r5,r3,2
  80a71c:	24c5883a 	add	r2,r4,r19
  80a720:	10c00003 	ldbu	r3,0(r2)
  80a724:	18002e26 	beq	r3,zero,80a7e0 <__gethex+0x144>
  80a728:	29000003 	ldbu	r4,0(r5)
  80a72c:	282b883a 	mov	r21,r5
  80a730:	000d883a 	mov	r6,zero
  80a734:	002d883a 	mov	r22,zero
  80a738:	21003fcc 	andi	r4,r4,255
  80a73c:	24c5883a 	add	r2,r4,r19
  80a740:	10c00003 	ldbu	r3,0(r2)
  80a744:	18000526 	beq	r3,zero,80a75c <__gethex+0xc0>
  80a748:	29400044 	addi	r5,r5,1
  80a74c:	29000003 	ldbu	r4,0(r5)
  80a750:	24c5883a 	add	r2,r4,r19
  80a754:	10c00003 	ldbu	r3,0(r2)
  80a758:	183ffb1e 	bne	r3,zero,80a748 <__gethex+0xac>
  80a75c:	00800b84 	movi	r2,46
  80a760:	20805f26 	beq	r4,r2,80a8e0 <__gethex+0x244>
  80a764:	30008226 	beq	r6,zero,80a970 <__gethex+0x2d4>
  80a768:	2985c83a 	sub	r2,r5,r6
  80a76c:	1085883a 	add	r2,r2,r2
  80a770:	1085883a 	add	r2,r2,r2
  80a774:	0085c83a 	sub	r2,zero,r2
  80a778:	d8800015 	stw	r2,0(sp)
  80a77c:	2825883a 	mov	r18,r5
  80a780:	90c00003 	ldbu	r3,0(r18)
  80a784:	00801404 	movi	r2,80
  80a788:	18801e26 	beq	r3,r2,80a804 <__gethex+0x168>
  80a78c:	00801c04 	movi	r2,112
  80a790:	18801c26 	beq	r3,r2,80a804 <__gethex+0x168>
  80a794:	9023883a 	mov	r17,r18
  80a798:	b005003a 	cmpeq	r2,r22,zero
  80a79c:	e4400015 	stw	r17,0(fp)
  80a7a0:	10008d1e 	bne	r2,zero,80a9d8 <__gethex+0x33c>
  80a7a4:	38004326 	beq	r7,zero,80a8b4 <__gethex+0x218>
  80a7a8:	0025883a 	mov	r18,zero
  80a7ac:	9005883a 	mov	r2,r18
  80a7b0:	dfc00e17 	ldw	ra,56(sp)
  80a7b4:	df000d17 	ldw	fp,52(sp)
  80a7b8:	ddc00c17 	ldw	r23,48(sp)
  80a7bc:	dd800b17 	ldw	r22,44(sp)
  80a7c0:	dd400a17 	ldw	r21,40(sp)
  80a7c4:	dd000917 	ldw	r20,36(sp)
  80a7c8:	dcc00817 	ldw	r19,32(sp)
  80a7cc:	dc800717 	ldw	r18,28(sp)
  80a7d0:	dc400617 	ldw	r17,24(sp)
  80a7d4:	dc000517 	ldw	r16,20(sp)
  80a7d8:	dec00f04 	addi	sp,sp,60
  80a7dc:	f800283a 	ret
  80a7e0:	00800b84 	movi	r2,46
  80a7e4:	20805126 	beq	r4,r2,80a92c <__gethex+0x290>
  80a7e8:	2825883a 	mov	r18,r5
  80a7ec:	d8000015 	stw	zero,0(sp)
  80a7f0:	90c00003 	ldbu	r3,0(r18)
  80a7f4:	00801404 	movi	r2,80
  80a7f8:	282b883a 	mov	r21,r5
  80a7fc:	05800044 	movi	r22,1
  80a800:	18bfe21e 	bne	r3,r2,80a78c <__gethex+0xf0>
  80a804:	90c00043 	ldbu	r3,1(r18)
  80a808:	00800ac4 	movi	r2,43
  80a80c:	91400044 	addi	r5,r18,1
  80a810:	18805126 	beq	r3,r2,80a958 <__gethex+0x2bc>
  80a814:	00800b44 	movi	r2,45
  80a818:	18805326 	beq	r3,r2,80a968 <__gethex+0x2cc>
  80a81c:	002f883a 	mov	r23,zero
  80a820:	1cc5883a 	add	r2,r3,r19
  80a824:	10800003 	ldbu	r2,0(r2)
  80a828:	103fda26 	beq	r2,zero,80a794 <__gethex+0xf8>
  80a82c:	01800644 	movi	r6,25
  80a830:	30bfd816 	blt	r6,r2,80a794 <__gethex+0xf8>
  80a834:	28c00043 	ldbu	r3,1(r5)
  80a838:	113ffc04 	addi	r4,r2,-16
  80a83c:	008020b4 	movhi	r2,130
  80a840:	10a15904 	addi	r2,r2,-31388
  80a844:	1887883a 	add	r3,r3,r2
  80a848:	18800003 	ldbu	r2,0(r3)
  80a84c:	2c400044 	addi	r17,r5,1
  80a850:	10001126 	beq	r2,zero,80a898 <__gethex+0x1fc>
  80a854:	1021883a 	mov	r16,r2
  80a858:	30800f16 	blt	r6,r2,80a898 <__gethex+0x1fc>
  80a85c:	3029883a 	mov	r20,r6
  80a860:	00000106 	br	80a868 <__gethex+0x1cc>
  80a864:	a0800c16 	blt	r20,r2,80a898 <__gethex+0x1fc>
  80a868:	8c400044 	addi	r17,r17,1
  80a86c:	01400284 	movi	r5,10
  80a870:	d9c00415 	stw	r7,16(sp)
  80a874:	0802a640 	call	802a64 <__mulsi3>
  80a878:	88c00003 	ldbu	r3,0(r17)
  80a87c:	1405883a 	add	r2,r2,r16
  80a880:	113ffc04 	addi	r4,r2,-16
  80a884:	1cc7883a 	add	r3,r3,r19
  80a888:	18800003 	ldbu	r2,0(r3)
  80a88c:	d9c00417 	ldw	r7,16(sp)
  80a890:	1021883a 	mov	r16,r2
  80a894:	103ff31e 	bne	r2,zero,80a864 <__gethex+0x1c8>
  80a898:	b805003a 	cmpeq	r2,r23,zero
  80a89c:	1000011e 	bne	r2,zero,80a8a4 <__gethex+0x208>
  80a8a0:	0109c83a 	sub	r4,zero,r4
  80a8a4:	d8800017 	ldw	r2,0(sp)
  80a8a8:	1105883a 	add	r2,r2,r4
  80a8ac:	d8800015 	stw	r2,0(sp)
  80a8b0:	003fb906 	br	80a798 <__gethex+0xfc>
  80a8b4:	04800184 	movi	r18,6
  80a8b8:	003fbc06 	br	80a7ac <__gethex+0x110>
  80a8bc:	080a5840 	call	80a584 <__hexdig_init>
  80a8c0:	e1800017 	ldw	r6,0(fp)
  80a8c4:	00800c04 	movi	r2,48
  80a8c8:	31000083 	ldbu	r4,2(r6)
  80a8cc:	30c00084 	addi	r3,r6,2
  80a8d0:	20bf8a26 	beq	r4,r2,80a6fc <__gethex+0x60>
  80a8d4:	180b883a 	mov	r5,r3
  80a8d8:	000f883a 	mov	r7,zero
  80a8dc:	003f8f06 	br	80a71c <__gethex+0x80>
  80a8e0:	303fa11e 	bne	r6,zero,80a768 <__gethex+0xcc>
  80a8e4:	29400044 	addi	r5,r5,1
  80a8e8:	28800003 	ldbu	r2,0(r5)
  80a8ec:	14c5883a 	add	r2,r2,r19
  80a8f0:	10c00003 	ldbu	r3,0(r2)
  80a8f4:	1800b526 	beq	r3,zero,80abcc <__gethex+0x530>
  80a8f8:	2809883a 	mov	r4,r5
  80a8fc:	21000044 	addi	r4,r4,1
  80a900:	20800003 	ldbu	r2,0(r4)
  80a904:	14c5883a 	add	r2,r2,r19
  80a908:	10c00003 	ldbu	r3,0(r2)
  80a90c:	183ffb1e 	bne	r3,zero,80a8fc <__gethex+0x260>
  80a910:	2145c83a 	sub	r2,r4,r5
  80a914:	1085883a 	add	r2,r2,r2
  80a918:	1085883a 	add	r2,r2,r2
  80a91c:	0085c83a 	sub	r2,zero,r2
  80a920:	200b883a 	mov	r5,r4
  80a924:	d8800015 	stw	r2,0(sp)
  80a928:	003f9406 	br	80a77c <__gethex+0xe0>
  80a92c:	29000043 	ldbu	r4,1(r5)
  80a930:	008020b4 	movhi	r2,130
  80a934:	10a15904 	addi	r2,r2,-31388
  80a938:	2c800044 	addi	r18,r5,1
  80a93c:	2085883a 	add	r2,r4,r2
  80a940:	10c00003 	ldbu	r3,0(r2)
  80a944:	18000d1e 	bne	r3,zero,80a97c <__gethex+0x2e0>
  80a948:	282b883a 	mov	r21,r5
  80a94c:	05800044 	movi	r22,1
  80a950:	d8000015 	stw	zero,0(sp)
  80a954:	003f8a06 	br	80a780 <__gethex+0xe4>
  80a958:	002f883a 	mov	r23,zero
  80a95c:	29400044 	addi	r5,r5,1
  80a960:	28c00003 	ldbu	r3,0(r5)
  80a964:	003fae06 	br	80a820 <__gethex+0x184>
  80a968:	05c00044 	movi	r23,1
  80a96c:	003ffb06 	br	80a95c <__gethex+0x2c0>
  80a970:	2825883a 	mov	r18,r5
  80a974:	d8000015 	stw	zero,0(sp)
  80a978:	003f8106 	br	80a780 <__gethex+0xe4>
  80a97c:	00800c04 	movi	r2,48
  80a980:	20800e1e 	bne	r4,r2,80a9bc <__gethex+0x320>
  80a984:	2007883a 	mov	r3,r4
  80a988:	900b883a 	mov	r5,r18
  80a98c:	29400044 	addi	r5,r5,1
  80a990:	29000003 	ldbu	r4,0(r5)
  80a994:	20803fcc 	andi	r2,r4,255
  80a998:	10fffc26 	beq	r2,r3,80a98c <__gethex+0x2f0>
  80a99c:	14c5883a 	add	r2,r2,r19
  80a9a0:	10c00003 	ldbu	r3,0(r2)
  80a9a4:	1800071e 	bne	r3,zero,80a9c4 <__gethex+0x328>
  80a9a8:	01c00044 	movi	r7,1
  80a9ac:	900d883a 	mov	r6,r18
  80a9b0:	282b883a 	mov	r21,r5
  80a9b4:	382d883a 	mov	r22,r7
  80a9b8:	003f5f06 	br	80a738 <__gethex+0x9c>
  80a9bc:	91000003 	ldbu	r4,0(r18)
  80a9c0:	900b883a 	mov	r5,r18
  80a9c4:	900d883a 	mov	r6,r18
  80a9c8:	282b883a 	mov	r21,r5
  80a9cc:	01c00044 	movi	r7,1
  80a9d0:	002d883a 	mov	r22,zero
  80a9d4:	003f5806 	br	80a738 <__gethex+0x9c>
  80a9d8:	9545c83a 	sub	r2,r18,r21
  80a9dc:	10bfffc4 	addi	r2,r2,-1
  80a9e0:	00c001c4 	movi	r3,7
  80a9e4:	1880770e 	bge	r3,r2,80abc4 <__gethex+0x528>
  80a9e8:	000b883a 	mov	r5,zero
  80a9ec:	1005d07a 	srai	r2,r2,1
  80a9f0:	29400044 	addi	r5,r5,1
  80a9f4:	18bffd16 	blt	r3,r2,80a9ec <__gethex+0x350>
  80a9f8:	d9000117 	ldw	r4,4(sp)
  80a9fc:	080babc0 	call	80babc <_Balloc>
  80aa00:	1029883a 	mov	r20,r2
  80aa04:	15800504 	addi	r22,r2,20
  80aa08:	ac80562e 	bgeu	r21,r18,80ab64 <__gethex+0x4c8>
  80aa0c:	900b883a 	mov	r5,r18
  80aa10:	b011883a 	mov	r8,r22
  80aa14:	000f883a 	mov	r7,zero
  80aa18:	0009883a 	mov	r4,zero
  80aa1c:	02400b84 	movi	r9,46
  80aa20:	02800804 	movi	r10,32
  80aa24:	297fffc4 	addi	r5,r5,-1
  80aa28:	28c00003 	ldbu	r3,0(r5)
  80aa2c:	1a400826 	beq	r3,r9,80aa50 <__gethex+0x3b4>
  80aa30:	380d883a 	mov	r6,r7
  80aa34:	3a802a26 	beq	r7,r10,80aae0 <__gethex+0x444>
  80aa38:	39c00104 	addi	r7,r7,4
  80aa3c:	1cc7883a 	add	r3,r3,r19
  80aa40:	18800003 	ldbu	r2,0(r3)
  80aa44:	108003cc 	andi	r2,r2,15
  80aa48:	1184983a 	sll	r2,r2,r6
  80aa4c:	2088b03a 	or	r4,r4,r2
  80aa50:	a97ff436 	bltu	r21,r5,80aa24 <__gethex+0x388>
  80aa54:	40800104 	addi	r2,r8,4
  80aa58:	1585c83a 	sub	r2,r2,r22
  80aa5c:	1021d0ba 	srai	r16,r2,2
  80aa60:	41000015 	stw	r4,0(r8)
  80aa64:	a4000415 	stw	r16,16(r20)
  80aa68:	080b5640 	call	80b564 <__hi0bits>
  80aa6c:	d9000217 	ldw	r4,8(sp)
  80aa70:	8006917a 	slli	r3,r16,5
  80aa74:	24c00017 	ldw	r19,0(r4)
  80aa78:	1885c83a 	sub	r2,r3,r2
  80aa7c:	98801f16 	blt	r19,r2,80aafc <__gethex+0x460>
  80aa80:	14c00c16 	blt	r2,r19,80aab4 <__gethex+0x418>
  80aa84:	002b883a 	mov	r21,zero
  80aa88:	d9000217 	ldw	r4,8(sp)
  80aa8c:	d8c00017 	ldw	r3,0(sp)
  80aa90:	20800217 	ldw	r2,8(r4)
  80aa94:	10c0360e 	bge	r2,r3,80ab70 <__gethex+0x4d4>
  80aa98:	d9000117 	ldw	r4,4(sp)
  80aa9c:	a00b883a 	mov	r5,r20
  80aaa0:	048028c4 	movi	r18,163
  80aaa4:	080b53c0 	call	80b53c <_Bfree>
  80aaa8:	d9000f17 	ldw	r4,60(sp)
  80aaac:	20000015 	stw	zero,0(r4)
  80aab0:	003f3e06 	br	80a7ac <__gethex+0x110>
  80aab4:	d9000117 	ldw	r4,4(sp)
  80aab8:	98a1c83a 	sub	r16,r19,r2
  80aabc:	a00b883a 	mov	r5,r20
  80aac0:	800d883a 	mov	r6,r16
  80aac4:	080be800 	call	80be80 <__lshift>
  80aac8:	d8c00017 	ldw	r3,0(sp)
  80aacc:	1029883a 	mov	r20,r2
  80aad0:	15800504 	addi	r22,r2,20
  80aad4:	1c07c83a 	sub	r3,r3,r16
  80aad8:	d8c00015 	stw	r3,0(sp)
  80aadc:	003fe906 	br	80aa84 <__gethex+0x3e8>
  80aae0:	41000015 	stw	r4,0(r8)
  80aae4:	28c00003 	ldbu	r3,0(r5)
  80aae8:	01c00104 	movi	r7,4
  80aaec:	000d883a 	mov	r6,zero
  80aaf0:	41d1883a 	add	r8,r8,r7
  80aaf4:	0009883a 	mov	r4,zero
  80aaf8:	003fd006 	br	80aa3c <__gethex+0x3a0>
  80aafc:	14e1c83a 	sub	r16,r2,r19
  80ab00:	a009883a 	mov	r4,r20
  80ab04:	800b883a 	mov	r5,r16
  80ab08:	080ba340 	call	80ba34 <__any_on>
  80ab0c:	1000081e 	bne	r2,zero,80ab30 <__gethex+0x494>
  80ab10:	002b883a 	mov	r21,zero
  80ab14:	a009883a 	mov	r4,r20
  80ab18:	800b883a 	mov	r5,r16
  80ab1c:	080a5ec0 	call	80a5ec <rshift>
  80ab20:	d8800017 	ldw	r2,0(sp)
  80ab24:	1405883a 	add	r2,r2,r16
  80ab28:	d8800015 	stw	r2,0(sp)
  80ab2c:	003fd606 	br	80aa88 <__gethex+0x3ec>
  80ab30:	817fffc4 	addi	r5,r16,-1
  80ab34:	2805d17a 	srai	r2,r5,5
  80ab38:	290007cc 	andi	r4,r5,31
  80ab3c:	01800044 	movi	r6,1
  80ab40:	1085883a 	add	r2,r2,r2
  80ab44:	1085883a 	add	r2,r2,r2
  80ab48:	1585883a 	add	r2,r2,r22
  80ab4c:	3108983a 	sll	r4,r6,r4
  80ab50:	10c00017 	ldw	r3,0(r2)
  80ab54:	20c8703a 	and	r4,r4,r3
  80ab58:	20001e1e 	bne	r4,zero,80abd4 <__gethex+0x538>
  80ab5c:	302b883a 	mov	r21,r6
  80ab60:	003fec06 	br	80ab14 <__gethex+0x478>
  80ab64:	b011883a 	mov	r8,r22
  80ab68:	0009883a 	mov	r4,zero
  80ab6c:	003fb906 	br	80aa54 <__gethex+0x3b8>
  80ab70:	d8800217 	ldw	r2,8(sp)
  80ab74:	d8c00017 	ldw	r3,0(sp)
  80ab78:	11000117 	ldw	r4,4(r2)
  80ab7c:	19001c16 	blt	r3,r4,80abf0 <__gethex+0x554>
  80ab80:	04800044 	movi	r18,1
  80ab84:	a8000926 	beq	r21,zero,80abac <__gethex+0x510>
  80ab88:	d8c00217 	ldw	r3,8(sp)
  80ab8c:	00800084 	movi	r2,2
  80ab90:	19000317 	ldw	r4,12(r3)
  80ab94:	20809826 	beq	r4,r2,80adf8 <__gethex+0x75c>
  80ab98:	008000c4 	movi	r2,3
  80ab9c:	20805b26 	beq	r4,r2,80ad0c <__gethex+0x670>
  80aba0:	00800044 	movi	r2,1
  80aba4:	20804326 	beq	r4,r2,80acb4 <__gethex+0x618>
  80aba8:	94800414 	ori	r18,r18,16
  80abac:	d9000f17 	ldw	r4,60(sp)
  80abb0:	d8800017 	ldw	r2,0(sp)
  80abb4:	d8c00317 	ldw	r3,12(sp)
  80abb8:	25000015 	stw	r20,0(r4)
  80abbc:	18800015 	stw	r2,0(r3)
  80abc0:	003efa06 	br	80a7ac <__gethex+0x110>
  80abc4:	000b883a 	mov	r5,zero
  80abc8:	003f8b06 	br	80a9f8 <__gethex+0x35c>
  80abcc:	d8000015 	stw	zero,0(sp)
  80abd0:	003eea06 	br	80a77c <__gethex+0xe0>
  80abd4:	3140180e 	bge	r6,r5,80ac38 <__gethex+0x59c>
  80abd8:	a009883a 	mov	r4,r20
  80abdc:	817fff84 	addi	r5,r16,-2
  80abe0:	080ba340 	call	80ba34 <__any_on>
  80abe4:	10001426 	beq	r2,zero,80ac38 <__gethex+0x59c>
  80abe8:	054000c4 	movi	r21,3
  80abec:	003fc906 	br	80ab14 <__gethex+0x478>
  80abf0:	d8800017 	ldw	r2,0(sp)
  80abf4:	20a3c83a 	sub	r17,r4,r2
  80abf8:	8cc01116 	blt	r17,r19,80ac40 <__gethex+0x5a4>
  80abfc:	d8800217 	ldw	r2,8(sp)
  80ac00:	10c00317 	ldw	r3,12(r2)
  80ac04:	00800084 	movi	r2,2
  80ac08:	18809426 	beq	r3,r2,80ae5c <__gethex+0x7c0>
  80ac0c:	008000c4 	movi	r2,3
  80ac10:	18808f26 	beq	r3,r2,80ae50 <__gethex+0x7b4>
  80ac14:	00800044 	movi	r2,1
  80ac18:	18807c26 	beq	r3,r2,80ae0c <__gethex+0x770>
  80ac1c:	d9000117 	ldw	r4,4(sp)
  80ac20:	a00b883a 	mov	r5,r20
  80ac24:	04801404 	movi	r18,80
  80ac28:	080b53c0 	call	80b53c <_Bfree>
  80ac2c:	d9000f17 	ldw	r4,60(sp)
  80ac30:	20000015 	stw	zero,0(r4)
  80ac34:	003edd06 	br	80a7ac <__gethex+0x110>
  80ac38:	05400084 	movi	r21,2
  80ac3c:	003fb506 	br	80ab14 <__gethex+0x478>
  80ac40:	8c3fffc4 	addi	r16,r17,-1
  80ac44:	a8001526 	beq	r21,zero,80ac9c <__gethex+0x600>
  80ac48:	05400044 	movi	r21,1
  80ac4c:	8005d17a 	srai	r2,r16,5
  80ac50:	814007cc 	andi	r5,r16,31
  80ac54:	00c00044 	movi	r3,1
  80ac58:	1085883a 	add	r2,r2,r2
  80ac5c:	1085883a 	add	r2,r2,r2
  80ac60:	1585883a 	add	r2,r2,r22
  80ac64:	1946983a 	sll	r3,r3,r5
  80ac68:	11000017 	ldw	r4,0(r2)
  80ac6c:	1906703a 	and	r3,r3,r4
  80ac70:	18000126 	beq	r3,zero,80ac78 <__gethex+0x5dc>
  80ac74:	ad400094 	ori	r21,r21,2
  80ac78:	880b883a 	mov	r5,r17
  80ac7c:	a009883a 	mov	r4,r20
  80ac80:	080a5ec0 	call	80a5ec <rshift>
  80ac84:	d8800217 	ldw	r2,8(sp)
  80ac88:	9c67c83a 	sub	r19,r19,r17
  80ac8c:	04800084 	movi	r18,2
  80ac90:	10800117 	ldw	r2,4(r2)
  80ac94:	d8800015 	stw	r2,0(sp)
  80ac98:	003fba06 	br	80ab84 <__gethex+0x4e8>
  80ac9c:	043feb0e 	bge	zero,r16,80ac4c <__gethex+0x5b0>
  80aca0:	a009883a 	mov	r4,r20
  80aca4:	800b883a 	mov	r5,r16
  80aca8:	080ba340 	call	80ba34 <__any_on>
  80acac:	102b883a 	mov	r21,r2
  80acb0:	003fe606 	br	80ac4c <__gethex+0x5b0>
  80acb4:	a880008c 	andi	r2,r21,2
  80acb8:	103fbb26 	beq	r2,zero,80aba8 <__gethex+0x50c>
  80acbc:	b0800017 	ldw	r2,0(r22)
  80acc0:	a884b03a 	or	r2,r21,r2
  80acc4:	1104703a 	and	r2,r2,r4
  80acc8:	103fb726 	beq	r2,zero,80aba8 <__gethex+0x50c>
  80accc:	a4000417 	ldw	r16,16(r20)
  80acd0:	b007883a 	mov	r3,r22
  80acd4:	017fffc4 	movi	r5,-1
  80acd8:	8405883a 	add	r2,r16,r16
  80acdc:	10ab883a 	add	r21,r2,r2
  80ace0:	802f883a 	mov	r23,r16
  80ace4:	b549883a 	add	r4,r22,r21
  80ace8:	00000306 	br	80acf8 <__gethex+0x65c>
  80acec:	18000015 	stw	zero,0(r3)
  80acf0:	18c00104 	addi	r3,r3,4
  80acf4:	1900082e 	bgeu	r3,r4,80ad18 <__gethex+0x67c>
  80acf8:	18800017 	ldw	r2,0(r3)
  80acfc:	117ffb26 	beq	r2,r5,80acec <__gethex+0x650>
  80ad00:	10800044 	addi	r2,r2,1
  80ad04:	18800015 	stw	r2,0(r3)
  80ad08:	00001e06 	br	80ad84 <__gethex+0x6e8>
  80ad0c:	d8801017 	ldw	r2,64(sp)
  80ad10:	103fa526 	beq	r2,zero,80aba8 <__gethex+0x50c>
  80ad14:	003fed06 	br	80accc <__gethex+0x630>
  80ad18:	a0800217 	ldw	r2,8(r20)
  80ad1c:	80801216 	blt	r16,r2,80ad68 <__gethex+0x6cc>
  80ad20:	a1400117 	ldw	r5,4(r20)
  80ad24:	d9000117 	ldw	r4,4(sp)
  80ad28:	29400044 	addi	r5,r5,1
  80ad2c:	080babc0 	call	80babc <_Balloc>
  80ad30:	a1800417 	ldw	r6,16(r20)
  80ad34:	a1400304 	addi	r5,r20,12
  80ad38:	11000304 	addi	r4,r2,12
  80ad3c:	318d883a 	add	r6,r6,r6
  80ad40:	318d883a 	add	r6,r6,r6
  80ad44:	31800204 	addi	r6,r6,8
  80ad48:	1023883a 	mov	r17,r2
  80ad4c:	080b3bc0 	call	80b3bc <memcpy>
  80ad50:	d9000117 	ldw	r4,4(sp)
  80ad54:	a00b883a 	mov	r5,r20
  80ad58:	8d800504 	addi	r22,r17,20
  80ad5c:	080b53c0 	call	80b53c <_Bfree>
  80ad60:	8c000417 	ldw	r16,16(r17)
  80ad64:	8829883a 	mov	r20,r17
  80ad68:	8405883a 	add	r2,r16,r16
  80ad6c:	1085883a 	add	r2,r2,r2
  80ad70:	1505883a 	add	r2,r2,r20
  80ad74:	84000044 	addi	r16,r16,1
  80ad78:	00c00044 	movi	r3,1
  80ad7c:	10c00515 	stw	r3,20(r2)
  80ad80:	a4000415 	stw	r16,16(r20)
  80ad84:	00800084 	movi	r2,2
  80ad88:	90801526 	beq	r18,r2,80ade0 <__gethex+0x744>
  80ad8c:	bc000a16 	blt	r23,r16,80adb8 <__gethex+0x71c>
  80ad90:	9c0007cc 	andi	r16,r19,31
  80ad94:	8000021e 	bne	r16,zero,80ada0 <__gethex+0x704>
  80ad98:	94800814 	ori	r18,r18,32
  80ad9c:	003f8306 	br	80abac <__gethex+0x510>
  80ada0:	b545883a 	add	r2,r22,r21
  80ada4:	113fff17 	ldw	r4,-4(r2)
  80ada8:	080b5640 	call	80b564 <__hi0bits>
  80adac:	00c00804 	movi	r3,32
  80adb0:	1c07c83a 	sub	r3,r3,r16
  80adb4:	10fff80e 	bge	r2,r3,80ad98 <__gethex+0x6fc>
  80adb8:	a009883a 	mov	r4,r20
  80adbc:	01400044 	movi	r5,1
  80adc0:	080a5ec0 	call	80a5ec <rshift>
  80adc4:	d9000217 	ldw	r4,8(sp)
  80adc8:	d8c00017 	ldw	r3,0(sp)
  80adcc:	20800217 	ldw	r2,8(r4)
  80add0:	18c00044 	addi	r3,r3,1
  80add4:	d8c00015 	stw	r3,0(sp)
  80add8:	10ff2f16 	blt	r2,r3,80aa98 <__gethex+0x3fc>
  80addc:	003fee06 	br	80ad98 <__gethex+0x6fc>
  80ade0:	d8c00217 	ldw	r3,8(sp)
  80ade4:	18800017 	ldw	r2,0(r3)
  80ade8:	10bfffc4 	addi	r2,r2,-1
  80adec:	98801e26 	beq	r19,r2,80ae68 <__gethex+0x7cc>
  80adf0:	04800884 	movi	r18,34
  80adf4:	003f6d06 	br	80abac <__gethex+0x510>
  80adf8:	d9001017 	ldw	r4,64(sp)
  80adfc:	00800044 	movi	r2,1
  80ae00:	1105c83a 	sub	r2,r2,r4
  80ae04:	103f6826 	beq	r2,zero,80aba8 <__gethex+0x50c>
  80ae08:	003fb006 	br	80accc <__gethex+0x630>
  80ae0c:	9c7f831e 	bne	r19,r17,80ac1c <__gethex+0x580>
  80ae10:	1cc0060e 	bge	r3,r19,80ae2c <__gethex+0x790>
  80ae14:	98cbc83a 	sub	r5,r19,r3
  80ae18:	a009883a 	mov	r4,r20
  80ae1c:	080ba340 	call	80ba34 <__any_on>
  80ae20:	103f7e26 	beq	r2,zero,80ac1c <__gethex+0x580>
  80ae24:	d8c00217 	ldw	r3,8(sp)
  80ae28:	19000117 	ldw	r4,4(r3)
  80ae2c:	d8800317 	ldw	r2,12(sp)
  80ae30:	d8c00f17 	ldw	r3,60(sp)
  80ae34:	04000044 	movi	r16,1
  80ae38:	11000015 	stw	r4,0(r2)
  80ae3c:	04801884 	movi	r18,98
  80ae40:	b4000015 	stw	r16,0(r22)
  80ae44:	1d000015 	stw	r20,0(r3)
  80ae48:	a4000415 	stw	r16,16(r20)
  80ae4c:	003e5706 	br	80a7ac <__gethex+0x110>
  80ae50:	d8801017 	ldw	r2,64(sp)
  80ae54:	103f7126 	beq	r2,zero,80ac1c <__gethex+0x580>
  80ae58:	003ff406 	br	80ae2c <__gethex+0x790>
  80ae5c:	d8c01017 	ldw	r3,64(sp)
  80ae60:	183ff226 	beq	r3,zero,80ae2c <__gethex+0x790>
  80ae64:	003f6d06 	br	80ac1c <__gethex+0x580>
  80ae68:	9805d17a 	srai	r2,r19,5
  80ae6c:	994007cc 	andi	r5,r19,31
  80ae70:	00c00044 	movi	r3,1
  80ae74:	1085883a 	add	r2,r2,r2
  80ae78:	1085883a 	add	r2,r2,r2
  80ae7c:	1585883a 	add	r2,r2,r22
  80ae80:	1946983a 	sll	r3,r3,r5
  80ae84:	11000017 	ldw	r4,0(r2)
  80ae88:	1906703a 	and	r3,r3,r4
  80ae8c:	183fd826 	beq	r3,zero,80adf0 <__gethex+0x754>
  80ae90:	04800844 	movi	r18,33
  80ae94:	003f4506 	br	80abac <__gethex+0x510>

0080ae98 <L_shift>:
  80ae98:	00800204 	movi	r2,8
  80ae9c:	1185c83a 	sub	r2,r2,r6
  80aea0:	1085883a 	add	r2,r2,r2
  80aea4:	21c00017 	ldw	r7,0(r4)
  80aea8:	1093883a 	add	r9,r2,r2
  80aeac:	00800804 	movi	r2,32
  80aeb0:	200d883a 	mov	r6,r4
  80aeb4:	1251c83a 	sub	r8,r2,r9
  80aeb8:	31800104 	addi	r6,r6,4
  80aebc:	3805883a 	mov	r2,r7
  80aec0:	31c00017 	ldw	r7,0(r6)
  80aec4:	3a08983a 	sll	r4,r7,r8
  80aec8:	3a46d83a 	srl	r3,r7,r9
  80aecc:	1104b03a 	or	r2,r2,r4
  80aed0:	180f883a 	mov	r7,r3
  80aed4:	30bfff15 	stw	r2,-4(r6)
  80aed8:	30c00015 	stw	r3,0(r6)
  80aedc:	317ff636 	bltu	r6,r5,80aeb8 <L_shift+0x20>
  80aee0:	f800283a 	ret

0080aee4 <__hexnan>:
  80aee4:	defff404 	addi	sp,sp,-48
  80aee8:	dd800815 	stw	r22,32(sp)
  80aeec:	058020b4 	movhi	r22,130
  80aef0:	b5a15904 	addi	r22,r22,-31388
  80aef4:	b0800c03 	ldbu	r2,48(r22)
  80aef8:	dcc00515 	stw	r19,20(sp)
  80aefc:	dc000215 	stw	r16,8(sp)
  80af00:	dfc00b15 	stw	ra,44(sp)
  80af04:	df000a15 	stw	fp,40(sp)
  80af08:	ddc00915 	stw	r23,36(sp)
  80af0c:	dd400715 	stw	r21,28(sp)
  80af10:	dd000615 	stw	r20,24(sp)
  80af14:	dc800415 	stw	r18,16(sp)
  80af18:	dc400315 	stw	r17,12(sp)
  80af1c:	d9000115 	stw	r4,4(sp)
  80af20:	2821883a 	mov	r16,r5
  80af24:	3027883a 	mov	r19,r6
  80af28:	10007426 	beq	r2,zero,80b0fc <__hexnan+0x218>
  80af2c:	80c00017 	ldw	r3,0(r16)
  80af30:	1805d17a 	srai	r2,r3,5
  80af34:	18c007cc 	andi	r3,r3,31
  80af38:	1839003a 	cmpeq	fp,r3,zero
  80af3c:	1085883a 	add	r2,r2,r2
  80af40:	1085883a 	add	r2,r2,r2
  80af44:	d8c00015 	stw	r3,0(sp)
  80af48:	14c5883a 	add	r2,r2,r19
  80af4c:	e000011e 	bne	fp,zero,80af54 <__hexnan+0x70>
  80af50:	10800104 	addi	r2,r2,4
  80af54:	d8c00117 	ldw	r3,4(sp)
  80af58:	153fff04 	addi	r20,r2,-4
  80af5c:	a021883a 	mov	r16,r20
  80af60:	1c400017 	ldw	r17,0(r3)
  80af64:	a02b883a 	mov	r21,r20
  80af68:	0025883a 	mov	r18,zero
  80af6c:	002f883a 	mov	r23,zero
  80af70:	000d883a 	mov	r6,zero
  80af74:	103fff15 	stw	zero,-4(r2)
  80af78:	8c400044 	addi	r17,r17,1
  80af7c:	89000003 	ldbu	r4,0(r17)
  80af80:	20000e26 	beq	r4,zero,80afbc <__hexnan+0xd8>
  80af84:	2585883a 	add	r2,r4,r22
  80af88:	10c00003 	ldbu	r3,0(r2)
  80af8c:	18002e1e 	bne	r3,zero,80b048 <__hexnan+0x164>
  80af90:	00800804 	movi	r2,32
  80af94:	11005536 	bltu	r2,r4,80b0ec <__hexnan+0x208>
  80af98:	bcbff70e 	bge	r23,r18,80af78 <__hexnan+0x94>
  80af9c:	8540022e 	bgeu	r16,r21,80afa8 <__hexnan+0xc4>
  80afa0:	008001c4 	movi	r2,7
  80afa4:	11803c0e 	bge	r2,r6,80b098 <__hexnan+0x1b4>
  80afa8:	9c003536 	bltu	r19,r16,80b080 <__hexnan+0x19c>
  80afac:	8c400044 	addi	r17,r17,1
  80afb0:	89000003 	ldbu	r4,0(r17)
  80afb4:	01800204 	movi	r6,8
  80afb8:	203ff21e 	bne	r4,zero,80af84 <__hexnan+0xa0>
  80afbc:	90004d26 	beq	r18,zero,80b0f4 <__hexnan+0x210>
  80afc0:	85404336 	bltu	r16,r21,80b0d0 <__hexnan+0x1ec>
  80afc4:	9c00382e 	bgeu	r19,r16,80b0a8 <__hexnan+0x1c4>
  80afc8:	9807883a 	mov	r3,r19
  80afcc:	80800017 	ldw	r2,0(r16)
  80afd0:	84000104 	addi	r16,r16,4
  80afd4:	18800015 	stw	r2,0(r3)
  80afd8:	18c00104 	addi	r3,r3,4
  80afdc:	a43ffb2e 	bgeu	r20,r16,80afcc <__hexnan+0xe8>
  80afe0:	18000015 	stw	zero,0(r3)
  80afe4:	18c00104 	addi	r3,r3,4
  80afe8:	a0fffd2e 	bgeu	r20,r3,80afe0 <__hexnan+0xfc>
  80afec:	a0800017 	ldw	r2,0(r20)
  80aff0:	1000071e 	bne	r2,zero,80b010 <__hexnan+0x12c>
  80aff4:	9d004326 	beq	r19,r20,80b104 <__hexnan+0x220>
  80aff8:	a007883a 	mov	r3,r20
  80affc:	00000106 	br	80b004 <__hexnan+0x120>
  80b000:	98c04026 	beq	r19,r3,80b104 <__hexnan+0x220>
  80b004:	18ffff04 	addi	r3,r3,-4
  80b008:	18800017 	ldw	r2,0(r3)
  80b00c:	103ffc26 	beq	r2,zero,80b000 <__hexnan+0x11c>
  80b010:	00c00144 	movi	r3,5
  80b014:	1805883a 	mov	r2,r3
  80b018:	dfc00b17 	ldw	ra,44(sp)
  80b01c:	df000a17 	ldw	fp,40(sp)
  80b020:	ddc00917 	ldw	r23,36(sp)
  80b024:	dd800817 	ldw	r22,32(sp)
  80b028:	dd400717 	ldw	r21,28(sp)
  80b02c:	dd000617 	ldw	r20,24(sp)
  80b030:	dcc00517 	ldw	r19,20(sp)
  80b034:	dc800417 	ldw	r18,16(sp)
  80b038:	dc400317 	ldw	r17,12(sp)
  80b03c:	dc000217 	ldw	r16,8(sp)
  80b040:	dec00c04 	addi	sp,sp,48
  80b044:	f800283a 	ret
  80b048:	31800044 	addi	r6,r6,1
  80b04c:	00800204 	movi	r2,8
  80b050:	94800044 	addi	r18,r18,1
  80b054:	1180040e 	bge	r2,r6,80b068 <__hexnan+0x184>
  80b058:	9c3fc72e 	bgeu	r19,r16,80af78 <__hexnan+0x94>
  80b05c:	843fff04 	addi	r16,r16,-4
  80b060:	80000015 	stw	zero,0(r16)
  80b064:	01800044 	movi	r6,1
  80b068:	80800017 	ldw	r2,0(r16)
  80b06c:	18c003cc 	andi	r3,r3,15
  80b070:	1004913a 	slli	r2,r2,4
  80b074:	10c4b03a 	or	r2,r2,r3
  80b078:	80800015 	stw	r2,0(r16)
  80b07c:	003fbe06 	br	80af78 <__hexnan+0x94>
  80b080:	843fff04 	addi	r16,r16,-4
  80b084:	802b883a 	mov	r21,r16
  80b088:	902f883a 	mov	r23,r18
  80b08c:	000d883a 	mov	r6,zero
  80b090:	80000015 	stw	zero,0(r16)
  80b094:	003fb806 	br	80af78 <__hexnan+0x94>
  80b098:	8009883a 	mov	r4,r16
  80b09c:	a80b883a 	mov	r5,r21
  80b0a0:	080ae980 	call	80ae98 <L_shift>
  80b0a4:	003fc006 	br	80afa8 <__hexnan+0xc4>
  80b0a8:	e03fd01e 	bne	fp,zero,80afec <__hexnan+0x108>
  80b0ac:	d8c00017 	ldw	r3,0(sp)
  80b0b0:	00800804 	movi	r2,32
  80b0b4:	10c5c83a 	sub	r2,r2,r3
  80b0b8:	00ffffc4 	movi	r3,-1
  80b0bc:	1886d83a 	srl	r3,r3,r2
  80b0c0:	a0800017 	ldw	r2,0(r20)
  80b0c4:	10c4703a 	and	r2,r2,r3
  80b0c8:	a0800015 	stw	r2,0(r20)
  80b0cc:	003fc806 	br	80aff0 <__hexnan+0x10c>
  80b0d0:	008001c4 	movi	r2,7
  80b0d4:	11bfbb16 	blt	r2,r6,80afc4 <__hexnan+0xe0>
  80b0d8:	a80b883a 	mov	r5,r21
  80b0dc:	8009883a 	mov	r4,r16
  80b0e0:	080ae980 	call	80ae98 <L_shift>
  80b0e4:	9c3ff02e 	bgeu	r19,r16,80b0a8 <__hexnan+0x1c4>
  80b0e8:	003fb706 	br	80afc8 <__hexnan+0xe4>
  80b0ec:	00800a44 	movi	r2,41
  80b0f0:	20800826 	beq	r4,r2,80b114 <__hexnan+0x230>
  80b0f4:	00c00104 	movi	r3,4
  80b0f8:	003fc606 	br	80b014 <__hexnan+0x130>
  80b0fc:	080a5840 	call	80a584 <__hexdig_init>
  80b100:	003f8a06 	br	80af2c <__hexnan+0x48>
  80b104:	00800044 	movi	r2,1
  80b108:	00c00144 	movi	r3,5
  80b10c:	98800015 	stw	r2,0(r19)
  80b110:	003fc006 	br	80b014 <__hexnan+0x130>
  80b114:	903ff726 	beq	r18,zero,80b0f4 <__hexnan+0x210>
  80b118:	d8c00117 	ldw	r3,4(sp)
  80b11c:	88800044 	addi	r2,r17,1
  80b120:	18800015 	stw	r2,0(r3)
  80b124:	857fa72e 	bgeu	r16,r21,80afc4 <__hexnan+0xe0>
  80b128:	003fe906 	br	80b0d0 <__hexnan+0x1ec>

0080b12c <_isatty_r>:
  80b12c:	defffd04 	addi	sp,sp,-12
  80b130:	dc000015 	stw	r16,0(sp)
  80b134:	04002074 	movhi	r16,129
  80b138:	841d1404 	addi	r16,r16,29776
  80b13c:	dc400115 	stw	r17,4(sp)
  80b140:	80000015 	stw	zero,0(r16)
  80b144:	2023883a 	mov	r17,r4
  80b148:	2809883a 	mov	r4,r5
  80b14c:	dfc00215 	stw	ra,8(sp)
  80b150:	080f0080 	call	80f008 <isatty>
  80b154:	1007883a 	mov	r3,r2
  80b158:	00bfffc4 	movi	r2,-1
  80b15c:	18800626 	beq	r3,r2,80b178 <_isatty_r+0x4c>
  80b160:	1805883a 	mov	r2,r3
  80b164:	dfc00217 	ldw	ra,8(sp)
  80b168:	dc400117 	ldw	r17,4(sp)
  80b16c:	dc000017 	ldw	r16,0(sp)
  80b170:	dec00304 	addi	sp,sp,12
  80b174:	f800283a 	ret
  80b178:	80800017 	ldw	r2,0(r16)
  80b17c:	103ff826 	beq	r2,zero,80b160 <_isatty_r+0x34>
  80b180:	88800015 	stw	r2,0(r17)
  80b184:	1805883a 	mov	r2,r3
  80b188:	dfc00217 	ldw	ra,8(sp)
  80b18c:	dc400117 	ldw	r17,4(sp)
  80b190:	dc000017 	ldw	r16,0(sp)
  80b194:	dec00304 	addi	sp,sp,12
  80b198:	f800283a 	ret

0080b19c <__locale_charset>:
  80b19c:	d0a00617 	ldw	r2,-32744(gp)
  80b1a0:	f800283a 	ret

0080b1a4 <_localeconv_r>:
  80b1a4:	00802074 	movhi	r2,129
  80b1a8:	108e2404 	addi	r2,r2,14480
  80b1ac:	f800283a 	ret

0080b1b0 <localeconv>:
  80b1b0:	00802074 	movhi	r2,129
  80b1b4:	1095d704 	addi	r2,r2,22364
  80b1b8:	11000017 	ldw	r4,0(r2)
  80b1bc:	080b1a41 	jmpi	80b1a4 <_localeconv_r>

0080b1c0 <_setlocale_r>:
  80b1c0:	defffc04 	addi	sp,sp,-16
  80b1c4:	00c02074 	movhi	r3,129
  80b1c8:	18cd4504 	addi	r3,r3,13588
  80b1cc:	dc800215 	stw	r18,8(sp)
  80b1d0:	dc400115 	stw	r17,4(sp)
  80b1d4:	dc000015 	stw	r16,0(sp)
  80b1d8:	2023883a 	mov	r17,r4
  80b1dc:	2825883a 	mov	r18,r5
  80b1e0:	dfc00315 	stw	ra,12(sp)
  80b1e4:	3021883a 	mov	r16,r6
  80b1e8:	3009883a 	mov	r4,r6
  80b1ec:	180b883a 	mov	r5,r3
  80b1f0:	30000926 	beq	r6,zero,80b218 <_setlocale_r+0x58>
  80b1f4:	080ce900 	call	80ce90 <strcmp>
  80b1f8:	8009883a 	mov	r4,r16
  80b1fc:	01402074 	movhi	r5,129
  80b200:	294d6404 	addi	r5,r5,13712
  80b204:	10000b1e 	bne	r2,zero,80b234 <_setlocale_r+0x74>
  80b208:	8c000d15 	stw	r16,52(r17)
  80b20c:	8c800c15 	stw	r18,48(r17)
  80b210:	00c02074 	movhi	r3,129
  80b214:	18cd4504 	addi	r3,r3,13588
  80b218:	1805883a 	mov	r2,r3
  80b21c:	dfc00317 	ldw	ra,12(sp)
  80b220:	dc800217 	ldw	r18,8(sp)
  80b224:	dc400117 	ldw	r17,4(sp)
  80b228:	dc000017 	ldw	r16,0(sp)
  80b22c:	dec00404 	addi	sp,sp,16
  80b230:	f800283a 	ret
  80b234:	080ce900 	call	80ce90 <strcmp>
  80b238:	0007883a 	mov	r3,zero
  80b23c:	103ff226 	beq	r2,zero,80b208 <_setlocale_r+0x48>
  80b240:	003ff506 	br	80b218 <_setlocale_r+0x58>

0080b244 <setlocale>:
  80b244:	01802074 	movhi	r6,129
  80b248:	3195d704 	addi	r6,r6,22364
  80b24c:	2007883a 	mov	r3,r4
  80b250:	31000017 	ldw	r4,0(r6)
  80b254:	280d883a 	mov	r6,r5
  80b258:	180b883a 	mov	r5,r3
  80b25c:	080b1c01 	jmpi	80b1c0 <_setlocale_r>

0080b260 <_lseek_r>:
  80b260:	defffd04 	addi	sp,sp,-12
  80b264:	dc000015 	stw	r16,0(sp)
  80b268:	04002074 	movhi	r16,129
  80b26c:	841d1404 	addi	r16,r16,29776
  80b270:	dc400115 	stw	r17,4(sp)
  80b274:	80000015 	stw	zero,0(r16)
  80b278:	2023883a 	mov	r17,r4
  80b27c:	2809883a 	mov	r4,r5
  80b280:	300b883a 	mov	r5,r6
  80b284:	380d883a 	mov	r6,r7
  80b288:	dfc00215 	stw	ra,8(sp)
  80b28c:	080f2180 	call	80f218 <lseek>
  80b290:	1007883a 	mov	r3,r2
  80b294:	00bfffc4 	movi	r2,-1
  80b298:	18800626 	beq	r3,r2,80b2b4 <_lseek_r+0x54>
  80b29c:	1805883a 	mov	r2,r3
  80b2a0:	dfc00217 	ldw	ra,8(sp)
  80b2a4:	dc400117 	ldw	r17,4(sp)
  80b2a8:	dc000017 	ldw	r16,0(sp)
  80b2ac:	dec00304 	addi	sp,sp,12
  80b2b0:	f800283a 	ret
  80b2b4:	80800017 	ldw	r2,0(r16)
  80b2b8:	103ff826 	beq	r2,zero,80b29c <_lseek_r+0x3c>
  80b2bc:	88800015 	stw	r2,0(r17)
  80b2c0:	1805883a 	mov	r2,r3
  80b2c4:	dfc00217 	ldw	ra,8(sp)
  80b2c8:	dc400117 	ldw	r17,4(sp)
  80b2cc:	dc000017 	ldw	r16,0(sp)
  80b2d0:	dec00304 	addi	sp,sp,12
  80b2d4:	f800283a 	ret

0080b2d8 <memchr>:
  80b2d8:	008000c4 	movi	r2,3
  80b2dc:	29403fcc 	andi	r5,r5,255
  80b2e0:	2007883a 	mov	r3,r4
  80b2e4:	1180022e 	bgeu	r2,r6,80b2f0 <memchr+0x18>
  80b2e8:	2084703a 	and	r2,r4,r2
  80b2ec:	10000b26 	beq	r2,zero,80b31c <memchr+0x44>
  80b2f0:	313fffc4 	addi	r4,r6,-1
  80b2f4:	3000051e 	bne	r6,zero,80b30c <memchr+0x34>
  80b2f8:	00002c06 	br	80b3ac <memchr+0xd4>
  80b2fc:	213fffc4 	addi	r4,r4,-1
  80b300:	00bfffc4 	movi	r2,-1
  80b304:	18c00044 	addi	r3,r3,1
  80b308:	20802826 	beq	r4,r2,80b3ac <memchr+0xd4>
  80b30c:	18800003 	ldbu	r2,0(r3)
  80b310:	28bffa1e 	bne	r5,r2,80b2fc <memchr+0x24>
  80b314:	1805883a 	mov	r2,r3
  80b318:	f800283a 	ret
  80b31c:	0011883a 	mov	r8,zero
  80b320:	0007883a 	mov	r3,zero
  80b324:	01c00104 	movi	r7,4
  80b328:	4004923a 	slli	r2,r8,8
  80b32c:	18c00044 	addi	r3,r3,1
  80b330:	1151883a 	add	r8,r2,r5
  80b334:	19fffc1e 	bne	r3,r7,80b328 <memchr+0x50>
  80b338:	02bfbff4 	movhi	r10,65279
  80b33c:	52bfbfc4 	addi	r10,r10,-257
  80b340:	02602074 	movhi	r9,32897
  80b344:	4a602004 	addi	r9,r9,-32640
  80b348:	02c000c4 	movi	r11,3
  80b34c:	20800017 	ldw	r2,0(r4)
  80b350:	31bfff04 	addi	r6,r6,-4
  80b354:	200f883a 	mov	r7,r4
  80b358:	1204f03a 	xor	r2,r2,r8
  80b35c:	1287883a 	add	r3,r2,r10
  80b360:	1a46703a 	and	r3,r3,r9
  80b364:	0084303a 	nor	r2,zero,r2
  80b368:	10c4703a 	and	r2,r2,r3
  80b36c:	10000b26 	beq	r2,zero,80b39c <memchr+0xc4>
  80b370:	20800003 	ldbu	r2,0(r4)
  80b374:	28800f26 	beq	r5,r2,80b3b4 <memchr+0xdc>
  80b378:	20800043 	ldbu	r2,1(r4)
  80b37c:	21c00044 	addi	r7,r4,1
  80b380:	28800c26 	beq	r5,r2,80b3b4 <memchr+0xdc>
  80b384:	20800083 	ldbu	r2,2(r4)
  80b388:	21c00084 	addi	r7,r4,2
  80b38c:	28800926 	beq	r5,r2,80b3b4 <memchr+0xdc>
  80b390:	208000c3 	ldbu	r2,3(r4)
  80b394:	21c000c4 	addi	r7,r4,3
  80b398:	28800626 	beq	r5,r2,80b3b4 <memchr+0xdc>
  80b39c:	21000104 	addi	r4,r4,4
  80b3a0:	59bfea36 	bltu	r11,r6,80b34c <memchr+0x74>
  80b3a4:	2007883a 	mov	r3,r4
  80b3a8:	003fd106 	br	80b2f0 <memchr+0x18>
  80b3ac:	0005883a 	mov	r2,zero
  80b3b0:	f800283a 	ret
  80b3b4:	3805883a 	mov	r2,r7
  80b3b8:	f800283a 	ret

0080b3bc <memcpy>:
  80b3bc:	01c003c4 	movi	r7,15
  80b3c0:	2007883a 	mov	r3,r4
  80b3c4:	3980032e 	bgeu	r7,r6,80b3d4 <memcpy+0x18>
  80b3c8:	2904b03a 	or	r2,r5,r4
  80b3cc:	108000cc 	andi	r2,r2,3
  80b3d0:	10000926 	beq	r2,zero,80b3f8 <memcpy+0x3c>
  80b3d4:	30000626 	beq	r6,zero,80b3f0 <memcpy+0x34>
  80b3d8:	30cd883a 	add	r6,r6,r3
  80b3dc:	28800003 	ldbu	r2,0(r5)
  80b3e0:	29400044 	addi	r5,r5,1
  80b3e4:	18800005 	stb	r2,0(r3)
  80b3e8:	18c00044 	addi	r3,r3,1
  80b3ec:	30fffb1e 	bne	r6,r3,80b3dc <memcpy+0x20>
  80b3f0:	2005883a 	mov	r2,r4
  80b3f4:	f800283a 	ret
  80b3f8:	3811883a 	mov	r8,r7
  80b3fc:	200f883a 	mov	r7,r4
  80b400:	28c00017 	ldw	r3,0(r5)
  80b404:	31bffc04 	addi	r6,r6,-16
  80b408:	38c00015 	stw	r3,0(r7)
  80b40c:	28800117 	ldw	r2,4(r5)
  80b410:	38800115 	stw	r2,4(r7)
  80b414:	28c00217 	ldw	r3,8(r5)
  80b418:	38c00215 	stw	r3,8(r7)
  80b41c:	28800317 	ldw	r2,12(r5)
  80b420:	29400404 	addi	r5,r5,16
  80b424:	38800315 	stw	r2,12(r7)
  80b428:	39c00404 	addi	r7,r7,16
  80b42c:	41bff436 	bltu	r8,r6,80b400 <memcpy+0x44>
  80b430:	008000c4 	movi	r2,3
  80b434:	1180072e 	bgeu	r2,r6,80b454 <memcpy+0x98>
  80b438:	1007883a 	mov	r3,r2
  80b43c:	28800017 	ldw	r2,0(r5)
  80b440:	31bfff04 	addi	r6,r6,-4
  80b444:	29400104 	addi	r5,r5,4
  80b448:	38800015 	stw	r2,0(r7)
  80b44c:	39c00104 	addi	r7,r7,4
  80b450:	19bffa36 	bltu	r3,r6,80b43c <memcpy+0x80>
  80b454:	3807883a 	mov	r3,r7
  80b458:	003fde06 	br	80b3d4 <memcpy+0x18>

0080b45c <memmove>:
  80b45c:	2807883a 	mov	r3,r5
  80b460:	2011883a 	mov	r8,r4
  80b464:	29000c2e 	bgeu	r5,r4,80b498 <memmove+0x3c>
  80b468:	298f883a 	add	r7,r5,r6
  80b46c:	21c00a2e 	bgeu	r4,r7,80b498 <memmove+0x3c>
  80b470:	30000726 	beq	r6,zero,80b490 <memmove+0x34>
  80b474:	2187883a 	add	r3,r4,r6
  80b478:	198dc83a 	sub	r6,r3,r6
  80b47c:	39ffffc4 	addi	r7,r7,-1
  80b480:	38800003 	ldbu	r2,0(r7)
  80b484:	18ffffc4 	addi	r3,r3,-1
  80b488:	18800005 	stb	r2,0(r3)
  80b48c:	19bffb1e 	bne	r3,r6,80b47c <memmove+0x20>
  80b490:	2005883a 	mov	r2,r4
  80b494:	f800283a 	ret
  80b498:	01c003c4 	movi	r7,15
  80b49c:	39800a36 	bltu	r7,r6,80b4c8 <memmove+0x6c>
  80b4a0:	303ffb26 	beq	r6,zero,80b490 <memmove+0x34>
  80b4a4:	400f883a 	mov	r7,r8
  80b4a8:	320d883a 	add	r6,r6,r8
  80b4ac:	28800003 	ldbu	r2,0(r5)
  80b4b0:	29400044 	addi	r5,r5,1
  80b4b4:	38800005 	stb	r2,0(r7)
  80b4b8:	39c00044 	addi	r7,r7,1
  80b4bc:	39bffb1e 	bne	r7,r6,80b4ac <memmove+0x50>
  80b4c0:	2005883a 	mov	r2,r4
  80b4c4:	f800283a 	ret
  80b4c8:	1904b03a 	or	r2,r3,r4
  80b4cc:	108000cc 	andi	r2,r2,3
  80b4d0:	103ff31e 	bne	r2,zero,80b4a0 <memmove+0x44>
  80b4d4:	3811883a 	mov	r8,r7
  80b4d8:	180b883a 	mov	r5,r3
  80b4dc:	200f883a 	mov	r7,r4
  80b4e0:	28c00017 	ldw	r3,0(r5)
  80b4e4:	31bffc04 	addi	r6,r6,-16
  80b4e8:	38c00015 	stw	r3,0(r7)
  80b4ec:	28800117 	ldw	r2,4(r5)
  80b4f0:	38800115 	stw	r2,4(r7)
  80b4f4:	28c00217 	ldw	r3,8(r5)
  80b4f8:	38c00215 	stw	r3,8(r7)
  80b4fc:	28800317 	ldw	r2,12(r5)
  80b500:	29400404 	addi	r5,r5,16
  80b504:	38800315 	stw	r2,12(r7)
  80b508:	39c00404 	addi	r7,r7,16
  80b50c:	41bff436 	bltu	r8,r6,80b4e0 <memmove+0x84>
  80b510:	008000c4 	movi	r2,3
  80b514:	1180072e 	bgeu	r2,r6,80b534 <memmove+0xd8>
  80b518:	1007883a 	mov	r3,r2
  80b51c:	28800017 	ldw	r2,0(r5)
  80b520:	31bfff04 	addi	r6,r6,-4
  80b524:	29400104 	addi	r5,r5,4
  80b528:	38800015 	stw	r2,0(r7)
  80b52c:	39c00104 	addi	r7,r7,4
  80b530:	19bffa36 	bltu	r3,r6,80b51c <memmove+0xc0>
  80b534:	3811883a 	mov	r8,r7
  80b538:	003fd906 	br	80b4a0 <memmove+0x44>

0080b53c <_Bfree>:
  80b53c:	28000826 	beq	r5,zero,80b560 <_Bfree+0x24>
  80b540:	28800117 	ldw	r2,4(r5)
  80b544:	21001317 	ldw	r4,76(r4)
  80b548:	1085883a 	add	r2,r2,r2
  80b54c:	1085883a 	add	r2,r2,r2
  80b550:	1105883a 	add	r2,r2,r4
  80b554:	10c00017 	ldw	r3,0(r2)
  80b558:	28c00015 	stw	r3,0(r5)
  80b55c:	11400015 	stw	r5,0(r2)
  80b560:	f800283a 	ret

0080b564 <__hi0bits>:
  80b564:	20bfffec 	andhi	r2,r4,65535
  80b568:	10001426 	beq	r2,zero,80b5bc <__hi0bits+0x58>
  80b56c:	0007883a 	mov	r3,zero
  80b570:	20bfc02c 	andhi	r2,r4,65280
  80b574:	1000021e 	bne	r2,zero,80b580 <__hi0bits+0x1c>
  80b578:	2008923a 	slli	r4,r4,8
  80b57c:	18c00204 	addi	r3,r3,8
  80b580:	20bc002c 	andhi	r2,r4,61440
  80b584:	1000021e 	bne	r2,zero,80b590 <__hi0bits+0x2c>
  80b588:	2008913a 	slli	r4,r4,4
  80b58c:	18c00104 	addi	r3,r3,4
  80b590:	20b0002c 	andhi	r2,r4,49152
  80b594:	1000031e 	bne	r2,zero,80b5a4 <__hi0bits+0x40>
  80b598:	2105883a 	add	r2,r4,r4
  80b59c:	18c00084 	addi	r3,r3,2
  80b5a0:	1089883a 	add	r4,r2,r2
  80b5a4:	20000316 	blt	r4,zero,80b5b4 <__hi0bits+0x50>
  80b5a8:	2090002c 	andhi	r2,r4,16384
  80b5ac:	10000626 	beq	r2,zero,80b5c8 <__hi0bits+0x64>
  80b5b0:	18c00044 	addi	r3,r3,1
  80b5b4:	1805883a 	mov	r2,r3
  80b5b8:	f800283a 	ret
  80b5bc:	2008943a 	slli	r4,r4,16
  80b5c0:	00c00404 	movi	r3,16
  80b5c4:	003fea06 	br	80b570 <__hi0bits+0xc>
  80b5c8:	00c00804 	movi	r3,32
  80b5cc:	1805883a 	mov	r2,r3
  80b5d0:	f800283a 	ret

0080b5d4 <__lo0bits>:
  80b5d4:	20c00017 	ldw	r3,0(r4)
  80b5d8:	188001cc 	andi	r2,r3,7
  80b5dc:	10000a26 	beq	r2,zero,80b608 <__lo0bits+0x34>
  80b5e0:	1880004c 	andi	r2,r3,1
  80b5e4:	1005003a 	cmpeq	r2,r2,zero
  80b5e8:	10002126 	beq	r2,zero,80b670 <__lo0bits+0x9c>
  80b5ec:	1880008c 	andi	r2,r3,2
  80b5f0:	1000251e 	bne	r2,zero,80b688 <__lo0bits+0xb4>
  80b5f4:	1804d0ba 	srli	r2,r3,2
  80b5f8:	01400084 	movi	r5,2
  80b5fc:	20800015 	stw	r2,0(r4)
  80b600:	2805883a 	mov	r2,r5
  80b604:	f800283a 	ret
  80b608:	18bfffcc 	andi	r2,r3,65535
  80b60c:	10001526 	beq	r2,zero,80b664 <__lo0bits+0x90>
  80b610:	000b883a 	mov	r5,zero
  80b614:	18803fcc 	andi	r2,r3,255
  80b618:	1000021e 	bne	r2,zero,80b624 <__lo0bits+0x50>
  80b61c:	1806d23a 	srli	r3,r3,8
  80b620:	29400204 	addi	r5,r5,8
  80b624:	188003cc 	andi	r2,r3,15
  80b628:	1000021e 	bne	r2,zero,80b634 <__lo0bits+0x60>
  80b62c:	1806d13a 	srli	r3,r3,4
  80b630:	29400104 	addi	r5,r5,4
  80b634:	188000cc 	andi	r2,r3,3
  80b638:	1000021e 	bne	r2,zero,80b644 <__lo0bits+0x70>
  80b63c:	1806d0ba 	srli	r3,r3,2
  80b640:	29400084 	addi	r5,r5,2
  80b644:	1880004c 	andi	r2,r3,1
  80b648:	1000031e 	bne	r2,zero,80b658 <__lo0bits+0x84>
  80b64c:	1806d07a 	srli	r3,r3,1
  80b650:	18000a26 	beq	r3,zero,80b67c <__lo0bits+0xa8>
  80b654:	29400044 	addi	r5,r5,1
  80b658:	2805883a 	mov	r2,r5
  80b65c:	20c00015 	stw	r3,0(r4)
  80b660:	f800283a 	ret
  80b664:	1806d43a 	srli	r3,r3,16
  80b668:	01400404 	movi	r5,16
  80b66c:	003fe906 	br	80b614 <__lo0bits+0x40>
  80b670:	000b883a 	mov	r5,zero
  80b674:	2805883a 	mov	r2,r5
  80b678:	f800283a 	ret
  80b67c:	01400804 	movi	r5,32
  80b680:	2805883a 	mov	r2,r5
  80b684:	f800283a 	ret
  80b688:	1804d07a 	srli	r2,r3,1
  80b68c:	01400044 	movi	r5,1
  80b690:	20800015 	stw	r2,0(r4)
  80b694:	003fda06 	br	80b600 <__lo0bits+0x2c>

0080b698 <__mcmp>:
  80b698:	20800417 	ldw	r2,16(r4)
  80b69c:	28c00417 	ldw	r3,16(r5)
  80b6a0:	10cfc83a 	sub	r7,r2,r3
  80b6a4:	38000c1e 	bne	r7,zero,80b6d8 <__mcmp+0x40>
  80b6a8:	18c5883a 	add	r2,r3,r3
  80b6ac:	1085883a 	add	r2,r2,r2
  80b6b0:	10c00504 	addi	r3,r2,20
  80b6b4:	21000504 	addi	r4,r4,20
  80b6b8:	28cb883a 	add	r5,r5,r3
  80b6bc:	2085883a 	add	r2,r4,r2
  80b6c0:	10bfff04 	addi	r2,r2,-4
  80b6c4:	297fff04 	addi	r5,r5,-4
  80b6c8:	11800017 	ldw	r6,0(r2)
  80b6cc:	28c00017 	ldw	r3,0(r5)
  80b6d0:	30c0031e 	bne	r6,r3,80b6e0 <__mcmp+0x48>
  80b6d4:	20bffa36 	bltu	r4,r2,80b6c0 <__mcmp+0x28>
  80b6d8:	3805883a 	mov	r2,r7
  80b6dc:	f800283a 	ret
  80b6e0:	30c00336 	bltu	r6,r3,80b6f0 <__mcmp+0x58>
  80b6e4:	01c00044 	movi	r7,1
  80b6e8:	3805883a 	mov	r2,r7
  80b6ec:	f800283a 	ret
  80b6f0:	01ffffc4 	movi	r7,-1
  80b6f4:	003ff806 	br	80b6d8 <__mcmp+0x40>

0080b6f8 <__ulp>:
  80b6f8:	295ffc2c 	andhi	r5,r5,32752
  80b6fc:	013f3034 	movhi	r4,64704
  80b700:	290b883a 	add	r5,r5,r4
  80b704:	0145c83a 	sub	r2,zero,r5
  80b708:	1007d53a 	srai	r3,r2,20
  80b70c:	000d883a 	mov	r6,zero
  80b710:	0140040e 	bge	zero,r5,80b724 <__ulp+0x2c>
  80b714:	280f883a 	mov	r7,r5
  80b718:	3807883a 	mov	r3,r7
  80b71c:	3005883a 	mov	r2,r6
  80b720:	f800283a 	ret
  80b724:	008004c4 	movi	r2,19
  80b728:	193ffb04 	addi	r4,r3,-20
  80b72c:	10c00c0e 	bge	r2,r3,80b760 <__ulp+0x68>
  80b730:	008007c4 	movi	r2,31
  80b734:	1107c83a 	sub	r3,r2,r4
  80b738:	00800784 	movi	r2,30
  80b73c:	01400044 	movi	r5,1
  80b740:	11000216 	blt	r2,r4,80b74c <__ulp+0x54>
  80b744:	00800044 	movi	r2,1
  80b748:	10ca983a 	sll	r5,r2,r3
  80b74c:	000f883a 	mov	r7,zero
  80b750:	280d883a 	mov	r6,r5
  80b754:	3807883a 	mov	r3,r7
  80b758:	3005883a 	mov	r2,r6
  80b75c:	f800283a 	ret
  80b760:	00800234 	movhi	r2,8
  80b764:	10cfd83a 	sra	r7,r2,r3
  80b768:	000d883a 	mov	r6,zero
  80b76c:	3005883a 	mov	r2,r6
  80b770:	3807883a 	mov	r3,r7
  80b774:	f800283a 	ret

0080b778 <__b2d>:
  80b778:	20800417 	ldw	r2,16(r4)
  80b77c:	defff904 	addi	sp,sp,-28
  80b780:	dd000415 	stw	r20,16(sp)
  80b784:	1085883a 	add	r2,r2,r2
  80b788:	25000504 	addi	r20,r4,20
  80b78c:	1085883a 	add	r2,r2,r2
  80b790:	dc000015 	stw	r16,0(sp)
  80b794:	a0a1883a 	add	r16,r20,r2
  80b798:	dd400515 	stw	r21,20(sp)
  80b79c:	857fff17 	ldw	r21,-4(r16)
  80b7a0:	dc400115 	stw	r17,4(sp)
  80b7a4:	dfc00615 	stw	ra,24(sp)
  80b7a8:	a809883a 	mov	r4,r21
  80b7ac:	2823883a 	mov	r17,r5
  80b7b0:	dcc00315 	stw	r19,12(sp)
  80b7b4:	dc800215 	stw	r18,8(sp)
  80b7b8:	080b5640 	call	80b564 <__hi0bits>
  80b7bc:	100b883a 	mov	r5,r2
  80b7c0:	00800804 	movi	r2,32
  80b7c4:	1145c83a 	sub	r2,r2,r5
  80b7c8:	88800015 	stw	r2,0(r17)
  80b7cc:	00800284 	movi	r2,10
  80b7d0:	80ffff04 	addi	r3,r16,-4
  80b7d4:	11401416 	blt	r2,r5,80b828 <__b2d+0xb0>
  80b7d8:	008002c4 	movi	r2,11
  80b7dc:	1149c83a 	sub	r4,r2,r5
  80b7e0:	a0c02736 	bltu	r20,r3,80b880 <__b2d+0x108>
  80b7e4:	000d883a 	mov	r6,zero
  80b7e8:	28800544 	addi	r2,r5,21
  80b7ec:	a906d83a 	srl	r3,r21,r4
  80b7f0:	a884983a 	sll	r2,r21,r2
  80b7f4:	1ccffc34 	orhi	r19,r3,16368
  80b7f8:	11a4b03a 	or	r18,r2,r6
  80b7fc:	9005883a 	mov	r2,r18
  80b800:	9807883a 	mov	r3,r19
  80b804:	dfc00617 	ldw	ra,24(sp)
  80b808:	dd400517 	ldw	r21,20(sp)
  80b80c:	dd000417 	ldw	r20,16(sp)
  80b810:	dcc00317 	ldw	r19,12(sp)
  80b814:	dc800217 	ldw	r18,8(sp)
  80b818:	dc400117 	ldw	r17,4(sp)
  80b81c:	dc000017 	ldw	r16,0(sp)
  80b820:	dec00704 	addi	sp,sp,28
  80b824:	f800283a 	ret
  80b828:	a0c00e36 	bltu	r20,r3,80b864 <__b2d+0xec>
  80b82c:	293ffd44 	addi	r4,r5,-11
  80b830:	000d883a 	mov	r6,zero
  80b834:	20000f26 	beq	r4,zero,80b874 <__b2d+0xfc>
  80b838:	00800804 	movi	r2,32
  80b83c:	110bc83a 	sub	r5,r2,r4
  80b840:	a0c01236 	bltu	r20,r3,80b88c <__b2d+0x114>
  80b844:	000f883a 	mov	r7,zero
  80b848:	a904983a 	sll	r2,r21,r4
  80b84c:	3146d83a 	srl	r3,r6,r5
  80b850:	3108983a 	sll	r4,r6,r4
  80b854:	108ffc34 	orhi	r2,r2,16368
  80b858:	18a6b03a 	or	r19,r3,r2
  80b85c:	3924b03a 	or	r18,r7,r4
  80b860:	003fe606 	br	80b7fc <__b2d+0x84>
  80b864:	293ffd44 	addi	r4,r5,-11
  80b868:	81bffe17 	ldw	r6,-8(r16)
  80b86c:	80fffe04 	addi	r3,r16,-8
  80b870:	203ff11e 	bne	r4,zero,80b838 <__b2d+0xc0>
  80b874:	accffc34 	orhi	r19,r21,16368
  80b878:	3025883a 	mov	r18,r6
  80b87c:	003fdf06 	br	80b7fc <__b2d+0x84>
  80b880:	18bfff17 	ldw	r2,-4(r3)
  80b884:	110cd83a 	srl	r6,r2,r4
  80b888:	003fd706 	br	80b7e8 <__b2d+0x70>
  80b88c:	18bfff17 	ldw	r2,-4(r3)
  80b890:	114ed83a 	srl	r7,r2,r5
  80b894:	003fec06 	br	80b848 <__b2d+0xd0>

0080b898 <__ratio>:
  80b898:	defff904 	addi	sp,sp,-28
  80b89c:	dc400215 	stw	r17,8(sp)
  80b8a0:	2823883a 	mov	r17,r5
  80b8a4:	d80b883a 	mov	r5,sp
  80b8a8:	dfc00615 	stw	ra,24(sp)
  80b8ac:	dd000515 	stw	r20,20(sp)
  80b8b0:	dcc00415 	stw	r19,16(sp)
  80b8b4:	dc800315 	stw	r18,12(sp)
  80b8b8:	2025883a 	mov	r18,r4
  80b8bc:	080b7780 	call	80b778 <__b2d>
  80b8c0:	8809883a 	mov	r4,r17
  80b8c4:	d9400104 	addi	r5,sp,4
  80b8c8:	1027883a 	mov	r19,r2
  80b8cc:	1829883a 	mov	r20,r3
  80b8d0:	080b7780 	call	80b778 <__b2d>
  80b8d4:	89000417 	ldw	r4,16(r17)
  80b8d8:	91c00417 	ldw	r7,16(r18)
  80b8dc:	d9800117 	ldw	r6,4(sp)
  80b8e0:	180b883a 	mov	r5,r3
  80b8e4:	390fc83a 	sub	r7,r7,r4
  80b8e8:	1009883a 	mov	r4,r2
  80b8ec:	d8800017 	ldw	r2,0(sp)
  80b8f0:	380e917a 	slli	r7,r7,5
  80b8f4:	2011883a 	mov	r8,r4
  80b8f8:	1185c83a 	sub	r2,r2,r6
  80b8fc:	11c5883a 	add	r2,r2,r7
  80b900:	1006953a 	slli	r3,r2,20
  80b904:	2813883a 	mov	r9,r5
  80b908:	00800d0e 	bge	zero,r2,80b940 <__ratio+0xa8>
  80b90c:	1d29883a 	add	r20,r3,r20
  80b910:	a00b883a 	mov	r5,r20
  80b914:	480f883a 	mov	r7,r9
  80b918:	9809883a 	mov	r4,r19
  80b91c:	400d883a 	mov	r6,r8
  80b920:	08021500 	call	802150 <__divdf3>
  80b924:	dfc00617 	ldw	ra,24(sp)
  80b928:	dd000517 	ldw	r20,20(sp)
  80b92c:	dcc00417 	ldw	r19,16(sp)
  80b930:	dc800317 	ldw	r18,12(sp)
  80b934:	dc400217 	ldw	r17,8(sp)
  80b938:	dec00704 	addi	sp,sp,28
  80b93c:	f800283a 	ret
  80b940:	28d3c83a 	sub	r9,r5,r3
  80b944:	003ff206 	br	80b910 <__ratio+0x78>

0080b948 <_mprec_log10>:
  80b948:	defffe04 	addi	sp,sp,-8
  80b94c:	008005c4 	movi	r2,23
  80b950:	dc000015 	stw	r16,0(sp)
  80b954:	dfc00115 	stw	ra,4(sp)
  80b958:	2021883a 	mov	r16,r4
  80b95c:	11000c16 	blt	r2,r4,80b990 <_mprec_log10+0x48>
  80b960:	200490fa 	slli	r2,r4,3
  80b964:	00c02074 	movhi	r3,129
  80b968:	18ce3004 	addi	r3,r3,14528
  80b96c:	10c5883a 	add	r2,r2,r3
  80b970:	12400117 	ldw	r9,4(r2)
  80b974:	12000017 	ldw	r8,0(r2)
  80b978:	4807883a 	mov	r3,r9
  80b97c:	4005883a 	mov	r2,r8
  80b980:	dfc00117 	ldw	ra,4(sp)
  80b984:	dc000017 	ldw	r16,0(sp)
  80b988:	dec00204 	addi	sp,sp,8
  80b98c:	f800283a 	ret
  80b990:	0011883a 	mov	r8,zero
  80b994:	024ffc34 	movhi	r9,16368
  80b998:	0005883a 	mov	r2,zero
  80b99c:	00d00934 	movhi	r3,16420
  80b9a0:	480b883a 	mov	r5,r9
  80b9a4:	4009883a 	mov	r4,r8
  80b9a8:	180f883a 	mov	r7,r3
  80b9ac:	100d883a 	mov	r6,r2
  80b9b0:	0801d8c0 	call	801d8c <__muldf3>
  80b9b4:	843fffc4 	addi	r16,r16,-1
  80b9b8:	1011883a 	mov	r8,r2
  80b9bc:	1813883a 	mov	r9,r3
  80b9c0:	803ff51e 	bne	r16,zero,80b998 <_mprec_log10+0x50>
  80b9c4:	4005883a 	mov	r2,r8
  80b9c8:	4807883a 	mov	r3,r9
  80b9cc:	dfc00117 	ldw	ra,4(sp)
  80b9d0:	dc000017 	ldw	r16,0(sp)
  80b9d4:	dec00204 	addi	sp,sp,8
  80b9d8:	f800283a 	ret

0080b9dc <__copybits>:
  80b9dc:	297fffc4 	addi	r5,r5,-1
  80b9e0:	30800417 	ldw	r2,16(r6)
  80b9e4:	280bd17a 	srai	r5,r5,5
  80b9e8:	31800504 	addi	r6,r6,20
  80b9ec:	1085883a 	add	r2,r2,r2
  80b9f0:	294b883a 	add	r5,r5,r5
  80b9f4:	294b883a 	add	r5,r5,r5
  80b9f8:	1085883a 	add	r2,r2,r2
  80b9fc:	290b883a 	add	r5,r5,r4
  80ba00:	3087883a 	add	r3,r6,r2
  80ba04:	29400104 	addi	r5,r5,4
  80ba08:	30c0052e 	bgeu	r6,r3,80ba20 <__copybits+0x44>
  80ba0c:	30800017 	ldw	r2,0(r6)
  80ba10:	31800104 	addi	r6,r6,4
  80ba14:	20800015 	stw	r2,0(r4)
  80ba18:	21000104 	addi	r4,r4,4
  80ba1c:	30fffb36 	bltu	r6,r3,80ba0c <__copybits+0x30>
  80ba20:	2140032e 	bgeu	r4,r5,80ba30 <__copybits+0x54>
  80ba24:	20000015 	stw	zero,0(r4)
  80ba28:	21000104 	addi	r4,r4,4
  80ba2c:	217ffd36 	bltu	r4,r5,80ba24 <__copybits+0x48>
  80ba30:	f800283a 	ret

0080ba34 <__any_on>:
  80ba34:	20800417 	ldw	r2,16(r4)
  80ba38:	2807d17a 	srai	r3,r5,5
  80ba3c:	21000504 	addi	r4,r4,20
  80ba40:	10c00d0e 	bge	r2,r3,80ba78 <__any_on+0x44>
  80ba44:	1085883a 	add	r2,r2,r2
  80ba48:	1085883a 	add	r2,r2,r2
  80ba4c:	208d883a 	add	r6,r4,r2
  80ba50:	2180182e 	bgeu	r4,r6,80bab4 <__any_on+0x80>
  80ba54:	30bfff17 	ldw	r2,-4(r6)
  80ba58:	30ffff04 	addi	r3,r6,-4
  80ba5c:	1000041e 	bne	r2,zero,80ba70 <__any_on+0x3c>
  80ba60:	20c0142e 	bgeu	r4,r3,80bab4 <__any_on+0x80>
  80ba64:	18ffff04 	addi	r3,r3,-4
  80ba68:	18800017 	ldw	r2,0(r3)
  80ba6c:	103ffc26 	beq	r2,zero,80ba60 <__any_on+0x2c>
  80ba70:	00800044 	movi	r2,1
  80ba74:	f800283a 	ret
  80ba78:	18800a0e 	bge	r3,r2,80baa4 <__any_on+0x70>
  80ba7c:	294007cc 	andi	r5,r5,31
  80ba80:	28000826 	beq	r5,zero,80baa4 <__any_on+0x70>
  80ba84:	18c5883a 	add	r2,r3,r3
  80ba88:	1085883a 	add	r2,r2,r2
  80ba8c:	208d883a 	add	r6,r4,r2
  80ba90:	30c00017 	ldw	r3,0(r6)
  80ba94:	1944d83a 	srl	r2,r3,r5
  80ba98:	1144983a 	sll	r2,r2,r5
  80ba9c:	18bff41e 	bne	r3,r2,80ba70 <__any_on+0x3c>
  80baa0:	003feb06 	br	80ba50 <__any_on+0x1c>
  80baa4:	18c5883a 	add	r2,r3,r3
  80baa8:	1085883a 	add	r2,r2,r2
  80baac:	208d883a 	add	r6,r4,r2
  80bab0:	003fe706 	br	80ba50 <__any_on+0x1c>
  80bab4:	0005883a 	mov	r2,zero
  80bab8:	f800283a 	ret

0080babc <_Balloc>:
  80babc:	20c01317 	ldw	r3,76(r4)
  80bac0:	defffb04 	addi	sp,sp,-20
  80bac4:	dcc00315 	stw	r19,12(sp)
  80bac8:	dc800215 	stw	r18,8(sp)
  80bacc:	dfc00415 	stw	ra,16(sp)
  80bad0:	2825883a 	mov	r18,r5
  80bad4:	dc400115 	stw	r17,4(sp)
  80bad8:	dc000015 	stw	r16,0(sp)
  80badc:	2027883a 	mov	r19,r4
  80bae0:	01800404 	movi	r6,16
  80bae4:	01400104 	movi	r5,4
  80bae8:	18001726 	beq	r3,zero,80bb48 <_Balloc+0x8c>
  80baec:	01400044 	movi	r5,1
  80baf0:	9485883a 	add	r2,r18,r18
  80baf4:	2ca2983a 	sll	r17,r5,r18
  80baf8:	1085883a 	add	r2,r2,r2
  80bafc:	10c7883a 	add	r3,r2,r3
  80bb00:	1c000017 	ldw	r16,0(r3)
  80bb04:	8c4d883a 	add	r6,r17,r17
  80bb08:	318d883a 	add	r6,r6,r6
  80bb0c:	9809883a 	mov	r4,r19
  80bb10:	31800504 	addi	r6,r6,20
  80bb14:	80001226 	beq	r16,zero,80bb60 <_Balloc+0xa4>
  80bb18:	80800017 	ldw	r2,0(r16)
  80bb1c:	18800015 	stw	r2,0(r3)
  80bb20:	80000415 	stw	zero,16(r16)
  80bb24:	80000315 	stw	zero,12(r16)
  80bb28:	8005883a 	mov	r2,r16
  80bb2c:	dfc00417 	ldw	ra,16(sp)
  80bb30:	dcc00317 	ldw	r19,12(sp)
  80bb34:	dc800217 	ldw	r18,8(sp)
  80bb38:	dc400117 	ldw	r17,4(sp)
  80bb3c:	dc000017 	ldw	r16,0(sp)
  80bb40:	dec00504 	addi	sp,sp,20
  80bb44:	f800283a 	ret
  80bb48:	080d0980 	call	80d098 <_calloc_r>
  80bb4c:	1007883a 	mov	r3,r2
  80bb50:	0021883a 	mov	r16,zero
  80bb54:	98801315 	stw	r2,76(r19)
  80bb58:	103fe41e 	bne	r2,zero,80baec <_Balloc+0x30>
  80bb5c:	003ff206 	br	80bb28 <_Balloc+0x6c>
  80bb60:	080d0980 	call	80d098 <_calloc_r>
  80bb64:	103ff026 	beq	r2,zero,80bb28 <_Balloc+0x6c>
  80bb68:	1021883a 	mov	r16,r2
  80bb6c:	14800115 	stw	r18,4(r2)
  80bb70:	14400215 	stw	r17,8(r2)
  80bb74:	003fea06 	br	80bb20 <_Balloc+0x64>

0080bb78 <__d2b>:
  80bb78:	defff504 	addi	sp,sp,-44
  80bb7c:	dcc00515 	stw	r19,20(sp)
  80bb80:	04c00044 	movi	r19,1
  80bb84:	dc000215 	stw	r16,8(sp)
  80bb88:	2821883a 	mov	r16,r5
  80bb8c:	980b883a 	mov	r5,r19
  80bb90:	ddc00915 	stw	r23,36(sp)
  80bb94:	dd800815 	stw	r22,32(sp)
  80bb98:	dd400715 	stw	r21,28(sp)
  80bb9c:	dd000615 	stw	r20,24(sp)
  80bba0:	dc800415 	stw	r18,16(sp)
  80bba4:	dc400315 	stw	r17,12(sp)
  80bba8:	dfc00a15 	stw	ra,40(sp)
  80bbac:	3023883a 	mov	r17,r6
  80bbb0:	382d883a 	mov	r22,r7
  80bbb4:	ddc00b17 	ldw	r23,44(sp)
  80bbb8:	080babc0 	call	80babc <_Balloc>
  80bbbc:	1025883a 	mov	r18,r2
  80bbc0:	00a00034 	movhi	r2,32768
  80bbc4:	10bfffc4 	addi	r2,r2,-1
  80bbc8:	8888703a 	and	r4,r17,r2
  80bbcc:	202ad53a 	srli	r21,r4,20
  80bbd0:	00800434 	movhi	r2,16
  80bbd4:	10bfffc4 	addi	r2,r2,-1
  80bbd8:	8886703a 	and	r3,r17,r2
  80bbdc:	a829003a 	cmpeq	r20,r21,zero
  80bbe0:	800b883a 	mov	r5,r16
  80bbe4:	d8c00115 	stw	r3,4(sp)
  80bbe8:	94000504 	addi	r16,r18,20
  80bbec:	a000021e 	bne	r20,zero,80bbf8 <__d2b+0x80>
  80bbf0:	18c00434 	orhi	r3,r3,16
  80bbf4:	d8c00115 	stw	r3,4(sp)
  80bbf8:	28002726 	beq	r5,zero,80bc98 <__d2b+0x120>
  80bbfc:	d809883a 	mov	r4,sp
  80bc00:	d9400015 	stw	r5,0(sp)
  80bc04:	080b5d40 	call	80b5d4 <__lo0bits>
  80bc08:	100d883a 	mov	r6,r2
  80bc0c:	10003526 	beq	r2,zero,80bce4 <__d2b+0x16c>
  80bc10:	d8c00117 	ldw	r3,4(sp)
  80bc14:	00800804 	movi	r2,32
  80bc18:	1185c83a 	sub	r2,r2,r6
  80bc1c:	d9000017 	ldw	r4,0(sp)
  80bc20:	1886983a 	sll	r3,r3,r2
  80bc24:	1906b03a 	or	r3,r3,r4
  80bc28:	90c00515 	stw	r3,20(r18)
  80bc2c:	d8c00117 	ldw	r3,4(sp)
  80bc30:	1986d83a 	srl	r3,r3,r6
  80bc34:	d8c00115 	stw	r3,4(sp)
  80bc38:	180b003a 	cmpeq	r5,r3,zero
  80bc3c:	00800084 	movi	r2,2
  80bc40:	114bc83a 	sub	r5,r2,r5
  80bc44:	80c00115 	stw	r3,4(r16)
  80bc48:	91400415 	stw	r5,16(r18)
  80bc4c:	a0001a1e 	bne	r20,zero,80bcb8 <__d2b+0x140>
  80bc50:	3545883a 	add	r2,r6,r21
  80bc54:	10bef344 	addi	r2,r2,-1075
  80bc58:	00c00d44 	movi	r3,53
  80bc5c:	b0800015 	stw	r2,0(r22)
  80bc60:	1987c83a 	sub	r3,r3,r6
  80bc64:	b8c00015 	stw	r3,0(r23)
  80bc68:	9005883a 	mov	r2,r18
  80bc6c:	dfc00a17 	ldw	ra,40(sp)
  80bc70:	ddc00917 	ldw	r23,36(sp)
  80bc74:	dd800817 	ldw	r22,32(sp)
  80bc78:	dd400717 	ldw	r21,28(sp)
  80bc7c:	dd000617 	ldw	r20,24(sp)
  80bc80:	dcc00517 	ldw	r19,20(sp)
  80bc84:	dc800417 	ldw	r18,16(sp)
  80bc88:	dc400317 	ldw	r17,12(sp)
  80bc8c:	dc000217 	ldw	r16,8(sp)
  80bc90:	dec00b04 	addi	sp,sp,44
  80bc94:	f800283a 	ret
  80bc98:	d9000104 	addi	r4,sp,4
  80bc9c:	080b5d40 	call	80b5d4 <__lo0bits>
  80bca0:	11800804 	addi	r6,r2,32
  80bca4:	d8800117 	ldw	r2,4(sp)
  80bca8:	94c00415 	stw	r19,16(r18)
  80bcac:	980b883a 	mov	r5,r19
  80bcb0:	90800515 	stw	r2,20(r18)
  80bcb4:	a03fe626 	beq	r20,zero,80bc50 <__d2b+0xd8>
  80bcb8:	2945883a 	add	r2,r5,r5
  80bcbc:	1085883a 	add	r2,r2,r2
  80bcc0:	1405883a 	add	r2,r2,r16
  80bcc4:	113fff17 	ldw	r4,-4(r2)
  80bcc8:	30fef384 	addi	r3,r6,-1074
  80bccc:	2820917a 	slli	r16,r5,5
  80bcd0:	b0c00015 	stw	r3,0(r22)
  80bcd4:	080b5640 	call	80b564 <__hi0bits>
  80bcd8:	80a1c83a 	sub	r16,r16,r2
  80bcdc:	bc000015 	stw	r16,0(r23)
  80bce0:	003fe106 	br	80bc68 <__d2b+0xf0>
  80bce4:	d8800017 	ldw	r2,0(sp)
  80bce8:	90800515 	stw	r2,20(r18)
  80bcec:	d8c00117 	ldw	r3,4(sp)
  80bcf0:	003fd106 	br	80bc38 <__d2b+0xc0>

0080bcf4 <__mdiff>:
  80bcf4:	defffb04 	addi	sp,sp,-20
  80bcf8:	dc000015 	stw	r16,0(sp)
  80bcfc:	2821883a 	mov	r16,r5
  80bd00:	dc800215 	stw	r18,8(sp)
  80bd04:	300b883a 	mov	r5,r6
  80bd08:	2025883a 	mov	r18,r4
  80bd0c:	8009883a 	mov	r4,r16
  80bd10:	dc400115 	stw	r17,4(sp)
  80bd14:	dfc00415 	stw	ra,16(sp)
  80bd18:	dcc00315 	stw	r19,12(sp)
  80bd1c:	3023883a 	mov	r17,r6
  80bd20:	080b6980 	call	80b698 <__mcmp>
  80bd24:	10004226 	beq	r2,zero,80be30 <__mdiff+0x13c>
  80bd28:	10005016 	blt	r2,zero,80be6c <__mdiff+0x178>
  80bd2c:	0027883a 	mov	r19,zero
  80bd30:	81400117 	ldw	r5,4(r16)
  80bd34:	9009883a 	mov	r4,r18
  80bd38:	080babc0 	call	80babc <_Balloc>
  80bd3c:	1019883a 	mov	r12,r2
  80bd40:	82800417 	ldw	r10,16(r16)
  80bd44:	88800417 	ldw	r2,16(r17)
  80bd48:	81800504 	addi	r6,r16,20
  80bd4c:	5287883a 	add	r3,r10,r10
  80bd50:	1085883a 	add	r2,r2,r2
  80bd54:	18c7883a 	add	r3,r3,r3
  80bd58:	1085883a 	add	r2,r2,r2
  80bd5c:	8a000504 	addi	r8,r17,20
  80bd60:	64c00315 	stw	r19,12(r12)
  80bd64:	30db883a 	add	r13,r6,r3
  80bd68:	4097883a 	add	r11,r8,r2
  80bd6c:	61c00504 	addi	r7,r12,20
  80bd70:	0013883a 	mov	r9,zero
  80bd74:	31000017 	ldw	r4,0(r6)
  80bd78:	41400017 	ldw	r5,0(r8)
  80bd7c:	42000104 	addi	r8,r8,4
  80bd80:	20bfffcc 	andi	r2,r4,65535
  80bd84:	28ffffcc 	andi	r3,r5,65535
  80bd88:	10c5c83a 	sub	r2,r2,r3
  80bd8c:	1245883a 	add	r2,r2,r9
  80bd90:	2008d43a 	srli	r4,r4,16
  80bd94:	280ad43a 	srli	r5,r5,16
  80bd98:	1007d43a 	srai	r3,r2,16
  80bd9c:	3880000d 	sth	r2,0(r7)
  80bda0:	2149c83a 	sub	r4,r4,r5
  80bda4:	20c9883a 	add	r4,r4,r3
  80bda8:	3900008d 	sth	r4,2(r7)
  80bdac:	31800104 	addi	r6,r6,4
  80bdb0:	39c00104 	addi	r7,r7,4
  80bdb4:	2013d43a 	srai	r9,r4,16
  80bdb8:	42ffee36 	bltu	r8,r11,80bd74 <__mdiff+0x80>
  80bdbc:	33400c2e 	bgeu	r6,r13,80bdf0 <__mdiff+0xfc>
  80bdc0:	30800017 	ldw	r2,0(r6)
  80bdc4:	31800104 	addi	r6,r6,4
  80bdc8:	10ffffcc 	andi	r3,r2,65535
  80bdcc:	1a47883a 	add	r3,r3,r9
  80bdd0:	1004d43a 	srli	r2,r2,16
  80bdd4:	1809d43a 	srai	r4,r3,16
  80bdd8:	38c0000d 	sth	r3,0(r7)
  80bddc:	1105883a 	add	r2,r2,r4
  80bde0:	3880008d 	sth	r2,2(r7)
  80bde4:	1013d43a 	srai	r9,r2,16
  80bde8:	39c00104 	addi	r7,r7,4
  80bdec:	337ff436 	bltu	r6,r13,80bdc0 <__mdiff+0xcc>
  80bdf0:	38bfff17 	ldw	r2,-4(r7)
  80bdf4:	38ffff04 	addi	r3,r7,-4
  80bdf8:	1000041e 	bne	r2,zero,80be0c <__mdiff+0x118>
  80bdfc:	18ffff04 	addi	r3,r3,-4
  80be00:	18800017 	ldw	r2,0(r3)
  80be04:	52bfffc4 	addi	r10,r10,-1
  80be08:	103ffc26 	beq	r2,zero,80bdfc <__mdiff+0x108>
  80be0c:	6005883a 	mov	r2,r12
  80be10:	62800415 	stw	r10,16(r12)
  80be14:	dfc00417 	ldw	ra,16(sp)
  80be18:	dcc00317 	ldw	r19,12(sp)
  80be1c:	dc800217 	ldw	r18,8(sp)
  80be20:	dc400117 	ldw	r17,4(sp)
  80be24:	dc000017 	ldw	r16,0(sp)
  80be28:	dec00504 	addi	sp,sp,20
  80be2c:	f800283a 	ret
  80be30:	9009883a 	mov	r4,r18
  80be34:	000b883a 	mov	r5,zero
  80be38:	080babc0 	call	80babc <_Balloc>
  80be3c:	1019883a 	mov	r12,r2
  80be40:	00800044 	movi	r2,1
  80be44:	60800415 	stw	r2,16(r12)
  80be48:	6005883a 	mov	r2,r12
  80be4c:	60000515 	stw	zero,20(r12)
  80be50:	dfc00417 	ldw	ra,16(sp)
  80be54:	dcc00317 	ldw	r19,12(sp)
  80be58:	dc800217 	ldw	r18,8(sp)
  80be5c:	dc400117 	ldw	r17,4(sp)
  80be60:	dc000017 	ldw	r16,0(sp)
  80be64:	dec00504 	addi	sp,sp,20
  80be68:	f800283a 	ret
  80be6c:	880d883a 	mov	r6,r17
  80be70:	04c00044 	movi	r19,1
  80be74:	8023883a 	mov	r17,r16
  80be78:	3021883a 	mov	r16,r6
  80be7c:	003fac06 	br	80bd30 <__mdiff+0x3c>

0080be80 <__lshift>:
  80be80:	defff904 	addi	sp,sp,-28
  80be84:	28800417 	ldw	r2,16(r5)
  80be88:	dc000015 	stw	r16,0(sp)
  80be8c:	3021d17a 	srai	r16,r6,5
  80be90:	28c00217 	ldw	r3,8(r5)
  80be94:	10800044 	addi	r2,r2,1
  80be98:	dc400115 	stw	r17,4(sp)
  80be9c:	80a3883a 	add	r17,r16,r2
  80bea0:	dd400515 	stw	r21,20(sp)
  80bea4:	dd000415 	stw	r20,16(sp)
  80bea8:	dc800215 	stw	r18,8(sp)
  80beac:	dfc00615 	stw	ra,24(sp)
  80beb0:	2825883a 	mov	r18,r5
  80beb4:	dcc00315 	stw	r19,12(sp)
  80beb8:	3029883a 	mov	r20,r6
  80bebc:	202b883a 	mov	r21,r4
  80bec0:	29400117 	ldw	r5,4(r5)
  80bec4:	1c40030e 	bge	r3,r17,80bed4 <__lshift+0x54>
  80bec8:	18c7883a 	add	r3,r3,r3
  80becc:	29400044 	addi	r5,r5,1
  80bed0:	1c7ffd16 	blt	r3,r17,80bec8 <__lshift+0x48>
  80bed4:	a809883a 	mov	r4,r21
  80bed8:	080babc0 	call	80babc <_Balloc>
  80bedc:	1027883a 	mov	r19,r2
  80bee0:	11400504 	addi	r5,r2,20
  80bee4:	0400090e 	bge	zero,r16,80bf0c <__lshift+0x8c>
  80bee8:	2805883a 	mov	r2,r5
  80beec:	0007883a 	mov	r3,zero
  80bef0:	18c00044 	addi	r3,r3,1
  80bef4:	10000015 	stw	zero,0(r2)
  80bef8:	10800104 	addi	r2,r2,4
  80befc:	80fffc1e 	bne	r16,r3,80bef0 <__lshift+0x70>
  80bf00:	8405883a 	add	r2,r16,r16
  80bf04:	1085883a 	add	r2,r2,r2
  80bf08:	288b883a 	add	r5,r5,r2
  80bf0c:	90800417 	ldw	r2,16(r18)
  80bf10:	91000504 	addi	r4,r18,20
  80bf14:	a18007cc 	andi	r6,r20,31
  80bf18:	1085883a 	add	r2,r2,r2
  80bf1c:	1085883a 	add	r2,r2,r2
  80bf20:	208f883a 	add	r7,r4,r2
  80bf24:	30001e26 	beq	r6,zero,80bfa0 <__lshift+0x120>
  80bf28:	00800804 	movi	r2,32
  80bf2c:	1191c83a 	sub	r8,r2,r6
  80bf30:	0007883a 	mov	r3,zero
  80bf34:	20800017 	ldw	r2,0(r4)
  80bf38:	1184983a 	sll	r2,r2,r6
  80bf3c:	1884b03a 	or	r2,r3,r2
  80bf40:	28800015 	stw	r2,0(r5)
  80bf44:	20c00017 	ldw	r3,0(r4)
  80bf48:	21000104 	addi	r4,r4,4
  80bf4c:	29400104 	addi	r5,r5,4
  80bf50:	1a06d83a 	srl	r3,r3,r8
  80bf54:	21fff736 	bltu	r4,r7,80bf34 <__lshift+0xb4>
  80bf58:	28c00015 	stw	r3,0(r5)
  80bf5c:	18000126 	beq	r3,zero,80bf64 <__lshift+0xe4>
  80bf60:	8c400044 	addi	r17,r17,1
  80bf64:	88bfffc4 	addi	r2,r17,-1
  80bf68:	98800415 	stw	r2,16(r19)
  80bf6c:	a809883a 	mov	r4,r21
  80bf70:	900b883a 	mov	r5,r18
  80bf74:	080b53c0 	call	80b53c <_Bfree>
  80bf78:	9805883a 	mov	r2,r19
  80bf7c:	dfc00617 	ldw	ra,24(sp)
  80bf80:	dd400517 	ldw	r21,20(sp)
  80bf84:	dd000417 	ldw	r20,16(sp)
  80bf88:	dcc00317 	ldw	r19,12(sp)
  80bf8c:	dc800217 	ldw	r18,8(sp)
  80bf90:	dc400117 	ldw	r17,4(sp)
  80bf94:	dc000017 	ldw	r16,0(sp)
  80bf98:	dec00704 	addi	sp,sp,28
  80bf9c:	f800283a 	ret
  80bfa0:	20800017 	ldw	r2,0(r4)
  80bfa4:	21000104 	addi	r4,r4,4
  80bfa8:	28800015 	stw	r2,0(r5)
  80bfac:	29400104 	addi	r5,r5,4
  80bfb0:	21ffec2e 	bgeu	r4,r7,80bf64 <__lshift+0xe4>
  80bfb4:	20800017 	ldw	r2,0(r4)
  80bfb8:	21000104 	addi	r4,r4,4
  80bfbc:	28800015 	stw	r2,0(r5)
  80bfc0:	29400104 	addi	r5,r5,4
  80bfc4:	21fff636 	bltu	r4,r7,80bfa0 <__lshift+0x120>
  80bfc8:	003fe606 	br	80bf64 <__lshift+0xe4>

0080bfcc <__multiply>:
  80bfcc:	defff004 	addi	sp,sp,-64
  80bfd0:	dc800815 	stw	r18,32(sp)
  80bfd4:	dc400715 	stw	r17,28(sp)
  80bfd8:	2c800417 	ldw	r18,16(r5)
  80bfdc:	34400417 	ldw	r17,16(r6)
  80bfe0:	dcc00915 	stw	r19,36(sp)
  80bfe4:	dc000615 	stw	r16,24(sp)
  80bfe8:	dfc00f15 	stw	ra,60(sp)
  80bfec:	df000e15 	stw	fp,56(sp)
  80bff0:	ddc00d15 	stw	r23,52(sp)
  80bff4:	dd800c15 	stw	r22,48(sp)
  80bff8:	dd400b15 	stw	r21,44(sp)
  80bffc:	dd000a15 	stw	r20,40(sp)
  80c000:	2821883a 	mov	r16,r5
  80c004:	3027883a 	mov	r19,r6
  80c008:	9440040e 	bge	r18,r17,80c01c <__multiply+0x50>
  80c00c:	8825883a 	mov	r18,r17
  80c010:	2c400417 	ldw	r17,16(r5)
  80c014:	2827883a 	mov	r19,r5
  80c018:	3021883a 	mov	r16,r6
  80c01c:	80800217 	ldw	r2,8(r16)
  80c020:	9447883a 	add	r3,r18,r17
  80c024:	d8c00415 	stw	r3,16(sp)
  80c028:	81400117 	ldw	r5,4(r16)
  80c02c:	10c0010e 	bge	r2,r3,80c034 <__multiply+0x68>
  80c030:	29400044 	addi	r5,r5,1
  80c034:	080babc0 	call	80babc <_Balloc>
  80c038:	d8800515 	stw	r2,20(sp)
  80c03c:	d9000417 	ldw	r4,16(sp)
  80c040:	d8c00517 	ldw	r3,20(sp)
  80c044:	2105883a 	add	r2,r4,r4
  80c048:	1085883a 	add	r2,r2,r2
  80c04c:	19000504 	addi	r4,r3,20
  80c050:	2085883a 	add	r2,r4,r2
  80c054:	d8800315 	stw	r2,12(sp)
  80c058:	2080052e 	bgeu	r4,r2,80c070 <__multiply+0xa4>
  80c05c:	2005883a 	mov	r2,r4
  80c060:	d8c00317 	ldw	r3,12(sp)
  80c064:	10000015 	stw	zero,0(r2)
  80c068:	10800104 	addi	r2,r2,4
  80c06c:	10fffc36 	bltu	r2,r3,80c060 <__multiply+0x94>
  80c070:	8c45883a 	add	r2,r17,r17
  80c074:	9487883a 	add	r3,r18,r18
  80c078:	9dc00504 	addi	r23,r19,20
  80c07c:	1085883a 	add	r2,r2,r2
  80c080:	84000504 	addi	r16,r16,20
  80c084:	18c7883a 	add	r3,r3,r3
  80c088:	b885883a 	add	r2,r23,r2
  80c08c:	dc000015 	stw	r16,0(sp)
  80c090:	d8800215 	stw	r2,8(sp)
  80c094:	80f9883a 	add	fp,r16,r3
  80c098:	b880432e 	bgeu	r23,r2,80c1a8 <__multiply+0x1dc>
  80c09c:	d9000115 	stw	r4,4(sp)
  80c0a0:	b9000017 	ldw	r4,0(r23)
  80c0a4:	253fffcc 	andi	r20,r4,65535
  80c0a8:	a0001a26 	beq	r20,zero,80c114 <__multiply+0x148>
  80c0ac:	dcc00017 	ldw	r19,0(sp)
  80c0b0:	dc800117 	ldw	r18,4(sp)
  80c0b4:	002b883a 	mov	r21,zero
  80c0b8:	9c400017 	ldw	r17,0(r19)
  80c0bc:	94000017 	ldw	r16,0(r18)
  80c0c0:	a009883a 	mov	r4,r20
  80c0c4:	897fffcc 	andi	r5,r17,65535
  80c0c8:	0802a640 	call	802a64 <__mulsi3>
  80c0cc:	880ad43a 	srli	r5,r17,16
  80c0d0:	80ffffcc 	andi	r3,r16,65535
  80c0d4:	a8c7883a 	add	r3,r21,r3
  80c0d8:	a009883a 	mov	r4,r20
  80c0dc:	10e3883a 	add	r17,r2,r3
  80c0e0:	8020d43a 	srli	r16,r16,16
  80c0e4:	0802a640 	call	802a64 <__mulsi3>
  80c0e8:	8806d43a 	srli	r3,r17,16
  80c0ec:	1405883a 	add	r2,r2,r16
  80c0f0:	9cc00104 	addi	r19,r19,4
  80c0f4:	1887883a 	add	r3,r3,r2
  80c0f8:	90c0008d 	sth	r3,2(r18)
  80c0fc:	9440000d 	sth	r17,0(r18)
  80c100:	182ad43a 	srli	r21,r3,16
  80c104:	94800104 	addi	r18,r18,4
  80c108:	9f3feb36 	bltu	r19,fp,80c0b8 <__multiply+0xec>
  80c10c:	95400015 	stw	r21,0(r18)
  80c110:	b9000017 	ldw	r4,0(r23)
  80c114:	202ad43a 	srli	r21,r4,16
  80c118:	a8001c26 	beq	r21,zero,80c18c <__multiply+0x1c0>
  80c11c:	d9000117 	ldw	r4,4(sp)
  80c120:	dd000017 	ldw	r20,0(sp)
  80c124:	002d883a 	mov	r22,zero
  80c128:	24c00017 	ldw	r19,0(r4)
  80c12c:	2025883a 	mov	r18,r4
  80c130:	9823883a 	mov	r17,r19
  80c134:	a4000017 	ldw	r16,0(r20)
  80c138:	a809883a 	mov	r4,r21
  80c13c:	a5000104 	addi	r20,r20,4
  80c140:	817fffcc 	andi	r5,r16,65535
  80c144:	0802a640 	call	802a64 <__mulsi3>
  80c148:	8806d43a 	srli	r3,r17,16
  80c14c:	800ad43a 	srli	r5,r16,16
  80c150:	94c0000d 	sth	r19,0(r18)
  80c154:	b0c7883a 	add	r3,r22,r3
  80c158:	10e1883a 	add	r16,r2,r3
  80c15c:	9400008d 	sth	r16,2(r18)
  80c160:	a809883a 	mov	r4,r21
  80c164:	94800104 	addi	r18,r18,4
  80c168:	0802a640 	call	802a64 <__mulsi3>
  80c16c:	94400017 	ldw	r17,0(r18)
  80c170:	8020d43a 	srli	r16,r16,16
  80c174:	88ffffcc 	andi	r3,r17,65535
  80c178:	10c5883a 	add	r2,r2,r3
  80c17c:	80a7883a 	add	r19,r16,r2
  80c180:	982cd43a 	srli	r22,r19,16
  80c184:	a73feb36 	bltu	r20,fp,80c134 <__multiply+0x168>
  80c188:	94c00015 	stw	r19,0(r18)
  80c18c:	d8800217 	ldw	r2,8(sp)
  80c190:	bdc00104 	addi	r23,r23,4
  80c194:	b880042e 	bgeu	r23,r2,80c1a8 <__multiply+0x1dc>
  80c198:	d8c00117 	ldw	r3,4(sp)
  80c19c:	18c00104 	addi	r3,r3,4
  80c1a0:	d8c00115 	stw	r3,4(sp)
  80c1a4:	003fbe06 	br	80c0a0 <__multiply+0xd4>
  80c1a8:	d9000417 	ldw	r4,16(sp)
  80c1ac:	01000c0e 	bge	zero,r4,80c1e0 <__multiply+0x214>
  80c1b0:	d8c00317 	ldw	r3,12(sp)
  80c1b4:	18bfff17 	ldw	r2,-4(r3)
  80c1b8:	18ffff04 	addi	r3,r3,-4
  80c1bc:	10000326 	beq	r2,zero,80c1cc <__multiply+0x200>
  80c1c0:	00000706 	br	80c1e0 <__multiply+0x214>
  80c1c4:	18800017 	ldw	r2,0(r3)
  80c1c8:	1000051e 	bne	r2,zero,80c1e0 <__multiply+0x214>
  80c1cc:	d9000417 	ldw	r4,16(sp)
  80c1d0:	18ffff04 	addi	r3,r3,-4
  80c1d4:	213fffc4 	addi	r4,r4,-1
  80c1d8:	d9000415 	stw	r4,16(sp)
  80c1dc:	203ff91e 	bne	r4,zero,80c1c4 <__multiply+0x1f8>
  80c1e0:	d8800417 	ldw	r2,16(sp)
  80c1e4:	d8c00517 	ldw	r3,20(sp)
  80c1e8:	18800415 	stw	r2,16(r3)
  80c1ec:	1805883a 	mov	r2,r3
  80c1f0:	dfc00f17 	ldw	ra,60(sp)
  80c1f4:	df000e17 	ldw	fp,56(sp)
  80c1f8:	ddc00d17 	ldw	r23,52(sp)
  80c1fc:	dd800c17 	ldw	r22,48(sp)
  80c200:	dd400b17 	ldw	r21,44(sp)
  80c204:	dd000a17 	ldw	r20,40(sp)
  80c208:	dcc00917 	ldw	r19,36(sp)
  80c20c:	dc800817 	ldw	r18,32(sp)
  80c210:	dc400717 	ldw	r17,28(sp)
  80c214:	dc000617 	ldw	r16,24(sp)
  80c218:	dec01004 	addi	sp,sp,64
  80c21c:	f800283a 	ret

0080c220 <__i2b>:
  80c220:	defffd04 	addi	sp,sp,-12
  80c224:	dc000015 	stw	r16,0(sp)
  80c228:	04000044 	movi	r16,1
  80c22c:	dc800115 	stw	r18,4(sp)
  80c230:	2825883a 	mov	r18,r5
  80c234:	800b883a 	mov	r5,r16
  80c238:	dfc00215 	stw	ra,8(sp)
  80c23c:	080babc0 	call	80babc <_Balloc>
  80c240:	14000415 	stw	r16,16(r2)
  80c244:	14800515 	stw	r18,20(r2)
  80c248:	dfc00217 	ldw	ra,8(sp)
  80c24c:	dc800117 	ldw	r18,4(sp)
  80c250:	dc000017 	ldw	r16,0(sp)
  80c254:	dec00304 	addi	sp,sp,12
  80c258:	f800283a 	ret

0080c25c <__multadd>:
  80c25c:	defff604 	addi	sp,sp,-40
  80c260:	dd800615 	stw	r22,24(sp)
  80c264:	2d800417 	ldw	r22,16(r5)
  80c268:	df000815 	stw	fp,32(sp)
  80c26c:	ddc00715 	stw	r23,28(sp)
  80c270:	dd400515 	stw	r21,20(sp)
  80c274:	dd000415 	stw	r20,16(sp)
  80c278:	dcc00315 	stw	r19,12(sp)
  80c27c:	dc800215 	stw	r18,8(sp)
  80c280:	dfc00915 	stw	ra,36(sp)
  80c284:	dc400115 	stw	r17,4(sp)
  80c288:	dc000015 	stw	r16,0(sp)
  80c28c:	282f883a 	mov	r23,r5
  80c290:	2039883a 	mov	fp,r4
  80c294:	302b883a 	mov	r21,r6
  80c298:	3829883a 	mov	r20,r7
  80c29c:	2c800504 	addi	r18,r5,20
  80c2a0:	0027883a 	mov	r19,zero
  80c2a4:	94400017 	ldw	r17,0(r18)
  80c2a8:	a80b883a 	mov	r5,r21
  80c2ac:	9cc00044 	addi	r19,r19,1
  80c2b0:	893fffcc 	andi	r4,r17,65535
  80c2b4:	0802a640 	call	802a64 <__mulsi3>
  80c2b8:	8808d43a 	srli	r4,r17,16
  80c2bc:	1521883a 	add	r16,r2,r20
  80c2c0:	a80b883a 	mov	r5,r21
  80c2c4:	0802a640 	call	802a64 <__mulsi3>
  80c2c8:	8008d43a 	srli	r4,r16,16
  80c2cc:	843fffcc 	andi	r16,r16,65535
  80c2d0:	1105883a 	add	r2,r2,r4
  80c2d4:	1006943a 	slli	r3,r2,16
  80c2d8:	1028d43a 	srli	r20,r2,16
  80c2dc:	1c07883a 	add	r3,r3,r16
  80c2e0:	90c00015 	stw	r3,0(r18)
  80c2e4:	94800104 	addi	r18,r18,4
  80c2e8:	9dbfee16 	blt	r19,r22,80c2a4 <__multadd+0x48>
  80c2ec:	a0000826 	beq	r20,zero,80c310 <__multadd+0xb4>
  80c2f0:	b8800217 	ldw	r2,8(r23)
  80c2f4:	b080130e 	bge	r22,r2,80c344 <__multadd+0xe8>
  80c2f8:	b585883a 	add	r2,r22,r22
  80c2fc:	1085883a 	add	r2,r2,r2
  80c300:	15c5883a 	add	r2,r2,r23
  80c304:	b0c00044 	addi	r3,r22,1
  80c308:	15000515 	stw	r20,20(r2)
  80c30c:	b8c00415 	stw	r3,16(r23)
  80c310:	b805883a 	mov	r2,r23
  80c314:	dfc00917 	ldw	ra,36(sp)
  80c318:	df000817 	ldw	fp,32(sp)
  80c31c:	ddc00717 	ldw	r23,28(sp)
  80c320:	dd800617 	ldw	r22,24(sp)
  80c324:	dd400517 	ldw	r21,20(sp)
  80c328:	dd000417 	ldw	r20,16(sp)
  80c32c:	dcc00317 	ldw	r19,12(sp)
  80c330:	dc800217 	ldw	r18,8(sp)
  80c334:	dc400117 	ldw	r17,4(sp)
  80c338:	dc000017 	ldw	r16,0(sp)
  80c33c:	dec00a04 	addi	sp,sp,40
  80c340:	f800283a 	ret
  80c344:	b9400117 	ldw	r5,4(r23)
  80c348:	e009883a 	mov	r4,fp
  80c34c:	29400044 	addi	r5,r5,1
  80c350:	080babc0 	call	80babc <_Balloc>
  80c354:	b9800417 	ldw	r6,16(r23)
  80c358:	b9400304 	addi	r5,r23,12
  80c35c:	11000304 	addi	r4,r2,12
  80c360:	318d883a 	add	r6,r6,r6
  80c364:	318d883a 	add	r6,r6,r6
  80c368:	31800204 	addi	r6,r6,8
  80c36c:	1023883a 	mov	r17,r2
  80c370:	080b3bc0 	call	80b3bc <memcpy>
  80c374:	b80b883a 	mov	r5,r23
  80c378:	e009883a 	mov	r4,fp
  80c37c:	080b53c0 	call	80b53c <_Bfree>
  80c380:	882f883a 	mov	r23,r17
  80c384:	003fdc06 	br	80c2f8 <__multadd+0x9c>

0080c388 <__pow5mult>:
  80c388:	defffa04 	addi	sp,sp,-24
  80c38c:	308000cc 	andi	r2,r6,3
  80c390:	dd000415 	stw	r20,16(sp)
  80c394:	dcc00315 	stw	r19,12(sp)
  80c398:	dc000015 	stw	r16,0(sp)
  80c39c:	dfc00515 	stw	ra,20(sp)
  80c3a0:	dc800215 	stw	r18,8(sp)
  80c3a4:	dc400115 	stw	r17,4(sp)
  80c3a8:	3021883a 	mov	r16,r6
  80c3ac:	2027883a 	mov	r19,r4
  80c3b0:	2829883a 	mov	r20,r5
  80c3b4:	10002b1e 	bne	r2,zero,80c464 <__pow5mult+0xdc>
  80c3b8:	8025d0ba 	srai	r18,r16,2
  80c3bc:	90001b26 	beq	r18,zero,80c42c <__pow5mult+0xa4>
  80c3c0:	9c001217 	ldw	r16,72(r19)
  80c3c4:	8000081e 	bne	r16,zero,80c3e8 <__pow5mult+0x60>
  80c3c8:	00003006 	br	80c48c <__pow5mult+0x104>
  80c3cc:	800b883a 	mov	r5,r16
  80c3d0:	800d883a 	mov	r6,r16
  80c3d4:	9809883a 	mov	r4,r19
  80c3d8:	90001426 	beq	r18,zero,80c42c <__pow5mult+0xa4>
  80c3dc:	80800017 	ldw	r2,0(r16)
  80c3e0:	10001b26 	beq	r2,zero,80c450 <__pow5mult+0xc8>
  80c3e4:	1021883a 	mov	r16,r2
  80c3e8:	9080004c 	andi	r2,r18,1
  80c3ec:	1005003a 	cmpeq	r2,r2,zero
  80c3f0:	9025d07a 	srai	r18,r18,1
  80c3f4:	800d883a 	mov	r6,r16
  80c3f8:	9809883a 	mov	r4,r19
  80c3fc:	a00b883a 	mov	r5,r20
  80c400:	103ff21e 	bne	r2,zero,80c3cc <__pow5mult+0x44>
  80c404:	080bfcc0 	call	80bfcc <__multiply>
  80c408:	a00b883a 	mov	r5,r20
  80c40c:	9809883a 	mov	r4,r19
  80c410:	1023883a 	mov	r17,r2
  80c414:	080b53c0 	call	80b53c <_Bfree>
  80c418:	8829883a 	mov	r20,r17
  80c41c:	800b883a 	mov	r5,r16
  80c420:	800d883a 	mov	r6,r16
  80c424:	9809883a 	mov	r4,r19
  80c428:	903fec1e 	bne	r18,zero,80c3dc <__pow5mult+0x54>
  80c42c:	a005883a 	mov	r2,r20
  80c430:	dfc00517 	ldw	ra,20(sp)
  80c434:	dd000417 	ldw	r20,16(sp)
  80c438:	dcc00317 	ldw	r19,12(sp)
  80c43c:	dc800217 	ldw	r18,8(sp)
  80c440:	dc400117 	ldw	r17,4(sp)
  80c444:	dc000017 	ldw	r16,0(sp)
  80c448:	dec00604 	addi	sp,sp,24
  80c44c:	f800283a 	ret
  80c450:	080bfcc0 	call	80bfcc <__multiply>
  80c454:	80800015 	stw	r2,0(r16)
  80c458:	1021883a 	mov	r16,r2
  80c45c:	10000015 	stw	zero,0(r2)
  80c460:	003fe106 	br	80c3e8 <__pow5mult+0x60>
  80c464:	1085883a 	add	r2,r2,r2
  80c468:	00c02074 	movhi	r3,129
  80c46c:	18ce7604 	addi	r3,r3,14808
  80c470:	1085883a 	add	r2,r2,r2
  80c474:	10c5883a 	add	r2,r2,r3
  80c478:	11bfff17 	ldw	r6,-4(r2)
  80c47c:	000f883a 	mov	r7,zero
  80c480:	080c25c0 	call	80c25c <__multadd>
  80c484:	1029883a 	mov	r20,r2
  80c488:	003fcb06 	br	80c3b8 <__pow5mult+0x30>
  80c48c:	9809883a 	mov	r4,r19
  80c490:	01409c44 	movi	r5,625
  80c494:	080c2200 	call	80c220 <__i2b>
  80c498:	98801215 	stw	r2,72(r19)
  80c49c:	1021883a 	mov	r16,r2
  80c4a0:	10000015 	stw	zero,0(r2)
  80c4a4:	003fd006 	br	80c3e8 <__pow5mult+0x60>

0080c4a8 <__s2b>:
  80c4a8:	defff904 	addi	sp,sp,-28
  80c4ac:	dcc00315 	stw	r19,12(sp)
  80c4b0:	dc800215 	stw	r18,8(sp)
  80c4b4:	2827883a 	mov	r19,r5
  80c4b8:	2025883a 	mov	r18,r4
  80c4bc:	01400244 	movi	r5,9
  80c4c0:	39000204 	addi	r4,r7,8
  80c4c4:	dd000415 	stw	r20,16(sp)
  80c4c8:	dc400115 	stw	r17,4(sp)
  80c4cc:	dfc00615 	stw	ra,24(sp)
  80c4d0:	dd400515 	stw	r21,20(sp)
  80c4d4:	dc000015 	stw	r16,0(sp)
  80c4d8:	3829883a 	mov	r20,r7
  80c4dc:	3023883a 	mov	r17,r6
  80c4e0:	08024240 	call	802424 <__divsi3>
  80c4e4:	00c00044 	movi	r3,1
  80c4e8:	1880350e 	bge	r3,r2,80c5c0 <__s2b+0x118>
  80c4ec:	000b883a 	mov	r5,zero
  80c4f0:	18c7883a 	add	r3,r3,r3
  80c4f4:	29400044 	addi	r5,r5,1
  80c4f8:	18bffd16 	blt	r3,r2,80c4f0 <__s2b+0x48>
  80c4fc:	9009883a 	mov	r4,r18
  80c500:	080babc0 	call	80babc <_Balloc>
  80c504:	1011883a 	mov	r8,r2
  80c508:	d8800717 	ldw	r2,28(sp)
  80c50c:	00c00044 	movi	r3,1
  80c510:	01800244 	movi	r6,9
  80c514:	40800515 	stw	r2,20(r8)
  80c518:	40c00415 	stw	r3,16(r8)
  80c51c:	3440260e 	bge	r6,r17,80c5b8 <__s2b+0x110>
  80c520:	3021883a 	mov	r16,r6
  80c524:	99ab883a 	add	r21,r19,r6
  80c528:	9c05883a 	add	r2,r19,r16
  80c52c:	11c00007 	ldb	r7,0(r2)
  80c530:	400b883a 	mov	r5,r8
  80c534:	9009883a 	mov	r4,r18
  80c538:	39fff404 	addi	r7,r7,-48
  80c53c:	01800284 	movi	r6,10
  80c540:	080c25c0 	call	80c25c <__multadd>
  80c544:	84000044 	addi	r16,r16,1
  80c548:	1011883a 	mov	r8,r2
  80c54c:	8c3ff61e 	bne	r17,r16,80c528 <__s2b+0x80>
  80c550:	ac45883a 	add	r2,r21,r17
  80c554:	117ffe04 	addi	r5,r2,-8
  80c558:	880d883a 	mov	r6,r17
  80c55c:	35000c0e 	bge	r6,r20,80c590 <__s2b+0xe8>
  80c560:	a185c83a 	sub	r2,r20,r6
  80c564:	2821883a 	mov	r16,r5
  80c568:	28a3883a 	add	r17,r5,r2
  80c56c:	81c00007 	ldb	r7,0(r16)
  80c570:	400b883a 	mov	r5,r8
  80c574:	9009883a 	mov	r4,r18
  80c578:	39fff404 	addi	r7,r7,-48
  80c57c:	01800284 	movi	r6,10
  80c580:	080c25c0 	call	80c25c <__multadd>
  80c584:	84000044 	addi	r16,r16,1
  80c588:	1011883a 	mov	r8,r2
  80c58c:	847ff71e 	bne	r16,r17,80c56c <__s2b+0xc4>
  80c590:	4005883a 	mov	r2,r8
  80c594:	dfc00617 	ldw	ra,24(sp)
  80c598:	dd400517 	ldw	r21,20(sp)
  80c59c:	dd000417 	ldw	r20,16(sp)
  80c5a0:	dcc00317 	ldw	r19,12(sp)
  80c5a4:	dc800217 	ldw	r18,8(sp)
  80c5a8:	dc400117 	ldw	r17,4(sp)
  80c5ac:	dc000017 	ldw	r16,0(sp)
  80c5b0:	dec00704 	addi	sp,sp,28
  80c5b4:	f800283a 	ret
  80c5b8:	99400284 	addi	r5,r19,10
  80c5bc:	003fe706 	br	80c55c <__s2b+0xb4>
  80c5c0:	000b883a 	mov	r5,zero
  80c5c4:	003fcd06 	br	80c4fc <__s2b+0x54>

0080c5c8 <putc>:
  80c5c8:	defffc04 	addi	sp,sp,-16
  80c5cc:	dc800215 	stw	r18,8(sp)
  80c5d0:	04802074 	movhi	r18,129
  80c5d4:	9495d704 	addi	r18,r18,22364
  80c5d8:	90c00017 	ldw	r3,0(r18)
  80c5dc:	dc400115 	stw	r17,4(sp)
  80c5e0:	dc000015 	stw	r16,0(sp)
  80c5e4:	dfc00315 	stw	ra,12(sp)
  80c5e8:	2023883a 	mov	r17,r4
  80c5ec:	2821883a 	mov	r16,r5
  80c5f0:	18000226 	beq	r3,zero,80c5fc <putc+0x34>
  80c5f4:	18800e17 	ldw	r2,56(r3)
  80c5f8:	10001126 	beq	r2,zero,80c640 <putc+0x78>
  80c5fc:	80800217 	ldw	r2,8(r16)
  80c600:	10ffffc4 	addi	r3,r2,-1
  80c604:	80c00215 	stw	r3,8(r16)
  80c608:	18001316 	blt	r3,zero,80c658 <putc+0x90>
  80c60c:	80800017 	ldw	r2,0(r16)
  80c610:	14400005 	stb	r17,0(r2)
  80c614:	80c00017 	ldw	r3,0(r16)
  80c618:	18800044 	addi	r2,r3,1
  80c61c:	18c00003 	ldbu	r3,0(r3)
  80c620:	80800015 	stw	r2,0(r16)
  80c624:	1805883a 	mov	r2,r3
  80c628:	dfc00317 	ldw	ra,12(sp)
  80c62c:	dc800217 	ldw	r18,8(sp)
  80c630:	dc400117 	ldw	r17,4(sp)
  80c634:	dc000017 	ldw	r16,0(sp)
  80c638:	dec00404 	addi	sp,sp,16
  80c63c:	f800283a 	ret
  80c640:	1809883a 	mov	r4,r3
  80c644:	0802e580 	call	802e58 <__sinit>
  80c648:	80800217 	ldw	r2,8(r16)
  80c64c:	10ffffc4 	addi	r3,r2,-1
  80c650:	80c00215 	stw	r3,8(r16)
  80c654:	183fed0e 	bge	r3,zero,80c60c <putc+0x44>
  80c658:	80800617 	ldw	r2,24(r16)
  80c65c:	18800f16 	blt	r3,r2,80c69c <putc+0xd4>
  80c660:	80800017 	ldw	r2,0(r16)
  80c664:	14400005 	stb	r17,0(r2)
  80c668:	81000017 	ldw	r4,0(r16)
  80c66c:	00800284 	movi	r2,10
  80c670:	20c00003 	ldbu	r3,0(r4)
  80c674:	18801226 	beq	r3,r2,80c6c0 <putc+0xf8>
  80c678:	20800044 	addi	r2,r4,1
  80c67c:	80800015 	stw	r2,0(r16)
  80c680:	1805883a 	mov	r2,r3
  80c684:	dfc00317 	ldw	ra,12(sp)
  80c688:	dc800217 	ldw	r18,8(sp)
  80c68c:	dc400117 	ldw	r17,4(sp)
  80c690:	dc000017 	ldw	r16,0(sp)
  80c694:	dec00404 	addi	sp,sp,16
  80c698:	f800283a 	ret
  80c69c:	91000017 	ldw	r4,0(r18)
  80c6a0:	880b883a 	mov	r5,r17
  80c6a4:	800d883a 	mov	r6,r16
  80c6a8:	dfc00317 	ldw	ra,12(sp)
  80c6ac:	dc800217 	ldw	r18,8(sp)
  80c6b0:	dc400117 	ldw	r17,4(sp)
  80c6b4:	dc000017 	ldw	r16,0(sp)
  80c6b8:	dec00404 	addi	sp,sp,16
  80c6bc:	080cf4c1 	jmpi	80cf4c <__swbuf_r>
  80c6c0:	91000017 	ldw	r4,0(r18)
  80c6c4:	180b883a 	mov	r5,r3
  80c6c8:	003ff606 	br	80c6a4 <putc+0xdc>

0080c6cc <_putc_r>:
  80c6cc:	defffc04 	addi	sp,sp,-16
  80c6d0:	dc400215 	stw	r17,8(sp)
  80c6d4:	dc000115 	stw	r16,4(sp)
  80c6d8:	dfc00315 	stw	ra,12(sp)
  80c6dc:	2021883a 	mov	r16,r4
  80c6e0:	2823883a 	mov	r17,r5
  80c6e4:	20000226 	beq	r4,zero,80c6f0 <_putc_r+0x24>
  80c6e8:	20800e17 	ldw	r2,56(r4)
  80c6ec:	10001026 	beq	r2,zero,80c730 <_putc_r+0x64>
  80c6f0:	30800217 	ldw	r2,8(r6)
  80c6f4:	10ffffc4 	addi	r3,r2,-1
  80c6f8:	30c00215 	stw	r3,8(r6)
  80c6fc:	18001316 	blt	r3,zero,80c74c <_putc_r+0x80>
  80c700:	30800017 	ldw	r2,0(r6)
  80c704:	14400005 	stb	r17,0(r2)
  80c708:	30c00017 	ldw	r3,0(r6)
  80c70c:	18800044 	addi	r2,r3,1
  80c710:	18c00003 	ldbu	r3,0(r3)
  80c714:	30800015 	stw	r2,0(r6)
  80c718:	1805883a 	mov	r2,r3
  80c71c:	dfc00317 	ldw	ra,12(sp)
  80c720:	dc400217 	ldw	r17,8(sp)
  80c724:	dc000117 	ldw	r16,4(sp)
  80c728:	dec00404 	addi	sp,sp,16
  80c72c:	f800283a 	ret
  80c730:	d9800015 	stw	r6,0(sp)
  80c734:	0802e580 	call	802e58 <__sinit>
  80c738:	d9800017 	ldw	r6,0(sp)
  80c73c:	30800217 	ldw	r2,8(r6)
  80c740:	10ffffc4 	addi	r3,r2,-1
  80c744:	30c00215 	stw	r3,8(r6)
  80c748:	183fed0e 	bge	r3,zero,80c700 <_putc_r+0x34>
  80c74c:	30800617 	ldw	r2,24(r6)
  80c750:	18800e16 	blt	r3,r2,80c78c <_putc_r+0xc0>
  80c754:	30800017 	ldw	r2,0(r6)
  80c758:	14400005 	stb	r17,0(r2)
  80c75c:	31000017 	ldw	r4,0(r6)
  80c760:	00800284 	movi	r2,10
  80c764:	20c00003 	ldbu	r3,0(r4)
  80c768:	18800f26 	beq	r3,r2,80c7a8 <_putc_r+0xdc>
  80c76c:	20800044 	addi	r2,r4,1
  80c770:	30800015 	stw	r2,0(r6)
  80c774:	1805883a 	mov	r2,r3
  80c778:	dfc00317 	ldw	ra,12(sp)
  80c77c:	dc400217 	ldw	r17,8(sp)
  80c780:	dc000117 	ldw	r16,4(sp)
  80c784:	dec00404 	addi	sp,sp,16
  80c788:	f800283a 	ret
  80c78c:	8009883a 	mov	r4,r16
  80c790:	880b883a 	mov	r5,r17
  80c794:	dfc00317 	ldw	ra,12(sp)
  80c798:	dc400217 	ldw	r17,8(sp)
  80c79c:	dc000117 	ldw	r16,4(sp)
  80c7a0:	dec00404 	addi	sp,sp,16
  80c7a4:	080cf4c1 	jmpi	80cf4c <__swbuf_r>
  80c7a8:	8009883a 	mov	r4,r16
  80c7ac:	180b883a 	mov	r5,r3
  80c7b0:	003ff806 	br	80c794 <_putc_r+0xc8>

0080c7b4 <_read_r>:
  80c7b4:	defffd04 	addi	sp,sp,-12
  80c7b8:	dc000015 	stw	r16,0(sp)
  80c7bc:	04002074 	movhi	r16,129
  80c7c0:	841d1404 	addi	r16,r16,29776
  80c7c4:	dc400115 	stw	r17,4(sp)
  80c7c8:	80000015 	stw	zero,0(r16)
  80c7cc:	2023883a 	mov	r17,r4
  80c7d0:	2809883a 	mov	r4,r5
  80c7d4:	300b883a 	mov	r5,r6
  80c7d8:	380d883a 	mov	r6,r7
  80c7dc:	dfc00215 	stw	ra,8(sp)
  80c7e0:	080f6fc0 	call	80f6fc <read>
  80c7e4:	1007883a 	mov	r3,r2
  80c7e8:	00bfffc4 	movi	r2,-1
  80c7ec:	18800626 	beq	r3,r2,80c808 <_read_r+0x54>
  80c7f0:	1805883a 	mov	r2,r3
  80c7f4:	dfc00217 	ldw	ra,8(sp)
  80c7f8:	dc400117 	ldw	r17,4(sp)
  80c7fc:	dc000017 	ldw	r16,0(sp)
  80c800:	dec00304 	addi	sp,sp,12
  80c804:	f800283a 	ret
  80c808:	80800017 	ldw	r2,0(r16)
  80c80c:	103ff826 	beq	r2,zero,80c7f0 <_read_r+0x3c>
  80c810:	88800015 	stw	r2,0(r17)
  80c814:	1805883a 	mov	r2,r3
  80c818:	dfc00217 	ldw	ra,8(sp)
  80c81c:	dc400117 	ldw	r17,4(sp)
  80c820:	dc000017 	ldw	r16,0(sp)
  80c824:	dec00304 	addi	sp,sp,12
  80c828:	f800283a 	ret

0080c82c <_realloc_r>:
  80c82c:	defff404 	addi	sp,sp,-48
  80c830:	dd800815 	stw	r22,32(sp)
  80c834:	dc800415 	stw	r18,16(sp)
  80c838:	dc400315 	stw	r17,12(sp)
  80c83c:	dfc00b15 	stw	ra,44(sp)
  80c840:	df000a15 	stw	fp,40(sp)
  80c844:	ddc00915 	stw	r23,36(sp)
  80c848:	dd400715 	stw	r21,28(sp)
  80c84c:	dd000615 	stw	r20,24(sp)
  80c850:	dcc00515 	stw	r19,20(sp)
  80c854:	dc000215 	stw	r16,8(sp)
  80c858:	2825883a 	mov	r18,r5
  80c85c:	3023883a 	mov	r17,r6
  80c860:	202d883a 	mov	r22,r4
  80c864:	2800c926 	beq	r5,zero,80cb8c <_realloc_r+0x360>
  80c868:	080f3d80 	call	80f3d8 <__malloc_lock>
  80c86c:	943ffe04 	addi	r16,r18,-8
  80c870:	88c002c4 	addi	r3,r17,11
  80c874:	00800584 	movi	r2,22
  80c878:	82000117 	ldw	r8,4(r16)
  80c87c:	10c01b2e 	bgeu	r2,r3,80c8ec <_realloc_r+0xc0>
  80c880:	00bffe04 	movi	r2,-8
  80c884:	188e703a 	and	r7,r3,r2
  80c888:	3839883a 	mov	fp,r7
  80c88c:	38001a16 	blt	r7,zero,80c8f8 <_realloc_r+0xcc>
  80c890:	e4401936 	bltu	fp,r17,80c8f8 <_realloc_r+0xcc>
  80c894:	013fff04 	movi	r4,-4
  80c898:	4126703a 	and	r19,r8,r4
  80c89c:	99c02616 	blt	r19,r7,80c938 <_realloc_r+0x10c>
  80c8a0:	802b883a 	mov	r21,r16
  80c8a4:	9829883a 	mov	r20,r19
  80c8a8:	84000204 	addi	r16,r16,8
  80c8ac:	a80f883a 	mov	r7,r21
  80c8b0:	a70dc83a 	sub	r6,r20,fp
  80c8b4:	008003c4 	movi	r2,15
  80c8b8:	1180c136 	bltu	r2,r6,80cbc0 <_realloc_r+0x394>
  80c8bc:	38800117 	ldw	r2,4(r7)
  80c8c0:	a549883a 	add	r4,r20,r21
  80c8c4:	1080004c 	andi	r2,r2,1
  80c8c8:	a084b03a 	or	r2,r20,r2
  80c8cc:	38800115 	stw	r2,4(r7)
  80c8d0:	20c00117 	ldw	r3,4(r4)
  80c8d4:	18c00054 	ori	r3,r3,1
  80c8d8:	20c00115 	stw	r3,4(r4)
  80c8dc:	b009883a 	mov	r4,r22
  80c8e0:	080f3f80 	call	80f3f8 <__malloc_unlock>
  80c8e4:	8023883a 	mov	r17,r16
  80c8e8:	00000606 	br	80c904 <_realloc_r+0xd8>
  80c8ec:	01c00404 	movi	r7,16
  80c8f0:	3839883a 	mov	fp,r7
  80c8f4:	e47fe72e 	bgeu	fp,r17,80c894 <_realloc_r+0x68>
  80c8f8:	00800304 	movi	r2,12
  80c8fc:	0023883a 	mov	r17,zero
  80c900:	b0800015 	stw	r2,0(r22)
  80c904:	8805883a 	mov	r2,r17
  80c908:	dfc00b17 	ldw	ra,44(sp)
  80c90c:	df000a17 	ldw	fp,40(sp)
  80c910:	ddc00917 	ldw	r23,36(sp)
  80c914:	dd800817 	ldw	r22,32(sp)
  80c918:	dd400717 	ldw	r21,28(sp)
  80c91c:	dd000617 	ldw	r20,24(sp)
  80c920:	dcc00517 	ldw	r19,20(sp)
  80c924:	dc800417 	ldw	r18,16(sp)
  80c928:	dc400317 	ldw	r17,12(sp)
  80c92c:	dc000217 	ldw	r16,8(sp)
  80c930:	dec00c04 	addi	sp,sp,48
  80c934:	f800283a 	ret
  80c938:	00802074 	movhi	r2,129
  80c93c:	108fcd04 	addi	r2,r2,16180
  80c940:	12400217 	ldw	r9,8(r2)
  80c944:	84cd883a 	add	r6,r16,r19
  80c948:	802b883a 	mov	r21,r16
  80c94c:	3240b926 	beq	r6,r9,80cc34 <_realloc_r+0x408>
  80c950:	31400117 	ldw	r5,4(r6)
  80c954:	00bfff84 	movi	r2,-2
  80c958:	2884703a 	and	r2,r5,r2
  80c95c:	1185883a 	add	r2,r2,r6
  80c960:	10c00117 	ldw	r3,4(r2)
  80c964:	18c0004c 	andi	r3,r3,1
  80c968:	1807003a 	cmpeq	r3,r3,zero
  80c96c:	1800a326 	beq	r3,zero,80cbfc <_realloc_r+0x3d0>
  80c970:	2908703a 	and	r4,r5,r4
  80c974:	9929883a 	add	r20,r19,r4
  80c978:	a1c0a30e 	bge	r20,r7,80cc08 <_realloc_r+0x3dc>
  80c97c:	4080004c 	andi	r2,r8,1
  80c980:	1000551e 	bne	r2,zero,80cad8 <_realloc_r+0x2ac>
  80c984:	80800017 	ldw	r2,0(r16)
  80c988:	80afc83a 	sub	r23,r16,r2
  80c98c:	b8c00117 	ldw	r3,4(r23)
  80c990:	00bfff04 	movi	r2,-4
  80c994:	1884703a 	and	r2,r3,r2
  80c998:	30002e26 	beq	r6,zero,80ca54 <_realloc_r+0x228>
  80c99c:	3240b926 	beq	r6,r9,80cc84 <_realloc_r+0x458>
  80c9a0:	98a9883a 	add	r20,r19,r2
  80c9a4:	2509883a 	add	r4,r4,r20
  80c9a8:	d9000015 	stw	r4,0(sp)
  80c9ac:	21c02a16 	blt	r4,r7,80ca58 <_realloc_r+0x22c>
  80c9b0:	30800317 	ldw	r2,12(r6)
  80c9b4:	30c00217 	ldw	r3,8(r6)
  80c9b8:	01400904 	movi	r5,36
  80c9bc:	99bfff04 	addi	r6,r19,-4
  80c9c0:	18800315 	stw	r2,12(r3)
  80c9c4:	10c00215 	stw	r3,8(r2)
  80c9c8:	b9000317 	ldw	r4,12(r23)
  80c9cc:	b8800217 	ldw	r2,8(r23)
  80c9d0:	b82b883a 	mov	r21,r23
  80c9d4:	bc000204 	addi	r16,r23,8
  80c9d8:	20800215 	stw	r2,8(r4)
  80c9dc:	11000315 	stw	r4,12(r2)
  80c9e0:	2980e436 	bltu	r5,r6,80cd74 <_realloc_r+0x548>
  80c9e4:	008004c4 	movi	r2,19
  80c9e8:	9009883a 	mov	r4,r18
  80c9ec:	8011883a 	mov	r8,r16
  80c9f0:	11800f2e 	bgeu	r2,r6,80ca30 <_realloc_r+0x204>
  80c9f4:	90800017 	ldw	r2,0(r18)
  80c9f8:	ba000404 	addi	r8,r23,16
  80c9fc:	91000204 	addi	r4,r18,8
  80ca00:	b8800215 	stw	r2,8(r23)
  80ca04:	90c00117 	ldw	r3,4(r18)
  80ca08:	008006c4 	movi	r2,27
  80ca0c:	b8c00315 	stw	r3,12(r23)
  80ca10:	1180072e 	bgeu	r2,r6,80ca30 <_realloc_r+0x204>
  80ca14:	90c00217 	ldw	r3,8(r18)
  80ca18:	ba000604 	addi	r8,r23,24
  80ca1c:	91000404 	addi	r4,r18,16
  80ca20:	b8c00415 	stw	r3,16(r23)
  80ca24:	90800317 	ldw	r2,12(r18)
  80ca28:	b8800515 	stw	r2,20(r23)
  80ca2c:	3140e726 	beq	r6,r5,80cdcc <_realloc_r+0x5a0>
  80ca30:	20800017 	ldw	r2,0(r4)
  80ca34:	dd000017 	ldw	r20,0(sp)
  80ca38:	b80f883a 	mov	r7,r23
  80ca3c:	40800015 	stw	r2,0(r8)
  80ca40:	20c00117 	ldw	r3,4(r4)
  80ca44:	40c00115 	stw	r3,4(r8)
  80ca48:	20800217 	ldw	r2,8(r4)
  80ca4c:	40800215 	stw	r2,8(r8)
  80ca50:	003f9706 	br	80c8b0 <_realloc_r+0x84>
  80ca54:	98a9883a 	add	r20,r19,r2
  80ca58:	a1c01f16 	blt	r20,r7,80cad8 <_realloc_r+0x2ac>
  80ca5c:	b8c00317 	ldw	r3,12(r23)
  80ca60:	b8800217 	ldw	r2,8(r23)
  80ca64:	99bfff04 	addi	r6,r19,-4
  80ca68:	01400904 	movi	r5,36
  80ca6c:	b82b883a 	mov	r21,r23
  80ca70:	18800215 	stw	r2,8(r3)
  80ca74:	10c00315 	stw	r3,12(r2)
  80ca78:	bc000204 	addi	r16,r23,8
  80ca7c:	2980c336 	bltu	r5,r6,80cd8c <_realloc_r+0x560>
  80ca80:	008004c4 	movi	r2,19
  80ca84:	9009883a 	mov	r4,r18
  80ca88:	8011883a 	mov	r8,r16
  80ca8c:	11800f2e 	bgeu	r2,r6,80cacc <_realloc_r+0x2a0>
  80ca90:	90800017 	ldw	r2,0(r18)
  80ca94:	ba000404 	addi	r8,r23,16
  80ca98:	91000204 	addi	r4,r18,8
  80ca9c:	b8800215 	stw	r2,8(r23)
  80caa0:	90c00117 	ldw	r3,4(r18)
  80caa4:	008006c4 	movi	r2,27
  80caa8:	b8c00315 	stw	r3,12(r23)
  80caac:	1180072e 	bgeu	r2,r6,80cacc <_realloc_r+0x2a0>
  80cab0:	90c00217 	ldw	r3,8(r18)
  80cab4:	ba000604 	addi	r8,r23,24
  80cab8:	91000404 	addi	r4,r18,16
  80cabc:	b8c00415 	stw	r3,16(r23)
  80cac0:	90800317 	ldw	r2,12(r18)
  80cac4:	b8800515 	stw	r2,20(r23)
  80cac8:	3140c726 	beq	r6,r5,80cde8 <_realloc_r+0x5bc>
  80cacc:	20800017 	ldw	r2,0(r4)
  80cad0:	b80f883a 	mov	r7,r23
  80cad4:	003fd906 	br	80ca3c <_realloc_r+0x210>
  80cad8:	880b883a 	mov	r5,r17
  80cadc:	b009883a 	mov	r4,r22
  80cae0:	0803e7c0 	call	803e7c <_malloc_r>
  80cae4:	1023883a 	mov	r17,r2
  80cae8:	10002526 	beq	r2,zero,80cb80 <_realloc_r+0x354>
  80caec:	80800117 	ldw	r2,4(r16)
  80caf0:	00ffff84 	movi	r3,-2
  80caf4:	893ffe04 	addi	r4,r17,-8
  80caf8:	10c4703a 	and	r2,r2,r3
  80cafc:	8085883a 	add	r2,r16,r2
  80cb00:	20809526 	beq	r4,r2,80cd58 <_realloc_r+0x52c>
  80cb04:	99bfff04 	addi	r6,r19,-4
  80cb08:	01c00904 	movi	r7,36
  80cb0c:	39804536 	bltu	r7,r6,80cc24 <_realloc_r+0x3f8>
  80cb10:	008004c4 	movi	r2,19
  80cb14:	9009883a 	mov	r4,r18
  80cb18:	880b883a 	mov	r5,r17
  80cb1c:	11800f2e 	bgeu	r2,r6,80cb5c <_realloc_r+0x330>
  80cb20:	90800017 	ldw	r2,0(r18)
  80cb24:	89400204 	addi	r5,r17,8
  80cb28:	91000204 	addi	r4,r18,8
  80cb2c:	88800015 	stw	r2,0(r17)
  80cb30:	90c00117 	ldw	r3,4(r18)
  80cb34:	008006c4 	movi	r2,27
  80cb38:	88c00115 	stw	r3,4(r17)
  80cb3c:	1180072e 	bgeu	r2,r6,80cb5c <_realloc_r+0x330>
  80cb40:	90c00217 	ldw	r3,8(r18)
  80cb44:	89400404 	addi	r5,r17,16
  80cb48:	91000404 	addi	r4,r18,16
  80cb4c:	88c00215 	stw	r3,8(r17)
  80cb50:	90800317 	ldw	r2,12(r18)
  80cb54:	88800315 	stw	r2,12(r17)
  80cb58:	31c09126 	beq	r6,r7,80cda0 <_realloc_r+0x574>
  80cb5c:	20800017 	ldw	r2,0(r4)
  80cb60:	28800015 	stw	r2,0(r5)
  80cb64:	20c00117 	ldw	r3,4(r4)
  80cb68:	28c00115 	stw	r3,4(r5)
  80cb6c:	20800217 	ldw	r2,8(r4)
  80cb70:	28800215 	stw	r2,8(r5)
  80cb74:	900b883a 	mov	r5,r18
  80cb78:	b009883a 	mov	r4,r22
  80cb7c:	08033800 	call	803380 <_free_r>
  80cb80:	b009883a 	mov	r4,r22
  80cb84:	080f3f80 	call	80f3f8 <__malloc_unlock>
  80cb88:	003f5e06 	br	80c904 <_realloc_r+0xd8>
  80cb8c:	300b883a 	mov	r5,r6
  80cb90:	dfc00b17 	ldw	ra,44(sp)
  80cb94:	df000a17 	ldw	fp,40(sp)
  80cb98:	ddc00917 	ldw	r23,36(sp)
  80cb9c:	dd800817 	ldw	r22,32(sp)
  80cba0:	dd400717 	ldw	r21,28(sp)
  80cba4:	dd000617 	ldw	r20,24(sp)
  80cba8:	dcc00517 	ldw	r19,20(sp)
  80cbac:	dc800417 	ldw	r18,16(sp)
  80cbb0:	dc400317 	ldw	r17,12(sp)
  80cbb4:	dc000217 	ldw	r16,8(sp)
  80cbb8:	dec00c04 	addi	sp,sp,48
  80cbbc:	0803e7c1 	jmpi	803e7c <_malloc_r>
  80cbc0:	38800117 	ldw	r2,4(r7)
  80cbc4:	e54b883a 	add	r5,fp,r21
  80cbc8:	31000054 	ori	r4,r6,1
  80cbcc:	1080004c 	andi	r2,r2,1
  80cbd0:	1704b03a 	or	r2,r2,fp
  80cbd4:	38800115 	stw	r2,4(r7)
  80cbd8:	29000115 	stw	r4,4(r5)
  80cbdc:	2987883a 	add	r3,r5,r6
  80cbe0:	18800117 	ldw	r2,4(r3)
  80cbe4:	29400204 	addi	r5,r5,8
  80cbe8:	b009883a 	mov	r4,r22
  80cbec:	10800054 	ori	r2,r2,1
  80cbf0:	18800115 	stw	r2,4(r3)
  80cbf4:	08033800 	call	803380 <_free_r>
  80cbf8:	003f3806 	br	80c8dc <_realloc_r+0xb0>
  80cbfc:	000d883a 	mov	r6,zero
  80cc00:	0009883a 	mov	r4,zero
  80cc04:	003f5d06 	br	80c97c <_realloc_r+0x150>
  80cc08:	30c00217 	ldw	r3,8(r6)
  80cc0c:	30800317 	ldw	r2,12(r6)
  80cc10:	800f883a 	mov	r7,r16
  80cc14:	84000204 	addi	r16,r16,8
  80cc18:	10c00215 	stw	r3,8(r2)
  80cc1c:	18800315 	stw	r2,12(r3)
  80cc20:	003f2306 	br	80c8b0 <_realloc_r+0x84>
  80cc24:	8809883a 	mov	r4,r17
  80cc28:	900b883a 	mov	r5,r18
  80cc2c:	080b45c0 	call	80b45c <memmove>
  80cc30:	003fd006 	br	80cb74 <_realloc_r+0x348>
  80cc34:	30800117 	ldw	r2,4(r6)
  80cc38:	e0c00404 	addi	r3,fp,16
  80cc3c:	1108703a 	and	r4,r2,r4
  80cc40:	9905883a 	add	r2,r19,r4
  80cc44:	10ff4d16 	blt	r2,r3,80c97c <_realloc_r+0x150>
  80cc48:	1705c83a 	sub	r2,r2,fp
  80cc4c:	870b883a 	add	r5,r16,fp
  80cc50:	10800054 	ori	r2,r2,1
  80cc54:	28800115 	stw	r2,4(r5)
  80cc58:	80c00117 	ldw	r3,4(r16)
  80cc5c:	00802074 	movhi	r2,129
  80cc60:	108fcd04 	addi	r2,r2,16180
  80cc64:	b009883a 	mov	r4,r22
  80cc68:	18c0004c 	andi	r3,r3,1
  80cc6c:	e0c6b03a 	or	r3,fp,r3
  80cc70:	11400215 	stw	r5,8(r2)
  80cc74:	80c00115 	stw	r3,4(r16)
  80cc78:	080f3f80 	call	80f3f8 <__malloc_unlock>
  80cc7c:	84400204 	addi	r17,r16,8
  80cc80:	003f2006 	br	80c904 <_realloc_r+0xd8>
  80cc84:	98a9883a 	add	r20,r19,r2
  80cc88:	2509883a 	add	r4,r4,r20
  80cc8c:	e0800404 	addi	r2,fp,16
  80cc90:	d9000115 	stw	r4,4(sp)
  80cc94:	20bf7016 	blt	r4,r2,80ca58 <_realloc_r+0x22c>
  80cc98:	b8c00317 	ldw	r3,12(r23)
  80cc9c:	b8800217 	ldw	r2,8(r23)
  80cca0:	99bfff04 	addi	r6,r19,-4
  80cca4:	01400904 	movi	r5,36
  80cca8:	18800215 	stw	r2,8(r3)
  80ccac:	10c00315 	stw	r3,12(r2)
  80ccb0:	bc400204 	addi	r17,r23,8
  80ccb4:	29804136 	bltu	r5,r6,80cdbc <_realloc_r+0x590>
  80ccb8:	008004c4 	movi	r2,19
  80ccbc:	9009883a 	mov	r4,r18
  80ccc0:	880f883a 	mov	r7,r17
  80ccc4:	11800f2e 	bgeu	r2,r6,80cd04 <_realloc_r+0x4d8>
  80ccc8:	90800017 	ldw	r2,0(r18)
  80cccc:	b9c00404 	addi	r7,r23,16
  80ccd0:	91000204 	addi	r4,r18,8
  80ccd4:	b8800215 	stw	r2,8(r23)
  80ccd8:	90c00117 	ldw	r3,4(r18)
  80ccdc:	008006c4 	movi	r2,27
  80cce0:	b8c00315 	stw	r3,12(r23)
  80cce4:	1180072e 	bgeu	r2,r6,80cd04 <_realloc_r+0x4d8>
  80cce8:	90c00217 	ldw	r3,8(r18)
  80ccec:	b9c00604 	addi	r7,r23,24
  80ccf0:	91000404 	addi	r4,r18,16
  80ccf4:	b8c00415 	stw	r3,16(r23)
  80ccf8:	90800317 	ldw	r2,12(r18)
  80ccfc:	b8800515 	stw	r2,20(r23)
  80cd00:	31404026 	beq	r6,r5,80ce04 <_realloc_r+0x5d8>
  80cd04:	20800017 	ldw	r2,0(r4)
  80cd08:	38800015 	stw	r2,0(r7)
  80cd0c:	20c00117 	ldw	r3,4(r4)
  80cd10:	38c00115 	stw	r3,4(r7)
  80cd14:	20800217 	ldw	r2,8(r4)
  80cd18:	38800215 	stw	r2,8(r7)
  80cd1c:	d8c00117 	ldw	r3,4(sp)
  80cd20:	bf0b883a 	add	r5,r23,fp
  80cd24:	b009883a 	mov	r4,r22
  80cd28:	1f05c83a 	sub	r2,r3,fp
  80cd2c:	10800054 	ori	r2,r2,1
  80cd30:	28800115 	stw	r2,4(r5)
  80cd34:	b8c00117 	ldw	r3,4(r23)
  80cd38:	00802074 	movhi	r2,129
  80cd3c:	108fcd04 	addi	r2,r2,16180
  80cd40:	11400215 	stw	r5,8(r2)
  80cd44:	18c0004c 	andi	r3,r3,1
  80cd48:	e0c6b03a 	or	r3,fp,r3
  80cd4c:	b8c00115 	stw	r3,4(r23)
  80cd50:	080f3f80 	call	80f3f8 <__malloc_unlock>
  80cd54:	003eeb06 	br	80c904 <_realloc_r+0xd8>
  80cd58:	20800117 	ldw	r2,4(r4)
  80cd5c:	00ffff04 	movi	r3,-4
  80cd60:	800f883a 	mov	r7,r16
  80cd64:	10c4703a 	and	r2,r2,r3
  80cd68:	98a9883a 	add	r20,r19,r2
  80cd6c:	84000204 	addi	r16,r16,8
  80cd70:	003ecf06 	br	80c8b0 <_realloc_r+0x84>
  80cd74:	900b883a 	mov	r5,r18
  80cd78:	8009883a 	mov	r4,r16
  80cd7c:	080b45c0 	call	80b45c <memmove>
  80cd80:	dd000017 	ldw	r20,0(sp)
  80cd84:	b80f883a 	mov	r7,r23
  80cd88:	003ec906 	br	80c8b0 <_realloc_r+0x84>
  80cd8c:	900b883a 	mov	r5,r18
  80cd90:	8009883a 	mov	r4,r16
  80cd94:	080b45c0 	call	80b45c <memmove>
  80cd98:	b80f883a 	mov	r7,r23
  80cd9c:	003ec406 	br	80c8b0 <_realloc_r+0x84>
  80cda0:	90c00417 	ldw	r3,16(r18)
  80cda4:	89400604 	addi	r5,r17,24
  80cda8:	91000604 	addi	r4,r18,24
  80cdac:	88c00415 	stw	r3,16(r17)
  80cdb0:	90800517 	ldw	r2,20(r18)
  80cdb4:	88800515 	stw	r2,20(r17)
  80cdb8:	003f6806 	br	80cb5c <_realloc_r+0x330>
  80cdbc:	900b883a 	mov	r5,r18
  80cdc0:	8809883a 	mov	r4,r17
  80cdc4:	080b45c0 	call	80b45c <memmove>
  80cdc8:	003fd406 	br	80cd1c <_realloc_r+0x4f0>
  80cdcc:	90c00417 	ldw	r3,16(r18)
  80cdd0:	91000604 	addi	r4,r18,24
  80cdd4:	ba000804 	addi	r8,r23,32
  80cdd8:	b8c00615 	stw	r3,24(r23)
  80cddc:	90800517 	ldw	r2,20(r18)
  80cde0:	b8800715 	stw	r2,28(r23)
  80cde4:	003f1206 	br	80ca30 <_realloc_r+0x204>
  80cde8:	90c00417 	ldw	r3,16(r18)
  80cdec:	91000604 	addi	r4,r18,24
  80cdf0:	ba000804 	addi	r8,r23,32
  80cdf4:	b8c00615 	stw	r3,24(r23)
  80cdf8:	90800517 	ldw	r2,20(r18)
  80cdfc:	b8800715 	stw	r2,28(r23)
  80ce00:	003f3206 	br	80cacc <_realloc_r+0x2a0>
  80ce04:	90c00417 	ldw	r3,16(r18)
  80ce08:	91000604 	addi	r4,r18,24
  80ce0c:	b9c00804 	addi	r7,r23,32
  80ce10:	b8c00615 	stw	r3,24(r23)
  80ce14:	90800517 	ldw	r2,20(r18)
  80ce18:	b8800715 	stw	r2,28(r23)
  80ce1c:	003fb906 	br	80cd04 <_realloc_r+0x4d8>

0080ce20 <__isinfd>:
  80ce20:	200d883a 	mov	r6,r4
  80ce24:	0109c83a 	sub	r4,zero,r4
  80ce28:	2188b03a 	or	r4,r4,r6
  80ce2c:	2008d7fa 	srli	r4,r4,31
  80ce30:	00a00034 	movhi	r2,32768
  80ce34:	10bfffc4 	addi	r2,r2,-1
  80ce38:	1144703a 	and	r2,r2,r5
  80ce3c:	2088b03a 	or	r4,r4,r2
  80ce40:	009ffc34 	movhi	r2,32752
  80ce44:	1105c83a 	sub	r2,r2,r4
  80ce48:	0087c83a 	sub	r3,zero,r2
  80ce4c:	10c4b03a 	or	r2,r2,r3
  80ce50:	1004d7fa 	srli	r2,r2,31
  80ce54:	00c00044 	movi	r3,1
  80ce58:	1885c83a 	sub	r2,r3,r2
  80ce5c:	f800283a 	ret

0080ce60 <__isnand>:
  80ce60:	200d883a 	mov	r6,r4
  80ce64:	0109c83a 	sub	r4,zero,r4
  80ce68:	2188b03a 	or	r4,r4,r6
  80ce6c:	2008d7fa 	srli	r4,r4,31
  80ce70:	00a00034 	movhi	r2,32768
  80ce74:	10bfffc4 	addi	r2,r2,-1
  80ce78:	1144703a 	and	r2,r2,r5
  80ce7c:	2088b03a 	or	r4,r4,r2
  80ce80:	009ffc34 	movhi	r2,32752
  80ce84:	1105c83a 	sub	r2,r2,r4
  80ce88:	1004d7fa 	srli	r2,r2,31
  80ce8c:	f800283a 	ret

0080ce90 <strcmp>:
  80ce90:	2144b03a 	or	r2,r4,r5
  80ce94:	108000cc 	andi	r2,r2,3
  80ce98:	10001d1e 	bne	r2,zero,80cf10 <strcmp+0x80>
  80ce9c:	200f883a 	mov	r7,r4
  80cea0:	28800017 	ldw	r2,0(r5)
  80cea4:	21000017 	ldw	r4,0(r4)
  80cea8:	280d883a 	mov	r6,r5
  80ceac:	2080161e 	bne	r4,r2,80cf08 <strcmp+0x78>
  80ceb0:	023fbff4 	movhi	r8,65279
  80ceb4:	423fbfc4 	addi	r8,r8,-257
  80ceb8:	2207883a 	add	r3,r4,r8
  80cebc:	01602074 	movhi	r5,32897
  80cec0:	29602004 	addi	r5,r5,-32640
  80cec4:	1946703a 	and	r3,r3,r5
  80cec8:	0104303a 	nor	r2,zero,r4
  80cecc:	10c4703a 	and	r2,r2,r3
  80ced0:	10001c1e 	bne	r2,zero,80cf44 <strcmp+0xb4>
  80ced4:	4013883a 	mov	r9,r8
  80ced8:	2811883a 	mov	r8,r5
  80cedc:	00000106 	br	80cee4 <strcmp+0x54>
  80cee0:	1800181e 	bne	r3,zero,80cf44 <strcmp+0xb4>
  80cee4:	39c00104 	addi	r7,r7,4
  80cee8:	39000017 	ldw	r4,0(r7)
  80ceec:	31800104 	addi	r6,r6,4
  80cef0:	31400017 	ldw	r5,0(r6)
  80cef4:	2245883a 	add	r2,r4,r9
  80cef8:	1204703a 	and	r2,r2,r8
  80cefc:	0106303a 	nor	r3,zero,r4
  80cf00:	1886703a 	and	r3,r3,r2
  80cf04:	217ff626 	beq	r4,r5,80cee0 <strcmp+0x50>
  80cf08:	3809883a 	mov	r4,r7
  80cf0c:	300b883a 	mov	r5,r6
  80cf10:	20c00007 	ldb	r3,0(r4)
  80cf14:	1800051e 	bne	r3,zero,80cf2c <strcmp+0x9c>
  80cf18:	00000606 	br	80cf34 <strcmp+0xa4>
  80cf1c:	21000044 	addi	r4,r4,1
  80cf20:	20c00007 	ldb	r3,0(r4)
  80cf24:	29400044 	addi	r5,r5,1
  80cf28:	18000226 	beq	r3,zero,80cf34 <strcmp+0xa4>
  80cf2c:	28800007 	ldb	r2,0(r5)
  80cf30:	18bffa26 	beq	r3,r2,80cf1c <strcmp+0x8c>
  80cf34:	20c00003 	ldbu	r3,0(r4)
  80cf38:	28800003 	ldbu	r2,0(r5)
  80cf3c:	1885c83a 	sub	r2,r3,r2
  80cf40:	f800283a 	ret
  80cf44:	0005883a 	mov	r2,zero
  80cf48:	f800283a 	ret

0080cf4c <__swbuf_r>:
  80cf4c:	defffc04 	addi	sp,sp,-16
  80cf50:	dc400215 	stw	r17,8(sp)
  80cf54:	dc000115 	stw	r16,4(sp)
  80cf58:	dfc00315 	stw	ra,12(sp)
  80cf5c:	2023883a 	mov	r17,r4
  80cf60:	2821883a 	mov	r16,r5
  80cf64:	20000226 	beq	r4,zero,80cf70 <__swbuf_r+0x24>
  80cf68:	20800e17 	ldw	r2,56(r4)
  80cf6c:	10002f26 	beq	r2,zero,80d02c <__swbuf_r+0xe0>
  80cf70:	3080030b 	ldhu	r2,12(r6)
  80cf74:	30c00617 	ldw	r3,24(r6)
  80cf78:	1080020c 	andi	r2,r2,8
  80cf7c:	30c00215 	stw	r3,8(r6)
  80cf80:	10002226 	beq	r2,zero,80d00c <__swbuf_r+0xc0>
  80cf84:	30c00417 	ldw	r3,16(r6)
  80cf88:	18002026 	beq	r3,zero,80d00c <__swbuf_r+0xc0>
  80cf8c:	31000017 	ldw	r4,0(r6)
  80cf90:	30800517 	ldw	r2,20(r6)
  80cf94:	20c7c83a 	sub	r3,r4,r3
  80cf98:	18802f0e 	bge	r3,r2,80d058 <__swbuf_r+0x10c>
  80cf9c:	19400044 	addi	r5,r3,1
  80cfa0:	30800217 	ldw	r2,8(r6)
  80cfa4:	84003fcc 	andi	r16,r16,255
  80cfa8:	20c00044 	addi	r3,r4,1
  80cfac:	10bfffc4 	addi	r2,r2,-1
  80cfb0:	30800215 	stw	r2,8(r6)
  80cfb4:	24000005 	stb	r16,0(r4)
  80cfb8:	30800517 	ldw	r2,20(r6)
  80cfbc:	30c00015 	stw	r3,0(r6)
  80cfc0:	11400c26 	beq	r2,r5,80cff4 <__swbuf_r+0xa8>
  80cfc4:	3080030b 	ldhu	r2,12(r6)
  80cfc8:	1080004c 	andi	r2,r2,1
  80cfcc:	1005003a 	cmpeq	r2,r2,zero
  80cfd0:	10000626 	beq	r2,zero,80cfec <__swbuf_r+0xa0>
  80cfd4:	8005883a 	mov	r2,r16
  80cfd8:	dfc00317 	ldw	ra,12(sp)
  80cfdc:	dc400217 	ldw	r17,8(sp)
  80cfe0:	dc000117 	ldw	r16,4(sp)
  80cfe4:	dec00404 	addi	sp,sp,16
  80cfe8:	f800283a 	ret
  80cfec:	00800284 	movi	r2,10
  80cff0:	80bff81e 	bne	r16,r2,80cfd4 <__swbuf_r+0x88>
  80cff4:	8809883a 	mov	r4,r17
  80cff8:	300b883a 	mov	r5,r6
  80cffc:	0802bc00 	call	802bc0 <_fflush_r>
  80d000:	103ff426 	beq	r2,zero,80cfd4 <__swbuf_r+0x88>
  80d004:	043fffc4 	movi	r16,-1
  80d008:	003ff206 	br	80cfd4 <__swbuf_r+0x88>
  80d00c:	300b883a 	mov	r5,r6
  80d010:	8809883a 	mov	r4,r17
  80d014:	d9800015 	stw	r6,0(sp)
  80d018:	08086800 	call	808680 <__swsetup_r>
  80d01c:	d9800017 	ldw	r6,0(sp)
  80d020:	1000061e 	bne	r2,zero,80d03c <__swbuf_r+0xf0>
  80d024:	30c00417 	ldw	r3,16(r6)
  80d028:	003fd806 	br	80cf8c <__swbuf_r+0x40>
  80d02c:	d9800015 	stw	r6,0(sp)
  80d030:	0802e580 	call	802e58 <__sinit>
  80d034:	d9800017 	ldw	r6,0(sp)
  80d038:	003fcd06 	br	80cf70 <__swbuf_r+0x24>
  80d03c:	3080030b 	ldhu	r2,12(r6)
  80d040:	00c00244 	movi	r3,9
  80d044:	043fffc4 	movi	r16,-1
  80d048:	10801014 	ori	r2,r2,64
  80d04c:	3080030d 	sth	r2,12(r6)
  80d050:	88c00015 	stw	r3,0(r17)
  80d054:	003fdf06 	br	80cfd4 <__swbuf_r+0x88>
  80d058:	300b883a 	mov	r5,r6
  80d05c:	8809883a 	mov	r4,r17
  80d060:	d9800015 	stw	r6,0(sp)
  80d064:	0802bc00 	call	802bc0 <_fflush_r>
  80d068:	d9800017 	ldw	r6,0(sp)
  80d06c:	103fe51e 	bne	r2,zero,80d004 <__swbuf_r+0xb8>
  80d070:	31000017 	ldw	r4,0(r6)
  80d074:	01400044 	movi	r5,1
  80d078:	003fc906 	br	80cfa0 <__swbuf_r+0x54>

0080d07c <__swbuf>:
  80d07c:	01802074 	movhi	r6,129
  80d080:	3195d704 	addi	r6,r6,22364
  80d084:	2007883a 	mov	r3,r4
  80d088:	31000017 	ldw	r4,0(r6)
  80d08c:	280d883a 	mov	r6,r5
  80d090:	180b883a 	mov	r5,r3
  80d094:	080cf4c1 	jmpi	80cf4c <__swbuf_r>

0080d098 <_calloc_r>:
  80d098:	defffe04 	addi	sp,sp,-8
  80d09c:	dc400015 	stw	r17,0(sp)
  80d0a0:	2023883a 	mov	r17,r4
  80d0a4:	2809883a 	mov	r4,r5
  80d0a8:	300b883a 	mov	r5,r6
  80d0ac:	dfc00115 	stw	ra,4(sp)
  80d0b0:	0802a640 	call	802a64 <__mulsi3>
  80d0b4:	100b883a 	mov	r5,r2
  80d0b8:	8809883a 	mov	r4,r17
  80d0bc:	0803e7c0 	call	803e7c <_malloc_r>
  80d0c0:	1023883a 	mov	r17,r2
  80d0c4:	01c00904 	movi	r7,36
  80d0c8:	10000d26 	beq	r2,zero,80d100 <_calloc_r+0x68>
  80d0cc:	10ffff17 	ldw	r3,-4(r2)
  80d0d0:	1009883a 	mov	r4,r2
  80d0d4:	00bfff04 	movi	r2,-4
  80d0d8:	1886703a 	and	r3,r3,r2
  80d0dc:	1887883a 	add	r3,r3,r2
  80d0e0:	180d883a 	mov	r6,r3
  80d0e4:	000b883a 	mov	r5,zero
  80d0e8:	38c01736 	bltu	r7,r3,80d148 <_calloc_r+0xb0>
  80d0ec:	008004c4 	movi	r2,19
  80d0f0:	10c00836 	bltu	r2,r3,80d114 <_calloc_r+0x7c>
  80d0f4:	20000215 	stw	zero,8(r4)
  80d0f8:	20000015 	stw	zero,0(r4)
  80d0fc:	20000115 	stw	zero,4(r4)
  80d100:	8805883a 	mov	r2,r17
  80d104:	dfc00117 	ldw	ra,4(sp)
  80d108:	dc400017 	ldw	r17,0(sp)
  80d10c:	dec00204 	addi	sp,sp,8
  80d110:	f800283a 	ret
  80d114:	008006c4 	movi	r2,27
  80d118:	88000015 	stw	zero,0(r17)
  80d11c:	88000115 	stw	zero,4(r17)
  80d120:	89000204 	addi	r4,r17,8
  80d124:	10fff32e 	bgeu	r2,r3,80d0f4 <_calloc_r+0x5c>
  80d128:	88000215 	stw	zero,8(r17)
  80d12c:	88000315 	stw	zero,12(r17)
  80d130:	89000404 	addi	r4,r17,16
  80d134:	19ffef1e 	bne	r3,r7,80d0f4 <_calloc_r+0x5c>
  80d138:	89000604 	addi	r4,r17,24
  80d13c:	88000415 	stw	zero,16(r17)
  80d140:	88000515 	stw	zero,20(r17)
  80d144:	003feb06 	br	80d0f4 <_calloc_r+0x5c>
  80d148:	08045bc0 	call	8045bc <memset>
  80d14c:	8805883a 	mov	r2,r17
  80d150:	dfc00117 	ldw	ra,4(sp)
  80d154:	dc400017 	ldw	r17,0(sp)
  80d158:	dec00204 	addi	sp,sp,8
  80d15c:	f800283a 	ret

0080d160 <__fixunsdfsi>:
  80d160:	defffb04 	addi	sp,sp,-20
  80d164:	dc400115 	stw	r17,4(sp)
  80d168:	dc000015 	stw	r16,0(sp)
  80d16c:	04507834 	movhi	r17,16864
  80d170:	0021883a 	mov	r16,zero
  80d174:	800d883a 	mov	r6,r16
  80d178:	880f883a 	mov	r7,r17
  80d17c:	dcc00315 	stw	r19,12(sp)
  80d180:	dc800215 	stw	r18,8(sp)
  80d184:	2827883a 	mov	r19,r5
  80d188:	2025883a 	mov	r18,r4
  80d18c:	dfc00415 	stw	ra,16(sp)
  80d190:	080e1d00 	call	80e1d0 <__gedf2>
  80d194:	000d883a 	mov	r6,zero
  80d198:	880f883a 	mov	r7,r17
  80d19c:	980b883a 	mov	r5,r19
  80d1a0:	9009883a 	mov	r4,r18
  80d1a4:	10000d16 	blt	r2,zero,80d1dc <__fixunsdfsi+0x7c>
  80d1a8:	0801c980 	call	801c98 <__subdf3>
  80d1ac:	180b883a 	mov	r5,r3
  80d1b0:	1009883a 	mov	r4,r2
  80d1b4:	080e4600 	call	80e460 <__fixdfsi>
  80d1b8:	00e00034 	movhi	r3,32768
  80d1bc:	10c5883a 	add	r2,r2,r3
  80d1c0:	dfc00417 	ldw	ra,16(sp)
  80d1c4:	dcc00317 	ldw	r19,12(sp)
  80d1c8:	dc800217 	ldw	r18,8(sp)
  80d1cc:	dc400117 	ldw	r17,4(sp)
  80d1d0:	dc000017 	ldw	r16,0(sp)
  80d1d4:	dec00504 	addi	sp,sp,20
  80d1d8:	f800283a 	ret
  80d1dc:	980b883a 	mov	r5,r19
  80d1e0:	9009883a 	mov	r4,r18
  80d1e4:	080e4600 	call	80e460 <__fixdfsi>
  80d1e8:	dfc00417 	ldw	ra,16(sp)
  80d1ec:	dcc00317 	ldw	r19,12(sp)
  80d1f0:	dc800217 	ldw	r18,8(sp)
  80d1f4:	dc400117 	ldw	r17,4(sp)
  80d1f8:	dc000017 	ldw	r16,0(sp)
  80d1fc:	dec00504 	addi	sp,sp,20
  80d200:	f800283a 	ret

0080d204 <__udivdi3>:
  80d204:	defff104 	addi	sp,sp,-60
  80d208:	0015883a 	mov	r10,zero
  80d20c:	2005883a 	mov	r2,r4
  80d210:	3011883a 	mov	r8,r6
  80d214:	df000d15 	stw	fp,52(sp)
  80d218:	dd400a15 	stw	r21,40(sp)
  80d21c:	dcc00815 	stw	r19,32(sp)
  80d220:	dfc00e15 	stw	ra,56(sp)
  80d224:	ddc00c15 	stw	r23,48(sp)
  80d228:	dd800b15 	stw	r22,44(sp)
  80d22c:	dd000915 	stw	r20,36(sp)
  80d230:	dc800715 	stw	r18,28(sp)
  80d234:	dc400615 	stw	r17,24(sp)
  80d238:	dc000515 	stw	r16,20(sp)
  80d23c:	da800315 	stw	r10,12(sp)
  80d240:	4027883a 	mov	r19,r8
  80d244:	1039883a 	mov	fp,r2
  80d248:	282b883a 	mov	r21,r5
  80d24c:	da800415 	stw	r10,16(sp)
  80d250:	3800401e 	bne	r7,zero,80d354 <__udivdi3+0x150>
  80d254:	2a006536 	bltu	r5,r8,80d3ec <__udivdi3+0x1e8>
  80d258:	4000b526 	beq	r8,zero,80d530 <__udivdi3+0x32c>
  80d25c:	00bfffd4 	movui	r2,65535
  80d260:	14c0ad36 	bltu	r2,r19,80d518 <__udivdi3+0x314>
  80d264:	00803fc4 	movi	r2,255
  80d268:	14c15e36 	bltu	r2,r19,80d7e4 <__udivdi3+0x5e0>
  80d26c:	000b883a 	mov	r5,zero
  80d270:	0005883a 	mov	r2,zero
  80d274:	9884d83a 	srl	r2,r19,r2
  80d278:	01002074 	movhi	r4,129
  80d27c:	210e7904 	addi	r4,r4,14820
  80d280:	01800804 	movi	r6,32
  80d284:	1105883a 	add	r2,r2,r4
  80d288:	10c00003 	ldbu	r3,0(r2)
  80d28c:	28c7883a 	add	r3,r5,r3
  80d290:	30e9c83a 	sub	r20,r6,r3
  80d294:	a0010a1e 	bne	r20,zero,80d6c0 <__udivdi3+0x4bc>
  80d298:	982ed43a 	srli	r23,r19,16
  80d29c:	acebc83a 	sub	r21,r21,r19
  80d2a0:	9dbfffcc 	andi	r22,r19,65535
  80d2a4:	05000044 	movi	r20,1
  80d2a8:	a809883a 	mov	r4,r21
  80d2ac:	b80b883a 	mov	r5,r23
  80d2b0:	08024e40 	call	8024e4 <__udivsi3>
  80d2b4:	100b883a 	mov	r5,r2
  80d2b8:	b009883a 	mov	r4,r22
  80d2bc:	1021883a 	mov	r16,r2
  80d2c0:	0802a640 	call	802a64 <__mulsi3>
  80d2c4:	a809883a 	mov	r4,r21
  80d2c8:	b80b883a 	mov	r5,r23
  80d2cc:	1023883a 	mov	r17,r2
  80d2d0:	08024ec0 	call	8024ec <__umodsi3>
  80d2d4:	1004943a 	slli	r2,r2,16
  80d2d8:	e006d43a 	srli	r3,fp,16
  80d2dc:	10c4b03a 	or	r2,r2,r3
  80d2e0:	1440042e 	bgeu	r2,r17,80d2f4 <__udivdi3+0xf0>
  80d2e4:	14c5883a 	add	r2,r2,r19
  80d2e8:	843fffc4 	addi	r16,r16,-1
  80d2ec:	14c00136 	bltu	r2,r19,80d2f4 <__udivdi3+0xf0>
  80d2f0:	14415c36 	bltu	r2,r17,80d864 <__udivdi3+0x660>
  80d2f4:	1463c83a 	sub	r17,r2,r17
  80d2f8:	8809883a 	mov	r4,r17
  80d2fc:	b80b883a 	mov	r5,r23
  80d300:	08024e40 	call	8024e4 <__udivsi3>
  80d304:	100b883a 	mov	r5,r2
  80d308:	b009883a 	mov	r4,r22
  80d30c:	102b883a 	mov	r21,r2
  80d310:	0802a640 	call	802a64 <__mulsi3>
  80d314:	8809883a 	mov	r4,r17
  80d318:	b80b883a 	mov	r5,r23
  80d31c:	1025883a 	mov	r18,r2
  80d320:	08024ec0 	call	8024ec <__umodsi3>
  80d324:	1004943a 	slli	r2,r2,16
  80d328:	e0ffffcc 	andi	r3,fp,65535
  80d32c:	10c4b03a 	or	r2,r2,r3
  80d330:	1480042e 	bgeu	r2,r18,80d344 <__udivdi3+0x140>
  80d334:	9885883a 	add	r2,r19,r2
  80d338:	ad7fffc4 	addi	r21,r21,-1
  80d33c:	14c00136 	bltu	r2,r19,80d344 <__udivdi3+0x140>
  80d340:	14813c36 	bltu	r2,r18,80d834 <__udivdi3+0x630>
  80d344:	8004943a 	slli	r2,r16,16
  80d348:	a009883a 	mov	r4,r20
  80d34c:	a884b03a 	or	r2,r21,r2
  80d350:	00001506 	br	80d3a8 <__udivdi3+0x1a4>
  80d354:	380d883a 	mov	r6,r7
  80d358:	29c06c36 	bltu	r5,r7,80d50c <__udivdi3+0x308>
  80d35c:	00bfffd4 	movui	r2,65535
  80d360:	11c06436 	bltu	r2,r7,80d4f4 <__udivdi3+0x2f0>
  80d364:	00803fc4 	movi	r2,255
  80d368:	11c11836 	bltu	r2,r7,80d7cc <__udivdi3+0x5c8>
  80d36c:	000b883a 	mov	r5,zero
  80d370:	0005883a 	mov	r2,zero
  80d374:	3084d83a 	srl	r2,r6,r2
  80d378:	01002074 	movhi	r4,129
  80d37c:	210e7904 	addi	r4,r4,14820
  80d380:	01c00804 	movi	r7,32
  80d384:	1105883a 	add	r2,r2,r4
  80d388:	10c00003 	ldbu	r3,0(r2)
  80d38c:	28c7883a 	add	r3,r5,r3
  80d390:	38edc83a 	sub	r22,r7,r3
  80d394:	b000731e 	bne	r22,zero,80d564 <__udivdi3+0x360>
  80d398:	35400136 	bltu	r6,r21,80d3a0 <__udivdi3+0x19c>
  80d39c:	e4c05b36 	bltu	fp,r19,80d50c <__udivdi3+0x308>
  80d3a0:	00800044 	movi	r2,1
  80d3a4:	0009883a 	mov	r4,zero
  80d3a8:	d8800315 	stw	r2,12(sp)
  80d3ac:	d9400317 	ldw	r5,12(sp)
  80d3b0:	2007883a 	mov	r3,r4
  80d3b4:	d9000415 	stw	r4,16(sp)
  80d3b8:	2805883a 	mov	r2,r5
  80d3bc:	dfc00e17 	ldw	ra,56(sp)
  80d3c0:	df000d17 	ldw	fp,52(sp)
  80d3c4:	ddc00c17 	ldw	r23,48(sp)
  80d3c8:	dd800b17 	ldw	r22,44(sp)
  80d3cc:	dd400a17 	ldw	r21,40(sp)
  80d3d0:	dd000917 	ldw	r20,36(sp)
  80d3d4:	dcc00817 	ldw	r19,32(sp)
  80d3d8:	dc800717 	ldw	r18,28(sp)
  80d3dc:	dc400617 	ldw	r17,24(sp)
  80d3e0:	dc000517 	ldw	r16,20(sp)
  80d3e4:	dec00f04 	addi	sp,sp,60
  80d3e8:	f800283a 	ret
  80d3ec:	00bfffd4 	movui	r2,65535
  80d3f0:	12005636 	bltu	r2,r8,80d54c <__udivdi3+0x348>
  80d3f4:	00803fc4 	movi	r2,255
  80d3f8:	12010036 	bltu	r2,r8,80d7fc <__udivdi3+0x5f8>
  80d3fc:	000b883a 	mov	r5,zero
  80d400:	0005883a 	mov	r2,zero
  80d404:	9884d83a 	srl	r2,r19,r2
  80d408:	01002074 	movhi	r4,129
  80d40c:	210e7904 	addi	r4,r4,14820
  80d410:	01800804 	movi	r6,32
  80d414:	1105883a 	add	r2,r2,r4
  80d418:	10c00003 	ldbu	r3,0(r2)
  80d41c:	28c7883a 	add	r3,r5,r3
  80d420:	30cbc83a 	sub	r5,r6,r3
  80d424:	28000626 	beq	r5,zero,80d440 <__udivdi3+0x23c>
  80d428:	3145c83a 	sub	r2,r6,r5
  80d42c:	e084d83a 	srl	r2,fp,r2
  80d430:	a946983a 	sll	r3,r21,r5
  80d434:	e178983a 	sll	fp,fp,r5
  80d438:	9966983a 	sll	r19,r19,r5
  80d43c:	18aab03a 	or	r21,r3,r2
  80d440:	982ed43a 	srli	r23,r19,16
  80d444:	a809883a 	mov	r4,r21
  80d448:	9cbfffcc 	andi	r18,r19,65535
  80d44c:	b80b883a 	mov	r5,r23
  80d450:	08024e40 	call	8024e4 <__udivsi3>
  80d454:	100b883a 	mov	r5,r2
  80d458:	9009883a 	mov	r4,r18
  80d45c:	1021883a 	mov	r16,r2
  80d460:	0802a640 	call	802a64 <__mulsi3>
  80d464:	a809883a 	mov	r4,r21
  80d468:	b80b883a 	mov	r5,r23
  80d46c:	1023883a 	mov	r17,r2
  80d470:	08024ec0 	call	8024ec <__umodsi3>
  80d474:	1004943a 	slli	r2,r2,16
  80d478:	e006d43a 	srli	r3,fp,16
  80d47c:	10c4b03a 	or	r2,r2,r3
  80d480:	1440042e 	bgeu	r2,r17,80d494 <__udivdi3+0x290>
  80d484:	14c5883a 	add	r2,r2,r19
  80d488:	843fffc4 	addi	r16,r16,-1
  80d48c:	14c00136 	bltu	r2,r19,80d494 <__udivdi3+0x290>
  80d490:	1440ea36 	bltu	r2,r17,80d83c <__udivdi3+0x638>
  80d494:	1463c83a 	sub	r17,r2,r17
  80d498:	8809883a 	mov	r4,r17
  80d49c:	b80b883a 	mov	r5,r23
  80d4a0:	08024e40 	call	8024e4 <__udivsi3>
  80d4a4:	100b883a 	mov	r5,r2
  80d4a8:	9009883a 	mov	r4,r18
  80d4ac:	102b883a 	mov	r21,r2
  80d4b0:	0802a640 	call	802a64 <__mulsi3>
  80d4b4:	8809883a 	mov	r4,r17
  80d4b8:	b80b883a 	mov	r5,r23
  80d4bc:	1025883a 	mov	r18,r2
  80d4c0:	08024ec0 	call	8024ec <__umodsi3>
  80d4c4:	1004943a 	slli	r2,r2,16
  80d4c8:	e0ffffcc 	andi	r3,fp,65535
  80d4cc:	10c4b03a 	or	r2,r2,r3
  80d4d0:	1480042e 	bgeu	r2,r18,80d4e4 <__udivdi3+0x2e0>
  80d4d4:	9885883a 	add	r2,r19,r2
  80d4d8:	ad7fffc4 	addi	r21,r21,-1
  80d4dc:	14c00136 	bltu	r2,r19,80d4e4 <__udivdi3+0x2e0>
  80d4e0:	1480d936 	bltu	r2,r18,80d848 <__udivdi3+0x644>
  80d4e4:	8004943a 	slli	r2,r16,16
  80d4e8:	0009883a 	mov	r4,zero
  80d4ec:	a884b03a 	or	r2,r21,r2
  80d4f0:	003fad06 	br	80d3a8 <__udivdi3+0x1a4>
  80d4f4:	00804034 	movhi	r2,256
  80d4f8:	10bfffc4 	addi	r2,r2,-1
  80d4fc:	11c0b636 	bltu	r2,r7,80d7d8 <__udivdi3+0x5d4>
  80d500:	01400404 	movi	r5,16
  80d504:	2805883a 	mov	r2,r5
  80d508:	003f9a06 	br	80d374 <__udivdi3+0x170>
  80d50c:	0005883a 	mov	r2,zero
  80d510:	0009883a 	mov	r4,zero
  80d514:	003fa406 	br	80d3a8 <__udivdi3+0x1a4>
  80d518:	00804034 	movhi	r2,256
  80d51c:	10bfffc4 	addi	r2,r2,-1
  80d520:	14c0b336 	bltu	r2,r19,80d7f0 <__udivdi3+0x5ec>
  80d524:	01400404 	movi	r5,16
  80d528:	2805883a 	mov	r2,r5
  80d52c:	003f5106 	br	80d274 <__udivdi3+0x70>
  80d530:	01000044 	movi	r4,1
  80d534:	000b883a 	mov	r5,zero
  80d538:	08024e40 	call	8024e4 <__udivsi3>
  80d53c:	1027883a 	mov	r19,r2
  80d540:	00bfffd4 	movui	r2,65535
  80d544:	14fff436 	bltu	r2,r19,80d518 <__udivdi3+0x314>
  80d548:	003f4606 	br	80d264 <__udivdi3+0x60>
  80d54c:	00804034 	movhi	r2,256
  80d550:	10bfffc4 	addi	r2,r2,-1
  80d554:	1200ac36 	bltu	r2,r8,80d808 <__udivdi3+0x604>
  80d558:	01400404 	movi	r5,16
  80d55c:	2805883a 	mov	r2,r5
  80d560:	003fa806 	br	80d404 <__udivdi3+0x200>
  80d564:	3d85c83a 	sub	r2,r7,r22
  80d568:	3588983a 	sll	r4,r6,r22
  80d56c:	9886d83a 	srl	r3,r19,r2
  80d570:	a8a2d83a 	srl	r17,r21,r2
  80d574:	e084d83a 	srl	r2,fp,r2
  80d578:	20eeb03a 	or	r23,r4,r3
  80d57c:	b824d43a 	srli	r18,r23,16
  80d580:	ad86983a 	sll	r3,r21,r22
  80d584:	8809883a 	mov	r4,r17
  80d588:	900b883a 	mov	r5,r18
  80d58c:	1886b03a 	or	r3,r3,r2
  80d590:	d8c00115 	stw	r3,4(sp)
  80d594:	bc3fffcc 	andi	r16,r23,65535
  80d598:	08024e40 	call	8024e4 <__udivsi3>
  80d59c:	100b883a 	mov	r5,r2
  80d5a0:	8009883a 	mov	r4,r16
  80d5a4:	1029883a 	mov	r20,r2
  80d5a8:	0802a640 	call	802a64 <__mulsi3>
  80d5ac:	900b883a 	mov	r5,r18
  80d5b0:	8809883a 	mov	r4,r17
  80d5b4:	102b883a 	mov	r21,r2
  80d5b8:	08024ec0 	call	8024ec <__umodsi3>
  80d5bc:	d9400117 	ldw	r5,4(sp)
  80d5c0:	1004943a 	slli	r2,r2,16
  80d5c4:	9da6983a 	sll	r19,r19,r22
  80d5c8:	2806d43a 	srli	r3,r5,16
  80d5cc:	10c4b03a 	or	r2,r2,r3
  80d5d0:	1540032e 	bgeu	r2,r21,80d5e0 <__udivdi3+0x3dc>
  80d5d4:	15c5883a 	add	r2,r2,r23
  80d5d8:	a53fffc4 	addi	r20,r20,-1
  80d5dc:	15c0912e 	bgeu	r2,r23,80d824 <__udivdi3+0x620>
  80d5e0:	1563c83a 	sub	r17,r2,r21
  80d5e4:	8809883a 	mov	r4,r17
  80d5e8:	900b883a 	mov	r5,r18
  80d5ec:	08024e40 	call	8024e4 <__udivsi3>
  80d5f0:	100b883a 	mov	r5,r2
  80d5f4:	8009883a 	mov	r4,r16
  80d5f8:	102b883a 	mov	r21,r2
  80d5fc:	0802a640 	call	802a64 <__mulsi3>
  80d600:	8809883a 	mov	r4,r17
  80d604:	900b883a 	mov	r5,r18
  80d608:	1021883a 	mov	r16,r2
  80d60c:	08024ec0 	call	8024ec <__umodsi3>
  80d610:	da800117 	ldw	r10,4(sp)
  80d614:	1004943a 	slli	r2,r2,16
  80d618:	50ffffcc 	andi	r3,r10,65535
  80d61c:	10c6b03a 	or	r3,r2,r3
  80d620:	1c00032e 	bgeu	r3,r16,80d630 <__udivdi3+0x42c>
  80d624:	1dc7883a 	add	r3,r3,r23
  80d628:	ad7fffc4 	addi	r21,r21,-1
  80d62c:	1dc0792e 	bgeu	r3,r23,80d814 <__udivdi3+0x610>
  80d630:	a004943a 	slli	r2,r20,16
  80d634:	982ed43a 	srli	r23,r19,16
  80d638:	9cffffcc 	andi	r19,r19,65535
  80d63c:	a8a4b03a 	or	r18,r21,r2
  80d640:	947fffcc 	andi	r17,r18,65535
  80d644:	902ad43a 	srli	r21,r18,16
  80d648:	8809883a 	mov	r4,r17
  80d64c:	980b883a 	mov	r5,r19
  80d650:	1c21c83a 	sub	r16,r3,r16
  80d654:	0802a640 	call	802a64 <__mulsi3>
  80d658:	8809883a 	mov	r4,r17
  80d65c:	b80b883a 	mov	r5,r23
  80d660:	1029883a 	mov	r20,r2
  80d664:	0802a640 	call	802a64 <__mulsi3>
  80d668:	980b883a 	mov	r5,r19
  80d66c:	a809883a 	mov	r4,r21
  80d670:	1023883a 	mov	r17,r2
  80d674:	0802a640 	call	802a64 <__mulsi3>
  80d678:	a809883a 	mov	r4,r21
  80d67c:	b80b883a 	mov	r5,r23
  80d680:	1027883a 	mov	r19,r2
  80d684:	0802a640 	call	802a64 <__mulsi3>
  80d688:	1009883a 	mov	r4,r2
  80d68c:	a004d43a 	srli	r2,r20,16
  80d690:	8ce3883a 	add	r17,r17,r19
  80d694:	1447883a 	add	r3,r2,r17
  80d698:	1cc0022e 	bgeu	r3,r19,80d6a4 <__udivdi3+0x4a0>
  80d69c:	00800074 	movhi	r2,1
  80d6a0:	2089883a 	add	r4,r4,r2
  80d6a4:	1804d43a 	srli	r2,r3,16
  80d6a8:	2085883a 	add	r2,r4,r2
  80d6ac:	80804436 	bltu	r16,r2,80d7c0 <__udivdi3+0x5bc>
  80d6b0:	80803e26 	beq	r16,r2,80d7ac <__udivdi3+0x5a8>
  80d6b4:	9005883a 	mov	r2,r18
  80d6b8:	0009883a 	mov	r4,zero
  80d6bc:	003f3a06 	br	80d3a8 <__udivdi3+0x1a4>
  80d6c0:	9d26983a 	sll	r19,r19,r20
  80d6c4:	3505c83a 	sub	r2,r6,r20
  80d6c8:	a8a2d83a 	srl	r17,r21,r2
  80d6cc:	982ed43a 	srli	r23,r19,16
  80d6d0:	e084d83a 	srl	r2,fp,r2
  80d6d4:	ad06983a 	sll	r3,r21,r20
  80d6d8:	8809883a 	mov	r4,r17
  80d6dc:	b80b883a 	mov	r5,r23
  80d6e0:	1886b03a 	or	r3,r3,r2
  80d6e4:	d8c00015 	stw	r3,0(sp)
  80d6e8:	9dbfffcc 	andi	r22,r19,65535
  80d6ec:	08024e40 	call	8024e4 <__udivsi3>
  80d6f0:	100b883a 	mov	r5,r2
  80d6f4:	b009883a 	mov	r4,r22
  80d6f8:	d8800215 	stw	r2,8(sp)
  80d6fc:	0802a640 	call	802a64 <__mulsi3>
  80d700:	8809883a 	mov	r4,r17
  80d704:	b80b883a 	mov	r5,r23
  80d708:	102b883a 	mov	r21,r2
  80d70c:	08024ec0 	call	8024ec <__umodsi3>
  80d710:	d9000017 	ldw	r4,0(sp)
  80d714:	1004943a 	slli	r2,r2,16
  80d718:	2006d43a 	srli	r3,r4,16
  80d71c:	10c4b03a 	or	r2,r2,r3
  80d720:	1540052e 	bgeu	r2,r21,80d738 <__udivdi3+0x534>
  80d724:	d9400217 	ldw	r5,8(sp)
  80d728:	14c5883a 	add	r2,r2,r19
  80d72c:	297fffc4 	addi	r5,r5,-1
  80d730:	d9400215 	stw	r5,8(sp)
  80d734:	14c0462e 	bgeu	r2,r19,80d850 <__udivdi3+0x64c>
  80d738:	1563c83a 	sub	r17,r2,r21
  80d73c:	8809883a 	mov	r4,r17
  80d740:	b80b883a 	mov	r5,r23
  80d744:	08024e40 	call	8024e4 <__udivsi3>
  80d748:	100b883a 	mov	r5,r2
  80d74c:	b009883a 	mov	r4,r22
  80d750:	1025883a 	mov	r18,r2
  80d754:	0802a640 	call	802a64 <__mulsi3>
  80d758:	8809883a 	mov	r4,r17
  80d75c:	b80b883a 	mov	r5,r23
  80d760:	1021883a 	mov	r16,r2
  80d764:	08024ec0 	call	8024ec <__umodsi3>
  80d768:	da800017 	ldw	r10,0(sp)
  80d76c:	1004943a 	slli	r2,r2,16
  80d770:	50ffffcc 	andi	r3,r10,65535
  80d774:	10c6b03a 	or	r3,r2,r3
  80d778:	1c00062e 	bgeu	r3,r16,80d794 <__udivdi3+0x590>
  80d77c:	1cc7883a 	add	r3,r3,r19
  80d780:	94bfffc4 	addi	r18,r18,-1
  80d784:	1cc00336 	bltu	r3,r19,80d794 <__udivdi3+0x590>
  80d788:	1c00022e 	bgeu	r3,r16,80d794 <__udivdi3+0x590>
  80d78c:	94bfffc4 	addi	r18,r18,-1
  80d790:	1cc7883a 	add	r3,r3,r19
  80d794:	d9000217 	ldw	r4,8(sp)
  80d798:	e538983a 	sll	fp,fp,r20
  80d79c:	1c2bc83a 	sub	r21,r3,r16
  80d7a0:	2004943a 	slli	r2,r4,16
  80d7a4:	90a8b03a 	or	r20,r18,r2
  80d7a8:	003ebf06 	br	80d2a8 <__udivdi3+0xa4>
  80d7ac:	1804943a 	slli	r2,r3,16
  80d7b0:	e588983a 	sll	r4,fp,r22
  80d7b4:	a0ffffcc 	andi	r3,r20,65535
  80d7b8:	10c5883a 	add	r2,r2,r3
  80d7bc:	20bfbd2e 	bgeu	r4,r2,80d6b4 <__udivdi3+0x4b0>
  80d7c0:	90bfffc4 	addi	r2,r18,-1
  80d7c4:	0009883a 	mov	r4,zero
  80d7c8:	003ef706 	br	80d3a8 <__udivdi3+0x1a4>
  80d7cc:	01400204 	movi	r5,8
  80d7d0:	2805883a 	mov	r2,r5
  80d7d4:	003ee706 	br	80d374 <__udivdi3+0x170>
  80d7d8:	01400604 	movi	r5,24
  80d7dc:	2805883a 	mov	r2,r5
  80d7e0:	003ee406 	br	80d374 <__udivdi3+0x170>
  80d7e4:	01400204 	movi	r5,8
  80d7e8:	2805883a 	mov	r2,r5
  80d7ec:	003ea106 	br	80d274 <__udivdi3+0x70>
  80d7f0:	01400604 	movi	r5,24
  80d7f4:	2805883a 	mov	r2,r5
  80d7f8:	003e9e06 	br	80d274 <__udivdi3+0x70>
  80d7fc:	01400204 	movi	r5,8
  80d800:	2805883a 	mov	r2,r5
  80d804:	003eff06 	br	80d404 <__udivdi3+0x200>
  80d808:	01400604 	movi	r5,24
  80d80c:	2805883a 	mov	r2,r5
  80d810:	003efc06 	br	80d404 <__udivdi3+0x200>
  80d814:	1c3f862e 	bgeu	r3,r16,80d630 <__udivdi3+0x42c>
  80d818:	1dc7883a 	add	r3,r3,r23
  80d81c:	ad7fffc4 	addi	r21,r21,-1
  80d820:	003f8306 	br	80d630 <__udivdi3+0x42c>
  80d824:	157f6e2e 	bgeu	r2,r21,80d5e0 <__udivdi3+0x3dc>
  80d828:	a53fffc4 	addi	r20,r20,-1
  80d82c:	15c5883a 	add	r2,r2,r23
  80d830:	003f6b06 	br	80d5e0 <__udivdi3+0x3dc>
  80d834:	ad7fffc4 	addi	r21,r21,-1
  80d838:	003ec206 	br	80d344 <__udivdi3+0x140>
  80d83c:	843fffc4 	addi	r16,r16,-1
  80d840:	14c5883a 	add	r2,r2,r19
  80d844:	003f1306 	br	80d494 <__udivdi3+0x290>
  80d848:	ad7fffc4 	addi	r21,r21,-1
  80d84c:	003f2506 	br	80d4e4 <__udivdi3+0x2e0>
  80d850:	157fb92e 	bgeu	r2,r21,80d738 <__udivdi3+0x534>
  80d854:	297fffc4 	addi	r5,r5,-1
  80d858:	14c5883a 	add	r2,r2,r19
  80d85c:	d9400215 	stw	r5,8(sp)
  80d860:	003fb506 	br	80d738 <__udivdi3+0x534>
  80d864:	843fffc4 	addi	r16,r16,-1
  80d868:	14c5883a 	add	r2,r2,r19
  80d86c:	003ea106 	br	80d2f4 <__udivdi3+0xf0>

0080d870 <__umoddi3>:
  80d870:	defff004 	addi	sp,sp,-64
  80d874:	3011883a 	mov	r8,r6
  80d878:	000d883a 	mov	r6,zero
  80d87c:	dd400b15 	stw	r21,44(sp)
  80d880:	dcc00915 	stw	r19,36(sp)
  80d884:	dc000615 	stw	r16,24(sp)
  80d888:	dfc00f15 	stw	ra,60(sp)
  80d88c:	df000e15 	stw	fp,56(sp)
  80d890:	ddc00d15 	stw	r23,52(sp)
  80d894:	dd800c15 	stw	r22,48(sp)
  80d898:	dd000a15 	stw	r20,40(sp)
  80d89c:	dc800815 	stw	r18,32(sp)
  80d8a0:	dc400715 	stw	r17,28(sp)
  80d8a4:	2817883a 	mov	r11,r5
  80d8a8:	d9800415 	stw	r6,16(sp)
  80d8ac:	4027883a 	mov	r19,r8
  80d8b0:	d9800515 	stw	r6,20(sp)
  80d8b4:	2021883a 	mov	r16,r4
  80d8b8:	282b883a 	mov	r21,r5
  80d8bc:	38002c1e 	bne	r7,zero,80d970 <__umoddi3+0x100>
  80d8c0:	2a005636 	bltu	r5,r8,80da1c <__umoddi3+0x1ac>
  80d8c4:	40009a26 	beq	r8,zero,80db30 <__umoddi3+0x2c0>
  80d8c8:	00bfffd4 	movui	r2,65535
  80d8cc:	14c09236 	bltu	r2,r19,80db18 <__umoddi3+0x2a8>
  80d8d0:	00803fc4 	movi	r2,255
  80d8d4:	14c15c36 	bltu	r2,r19,80de48 <__umoddi3+0x5d8>
  80d8d8:	000b883a 	mov	r5,zero
  80d8dc:	0005883a 	mov	r2,zero
  80d8e0:	9884d83a 	srl	r2,r19,r2
  80d8e4:	01002074 	movhi	r4,129
  80d8e8:	210e7904 	addi	r4,r4,14820
  80d8ec:	01800804 	movi	r6,32
  80d8f0:	1105883a 	add	r2,r2,r4
  80d8f4:	10c00003 	ldbu	r3,0(r2)
  80d8f8:	28c7883a 	add	r3,r5,r3
  80d8fc:	30e5c83a 	sub	r18,r6,r3
  80d900:	9000a41e 	bne	r18,zero,80db94 <__umoddi3+0x324>
  80d904:	982ed43a 	srli	r23,r19,16
  80d908:	acebc83a 	sub	r21,r21,r19
  80d90c:	9d3fffcc 	andi	r20,r19,65535
  80d910:	002d883a 	mov	r22,zero
  80d914:	a809883a 	mov	r4,r21
  80d918:	b80b883a 	mov	r5,r23
  80d91c:	08024e40 	call	8024e4 <__udivsi3>
  80d920:	100b883a 	mov	r5,r2
  80d924:	a009883a 	mov	r4,r20
  80d928:	0802a640 	call	802a64 <__mulsi3>
  80d92c:	a809883a 	mov	r4,r21
  80d930:	b80b883a 	mov	r5,r23
  80d934:	1023883a 	mov	r17,r2
  80d938:	08024ec0 	call	8024ec <__umodsi3>
  80d93c:	1004943a 	slli	r2,r2,16
  80d940:	8006d43a 	srli	r3,r16,16
  80d944:	10c4b03a 	or	r2,r2,r3
  80d948:	1440032e 	bgeu	r2,r17,80d958 <__umoddi3+0xe8>
  80d94c:	14c5883a 	add	r2,r2,r19
  80d950:	14c00136 	bltu	r2,r19,80d958 <__umoddi3+0xe8>
  80d954:	14415836 	bltu	r2,r17,80deb8 <__umoddi3+0x648>
  80d958:	1463c83a 	sub	r17,r2,r17
  80d95c:	8809883a 	mov	r4,r17
  80d960:	b80b883a 	mov	r5,r23
  80d964:	08024e40 	call	8024e4 <__udivsi3>
  80d968:	a009883a 	mov	r4,r20
  80d96c:	00005306 	br	80dabc <__umoddi3+0x24c>
  80d970:	380d883a 	mov	r6,r7
  80d974:	29c0132e 	bgeu	r5,r7,80d9c4 <__umoddi3+0x154>
  80d978:	d9000415 	stw	r4,16(sp)
  80d97c:	d9400515 	stw	r5,20(sp)
  80d980:	d9400417 	ldw	r5,16(sp)
  80d984:	5813883a 	mov	r9,r11
  80d988:	2811883a 	mov	r8,r5
  80d98c:	4005883a 	mov	r2,r8
  80d990:	4807883a 	mov	r3,r9
  80d994:	dfc00f17 	ldw	ra,60(sp)
  80d998:	df000e17 	ldw	fp,56(sp)
  80d99c:	ddc00d17 	ldw	r23,52(sp)
  80d9a0:	dd800c17 	ldw	r22,48(sp)
  80d9a4:	dd400b17 	ldw	r21,44(sp)
  80d9a8:	dd000a17 	ldw	r20,40(sp)
  80d9ac:	dcc00917 	ldw	r19,36(sp)
  80d9b0:	dc800817 	ldw	r18,32(sp)
  80d9b4:	dc400717 	ldw	r17,28(sp)
  80d9b8:	dc000617 	ldw	r16,24(sp)
  80d9bc:	dec01004 	addi	sp,sp,64
  80d9c0:	f800283a 	ret
  80d9c4:	00bfffd4 	movui	r2,65535
  80d9c8:	11c06636 	bltu	r2,r7,80db64 <__umoddi3+0x2f4>
  80d9cc:	00803fc4 	movi	r2,255
  80d9d0:	11c12036 	bltu	r2,r7,80de54 <__umoddi3+0x5e4>
  80d9d4:	000b883a 	mov	r5,zero
  80d9d8:	0005883a 	mov	r2,zero
  80d9dc:	3084d83a 	srl	r2,r6,r2
  80d9e0:	01002074 	movhi	r4,129
  80d9e4:	210e7904 	addi	r4,r4,14820
  80d9e8:	01c00804 	movi	r7,32
  80d9ec:	1105883a 	add	r2,r2,r4
  80d9f0:	10c00003 	ldbu	r3,0(r2)
  80d9f4:	28c7883a 	add	r3,r5,r3
  80d9f8:	38e5c83a 	sub	r18,r7,r3
  80d9fc:	9000941e 	bne	r18,zero,80dc50 <__umoddi3+0x3e0>
  80da00:	35405e36 	bltu	r6,r21,80db7c <__umoddi3+0x30c>
  80da04:	84c05d2e 	bgeu	r16,r19,80db7c <__umoddi3+0x30c>
  80da08:	8011883a 	mov	r8,r16
  80da0c:	a813883a 	mov	r9,r21
  80da10:	dc000415 	stw	r16,16(sp)
  80da14:	dd400515 	stw	r21,20(sp)
  80da18:	003fdc06 	br	80d98c <__umoddi3+0x11c>
  80da1c:	00bfffd4 	movui	r2,65535
  80da20:	12004a36 	bltu	r2,r8,80db4c <__umoddi3+0x2dc>
  80da24:	00803fc4 	movi	r2,255
  80da28:	12010d36 	bltu	r2,r8,80de60 <__umoddi3+0x5f0>
  80da2c:	000b883a 	mov	r5,zero
  80da30:	0005883a 	mov	r2,zero
  80da34:	9884d83a 	srl	r2,r19,r2
  80da38:	01002074 	movhi	r4,129
  80da3c:	210e7904 	addi	r4,r4,14820
  80da40:	01800804 	movi	r6,32
  80da44:	1105883a 	add	r2,r2,r4
  80da48:	10c00003 	ldbu	r3,0(r2)
  80da4c:	28c7883a 	add	r3,r5,r3
  80da50:	30c7c83a 	sub	r3,r6,r3
  80da54:	1800dc1e 	bne	r3,zero,80ddc8 <__umoddi3+0x558>
  80da58:	002d883a 	mov	r22,zero
  80da5c:	982ed43a 	srli	r23,r19,16
  80da60:	a809883a 	mov	r4,r21
  80da64:	9cbfffcc 	andi	r18,r19,65535
  80da68:	b80b883a 	mov	r5,r23
  80da6c:	08024e40 	call	8024e4 <__udivsi3>
  80da70:	100b883a 	mov	r5,r2
  80da74:	9009883a 	mov	r4,r18
  80da78:	0802a640 	call	802a64 <__mulsi3>
  80da7c:	a809883a 	mov	r4,r21
  80da80:	b80b883a 	mov	r5,r23
  80da84:	1023883a 	mov	r17,r2
  80da88:	08024ec0 	call	8024ec <__umodsi3>
  80da8c:	1004943a 	slli	r2,r2,16
  80da90:	8006d43a 	srli	r3,r16,16
  80da94:	10c4b03a 	or	r2,r2,r3
  80da98:	1440032e 	bgeu	r2,r17,80daa8 <__umoddi3+0x238>
  80da9c:	14c5883a 	add	r2,r2,r19
  80daa0:	14c00136 	bltu	r2,r19,80daa8 <__umoddi3+0x238>
  80daa4:	14410236 	bltu	r2,r17,80deb0 <__umoddi3+0x640>
  80daa8:	1463c83a 	sub	r17,r2,r17
  80daac:	8809883a 	mov	r4,r17
  80dab0:	b80b883a 	mov	r5,r23
  80dab4:	08024e40 	call	8024e4 <__udivsi3>
  80dab8:	9009883a 	mov	r4,r18
  80dabc:	100b883a 	mov	r5,r2
  80dac0:	0802a640 	call	802a64 <__mulsi3>
  80dac4:	8809883a 	mov	r4,r17
  80dac8:	b80b883a 	mov	r5,r23
  80dacc:	102b883a 	mov	r21,r2
  80dad0:	08024ec0 	call	8024ec <__umodsi3>
  80dad4:	1004943a 	slli	r2,r2,16
  80dad8:	80ffffcc 	andi	r3,r16,65535
  80dadc:	10c4b03a 	or	r2,r2,r3
  80dae0:	1540042e 	bgeu	r2,r21,80daf4 <__umoddi3+0x284>
  80dae4:	14c5883a 	add	r2,r2,r19
  80dae8:	14c00236 	bltu	r2,r19,80daf4 <__umoddi3+0x284>
  80daec:	1540012e 	bgeu	r2,r21,80daf4 <__umoddi3+0x284>
  80daf0:	14c5883a 	add	r2,r2,r19
  80daf4:	1545c83a 	sub	r2,r2,r21
  80daf8:	1584d83a 	srl	r2,r2,r22
  80dafc:	0013883a 	mov	r9,zero
  80db00:	d8800415 	stw	r2,16(sp)
  80db04:	d8c00417 	ldw	r3,16(sp)
  80db08:	0005883a 	mov	r2,zero
  80db0c:	d8800515 	stw	r2,20(sp)
  80db10:	1811883a 	mov	r8,r3
  80db14:	003f9d06 	br	80d98c <__umoddi3+0x11c>
  80db18:	00804034 	movhi	r2,256
  80db1c:	10bfffc4 	addi	r2,r2,-1
  80db20:	14c0c636 	bltu	r2,r19,80de3c <__umoddi3+0x5cc>
  80db24:	01400404 	movi	r5,16
  80db28:	2805883a 	mov	r2,r5
  80db2c:	003f6c06 	br	80d8e0 <__umoddi3+0x70>
  80db30:	01000044 	movi	r4,1
  80db34:	000b883a 	mov	r5,zero
  80db38:	08024e40 	call	8024e4 <__udivsi3>
  80db3c:	1027883a 	mov	r19,r2
  80db40:	00bfffd4 	movui	r2,65535
  80db44:	14fff436 	bltu	r2,r19,80db18 <__umoddi3+0x2a8>
  80db48:	003f6106 	br	80d8d0 <__umoddi3+0x60>
  80db4c:	00804034 	movhi	r2,256
  80db50:	10bfffc4 	addi	r2,r2,-1
  80db54:	1200c536 	bltu	r2,r8,80de6c <__umoddi3+0x5fc>
  80db58:	01400404 	movi	r5,16
  80db5c:	2805883a 	mov	r2,r5
  80db60:	003fb406 	br	80da34 <__umoddi3+0x1c4>
  80db64:	00804034 	movhi	r2,256
  80db68:	10bfffc4 	addi	r2,r2,-1
  80db6c:	11c0c236 	bltu	r2,r7,80de78 <__umoddi3+0x608>
  80db70:	01400404 	movi	r5,16
  80db74:	2805883a 	mov	r2,r5
  80db78:	003f9806 	br	80d9dc <__umoddi3+0x16c>
  80db7c:	84c9c83a 	sub	r4,r16,r19
  80db80:	8105803a 	cmpltu	r2,r16,r4
  80db84:	a987c83a 	sub	r3,r21,r6
  80db88:	18abc83a 	sub	r21,r3,r2
  80db8c:	2021883a 	mov	r16,r4
  80db90:	003f9d06 	br	80da08 <__umoddi3+0x198>
  80db94:	9ca6983a 	sll	r19,r19,r18
  80db98:	3485c83a 	sub	r2,r6,r18
  80db9c:	a8a2d83a 	srl	r17,r21,r2
  80dba0:	982ed43a 	srli	r23,r19,16
  80dba4:	ac86983a 	sll	r3,r21,r18
  80dba8:	8084d83a 	srl	r2,r16,r2
  80dbac:	8809883a 	mov	r4,r17
  80dbb0:	b80b883a 	mov	r5,r23
  80dbb4:	18b8b03a 	or	fp,r3,r2
  80dbb8:	9d3fffcc 	andi	r20,r19,65535
  80dbbc:	08024e40 	call	8024e4 <__udivsi3>
  80dbc0:	100b883a 	mov	r5,r2
  80dbc4:	a009883a 	mov	r4,r20
  80dbc8:	0802a640 	call	802a64 <__mulsi3>
  80dbcc:	8809883a 	mov	r4,r17
  80dbd0:	b80b883a 	mov	r5,r23
  80dbd4:	102b883a 	mov	r21,r2
  80dbd8:	08024ec0 	call	8024ec <__umodsi3>
  80dbdc:	1004943a 	slli	r2,r2,16
  80dbe0:	e006d43a 	srli	r3,fp,16
  80dbe4:	902d883a 	mov	r22,r18
  80dbe8:	10c4b03a 	or	r2,r2,r3
  80dbec:	1540022e 	bgeu	r2,r21,80dbf8 <__umoddi3+0x388>
  80dbf0:	14c5883a 	add	r2,r2,r19
  80dbf4:	14c0ab2e 	bgeu	r2,r19,80dea4 <__umoddi3+0x634>
  80dbf8:	1563c83a 	sub	r17,r2,r21
  80dbfc:	8809883a 	mov	r4,r17
  80dc00:	b80b883a 	mov	r5,r23
  80dc04:	08024e40 	call	8024e4 <__udivsi3>
  80dc08:	100b883a 	mov	r5,r2
  80dc0c:	a009883a 	mov	r4,r20
  80dc10:	0802a640 	call	802a64 <__mulsi3>
  80dc14:	8809883a 	mov	r4,r17
  80dc18:	b80b883a 	mov	r5,r23
  80dc1c:	102b883a 	mov	r21,r2
  80dc20:	08024ec0 	call	8024ec <__umodsi3>
  80dc24:	1004943a 	slli	r2,r2,16
  80dc28:	e0ffffcc 	andi	r3,fp,65535
  80dc2c:	10c4b03a 	or	r2,r2,r3
  80dc30:	1540042e 	bgeu	r2,r21,80dc44 <__umoddi3+0x3d4>
  80dc34:	14c5883a 	add	r2,r2,r19
  80dc38:	14c00236 	bltu	r2,r19,80dc44 <__umoddi3+0x3d4>
  80dc3c:	1540012e 	bgeu	r2,r21,80dc44 <__umoddi3+0x3d4>
  80dc40:	14c5883a 	add	r2,r2,r19
  80dc44:	84a0983a 	sll	r16,r16,r18
  80dc48:	156bc83a 	sub	r21,r2,r21
  80dc4c:	003f3106 	br	80d914 <__umoddi3+0xa4>
  80dc50:	3c8fc83a 	sub	r7,r7,r18
  80dc54:	3486983a 	sll	r3,r6,r18
  80dc58:	99c4d83a 	srl	r2,r19,r7
  80dc5c:	a9e2d83a 	srl	r17,r21,r7
  80dc60:	ac8c983a 	sll	r6,r21,r18
  80dc64:	18acb03a 	or	r22,r3,r2
  80dc68:	b02ed43a 	srli	r23,r22,16
  80dc6c:	81c4d83a 	srl	r2,r16,r7
  80dc70:	8809883a 	mov	r4,r17
  80dc74:	b80b883a 	mov	r5,r23
  80dc78:	308cb03a 	or	r6,r6,r2
  80dc7c:	d9c00315 	stw	r7,12(sp)
  80dc80:	d9800215 	stw	r6,8(sp)
  80dc84:	b53fffcc 	andi	r20,r22,65535
  80dc88:	08024e40 	call	8024e4 <__udivsi3>
  80dc8c:	100b883a 	mov	r5,r2
  80dc90:	a009883a 	mov	r4,r20
  80dc94:	1039883a 	mov	fp,r2
  80dc98:	0802a640 	call	802a64 <__mulsi3>
  80dc9c:	8809883a 	mov	r4,r17
  80dca0:	b80b883a 	mov	r5,r23
  80dca4:	102b883a 	mov	r21,r2
  80dca8:	08024ec0 	call	8024ec <__umodsi3>
  80dcac:	d9000217 	ldw	r4,8(sp)
  80dcb0:	1004943a 	slli	r2,r2,16
  80dcb4:	9ca6983a 	sll	r19,r19,r18
  80dcb8:	2006d43a 	srli	r3,r4,16
  80dcbc:	84a0983a 	sll	r16,r16,r18
  80dcc0:	dcc00015 	stw	r19,0(sp)
  80dcc4:	10c4b03a 	or	r2,r2,r3
  80dcc8:	dc000115 	stw	r16,4(sp)
  80dccc:	1540032e 	bgeu	r2,r21,80dcdc <__umoddi3+0x46c>
  80dcd0:	1585883a 	add	r2,r2,r22
  80dcd4:	e73fffc4 	addi	fp,fp,-1
  80dcd8:	15806e2e 	bgeu	r2,r22,80de94 <__umoddi3+0x624>
  80dcdc:	1563c83a 	sub	r17,r2,r21
  80dce0:	8809883a 	mov	r4,r17
  80dce4:	b80b883a 	mov	r5,r23
  80dce8:	08024e40 	call	8024e4 <__udivsi3>
  80dcec:	100b883a 	mov	r5,r2
  80dcf0:	a009883a 	mov	r4,r20
  80dcf4:	1021883a 	mov	r16,r2
  80dcf8:	0802a640 	call	802a64 <__mulsi3>
  80dcfc:	b80b883a 	mov	r5,r23
  80dd00:	8809883a 	mov	r4,r17
  80dd04:	1029883a 	mov	r20,r2
  80dd08:	08024ec0 	call	8024ec <__umodsi3>
  80dd0c:	d9400217 	ldw	r5,8(sp)
  80dd10:	1004943a 	slli	r2,r2,16
  80dd14:	28ffffcc 	andi	r3,r5,65535
  80dd18:	10c4b03a 	or	r2,r2,r3
  80dd1c:	1500032e 	bgeu	r2,r20,80dd2c <__umoddi3+0x4bc>
  80dd20:	1585883a 	add	r2,r2,r22
  80dd24:	843fffc4 	addi	r16,r16,-1
  80dd28:	1580562e 	bgeu	r2,r22,80de84 <__umoddi3+0x614>
  80dd2c:	d9800017 	ldw	r6,0(sp)
  80dd30:	e022943a 	slli	r17,fp,16
  80dd34:	302ed43a 	srli	r23,r6,16
  80dd38:	8462b03a 	or	r17,r16,r17
  80dd3c:	34ffffcc 	andi	r19,r6,65535
  80dd40:	882ad43a 	srli	r21,r17,16
  80dd44:	8c7fffcc 	andi	r17,r17,65535
  80dd48:	8809883a 	mov	r4,r17
  80dd4c:	980b883a 	mov	r5,r19
  80dd50:	1521c83a 	sub	r16,r2,r20
  80dd54:	0802a640 	call	802a64 <__mulsi3>
  80dd58:	8809883a 	mov	r4,r17
  80dd5c:	b80b883a 	mov	r5,r23
  80dd60:	1029883a 	mov	r20,r2
  80dd64:	0802a640 	call	802a64 <__mulsi3>
  80dd68:	980b883a 	mov	r5,r19
  80dd6c:	a809883a 	mov	r4,r21
  80dd70:	1023883a 	mov	r17,r2
  80dd74:	0802a640 	call	802a64 <__mulsi3>
  80dd78:	a809883a 	mov	r4,r21
  80dd7c:	b80b883a 	mov	r5,r23
  80dd80:	1027883a 	mov	r19,r2
  80dd84:	0802a640 	call	802a64 <__mulsi3>
  80dd88:	100b883a 	mov	r5,r2
  80dd8c:	a004d43a 	srli	r2,r20,16
  80dd90:	8ce3883a 	add	r17,r17,r19
  80dd94:	1449883a 	add	r4,r2,r17
  80dd98:	24c0022e 	bgeu	r4,r19,80dda4 <__umoddi3+0x534>
  80dd9c:	00800074 	movhi	r2,1
  80dda0:	288b883a 	add	r5,r5,r2
  80dda4:	2004d43a 	srli	r2,r4,16
  80dda8:	2008943a 	slli	r4,r4,16
  80ddac:	a0ffffcc 	andi	r3,r20,65535
  80ddb0:	288d883a 	add	r6,r5,r2
  80ddb4:	20c9883a 	add	r4,r4,r3
  80ddb8:	81800b36 	bltu	r16,r6,80dde8 <__umoddi3+0x578>
  80ddbc:	81804026 	beq	r16,r6,80dec0 <__umoddi3+0x650>
  80ddc0:	818dc83a 	sub	r6,r16,r6
  80ddc4:	00000f06 	br	80de04 <__umoddi3+0x594>
  80ddc8:	30c5c83a 	sub	r2,r6,r3
  80ddcc:	182d883a 	mov	r22,r3
  80ddd0:	8084d83a 	srl	r2,r16,r2
  80ddd4:	a8c6983a 	sll	r3,r21,r3
  80ddd8:	9da6983a 	sll	r19,r19,r22
  80dddc:	85a0983a 	sll	r16,r16,r22
  80dde0:	18aab03a 	or	r21,r3,r2
  80dde4:	003f1d06 	br	80da5c <__umoddi3+0x1ec>
  80dde8:	d8c00017 	ldw	r3,0(sp)
  80ddec:	20c5c83a 	sub	r2,r4,r3
  80ddf0:	2089803a 	cmpltu	r4,r4,r2
  80ddf4:	3587c83a 	sub	r3,r6,r22
  80ddf8:	1907c83a 	sub	r3,r3,r4
  80ddfc:	80cdc83a 	sub	r6,r16,r3
  80de00:	1009883a 	mov	r4,r2
  80de04:	d9400117 	ldw	r5,4(sp)
  80de08:	2905c83a 	sub	r2,r5,r4
  80de0c:	2887803a 	cmpltu	r3,r5,r2
  80de10:	30c7c83a 	sub	r3,r6,r3
  80de14:	d9800317 	ldw	r6,12(sp)
  80de18:	1484d83a 	srl	r2,r2,r18
  80de1c:	1988983a 	sll	r4,r3,r6
  80de20:	1c86d83a 	srl	r3,r3,r18
  80de24:	2088b03a 	or	r4,r4,r2
  80de28:	2011883a 	mov	r8,r4
  80de2c:	1813883a 	mov	r9,r3
  80de30:	d9000415 	stw	r4,16(sp)
  80de34:	d8c00515 	stw	r3,20(sp)
  80de38:	003ed406 	br	80d98c <__umoddi3+0x11c>
  80de3c:	01400604 	movi	r5,24
  80de40:	2805883a 	mov	r2,r5
  80de44:	003ea606 	br	80d8e0 <__umoddi3+0x70>
  80de48:	01400204 	movi	r5,8
  80de4c:	2805883a 	mov	r2,r5
  80de50:	003ea306 	br	80d8e0 <__umoddi3+0x70>
  80de54:	01400204 	movi	r5,8
  80de58:	2805883a 	mov	r2,r5
  80de5c:	003edf06 	br	80d9dc <__umoddi3+0x16c>
  80de60:	01400204 	movi	r5,8
  80de64:	2805883a 	mov	r2,r5
  80de68:	003ef206 	br	80da34 <__umoddi3+0x1c4>
  80de6c:	01400604 	movi	r5,24
  80de70:	2805883a 	mov	r2,r5
  80de74:	003eef06 	br	80da34 <__umoddi3+0x1c4>
  80de78:	01400604 	movi	r5,24
  80de7c:	2805883a 	mov	r2,r5
  80de80:	003ed606 	br	80d9dc <__umoddi3+0x16c>
  80de84:	153fa92e 	bgeu	r2,r20,80dd2c <__umoddi3+0x4bc>
  80de88:	843fffc4 	addi	r16,r16,-1
  80de8c:	1585883a 	add	r2,r2,r22
  80de90:	003fa606 	br	80dd2c <__umoddi3+0x4bc>
  80de94:	157f912e 	bgeu	r2,r21,80dcdc <__umoddi3+0x46c>
  80de98:	e73fffc4 	addi	fp,fp,-1
  80de9c:	1585883a 	add	r2,r2,r22
  80dea0:	003f8e06 	br	80dcdc <__umoddi3+0x46c>
  80dea4:	157f542e 	bgeu	r2,r21,80dbf8 <__umoddi3+0x388>
  80dea8:	14c5883a 	add	r2,r2,r19
  80deac:	003f5206 	br	80dbf8 <__umoddi3+0x388>
  80deb0:	14c5883a 	add	r2,r2,r19
  80deb4:	003efc06 	br	80daa8 <__umoddi3+0x238>
  80deb8:	14c5883a 	add	r2,r2,r19
  80debc:	003ea606 	br	80d958 <__umoddi3+0xe8>
  80dec0:	d8800117 	ldw	r2,4(sp)
  80dec4:	113fc836 	bltu	r2,r4,80dde8 <__umoddi3+0x578>
  80dec8:	000d883a 	mov	r6,zero
  80decc:	003fcd06 	br	80de04 <__umoddi3+0x594>

0080ded0 <__nesf2>:
  80ded0:	defff304 	addi	sp,sp,-52
  80ded4:	dc400b15 	stw	r17,44(sp)
  80ded8:	dc400204 	addi	r17,sp,8
  80dedc:	dc000a15 	stw	r16,40(sp)
  80dee0:	d9000015 	stw	r4,0(sp)
  80dee4:	d9400115 	stw	r5,4(sp)
  80dee8:	d809883a 	mov	r4,sp
  80deec:	880b883a 	mov	r5,r17
  80def0:	dc000604 	addi	r16,sp,24
  80def4:	dfc00c15 	stw	ra,48(sp)
  80def8:	080e7c00 	call	80e7c0 <__unpack_f>
  80defc:	d9000104 	addi	r4,sp,4
  80df00:	800b883a 	mov	r5,r16
  80df04:	080e7c00 	call	80e7c0 <__unpack_f>
  80df08:	d8800217 	ldw	r2,8(sp)
  80df0c:	00c00044 	movi	r3,1
  80df10:	180d883a 	mov	r6,r3
  80df14:	1880062e 	bgeu	r3,r2,80df30 <__nesf2+0x60>
  80df18:	d8800617 	ldw	r2,24(sp)
  80df1c:	8809883a 	mov	r4,r17
  80df20:	800b883a 	mov	r5,r16
  80df24:	1880022e 	bgeu	r3,r2,80df30 <__nesf2+0x60>
  80df28:	080e8880 	call	80e888 <__fpcmp_parts_f>
  80df2c:	100d883a 	mov	r6,r2
  80df30:	3005883a 	mov	r2,r6
  80df34:	dfc00c17 	ldw	ra,48(sp)
  80df38:	dc400b17 	ldw	r17,44(sp)
  80df3c:	dc000a17 	ldw	r16,40(sp)
  80df40:	dec00d04 	addi	sp,sp,52
  80df44:	f800283a 	ret

0080df48 <__gtsf2>:
  80df48:	defff304 	addi	sp,sp,-52
  80df4c:	dc400b15 	stw	r17,44(sp)
  80df50:	dc400204 	addi	r17,sp,8
  80df54:	dc000a15 	stw	r16,40(sp)
  80df58:	d9000015 	stw	r4,0(sp)
  80df5c:	d9400115 	stw	r5,4(sp)
  80df60:	d809883a 	mov	r4,sp
  80df64:	880b883a 	mov	r5,r17
  80df68:	dc000604 	addi	r16,sp,24
  80df6c:	dfc00c15 	stw	ra,48(sp)
  80df70:	080e7c00 	call	80e7c0 <__unpack_f>
  80df74:	d9000104 	addi	r4,sp,4
  80df78:	800b883a 	mov	r5,r16
  80df7c:	080e7c00 	call	80e7c0 <__unpack_f>
  80df80:	d8800217 	ldw	r2,8(sp)
  80df84:	00c00044 	movi	r3,1
  80df88:	01bfffc4 	movi	r6,-1
  80df8c:	1880062e 	bgeu	r3,r2,80dfa8 <__gtsf2+0x60>
  80df90:	d8800617 	ldw	r2,24(sp)
  80df94:	8809883a 	mov	r4,r17
  80df98:	800b883a 	mov	r5,r16
  80df9c:	1880022e 	bgeu	r3,r2,80dfa8 <__gtsf2+0x60>
  80dfa0:	080e8880 	call	80e888 <__fpcmp_parts_f>
  80dfa4:	100d883a 	mov	r6,r2
  80dfa8:	3005883a 	mov	r2,r6
  80dfac:	dfc00c17 	ldw	ra,48(sp)
  80dfb0:	dc400b17 	ldw	r17,44(sp)
  80dfb4:	dc000a17 	ldw	r16,40(sp)
  80dfb8:	dec00d04 	addi	sp,sp,52
  80dfbc:	f800283a 	ret

0080dfc0 <__ltsf2>:
  80dfc0:	defff304 	addi	sp,sp,-52
  80dfc4:	dc400b15 	stw	r17,44(sp)
  80dfc8:	dc400204 	addi	r17,sp,8
  80dfcc:	dc000a15 	stw	r16,40(sp)
  80dfd0:	d9000015 	stw	r4,0(sp)
  80dfd4:	d9400115 	stw	r5,4(sp)
  80dfd8:	d809883a 	mov	r4,sp
  80dfdc:	880b883a 	mov	r5,r17
  80dfe0:	dc000604 	addi	r16,sp,24
  80dfe4:	dfc00c15 	stw	ra,48(sp)
  80dfe8:	080e7c00 	call	80e7c0 <__unpack_f>
  80dfec:	d9000104 	addi	r4,sp,4
  80dff0:	800b883a 	mov	r5,r16
  80dff4:	080e7c00 	call	80e7c0 <__unpack_f>
  80dff8:	d8800217 	ldw	r2,8(sp)
  80dffc:	00c00044 	movi	r3,1
  80e000:	180d883a 	mov	r6,r3
  80e004:	1880062e 	bgeu	r3,r2,80e020 <__ltsf2+0x60>
  80e008:	d8800617 	ldw	r2,24(sp)
  80e00c:	8809883a 	mov	r4,r17
  80e010:	800b883a 	mov	r5,r16
  80e014:	1880022e 	bgeu	r3,r2,80e020 <__ltsf2+0x60>
  80e018:	080e8880 	call	80e888 <__fpcmp_parts_f>
  80e01c:	100d883a 	mov	r6,r2
  80e020:	3005883a 	mov	r2,r6
  80e024:	dfc00c17 	ldw	ra,48(sp)
  80e028:	dc400b17 	ldw	r17,44(sp)
  80e02c:	dc000a17 	ldw	r16,40(sp)
  80e030:	dec00d04 	addi	sp,sp,52
  80e034:	f800283a 	ret

0080e038 <__eqdf2>:
  80e038:	deffef04 	addi	sp,sp,-68
  80e03c:	dc400f15 	stw	r17,60(sp)
  80e040:	dc400404 	addi	r17,sp,16
  80e044:	2005883a 	mov	r2,r4
  80e048:	2807883a 	mov	r3,r5
  80e04c:	dc000e15 	stw	r16,56(sp)
  80e050:	d809883a 	mov	r4,sp
  80e054:	880b883a 	mov	r5,r17
  80e058:	dc000904 	addi	r16,sp,36
  80e05c:	d8c00115 	stw	r3,4(sp)
  80e060:	d8800015 	stw	r2,0(sp)
  80e064:	d9800215 	stw	r6,8(sp)
  80e068:	dfc01015 	stw	ra,64(sp)
  80e06c:	d9c00315 	stw	r7,12(sp)
  80e070:	080292c0 	call	80292c <__unpack_d>
  80e074:	d9000204 	addi	r4,sp,8
  80e078:	800b883a 	mov	r5,r16
  80e07c:	080292c0 	call	80292c <__unpack_d>
  80e080:	d8800417 	ldw	r2,16(sp)
  80e084:	00c00044 	movi	r3,1
  80e088:	180d883a 	mov	r6,r3
  80e08c:	1880062e 	bgeu	r3,r2,80e0a8 <__eqdf2+0x70>
  80e090:	d8800917 	ldw	r2,36(sp)
  80e094:	8809883a 	mov	r4,r17
  80e098:	800b883a 	mov	r5,r16
  80e09c:	1880022e 	bgeu	r3,r2,80e0a8 <__eqdf2+0x70>
  80e0a0:	080e95c0 	call	80e95c <__fpcmp_parts_d>
  80e0a4:	100d883a 	mov	r6,r2
  80e0a8:	3005883a 	mov	r2,r6
  80e0ac:	dfc01017 	ldw	ra,64(sp)
  80e0b0:	dc400f17 	ldw	r17,60(sp)
  80e0b4:	dc000e17 	ldw	r16,56(sp)
  80e0b8:	dec01104 	addi	sp,sp,68
  80e0bc:	f800283a 	ret

0080e0c0 <__nedf2>:
  80e0c0:	deffef04 	addi	sp,sp,-68
  80e0c4:	dc400f15 	stw	r17,60(sp)
  80e0c8:	dc400404 	addi	r17,sp,16
  80e0cc:	2005883a 	mov	r2,r4
  80e0d0:	2807883a 	mov	r3,r5
  80e0d4:	dc000e15 	stw	r16,56(sp)
  80e0d8:	d809883a 	mov	r4,sp
  80e0dc:	880b883a 	mov	r5,r17
  80e0e0:	dc000904 	addi	r16,sp,36
  80e0e4:	d8c00115 	stw	r3,4(sp)
  80e0e8:	d8800015 	stw	r2,0(sp)
  80e0ec:	d9800215 	stw	r6,8(sp)
  80e0f0:	dfc01015 	stw	ra,64(sp)
  80e0f4:	d9c00315 	stw	r7,12(sp)
  80e0f8:	080292c0 	call	80292c <__unpack_d>
  80e0fc:	d9000204 	addi	r4,sp,8
  80e100:	800b883a 	mov	r5,r16
  80e104:	080292c0 	call	80292c <__unpack_d>
  80e108:	d8800417 	ldw	r2,16(sp)
  80e10c:	00c00044 	movi	r3,1
  80e110:	180d883a 	mov	r6,r3
  80e114:	1880062e 	bgeu	r3,r2,80e130 <__nedf2+0x70>
  80e118:	d8800917 	ldw	r2,36(sp)
  80e11c:	8809883a 	mov	r4,r17
  80e120:	800b883a 	mov	r5,r16
  80e124:	1880022e 	bgeu	r3,r2,80e130 <__nedf2+0x70>
  80e128:	080e95c0 	call	80e95c <__fpcmp_parts_d>
  80e12c:	100d883a 	mov	r6,r2
  80e130:	3005883a 	mov	r2,r6
  80e134:	dfc01017 	ldw	ra,64(sp)
  80e138:	dc400f17 	ldw	r17,60(sp)
  80e13c:	dc000e17 	ldw	r16,56(sp)
  80e140:	dec01104 	addi	sp,sp,68
  80e144:	f800283a 	ret

0080e148 <__gtdf2>:
  80e148:	deffef04 	addi	sp,sp,-68
  80e14c:	dc400f15 	stw	r17,60(sp)
  80e150:	dc400404 	addi	r17,sp,16
  80e154:	2005883a 	mov	r2,r4
  80e158:	2807883a 	mov	r3,r5
  80e15c:	dc000e15 	stw	r16,56(sp)
  80e160:	d809883a 	mov	r4,sp
  80e164:	880b883a 	mov	r5,r17
  80e168:	dc000904 	addi	r16,sp,36
  80e16c:	d8c00115 	stw	r3,4(sp)
  80e170:	d8800015 	stw	r2,0(sp)
  80e174:	d9800215 	stw	r6,8(sp)
  80e178:	dfc01015 	stw	ra,64(sp)
  80e17c:	d9c00315 	stw	r7,12(sp)
  80e180:	080292c0 	call	80292c <__unpack_d>
  80e184:	d9000204 	addi	r4,sp,8
  80e188:	800b883a 	mov	r5,r16
  80e18c:	080292c0 	call	80292c <__unpack_d>
  80e190:	d8800417 	ldw	r2,16(sp)
  80e194:	00c00044 	movi	r3,1
  80e198:	01bfffc4 	movi	r6,-1
  80e19c:	1880062e 	bgeu	r3,r2,80e1b8 <__gtdf2+0x70>
  80e1a0:	d8800917 	ldw	r2,36(sp)
  80e1a4:	8809883a 	mov	r4,r17
  80e1a8:	800b883a 	mov	r5,r16
  80e1ac:	1880022e 	bgeu	r3,r2,80e1b8 <__gtdf2+0x70>
  80e1b0:	080e95c0 	call	80e95c <__fpcmp_parts_d>
  80e1b4:	100d883a 	mov	r6,r2
  80e1b8:	3005883a 	mov	r2,r6
  80e1bc:	dfc01017 	ldw	ra,64(sp)
  80e1c0:	dc400f17 	ldw	r17,60(sp)
  80e1c4:	dc000e17 	ldw	r16,56(sp)
  80e1c8:	dec01104 	addi	sp,sp,68
  80e1cc:	f800283a 	ret

0080e1d0 <__gedf2>:
  80e1d0:	deffef04 	addi	sp,sp,-68
  80e1d4:	dc400f15 	stw	r17,60(sp)
  80e1d8:	dc400404 	addi	r17,sp,16
  80e1dc:	2005883a 	mov	r2,r4
  80e1e0:	2807883a 	mov	r3,r5
  80e1e4:	dc000e15 	stw	r16,56(sp)
  80e1e8:	d809883a 	mov	r4,sp
  80e1ec:	880b883a 	mov	r5,r17
  80e1f0:	dc000904 	addi	r16,sp,36
  80e1f4:	d8c00115 	stw	r3,4(sp)
  80e1f8:	d8800015 	stw	r2,0(sp)
  80e1fc:	d9800215 	stw	r6,8(sp)
  80e200:	dfc01015 	stw	ra,64(sp)
  80e204:	d9c00315 	stw	r7,12(sp)
  80e208:	080292c0 	call	80292c <__unpack_d>
  80e20c:	d9000204 	addi	r4,sp,8
  80e210:	800b883a 	mov	r5,r16
  80e214:	080292c0 	call	80292c <__unpack_d>
  80e218:	d8800417 	ldw	r2,16(sp)
  80e21c:	00c00044 	movi	r3,1
  80e220:	01bfffc4 	movi	r6,-1
  80e224:	1880062e 	bgeu	r3,r2,80e240 <__gedf2+0x70>
  80e228:	d8800917 	ldw	r2,36(sp)
  80e22c:	8809883a 	mov	r4,r17
  80e230:	800b883a 	mov	r5,r16
  80e234:	1880022e 	bgeu	r3,r2,80e240 <__gedf2+0x70>
  80e238:	080e95c0 	call	80e95c <__fpcmp_parts_d>
  80e23c:	100d883a 	mov	r6,r2
  80e240:	3005883a 	mov	r2,r6
  80e244:	dfc01017 	ldw	ra,64(sp)
  80e248:	dc400f17 	ldw	r17,60(sp)
  80e24c:	dc000e17 	ldw	r16,56(sp)
  80e250:	dec01104 	addi	sp,sp,68
  80e254:	f800283a 	ret

0080e258 <__ltdf2>:
  80e258:	deffef04 	addi	sp,sp,-68
  80e25c:	dc400f15 	stw	r17,60(sp)
  80e260:	dc400404 	addi	r17,sp,16
  80e264:	2005883a 	mov	r2,r4
  80e268:	2807883a 	mov	r3,r5
  80e26c:	dc000e15 	stw	r16,56(sp)
  80e270:	d809883a 	mov	r4,sp
  80e274:	880b883a 	mov	r5,r17
  80e278:	dc000904 	addi	r16,sp,36
  80e27c:	d8c00115 	stw	r3,4(sp)
  80e280:	d8800015 	stw	r2,0(sp)
  80e284:	d9800215 	stw	r6,8(sp)
  80e288:	dfc01015 	stw	ra,64(sp)
  80e28c:	d9c00315 	stw	r7,12(sp)
  80e290:	080292c0 	call	80292c <__unpack_d>
  80e294:	d9000204 	addi	r4,sp,8
  80e298:	800b883a 	mov	r5,r16
  80e29c:	080292c0 	call	80292c <__unpack_d>
  80e2a0:	d8800417 	ldw	r2,16(sp)
  80e2a4:	00c00044 	movi	r3,1
  80e2a8:	180d883a 	mov	r6,r3
  80e2ac:	1880062e 	bgeu	r3,r2,80e2c8 <__ltdf2+0x70>
  80e2b0:	d8800917 	ldw	r2,36(sp)
  80e2b4:	8809883a 	mov	r4,r17
  80e2b8:	800b883a 	mov	r5,r16
  80e2bc:	1880022e 	bgeu	r3,r2,80e2c8 <__ltdf2+0x70>
  80e2c0:	080e95c0 	call	80e95c <__fpcmp_parts_d>
  80e2c4:	100d883a 	mov	r6,r2
  80e2c8:	3005883a 	mov	r2,r6
  80e2cc:	dfc01017 	ldw	ra,64(sp)
  80e2d0:	dc400f17 	ldw	r17,60(sp)
  80e2d4:	dc000e17 	ldw	r16,56(sp)
  80e2d8:	dec01104 	addi	sp,sp,68
  80e2dc:	f800283a 	ret

0080e2e0 <__ledf2>:
  80e2e0:	deffef04 	addi	sp,sp,-68
  80e2e4:	dc400f15 	stw	r17,60(sp)
  80e2e8:	dc400404 	addi	r17,sp,16
  80e2ec:	2005883a 	mov	r2,r4
  80e2f0:	2807883a 	mov	r3,r5
  80e2f4:	dc000e15 	stw	r16,56(sp)
  80e2f8:	d809883a 	mov	r4,sp
  80e2fc:	880b883a 	mov	r5,r17
  80e300:	dc000904 	addi	r16,sp,36
  80e304:	d8c00115 	stw	r3,4(sp)
  80e308:	d8800015 	stw	r2,0(sp)
  80e30c:	d9800215 	stw	r6,8(sp)
  80e310:	dfc01015 	stw	ra,64(sp)
  80e314:	d9c00315 	stw	r7,12(sp)
  80e318:	080292c0 	call	80292c <__unpack_d>
  80e31c:	d9000204 	addi	r4,sp,8
  80e320:	800b883a 	mov	r5,r16
  80e324:	080292c0 	call	80292c <__unpack_d>
  80e328:	d8800417 	ldw	r2,16(sp)
  80e32c:	00c00044 	movi	r3,1
  80e330:	180d883a 	mov	r6,r3
  80e334:	1880062e 	bgeu	r3,r2,80e350 <__ledf2+0x70>
  80e338:	d8800917 	ldw	r2,36(sp)
  80e33c:	8809883a 	mov	r4,r17
  80e340:	800b883a 	mov	r5,r16
  80e344:	1880022e 	bgeu	r3,r2,80e350 <__ledf2+0x70>
  80e348:	080e95c0 	call	80e95c <__fpcmp_parts_d>
  80e34c:	100d883a 	mov	r6,r2
  80e350:	3005883a 	mov	r2,r6
  80e354:	dfc01017 	ldw	ra,64(sp)
  80e358:	dc400f17 	ldw	r17,60(sp)
  80e35c:	dc000e17 	ldw	r16,56(sp)
  80e360:	dec01104 	addi	sp,sp,68
  80e364:	f800283a 	ret

0080e368 <__floatsidf>:
  80e368:	2006d7fa 	srli	r3,r4,31
  80e36c:	defff604 	addi	sp,sp,-40
  80e370:	008000c4 	movi	r2,3
  80e374:	dfc00915 	stw	ra,36(sp)
  80e378:	dcc00815 	stw	r19,32(sp)
  80e37c:	dc800715 	stw	r18,28(sp)
  80e380:	dc400615 	stw	r17,24(sp)
  80e384:	dc000515 	stw	r16,20(sp)
  80e388:	d8800015 	stw	r2,0(sp)
  80e38c:	d8c00115 	stw	r3,4(sp)
  80e390:	20000f1e 	bne	r4,zero,80e3d0 <__floatsidf+0x68>
  80e394:	00800084 	movi	r2,2
  80e398:	d8800015 	stw	r2,0(sp)
  80e39c:	d809883a 	mov	r4,sp
  80e3a0:	08026180 	call	802618 <__pack_d>
  80e3a4:	1009883a 	mov	r4,r2
  80e3a8:	180b883a 	mov	r5,r3
  80e3ac:	2005883a 	mov	r2,r4
  80e3b0:	2807883a 	mov	r3,r5
  80e3b4:	dfc00917 	ldw	ra,36(sp)
  80e3b8:	dcc00817 	ldw	r19,32(sp)
  80e3bc:	dc800717 	ldw	r18,28(sp)
  80e3c0:	dc400617 	ldw	r17,24(sp)
  80e3c4:	dc000517 	ldw	r16,20(sp)
  80e3c8:	dec00a04 	addi	sp,sp,40
  80e3cc:	f800283a 	ret
  80e3d0:	00800f04 	movi	r2,60
  80e3d4:	1807003a 	cmpeq	r3,r3,zero
  80e3d8:	d8800215 	stw	r2,8(sp)
  80e3dc:	18001126 	beq	r3,zero,80e424 <__floatsidf+0xbc>
  80e3e0:	0027883a 	mov	r19,zero
  80e3e4:	2025883a 	mov	r18,r4
  80e3e8:	d9000315 	stw	r4,12(sp)
  80e3ec:	dcc00415 	stw	r19,16(sp)
  80e3f0:	080e7400 	call	80e740 <__clzsi2>
  80e3f4:	11000744 	addi	r4,r2,29
  80e3f8:	013fe80e 	bge	zero,r4,80e39c <__floatsidf+0x34>
  80e3fc:	10bfff44 	addi	r2,r2,-3
  80e400:	10000c16 	blt	r2,zero,80e434 <__floatsidf+0xcc>
  80e404:	90a2983a 	sll	r17,r18,r2
  80e408:	0021883a 	mov	r16,zero
  80e40c:	d8800217 	ldw	r2,8(sp)
  80e410:	dc400415 	stw	r17,16(sp)
  80e414:	dc000315 	stw	r16,12(sp)
  80e418:	1105c83a 	sub	r2,r2,r4
  80e41c:	d8800215 	stw	r2,8(sp)
  80e420:	003fde06 	br	80e39c <__floatsidf+0x34>
  80e424:	00a00034 	movhi	r2,32768
  80e428:	20800a26 	beq	r4,r2,80e454 <__floatsidf+0xec>
  80e42c:	0109c83a 	sub	r4,zero,r4
  80e430:	003feb06 	br	80e3e0 <__floatsidf+0x78>
  80e434:	9006d07a 	srli	r3,r18,1
  80e438:	008007c4 	movi	r2,31
  80e43c:	1105c83a 	sub	r2,r2,r4
  80e440:	1886d83a 	srl	r3,r3,r2
  80e444:	9922983a 	sll	r17,r19,r4
  80e448:	9120983a 	sll	r16,r18,r4
  80e44c:	1c62b03a 	or	r17,r3,r17
  80e450:	003fee06 	br	80e40c <__floatsidf+0xa4>
  80e454:	0009883a 	mov	r4,zero
  80e458:	01707834 	movhi	r5,49632
  80e45c:	003fd306 	br	80e3ac <__floatsidf+0x44>

0080e460 <__fixdfsi>:
  80e460:	defff804 	addi	sp,sp,-32
  80e464:	2005883a 	mov	r2,r4
  80e468:	2807883a 	mov	r3,r5
  80e46c:	d809883a 	mov	r4,sp
  80e470:	d9400204 	addi	r5,sp,8
  80e474:	d8c00115 	stw	r3,4(sp)
  80e478:	d8800015 	stw	r2,0(sp)
  80e47c:	dfc00715 	stw	ra,28(sp)
  80e480:	080292c0 	call	80292c <__unpack_d>
  80e484:	d8c00217 	ldw	r3,8(sp)
  80e488:	00800084 	movi	r2,2
  80e48c:	1880051e 	bne	r3,r2,80e4a4 <__fixdfsi+0x44>
  80e490:	0007883a 	mov	r3,zero
  80e494:	1805883a 	mov	r2,r3
  80e498:	dfc00717 	ldw	ra,28(sp)
  80e49c:	dec00804 	addi	sp,sp,32
  80e4a0:	f800283a 	ret
  80e4a4:	00800044 	movi	r2,1
  80e4a8:	10fff92e 	bgeu	r2,r3,80e490 <__fixdfsi+0x30>
  80e4ac:	00800104 	movi	r2,4
  80e4b0:	18800426 	beq	r3,r2,80e4c4 <__fixdfsi+0x64>
  80e4b4:	d8c00417 	ldw	r3,16(sp)
  80e4b8:	183ff516 	blt	r3,zero,80e490 <__fixdfsi+0x30>
  80e4bc:	00800784 	movi	r2,30
  80e4c0:	10c0080e 	bge	r2,r3,80e4e4 <__fixdfsi+0x84>
  80e4c4:	d8800317 	ldw	r2,12(sp)
  80e4c8:	1000121e 	bne	r2,zero,80e514 <__fixdfsi+0xb4>
  80e4cc:	00e00034 	movhi	r3,32768
  80e4d0:	18ffffc4 	addi	r3,r3,-1
  80e4d4:	1805883a 	mov	r2,r3
  80e4d8:	dfc00717 	ldw	ra,28(sp)
  80e4dc:	dec00804 	addi	sp,sp,32
  80e4e0:	f800283a 	ret
  80e4e4:	00800f04 	movi	r2,60
  80e4e8:	10d1c83a 	sub	r8,r2,r3
  80e4ec:	40bff804 	addi	r2,r8,-32
  80e4f0:	d9800517 	ldw	r6,20(sp)
  80e4f4:	d9c00617 	ldw	r7,24(sp)
  80e4f8:	10000816 	blt	r2,zero,80e51c <__fixdfsi+0xbc>
  80e4fc:	3888d83a 	srl	r4,r7,r2
  80e500:	d8800317 	ldw	r2,12(sp)
  80e504:	2007883a 	mov	r3,r4
  80e508:	103fe226 	beq	r2,zero,80e494 <__fixdfsi+0x34>
  80e50c:	0107c83a 	sub	r3,zero,r4
  80e510:	003fe006 	br	80e494 <__fixdfsi+0x34>
  80e514:	00e00034 	movhi	r3,32768
  80e518:	003fde06 	br	80e494 <__fixdfsi+0x34>
  80e51c:	39c7883a 	add	r3,r7,r7
  80e520:	008007c4 	movi	r2,31
  80e524:	1205c83a 	sub	r2,r2,r8
  80e528:	1886983a 	sll	r3,r3,r2
  80e52c:	3208d83a 	srl	r4,r6,r8
  80e530:	1908b03a 	or	r4,r3,r4
  80e534:	003ff206 	br	80e500 <__fixdfsi+0xa0>

0080e538 <__truncdfsf2>:
  80e538:	defff804 	addi	sp,sp,-32
  80e53c:	2005883a 	mov	r2,r4
  80e540:	2807883a 	mov	r3,r5
  80e544:	d809883a 	mov	r4,sp
  80e548:	d9400204 	addi	r5,sp,8
  80e54c:	d8c00115 	stw	r3,4(sp)
  80e550:	d8800015 	stw	r2,0(sp)
  80e554:	dfc00715 	stw	ra,28(sp)
  80e558:	080292c0 	call	80292c <__unpack_d>
  80e55c:	d9c00517 	ldw	r7,20(sp)
  80e560:	da000617 	ldw	r8,24(sp)
  80e564:	02d00034 	movhi	r11,16384
  80e568:	5affffc4 	addi	r11,r11,-1
  80e56c:	3812d7ba 	srli	r9,r7,30
  80e570:	401a90ba 	slli	r13,r8,2
  80e574:	3ac4703a 	and	r2,r7,r11
  80e578:	0007883a 	mov	r3,zero
  80e57c:	6a52b03a 	or	r9,r13,r9
  80e580:	10c4b03a 	or	r2,r2,r3
  80e584:	d9000217 	ldw	r4,8(sp)
  80e588:	d9400317 	ldw	r5,12(sp)
  80e58c:	d9800417 	ldw	r6,16(sp)
  80e590:	480f883a 	mov	r7,r9
  80e594:	10000126 	beq	r2,zero,80e59c <__truncdfsf2+0x64>
  80e598:	49c00054 	ori	r7,r9,1
  80e59c:	080e9300 	call	80e930 <__make_fp>
  80e5a0:	dfc00717 	ldw	ra,28(sp)
  80e5a4:	dec00804 	addi	sp,sp,32
  80e5a8:	f800283a 	ret

0080e5ac <__floatunsidf>:
  80e5ac:	defff204 	addi	sp,sp,-56
  80e5b0:	dfc00d15 	stw	ra,52(sp)
  80e5b4:	ddc00c15 	stw	r23,48(sp)
  80e5b8:	dd800b15 	stw	r22,44(sp)
  80e5bc:	dd400a15 	stw	r21,40(sp)
  80e5c0:	dd000915 	stw	r20,36(sp)
  80e5c4:	dcc00815 	stw	r19,32(sp)
  80e5c8:	dc800715 	stw	r18,28(sp)
  80e5cc:	dc400615 	stw	r17,24(sp)
  80e5d0:	dc000515 	stw	r16,20(sp)
  80e5d4:	d8000115 	stw	zero,4(sp)
  80e5d8:	20000f1e 	bne	r4,zero,80e618 <__floatunsidf+0x6c>
  80e5dc:	00800084 	movi	r2,2
  80e5e0:	d8800015 	stw	r2,0(sp)
  80e5e4:	d809883a 	mov	r4,sp
  80e5e8:	08026180 	call	802618 <__pack_d>
  80e5ec:	dfc00d17 	ldw	ra,52(sp)
  80e5f0:	ddc00c17 	ldw	r23,48(sp)
  80e5f4:	dd800b17 	ldw	r22,44(sp)
  80e5f8:	dd400a17 	ldw	r21,40(sp)
  80e5fc:	dd000917 	ldw	r20,36(sp)
  80e600:	dcc00817 	ldw	r19,32(sp)
  80e604:	dc800717 	ldw	r18,28(sp)
  80e608:	dc400617 	ldw	r17,24(sp)
  80e60c:	dc000517 	ldw	r16,20(sp)
  80e610:	dec00e04 	addi	sp,sp,56
  80e614:	f800283a 	ret
  80e618:	008000c4 	movi	r2,3
  80e61c:	00c00f04 	movi	r3,60
  80e620:	002f883a 	mov	r23,zero
  80e624:	202d883a 	mov	r22,r4
  80e628:	d8800015 	stw	r2,0(sp)
  80e62c:	d8c00215 	stw	r3,8(sp)
  80e630:	d9000315 	stw	r4,12(sp)
  80e634:	ddc00415 	stw	r23,16(sp)
  80e638:	080e7400 	call	80e740 <__clzsi2>
  80e63c:	12400744 	addi	r9,r2,29
  80e640:	48000b16 	blt	r9,zero,80e670 <__floatunsidf+0xc4>
  80e644:	483fe726 	beq	r9,zero,80e5e4 <__floatunsidf+0x38>
  80e648:	10bfff44 	addi	r2,r2,-3
  80e64c:	10002e16 	blt	r2,zero,80e708 <__floatunsidf+0x15c>
  80e650:	b0a2983a 	sll	r17,r22,r2
  80e654:	0021883a 	mov	r16,zero
  80e658:	d8800217 	ldw	r2,8(sp)
  80e65c:	dc400415 	stw	r17,16(sp)
  80e660:	dc000315 	stw	r16,12(sp)
  80e664:	1245c83a 	sub	r2,r2,r9
  80e668:	d8800215 	stw	r2,8(sp)
  80e66c:	003fdd06 	br	80e5e4 <__floatunsidf+0x38>
  80e670:	0255c83a 	sub	r10,zero,r9
  80e674:	51bff804 	addi	r6,r10,-32
  80e678:	30001b16 	blt	r6,zero,80e6e8 <__floatunsidf+0x13c>
  80e67c:	b9a8d83a 	srl	r20,r23,r6
  80e680:	002b883a 	mov	r21,zero
  80e684:	000f883a 	mov	r7,zero
  80e688:	01000044 	movi	r4,1
  80e68c:	0011883a 	mov	r8,zero
  80e690:	30002516 	blt	r6,zero,80e728 <__floatunsidf+0x17c>
  80e694:	21a6983a 	sll	r19,r4,r6
  80e698:	0025883a 	mov	r18,zero
  80e69c:	00bfffc4 	movi	r2,-1
  80e6a0:	9089883a 	add	r4,r18,r2
  80e6a4:	988b883a 	add	r5,r19,r2
  80e6a8:	248d803a 	cmpltu	r6,r4,r18
  80e6ac:	314b883a 	add	r5,r6,r5
  80e6b0:	b104703a 	and	r2,r22,r4
  80e6b4:	b946703a 	and	r3,r23,r5
  80e6b8:	10c4b03a 	or	r2,r2,r3
  80e6bc:	10000226 	beq	r2,zero,80e6c8 <__floatunsidf+0x11c>
  80e6c0:	01c00044 	movi	r7,1
  80e6c4:	0011883a 	mov	r8,zero
  80e6c8:	d9000217 	ldw	r4,8(sp)
  80e6cc:	a1c4b03a 	or	r2,r20,r7
  80e6d0:	aa06b03a 	or	r3,r21,r8
  80e6d4:	2249c83a 	sub	r4,r4,r9
  80e6d8:	d8c00415 	stw	r3,16(sp)
  80e6dc:	d9000215 	stw	r4,8(sp)
  80e6e0:	d8800315 	stw	r2,12(sp)
  80e6e4:	003fbf06 	br	80e5e4 <__floatunsidf+0x38>
  80e6e8:	bdc7883a 	add	r3,r23,r23
  80e6ec:	008007c4 	movi	r2,31
  80e6f0:	1285c83a 	sub	r2,r2,r10
  80e6f4:	1886983a 	sll	r3,r3,r2
  80e6f8:	b2a8d83a 	srl	r20,r22,r10
  80e6fc:	baaad83a 	srl	r21,r23,r10
  80e700:	1d28b03a 	or	r20,r3,r20
  80e704:	003fdf06 	br	80e684 <__floatunsidf+0xd8>
  80e708:	b006d07a 	srli	r3,r22,1
  80e70c:	008007c4 	movi	r2,31
  80e710:	1245c83a 	sub	r2,r2,r9
  80e714:	1886d83a 	srl	r3,r3,r2
  80e718:	ba62983a 	sll	r17,r23,r9
  80e71c:	b260983a 	sll	r16,r22,r9
  80e720:	1c62b03a 	or	r17,r3,r17
  80e724:	003fcc06 	br	80e658 <__floatunsidf+0xac>
  80e728:	2006d07a 	srli	r3,r4,1
  80e72c:	008007c4 	movi	r2,31
  80e730:	1285c83a 	sub	r2,r2,r10
  80e734:	18a6d83a 	srl	r19,r3,r2
  80e738:	22a4983a 	sll	r18,r4,r10
  80e73c:	003fd706 	br	80e69c <__floatunsidf+0xf0>

0080e740 <__clzsi2>:
  80e740:	00bfffd4 	movui	r2,65535
  80e744:	11000e36 	bltu	r2,r4,80e780 <__clzsi2+0x40>
  80e748:	00803fc4 	movi	r2,255
  80e74c:	01400204 	movi	r5,8
  80e750:	0007883a 	mov	r3,zero
  80e754:	11001036 	bltu	r2,r4,80e798 <__clzsi2+0x58>
  80e758:	000b883a 	mov	r5,zero
  80e75c:	20c6d83a 	srl	r3,r4,r3
  80e760:	00802074 	movhi	r2,129
  80e764:	108e7904 	addi	r2,r2,14820
  80e768:	1887883a 	add	r3,r3,r2
  80e76c:	18800003 	ldbu	r2,0(r3)
  80e770:	00c00804 	movi	r3,32
  80e774:	2885883a 	add	r2,r5,r2
  80e778:	1885c83a 	sub	r2,r3,r2
  80e77c:	f800283a 	ret
  80e780:	01400404 	movi	r5,16
  80e784:	00804034 	movhi	r2,256
  80e788:	10bfffc4 	addi	r2,r2,-1
  80e78c:	2807883a 	mov	r3,r5
  80e790:	113ff22e 	bgeu	r2,r4,80e75c <__clzsi2+0x1c>
  80e794:	01400604 	movi	r5,24
  80e798:	2807883a 	mov	r3,r5
  80e79c:	20c6d83a 	srl	r3,r4,r3
  80e7a0:	00802074 	movhi	r2,129
  80e7a4:	108e7904 	addi	r2,r2,14820
  80e7a8:	1887883a 	add	r3,r3,r2
  80e7ac:	18800003 	ldbu	r2,0(r3)
  80e7b0:	00c00804 	movi	r3,32
  80e7b4:	2885883a 	add	r2,r5,r2
  80e7b8:	1885c83a 	sub	r2,r3,r2
  80e7bc:	f800283a 	ret

0080e7c0 <__unpack_f>:
  80e7c0:	21800017 	ldw	r6,0(r4)
  80e7c4:	00c02034 	movhi	r3,128
  80e7c8:	18ffffc4 	addi	r3,r3,-1
  80e7cc:	3004d5fa 	srli	r2,r6,23
  80e7d0:	3008d7fa 	srli	r4,r6,31
  80e7d4:	30ce703a 	and	r7,r6,r3
  80e7d8:	10c03fcc 	andi	r3,r2,255
  80e7dc:	29000115 	stw	r4,4(r5)
  80e7e0:	1800131e 	bne	r3,zero,80e830 <__unpack_f+0x70>
  80e7e4:	38000f26 	beq	r7,zero,80e824 <__unpack_f+0x64>
  80e7e8:	380691fa 	slli	r3,r7,7
  80e7ec:	01bfe084 	movi	r6,-126
  80e7f0:	008000c4 	movi	r2,3
  80e7f4:	01100034 	movhi	r4,16384
  80e7f8:	213fffc4 	addi	r4,r4,-1
  80e7fc:	28800015 	stw	r2,0(r5)
  80e800:	29800215 	stw	r6,8(r5)
  80e804:	20c00536 	bltu	r4,r3,80e81c <__unpack_f+0x5c>
  80e808:	3005883a 	mov	r2,r6
  80e80c:	18c7883a 	add	r3,r3,r3
  80e810:	10bfffc4 	addi	r2,r2,-1
  80e814:	20fffd2e 	bgeu	r4,r3,80e80c <__unpack_f+0x4c>
  80e818:	28800215 	stw	r2,8(r5)
  80e81c:	28c00315 	stw	r3,12(r5)
  80e820:	f800283a 	ret
  80e824:	00800084 	movi	r2,2
  80e828:	28800015 	stw	r2,0(r5)
  80e82c:	f800283a 	ret
  80e830:	00803fc4 	movi	r2,255
  80e834:	18800826 	beq	r3,r2,80e858 <__unpack_f+0x98>
  80e838:	380491fa 	slli	r2,r7,7
  80e83c:	18ffe044 	addi	r3,r3,-127
  80e840:	28c00215 	stw	r3,8(r5)
  80e844:	10900034 	orhi	r2,r2,16384
  80e848:	28800315 	stw	r2,12(r5)
  80e84c:	008000c4 	movi	r2,3
  80e850:	28800015 	stw	r2,0(r5)
  80e854:	f800283a 	ret
  80e858:	3800031e 	bne	r7,zero,80e868 <__unpack_f+0xa8>
  80e85c:	00800104 	movi	r2,4
  80e860:	28800015 	stw	r2,0(r5)
  80e864:	f800283a 	ret
  80e868:	3080042c 	andhi	r2,r6,16
  80e86c:	10000426 	beq	r2,zero,80e880 <__unpack_f+0xc0>
  80e870:	00800044 	movi	r2,1
  80e874:	28800015 	stw	r2,0(r5)
  80e878:	29c00315 	stw	r7,12(r5)
  80e87c:	f800283a 	ret
  80e880:	28000015 	stw	zero,0(r5)
  80e884:	003ffc06 	br	80e878 <__unpack_f+0xb8>

0080e888 <__fpcmp_parts_f>:
  80e888:	21800017 	ldw	r6,0(r4)
  80e88c:	00c00044 	movi	r3,1
  80e890:	19800a2e 	bgeu	r3,r6,80e8bc <__fpcmp_parts_f+0x34>
  80e894:	28800017 	ldw	r2,0(r5)
  80e898:	1880082e 	bgeu	r3,r2,80e8bc <__fpcmp_parts_f+0x34>
  80e89c:	00c00104 	movi	r3,4
  80e8a0:	30c01e26 	beq	r6,r3,80e91c <__fpcmp_parts_f+0x94>
  80e8a4:	10c01a26 	beq	r2,r3,80e910 <__fpcmp_parts_f+0x88>
  80e8a8:	00c00084 	movi	r3,2
  80e8ac:	30c00526 	beq	r6,r3,80e8c4 <__fpcmp_parts_f+0x3c>
  80e8b0:	10c0071e 	bne	r2,r3,80e8d0 <__fpcmp_parts_f+0x48>
  80e8b4:	20800117 	ldw	r2,4(r4)
  80e8b8:	1000091e 	bne	r2,zero,80e8e0 <__fpcmp_parts_f+0x58>
  80e8bc:	00800044 	movi	r2,1
  80e8c0:	f800283a 	ret
  80e8c4:	10c0121e 	bne	r2,r3,80e910 <__fpcmp_parts_f+0x88>
  80e8c8:	0005883a 	mov	r2,zero
  80e8cc:	f800283a 	ret
  80e8d0:	20c00117 	ldw	r3,4(r4)
  80e8d4:	28800117 	ldw	r2,4(r5)
  80e8d8:	18800326 	beq	r3,r2,80e8e8 <__fpcmp_parts_f+0x60>
  80e8dc:	183ff726 	beq	r3,zero,80e8bc <__fpcmp_parts_f+0x34>
  80e8e0:	00bfffc4 	movi	r2,-1
  80e8e4:	f800283a 	ret
  80e8e8:	21800217 	ldw	r6,8(r4)
  80e8ec:	28800217 	ldw	r2,8(r5)
  80e8f0:	11bffa16 	blt	r2,r6,80e8dc <__fpcmp_parts_f+0x54>
  80e8f4:	30800416 	blt	r6,r2,80e908 <__fpcmp_parts_f+0x80>
  80e8f8:	21000317 	ldw	r4,12(r4)
  80e8fc:	29400317 	ldw	r5,12(r5)
  80e900:	293ff636 	bltu	r5,r4,80e8dc <__fpcmp_parts_f+0x54>
  80e904:	217ff02e 	bgeu	r4,r5,80e8c8 <__fpcmp_parts_f+0x40>
  80e908:	183fec1e 	bne	r3,zero,80e8bc <__fpcmp_parts_f+0x34>
  80e90c:	003ff406 	br	80e8e0 <__fpcmp_parts_f+0x58>
  80e910:	28800117 	ldw	r2,4(r5)
  80e914:	103fe91e 	bne	r2,zero,80e8bc <__fpcmp_parts_f+0x34>
  80e918:	003ff106 	br	80e8e0 <__fpcmp_parts_f+0x58>
  80e91c:	11bfe51e 	bne	r2,r6,80e8b4 <__fpcmp_parts_f+0x2c>
  80e920:	28c00117 	ldw	r3,4(r5)
  80e924:	20800117 	ldw	r2,4(r4)
  80e928:	1885c83a 	sub	r2,r3,r2
  80e92c:	f800283a 	ret

0080e930 <__make_fp>:
  80e930:	defffb04 	addi	sp,sp,-20
  80e934:	d9000015 	stw	r4,0(sp)
  80e938:	d809883a 	mov	r4,sp
  80e93c:	dfc00415 	stw	ra,16(sp)
  80e940:	d9400115 	stw	r5,4(sp)
  80e944:	d9800215 	stw	r6,8(sp)
  80e948:	d9c00315 	stw	r7,12(sp)
  80e94c:	080ea240 	call	80ea24 <__pack_f>
  80e950:	dfc00417 	ldw	ra,16(sp)
  80e954:	dec00504 	addi	sp,sp,20
  80e958:	f800283a 	ret

0080e95c <__fpcmp_parts_d>:
  80e95c:	21800017 	ldw	r6,0(r4)
  80e960:	00c00044 	movi	r3,1
  80e964:	19800a2e 	bgeu	r3,r6,80e990 <__fpcmp_parts_d+0x34>
  80e968:	28800017 	ldw	r2,0(r5)
  80e96c:	1880082e 	bgeu	r3,r2,80e990 <__fpcmp_parts_d+0x34>
  80e970:	00c00104 	movi	r3,4
  80e974:	30c02626 	beq	r6,r3,80ea10 <__fpcmp_parts_d+0xb4>
  80e978:	10c02226 	beq	r2,r3,80ea04 <__fpcmp_parts_d+0xa8>
  80e97c:	00c00084 	movi	r3,2
  80e980:	30c00526 	beq	r6,r3,80e998 <__fpcmp_parts_d+0x3c>
  80e984:	10c0071e 	bne	r2,r3,80e9a4 <__fpcmp_parts_d+0x48>
  80e988:	20800117 	ldw	r2,4(r4)
  80e98c:	1000091e 	bne	r2,zero,80e9b4 <__fpcmp_parts_d+0x58>
  80e990:	00800044 	movi	r2,1
  80e994:	f800283a 	ret
  80e998:	10c01a1e 	bne	r2,r3,80ea04 <__fpcmp_parts_d+0xa8>
  80e99c:	0005883a 	mov	r2,zero
  80e9a0:	f800283a 	ret
  80e9a4:	22000117 	ldw	r8,4(r4)
  80e9a8:	28800117 	ldw	r2,4(r5)
  80e9ac:	40800326 	beq	r8,r2,80e9bc <__fpcmp_parts_d+0x60>
  80e9b0:	403ff726 	beq	r8,zero,80e990 <__fpcmp_parts_d+0x34>
  80e9b4:	00bfffc4 	movi	r2,-1
  80e9b8:	f800283a 	ret
  80e9bc:	20c00217 	ldw	r3,8(r4)
  80e9c0:	28800217 	ldw	r2,8(r5)
  80e9c4:	10fffa16 	blt	r2,r3,80e9b0 <__fpcmp_parts_d+0x54>
  80e9c8:	18800916 	blt	r3,r2,80e9f0 <__fpcmp_parts_d+0x94>
  80e9cc:	21c00417 	ldw	r7,16(r4)
  80e9d0:	28c00417 	ldw	r3,16(r5)
  80e9d4:	21800317 	ldw	r6,12(r4)
  80e9d8:	28800317 	ldw	r2,12(r5)
  80e9dc:	19fff436 	bltu	r3,r7,80e9b0 <__fpcmp_parts_d+0x54>
  80e9e0:	38c00526 	beq	r7,r3,80e9f8 <__fpcmp_parts_d+0x9c>
  80e9e4:	38c00236 	bltu	r7,r3,80e9f0 <__fpcmp_parts_d+0x94>
  80e9e8:	19ffec1e 	bne	r3,r7,80e99c <__fpcmp_parts_d+0x40>
  80e9ec:	30bfeb2e 	bgeu	r6,r2,80e99c <__fpcmp_parts_d+0x40>
  80e9f0:	403fe71e 	bne	r8,zero,80e990 <__fpcmp_parts_d+0x34>
  80e9f4:	003fef06 	br	80e9b4 <__fpcmp_parts_d+0x58>
  80e9f8:	11bffa2e 	bgeu	r2,r6,80e9e4 <__fpcmp_parts_d+0x88>
  80e9fc:	403fe426 	beq	r8,zero,80e990 <__fpcmp_parts_d+0x34>
  80ea00:	003fec06 	br	80e9b4 <__fpcmp_parts_d+0x58>
  80ea04:	28800117 	ldw	r2,4(r5)
  80ea08:	103fe11e 	bne	r2,zero,80e990 <__fpcmp_parts_d+0x34>
  80ea0c:	003fe906 	br	80e9b4 <__fpcmp_parts_d+0x58>
  80ea10:	11bfdd1e 	bne	r2,r6,80e988 <__fpcmp_parts_d+0x2c>
  80ea14:	28c00117 	ldw	r3,4(r5)
  80ea18:	20800117 	ldw	r2,4(r4)
  80ea1c:	1885c83a 	sub	r2,r3,r2
  80ea20:	f800283a 	ret

0080ea24 <__pack_f>:
  80ea24:	20c00017 	ldw	r3,0(r4)
  80ea28:	01c00044 	movi	r7,1
  80ea2c:	21800317 	ldw	r6,12(r4)
  80ea30:	21400117 	ldw	r5,4(r4)
  80ea34:	38c02d2e 	bgeu	r7,r3,80eaec <__pack_f+0xc8>
  80ea38:	00800104 	movi	r2,4
  80ea3c:	18802826 	beq	r3,r2,80eae0 <__pack_f+0xbc>
  80ea40:	00800084 	movi	r2,2
  80ea44:	18800126 	beq	r3,r2,80ea4c <__pack_f+0x28>
  80ea48:	3000101e 	bne	r6,zero,80ea8c <__pack_f+0x68>
  80ea4c:	000d883a 	mov	r6,zero
  80ea50:	0007883a 	mov	r3,zero
  80ea54:	19003fcc 	andi	r4,r3,255
  80ea58:	200895fa 	slli	r4,r4,23
  80ea5c:	00c02034 	movhi	r3,128
  80ea60:	18ffffc4 	addi	r3,r3,-1
  80ea64:	30c6703a 	and	r3,r6,r3
  80ea68:	10a0002c 	andhi	r2,r2,32768
  80ea6c:	10c4b03a 	or	r2,r2,r3
  80ea70:	280a97fa 	slli	r5,r5,31
  80ea74:	1104b03a 	or	r2,r2,r4
  80ea78:	00e00034 	movhi	r3,32768
  80ea7c:	18ffffc4 	addi	r3,r3,-1
  80ea80:	10c4703a 	and	r2,r2,r3
  80ea84:	1144b03a 	or	r2,r2,r5
  80ea88:	f800283a 	ret
  80ea8c:	21000217 	ldw	r4,8(r4)
  80ea90:	00bfe084 	movi	r2,-126
  80ea94:	20801b16 	blt	r4,r2,80eb04 <__pack_f+0xe0>
  80ea98:	00801fc4 	movi	r2,127
  80ea9c:	11001016 	blt	r2,r4,80eae0 <__pack_f+0xbc>
  80eaa0:	308e703a 	and	r7,r6,r2
  80eaa4:	2087883a 	add	r3,r4,r2
  80eaa8:	00801004 	movi	r2,64
  80eaac:	38800526 	beq	r7,r2,80eac4 <__pack_f+0xa0>
  80eab0:	31800fc4 	addi	r6,r6,63
  80eab4:	30000716 	blt	r6,zero,80ead4 <__pack_f+0xb0>
  80eab8:	300490ba 	slli	r2,r6,2
  80eabc:	100cd27a 	srli	r6,r2,9
  80eac0:	003fe406 	br	80ea54 <__pack_f+0x30>
  80eac4:	3080200c 	andi	r2,r6,128
  80eac8:	103ffa26 	beq	r2,zero,80eab4 <__pack_f+0x90>
  80eacc:	31cd883a 	add	r6,r6,r7
  80ead0:	003ff806 	br	80eab4 <__pack_f+0x90>
  80ead4:	300cd07a 	srli	r6,r6,1
  80ead8:	18c00044 	addi	r3,r3,1
  80eadc:	003ff606 	br	80eab8 <__pack_f+0x94>
  80eae0:	000d883a 	mov	r6,zero
  80eae4:	00ffffc4 	movi	r3,-1
  80eae8:	003fda06 	br	80ea54 <__pack_f+0x30>
  80eaec:	31800434 	orhi	r6,r6,16
  80eaf0:	00802034 	movhi	r2,128
  80eaf4:	10bfffc4 	addi	r2,r2,-1
  80eaf8:	308c703a 	and	r6,r6,r2
  80eafc:	00ffffc4 	movi	r3,-1
  80eb00:	003fd406 	br	80ea54 <__pack_f+0x30>
  80eb04:	1109c83a 	sub	r4,r2,r4
  80eb08:	00800644 	movi	r2,25
  80eb0c:	11001216 	blt	r2,r4,80eb58 <__pack_f+0x134>
  80eb10:	3904983a 	sll	r2,r7,r4
  80eb14:	3106d83a 	srl	r3,r6,r4
  80eb18:	10bfffc4 	addi	r2,r2,-1
  80eb1c:	3084703a 	and	r2,r6,r2
  80eb20:	1004c03a 	cmpne	r2,r2,zero
  80eb24:	1886b03a 	or	r3,r3,r2
  80eb28:	19001fcc 	andi	r4,r3,127
  80eb2c:	00801004 	movi	r2,64
  80eb30:	20800c26 	beq	r4,r2,80eb64 <__pack_f+0x140>
  80eb34:	18c00fc4 	addi	r3,r3,63
  80eb38:	00900034 	movhi	r2,16384
  80eb3c:	10bfffc4 	addi	r2,r2,-1
  80eb40:	180cd1fa 	srli	r6,r3,7
  80eb44:	10c7803a 	cmpltu	r3,r2,r3
  80eb48:	00802034 	movhi	r2,128
  80eb4c:	10bfffc4 	addi	r2,r2,-1
  80eb50:	308c703a 	and	r6,r6,r2
  80eb54:	003fbf06 	br	80ea54 <__pack_f+0x30>
  80eb58:	0007883a 	mov	r3,zero
  80eb5c:	000d883a 	mov	r6,zero
  80eb60:	003ff906 	br	80eb48 <__pack_f+0x124>
  80eb64:	1880200c 	andi	r2,r3,128
  80eb68:	10000126 	beq	r2,zero,80eb70 <__pack_f+0x14c>
  80eb6c:	1907883a 	add	r3,r3,r4
  80eb70:	180cd1fa 	srli	r6,r3,7
  80eb74:	00900034 	movhi	r2,16384
  80eb78:	10bfffc4 	addi	r2,r2,-1
  80eb7c:	10c7803a 	cmpltu	r3,r2,r3
  80eb80:	003ff106 	br	80eb48 <__pack_f+0x124>

0080eb84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80eb84:	defff804 	addi	sp,sp,-32
  80eb88:	dfc00715 	stw	ra,28(sp)
  80eb8c:	df000615 	stw	fp,24(sp)
  80eb90:	df000604 	addi	fp,sp,24
  80eb94:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80eb98:	e0bffc17 	ldw	r2,-16(fp)
  80eb9c:	1004803a 	cmplt	r2,r2,zero
  80eba0:	1000091e 	bne	r2,zero,80ebc8 <close+0x44>
  80eba4:	e13ffc17 	ldw	r4,-16(fp)
  80eba8:	01400304 	movi	r5,12
  80ebac:	0802a640 	call	802a64 <__mulsi3>
  80ebb0:	1007883a 	mov	r3,r2
  80ebb4:	00802074 	movhi	r2,129
  80ebb8:	1090e604 	addi	r2,r2,17304
  80ebbc:	1887883a 	add	r3,r3,r2
  80ebc0:	e0ffff15 	stw	r3,-4(fp)
  80ebc4:	00000106 	br	80ebcc <close+0x48>
  80ebc8:	e03fff15 	stw	zero,-4(fp)
  80ebcc:	e0bfff17 	ldw	r2,-4(fp)
  80ebd0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80ebd4:	e0bffb17 	ldw	r2,-20(fp)
  80ebd8:	1005003a 	cmpeq	r2,r2,zero
  80ebdc:	10001d1e 	bne	r2,zero,80ec54 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ebe0:	e0bffb17 	ldw	r2,-20(fp)
  80ebe4:	10800017 	ldw	r2,0(r2)
  80ebe8:	10800417 	ldw	r2,16(r2)
  80ebec:	1005003a 	cmpeq	r2,r2,zero
  80ebf0:	1000071e 	bne	r2,zero,80ec10 <close+0x8c>
  80ebf4:	e0bffb17 	ldw	r2,-20(fp)
  80ebf8:	10800017 	ldw	r2,0(r2)
  80ebfc:	10800417 	ldw	r2,16(r2)
  80ec00:	e13ffb17 	ldw	r4,-20(fp)
  80ec04:	103ee83a 	callr	r2
  80ec08:	e0bffe15 	stw	r2,-8(fp)
  80ec0c:	00000106 	br	80ec14 <close+0x90>
  80ec10:	e03ffe15 	stw	zero,-8(fp)
  80ec14:	e0bffe17 	ldw	r2,-8(fp)
  80ec18:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ec1c:	e13ffc17 	ldw	r4,-16(fp)
  80ec20:	080f8800 	call	80f880 <alt_release_fd>
    if (rval < 0)
  80ec24:	e0bffa17 	ldw	r2,-24(fp)
  80ec28:	1004403a 	cmpge	r2,r2,zero
  80ec2c:	1000071e 	bne	r2,zero,80ec4c <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80ec30:	080ec840 	call	80ec84 <alt_get_errno>
  80ec34:	e0fffa17 	ldw	r3,-24(fp)
  80ec38:	00c7c83a 	sub	r3,zero,r3
  80ec3c:	10c00015 	stw	r3,0(r2)
      return -1;
  80ec40:	00bfffc4 	movi	r2,-1
  80ec44:	e0bffd15 	stw	r2,-12(fp)
  80ec48:	00000806 	br	80ec6c <close+0xe8>
    }
    return 0;
  80ec4c:	e03ffd15 	stw	zero,-12(fp)
  80ec50:	00000606 	br	80ec6c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ec54:	080ec840 	call	80ec84 <alt_get_errno>
  80ec58:	1007883a 	mov	r3,r2
  80ec5c:	00801444 	movi	r2,81
  80ec60:	18800015 	stw	r2,0(r3)
    return -1;
  80ec64:	00bfffc4 	movi	r2,-1
  80ec68:	e0bffd15 	stw	r2,-12(fp)
  80ec6c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80ec70:	e037883a 	mov	sp,fp
  80ec74:	dfc00117 	ldw	ra,4(sp)
  80ec78:	df000017 	ldw	fp,0(sp)
  80ec7c:	dec00204 	addi	sp,sp,8
  80ec80:	f800283a 	ret

0080ec84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ec84:	defffd04 	addi	sp,sp,-12
  80ec88:	dfc00215 	stw	ra,8(sp)
  80ec8c:	df000115 	stw	fp,4(sp)
  80ec90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ec94:	00802074 	movhi	r2,129
  80ec98:	1095e304 	addi	r2,r2,22412
  80ec9c:	10800017 	ldw	r2,0(r2)
  80eca0:	1005003a 	cmpeq	r2,r2,zero
  80eca4:	1000061e 	bne	r2,zero,80ecc0 <alt_get_errno+0x3c>
  80eca8:	00802074 	movhi	r2,129
  80ecac:	1095e304 	addi	r2,r2,22412
  80ecb0:	10800017 	ldw	r2,0(r2)
  80ecb4:	103ee83a 	callr	r2
  80ecb8:	e0bfff15 	stw	r2,-4(fp)
  80ecbc:	00000306 	br	80eccc <alt_get_errno+0x48>
  80ecc0:	00802074 	movhi	r2,129
  80ecc4:	109d1404 	addi	r2,r2,29776
  80ecc8:	e0bfff15 	stw	r2,-4(fp)
  80eccc:	e0bfff17 	ldw	r2,-4(fp)
}
  80ecd0:	e037883a 	mov	sp,fp
  80ecd4:	dfc00117 	ldw	ra,4(sp)
  80ecd8:	df000017 	ldw	fp,0(sp)
  80ecdc:	dec00204 	addi	sp,sp,8
  80ece0:	f800283a 	ret

0080ece4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ece4:	defffc04 	addi	sp,sp,-16
  80ece8:	df000315 	stw	fp,12(sp)
  80ecec:	df000304 	addi	fp,sp,12
  80ecf0:	e13ffd15 	stw	r4,-12(fp)
  80ecf4:	e17ffe15 	stw	r5,-8(fp)
  80ecf8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ecfc:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed00:	e037883a 	mov	sp,fp
  80ed04:	df000017 	ldw	fp,0(sp)
  80ed08:	dec00104 	addi	sp,sp,4
  80ed0c:	f800283a 	ret

0080ed10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ed10:	defff904 	addi	sp,sp,-28
  80ed14:	dfc00615 	stw	ra,24(sp)
  80ed18:	df000515 	stw	fp,20(sp)
  80ed1c:	df000504 	addi	fp,sp,20
  80ed20:	e13ffc15 	stw	r4,-16(fp)
  80ed24:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ed28:	e0bffc17 	ldw	r2,-16(fp)
  80ed2c:	1004803a 	cmplt	r2,r2,zero
  80ed30:	1000091e 	bne	r2,zero,80ed58 <fstat+0x48>
  80ed34:	e13ffc17 	ldw	r4,-16(fp)
  80ed38:	01400304 	movi	r5,12
  80ed3c:	0802a640 	call	802a64 <__mulsi3>
  80ed40:	1007883a 	mov	r3,r2
  80ed44:	00802074 	movhi	r2,129
  80ed48:	1090e604 	addi	r2,r2,17304
  80ed4c:	1887883a 	add	r3,r3,r2
  80ed50:	e0ffff15 	stw	r3,-4(fp)
  80ed54:	00000106 	br	80ed5c <fstat+0x4c>
  80ed58:	e03fff15 	stw	zero,-4(fp)
  80ed5c:	e0bfff17 	ldw	r2,-4(fp)
  80ed60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ed64:	e0bffb17 	ldw	r2,-20(fp)
  80ed68:	1005003a 	cmpeq	r2,r2,zero
  80ed6c:	1000121e 	bne	r2,zero,80edb8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ed70:	e0bffb17 	ldw	r2,-20(fp)
  80ed74:	10800017 	ldw	r2,0(r2)
  80ed78:	10800817 	ldw	r2,32(r2)
  80ed7c:	1005003a 	cmpeq	r2,r2,zero
  80ed80:	1000081e 	bne	r2,zero,80eda4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80ed84:	e0bffb17 	ldw	r2,-20(fp)
  80ed88:	10800017 	ldw	r2,0(r2)
  80ed8c:	10800817 	ldw	r2,32(r2)
  80ed90:	e13ffb17 	ldw	r4,-20(fp)
  80ed94:	e17ffd17 	ldw	r5,-12(fp)
  80ed98:	103ee83a 	callr	r2
  80ed9c:	e0bffe15 	stw	r2,-8(fp)
  80eda0:	00000b06 	br	80edd0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80eda4:	e0fffd17 	ldw	r3,-12(fp)
  80eda8:	00880004 	movi	r2,8192
  80edac:	18800115 	stw	r2,4(r3)
      return 0;
  80edb0:	e03ffe15 	stw	zero,-8(fp)
  80edb4:	00000606 	br	80edd0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80edb8:	080ede80 	call	80ede8 <alt_get_errno>
  80edbc:	1007883a 	mov	r3,r2
  80edc0:	00801444 	movi	r2,81
  80edc4:	18800015 	stw	r2,0(r3)
    return -1;
  80edc8:	00bfffc4 	movi	r2,-1
  80edcc:	e0bffe15 	stw	r2,-8(fp)
  80edd0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80edd4:	e037883a 	mov	sp,fp
  80edd8:	dfc00117 	ldw	ra,4(sp)
  80eddc:	df000017 	ldw	fp,0(sp)
  80ede0:	dec00204 	addi	sp,sp,8
  80ede4:	f800283a 	ret

0080ede8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ede8:	defffd04 	addi	sp,sp,-12
  80edec:	dfc00215 	stw	ra,8(sp)
  80edf0:	df000115 	stw	fp,4(sp)
  80edf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80edf8:	00802074 	movhi	r2,129
  80edfc:	1095e304 	addi	r2,r2,22412
  80ee00:	10800017 	ldw	r2,0(r2)
  80ee04:	1005003a 	cmpeq	r2,r2,zero
  80ee08:	1000061e 	bne	r2,zero,80ee24 <alt_get_errno+0x3c>
  80ee0c:	00802074 	movhi	r2,129
  80ee10:	1095e304 	addi	r2,r2,22412
  80ee14:	10800017 	ldw	r2,0(r2)
  80ee18:	103ee83a 	callr	r2
  80ee1c:	e0bfff15 	stw	r2,-4(fp)
  80ee20:	00000306 	br	80ee30 <alt_get_errno+0x48>
  80ee24:	00802074 	movhi	r2,129
  80ee28:	109d1404 	addi	r2,r2,29776
  80ee2c:	e0bfff15 	stw	r2,-4(fp)
  80ee30:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee34:	e037883a 	mov	sp,fp
  80ee38:	dfc00117 	ldw	ra,4(sp)
  80ee3c:	df000017 	ldw	fp,0(sp)
  80ee40:	dec00204 	addi	sp,sp,8
  80ee44:	f800283a 	ret

0080ee48 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80ee48:	deffef04 	addi	sp,sp,-68
  80ee4c:	df001015 	stw	fp,64(sp)
  80ee50:	df001004 	addi	fp,sp,64
  80ee54:	e13ffc15 	stw	r4,-16(fp)
  80ee58:	e17ffd15 	stw	r5,-12(fp)
  80ee5c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80ee60:	00bffa84 	movi	r2,-22
  80ee64:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ee68:	e0bffc17 	ldw	r2,-16(fp)
  80ee6c:	10800828 	cmpgeui	r2,r2,32
  80ee70:	1000601e 	bne	r2,zero,80eff4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee74:	0005303a 	rdctl	r2,status
  80ee78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee7c:	e0fff917 	ldw	r3,-28(fp)
  80ee80:	00bfff84 	movi	r2,-2
  80ee84:	1884703a 	and	r2,r3,r2
  80ee88:	1001703a 	wrctl	status,r2
  
  return context;
  80ee8c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80ee90:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80ee94:	e0bffc17 	ldw	r2,-16(fp)
  80ee98:	00c020b4 	movhi	r3,130
  80ee9c:	18e19904 	addi	r3,r3,-31132
  80eea0:	100490fa 	slli	r2,r2,3
  80eea4:	10c7883a 	add	r3,r2,r3
  80eea8:	e0bffe17 	ldw	r2,-8(fp)
  80eeac:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80eeb0:	e0bffc17 	ldw	r2,-16(fp)
  80eeb4:	00c020b4 	movhi	r3,130
  80eeb8:	18e19904 	addi	r3,r3,-31132
  80eebc:	100490fa 	slli	r2,r2,3
  80eec0:	10c5883a 	add	r2,r2,r3
  80eec4:	10c00104 	addi	r3,r2,4
  80eec8:	e0bffd17 	ldw	r2,-12(fp)
  80eecc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80eed0:	e0bffe17 	ldw	r2,-8(fp)
  80eed4:	1005003a 	cmpeq	r2,r2,zero
  80eed8:	1000201e 	bne	r2,zero,80ef5c <alt_irq_register+0x114>
  80eedc:	e0bffc17 	ldw	r2,-16(fp)
  80eee0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eee4:	0005303a 	rdctl	r2,status
  80eee8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eeec:	e0fff617 	ldw	r3,-40(fp)
  80eef0:	00bfff84 	movi	r2,-2
  80eef4:	1884703a 	and	r2,r3,r2
  80eef8:	1001703a 	wrctl	status,r2
  
  return context;
  80eefc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ef00:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80ef04:	e0fff717 	ldw	r3,-36(fp)
  80ef08:	00800044 	movi	r2,1
  80ef0c:	10c4983a 	sll	r2,r2,r3
  80ef10:	1007883a 	mov	r3,r2
  80ef14:	00802074 	movhi	r2,129
  80ef18:	109d1b04 	addi	r2,r2,29804
  80ef1c:	10800017 	ldw	r2,0(r2)
  80ef20:	1886b03a 	or	r3,r3,r2
  80ef24:	00802074 	movhi	r2,129
  80ef28:	109d1b04 	addi	r2,r2,29804
  80ef2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ef30:	00802074 	movhi	r2,129
  80ef34:	109d1b04 	addi	r2,r2,29804
  80ef38:	10800017 	ldw	r2,0(r2)
  80ef3c:	100170fa 	wrctl	ienable,r2
  80ef40:	e0bff817 	ldw	r2,-32(fp)
  80ef44:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef48:	e0bff517 	ldw	r2,-44(fp)
  80ef4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ef50:	0005883a 	mov	r2,zero
  80ef54:	e0bfff15 	stw	r2,-4(fp)
  80ef58:	00002006 	br	80efdc <alt_irq_register+0x194>
  80ef5c:	e0bffc17 	ldw	r2,-16(fp)
  80ef60:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef64:	0005303a 	rdctl	r2,status
  80ef68:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef6c:	e0fff217 	ldw	r3,-56(fp)
  80ef70:	00bfff84 	movi	r2,-2
  80ef74:	1884703a 	and	r2,r3,r2
  80ef78:	1001703a 	wrctl	status,r2
  
  return context;
  80ef7c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ef80:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80ef84:	e0fff317 	ldw	r3,-52(fp)
  80ef88:	00800044 	movi	r2,1
  80ef8c:	10c4983a 	sll	r2,r2,r3
  80ef90:	0084303a 	nor	r2,zero,r2
  80ef94:	1007883a 	mov	r3,r2
  80ef98:	00802074 	movhi	r2,129
  80ef9c:	109d1b04 	addi	r2,r2,29804
  80efa0:	10800017 	ldw	r2,0(r2)
  80efa4:	1886703a 	and	r3,r3,r2
  80efa8:	00802074 	movhi	r2,129
  80efac:	109d1b04 	addi	r2,r2,29804
  80efb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80efb4:	00802074 	movhi	r2,129
  80efb8:	109d1b04 	addi	r2,r2,29804
  80efbc:	10800017 	ldw	r2,0(r2)
  80efc0:	100170fa 	wrctl	ienable,r2
  80efc4:	e0bff417 	ldw	r2,-48(fp)
  80efc8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efcc:	e0bff117 	ldw	r2,-60(fp)
  80efd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80efd4:	0005883a 	mov	r2,zero
  80efd8:	e0bfff15 	stw	r2,-4(fp)
  80efdc:	e0bfff17 	ldw	r2,-4(fp)
  80efe0:	e0bffb15 	stw	r2,-20(fp)
  80efe4:	e0bffa17 	ldw	r2,-24(fp)
  80efe8:	e0bff015 	stw	r2,-64(fp)
  80efec:	e0bff017 	ldw	r2,-64(fp)
  80eff0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80eff4:	e0bffb17 	ldw	r2,-20(fp)
}
  80eff8:	e037883a 	mov	sp,fp
  80effc:	df000017 	ldw	fp,0(sp)
  80f000:	dec00104 	addi	sp,sp,4
  80f004:	f800283a 	ret

0080f008 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f008:	deffeb04 	addi	sp,sp,-84
  80f00c:	dfc01415 	stw	ra,80(sp)
  80f010:	df001315 	stw	fp,76(sp)
  80f014:	df001304 	addi	fp,sp,76
  80f018:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f01c:	e0bffd17 	ldw	r2,-12(fp)
  80f020:	1004803a 	cmplt	r2,r2,zero
  80f024:	1000091e 	bne	r2,zero,80f04c <isatty+0x44>
  80f028:	e13ffd17 	ldw	r4,-12(fp)
  80f02c:	01400304 	movi	r5,12
  80f030:	0802a640 	call	802a64 <__mulsi3>
  80f034:	1007883a 	mov	r3,r2
  80f038:	00802074 	movhi	r2,129
  80f03c:	1090e604 	addi	r2,r2,17304
  80f040:	1887883a 	add	r3,r3,r2
  80f044:	e0ffff15 	stw	r3,-4(fp)
  80f048:	00000106 	br	80f050 <isatty+0x48>
  80f04c:	e03fff15 	stw	zero,-4(fp)
  80f050:	e0bfff17 	ldw	r2,-4(fp)
  80f054:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80f058:	e0bfed17 	ldw	r2,-76(fp)
  80f05c:	1005003a 	cmpeq	r2,r2,zero
  80f060:	10000f1e 	bne	r2,zero,80f0a0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f064:	e0bfed17 	ldw	r2,-76(fp)
  80f068:	10800017 	ldw	r2,0(r2)
  80f06c:	10800817 	ldw	r2,32(r2)
  80f070:	1004c03a 	cmpne	r2,r2,zero
  80f074:	1000031e 	bne	r2,zero,80f084 <isatty+0x7c>
    {
      return 1;
  80f078:	00800044 	movi	r2,1
  80f07c:	e0bffe15 	stw	r2,-8(fp)
  80f080:	00000c06 	br	80f0b4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f084:	e17fee04 	addi	r5,fp,-72
  80f088:	e13ffd17 	ldw	r4,-12(fp)
  80f08c:	080ed100 	call	80ed10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f090:	e0bfef17 	ldw	r2,-68(fp)
  80f094:	10880020 	cmpeqi	r2,r2,8192
  80f098:	e0bffe15 	stw	r2,-8(fp)
  80f09c:	00000506 	br	80f0b4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f0a0:	080f0cc0 	call	80f0cc <alt_get_errno>
  80f0a4:	1007883a 	mov	r3,r2
  80f0a8:	00801444 	movi	r2,81
  80f0ac:	18800015 	stw	r2,0(r3)
    return 0;
  80f0b0:	e03ffe15 	stw	zero,-8(fp)
  80f0b4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80f0b8:	e037883a 	mov	sp,fp
  80f0bc:	dfc00117 	ldw	ra,4(sp)
  80f0c0:	df000017 	ldw	fp,0(sp)
  80f0c4:	dec00204 	addi	sp,sp,8
  80f0c8:	f800283a 	ret

0080f0cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f0cc:	defffd04 	addi	sp,sp,-12
  80f0d0:	dfc00215 	stw	ra,8(sp)
  80f0d4:	df000115 	stw	fp,4(sp)
  80f0d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f0dc:	00802074 	movhi	r2,129
  80f0e0:	1095e304 	addi	r2,r2,22412
  80f0e4:	10800017 	ldw	r2,0(r2)
  80f0e8:	1005003a 	cmpeq	r2,r2,zero
  80f0ec:	1000061e 	bne	r2,zero,80f108 <alt_get_errno+0x3c>
  80f0f0:	00802074 	movhi	r2,129
  80f0f4:	1095e304 	addi	r2,r2,22412
  80f0f8:	10800017 	ldw	r2,0(r2)
  80f0fc:	103ee83a 	callr	r2
  80f100:	e0bfff15 	stw	r2,-4(fp)
  80f104:	00000306 	br	80f114 <alt_get_errno+0x48>
  80f108:	00802074 	movhi	r2,129
  80f10c:	109d1404 	addi	r2,r2,29776
  80f110:	e0bfff15 	stw	r2,-4(fp)
  80f114:	e0bfff17 	ldw	r2,-4(fp)
}
  80f118:	e037883a 	mov	sp,fp
  80f11c:	dfc00117 	ldw	ra,4(sp)
  80f120:	df000017 	ldw	fp,0(sp)
  80f124:	dec00204 	addi	sp,sp,8
  80f128:	f800283a 	ret

0080f12c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80f12c:	defffe04 	addi	sp,sp,-8
  80f130:	dfc00115 	stw	ra,4(sp)
  80f134:	df000015 	stw	fp,0(sp)
  80f138:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f13c:	01002074 	movhi	r4,129
  80f140:	2115e904 	addi	r4,r4,22436
  80f144:	01402074 	movhi	r5,129
  80f148:	294ecd04 	addi	r5,r5,15156
  80f14c:	01802074 	movhi	r6,129
  80f150:	3195e904 	addi	r6,r6,22436
  80f154:	080f1ac0 	call	80f1ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f158:	01002034 	movhi	r4,128
  80f15c:	21000804 	addi	r4,r4,32
  80f160:	01402034 	movhi	r5,128
  80f164:	29400804 	addi	r5,r5,32
  80f168:	01802034 	movhi	r6,128
  80f16c:	31806d04 	addi	r6,r6,436
  80f170:	080f1ac0 	call	80f1ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f174:	01002074 	movhi	r4,129
  80f178:	210cb304 	addi	r4,r4,13004
  80f17c:	01402074 	movhi	r5,129
  80f180:	294cb304 	addi	r5,r5,13004
  80f184:	01802074 	movhi	r6,129
  80f188:	318ecd04 	addi	r6,r6,15156
  80f18c:	080f1ac0 	call	80f1ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f190:	08124480 	call	812448 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f194:	08128c40 	call	8128c4 <alt_icache_flush_all>
}
  80f198:	e037883a 	mov	sp,fp
  80f19c:	dfc00117 	ldw	ra,4(sp)
  80f1a0:	df000017 	ldw	fp,0(sp)
  80f1a4:	dec00204 	addi	sp,sp,8
  80f1a8:	f800283a 	ret

0080f1ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80f1ac:	defffc04 	addi	sp,sp,-16
  80f1b0:	df000315 	stw	fp,12(sp)
  80f1b4:	df000304 	addi	fp,sp,12
  80f1b8:	e13ffd15 	stw	r4,-12(fp)
  80f1bc:	e17ffe15 	stw	r5,-8(fp)
  80f1c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80f1c4:	e0fffe17 	ldw	r3,-8(fp)
  80f1c8:	e0bffd17 	ldw	r2,-12(fp)
  80f1cc:	18800e26 	beq	r3,r2,80f208 <alt_load_section+0x5c>
  {
    while( to != end )
  80f1d0:	00000a06 	br	80f1fc <alt_load_section+0x50>
    {
      *to++ = *from++;
  80f1d4:	e0bffd17 	ldw	r2,-12(fp)
  80f1d8:	10c00017 	ldw	r3,0(r2)
  80f1dc:	e0bffe17 	ldw	r2,-8(fp)
  80f1e0:	10c00015 	stw	r3,0(r2)
  80f1e4:	e0bffe17 	ldw	r2,-8(fp)
  80f1e8:	10800104 	addi	r2,r2,4
  80f1ec:	e0bffe15 	stw	r2,-8(fp)
  80f1f0:	e0bffd17 	ldw	r2,-12(fp)
  80f1f4:	10800104 	addi	r2,r2,4
  80f1f8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80f1fc:	e0fffe17 	ldw	r3,-8(fp)
  80f200:	e0bfff17 	ldw	r2,-4(fp)
  80f204:	18bff31e 	bne	r3,r2,80f1d4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80f208:	e037883a 	mov	sp,fp
  80f20c:	df000017 	ldw	fp,0(sp)
  80f210:	dec00104 	addi	sp,sp,4
  80f214:	f800283a 	ret

0080f218 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f218:	defff804 	addi	sp,sp,-32
  80f21c:	dfc00715 	stw	ra,28(sp)
  80f220:	df000615 	stw	fp,24(sp)
  80f224:	df000604 	addi	fp,sp,24
  80f228:	e13ffc15 	stw	r4,-16(fp)
  80f22c:	e17ffd15 	stw	r5,-12(fp)
  80f230:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f234:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f238:	e0bffc17 	ldw	r2,-16(fp)
  80f23c:	1004803a 	cmplt	r2,r2,zero
  80f240:	1000091e 	bne	r2,zero,80f268 <lseek+0x50>
  80f244:	e13ffc17 	ldw	r4,-16(fp)
  80f248:	01400304 	movi	r5,12
  80f24c:	0802a640 	call	802a64 <__mulsi3>
  80f250:	1007883a 	mov	r3,r2
  80f254:	00802074 	movhi	r2,129
  80f258:	1090e604 	addi	r2,r2,17304
  80f25c:	1887883a 	add	r3,r3,r2
  80f260:	e0ffff15 	stw	r3,-4(fp)
  80f264:	00000106 	br	80f26c <lseek+0x54>
  80f268:	e03fff15 	stw	zero,-4(fp)
  80f26c:	e0bfff17 	ldw	r2,-4(fp)
  80f270:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80f274:	e0bffb17 	ldw	r2,-20(fp)
  80f278:	1005003a 	cmpeq	r2,r2,zero
  80f27c:	1000111e 	bne	r2,zero,80f2c4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f280:	e0bffb17 	ldw	r2,-20(fp)
  80f284:	10800017 	ldw	r2,0(r2)
  80f288:	10800717 	ldw	r2,28(r2)
  80f28c:	1005003a 	cmpeq	r2,r2,zero
  80f290:	1000091e 	bne	r2,zero,80f2b8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f294:	e0bffb17 	ldw	r2,-20(fp)
  80f298:	10800017 	ldw	r2,0(r2)
  80f29c:	10800717 	ldw	r2,28(r2)
  80f2a0:	e13ffb17 	ldw	r4,-20(fp)
  80f2a4:	e17ffd17 	ldw	r5,-12(fp)
  80f2a8:	e1bffe17 	ldw	r6,-8(fp)
  80f2ac:	103ee83a 	callr	r2
  80f2b0:	e0bffa15 	stw	r2,-24(fp)
  80f2b4:	00000506 	br	80f2cc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f2b8:	00bfde84 	movi	r2,-134
  80f2bc:	e0bffa15 	stw	r2,-24(fp)
  80f2c0:	00000206 	br	80f2cc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f2c4:	00bfebc4 	movi	r2,-81
  80f2c8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80f2cc:	e0bffa17 	ldw	r2,-24(fp)
  80f2d0:	1004403a 	cmpge	r2,r2,zero
  80f2d4:	1000071e 	bne	r2,zero,80f2f4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80f2d8:	080f30c0 	call	80f30c <alt_get_errno>
  80f2dc:	1007883a 	mov	r3,r2
  80f2e0:	e0bffa17 	ldw	r2,-24(fp)
  80f2e4:	0085c83a 	sub	r2,zero,r2
  80f2e8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f2ec:	00bfffc4 	movi	r2,-1
  80f2f0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80f2f4:	e0bffa17 	ldw	r2,-24(fp)
}
  80f2f8:	e037883a 	mov	sp,fp
  80f2fc:	dfc00117 	ldw	ra,4(sp)
  80f300:	df000017 	ldw	fp,0(sp)
  80f304:	dec00204 	addi	sp,sp,8
  80f308:	f800283a 	ret

0080f30c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f30c:	defffd04 	addi	sp,sp,-12
  80f310:	dfc00215 	stw	ra,8(sp)
  80f314:	df000115 	stw	fp,4(sp)
  80f318:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f31c:	00802074 	movhi	r2,129
  80f320:	1095e304 	addi	r2,r2,22412
  80f324:	10800017 	ldw	r2,0(r2)
  80f328:	1005003a 	cmpeq	r2,r2,zero
  80f32c:	1000061e 	bne	r2,zero,80f348 <alt_get_errno+0x3c>
  80f330:	00802074 	movhi	r2,129
  80f334:	1095e304 	addi	r2,r2,22412
  80f338:	10800017 	ldw	r2,0(r2)
  80f33c:	103ee83a 	callr	r2
  80f340:	e0bfff15 	stw	r2,-4(fp)
  80f344:	00000306 	br	80f354 <alt_get_errno+0x48>
  80f348:	00802074 	movhi	r2,129
  80f34c:	109d1404 	addi	r2,r2,29776
  80f350:	e0bfff15 	stw	r2,-4(fp)
  80f354:	e0bfff17 	ldw	r2,-4(fp)
}
  80f358:	e037883a 	mov	sp,fp
  80f35c:	dfc00117 	ldw	ra,4(sp)
  80f360:	df000017 	ldw	fp,0(sp)
  80f364:	dec00204 	addi	sp,sp,8
  80f368:	f800283a 	ret

0080f36c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f36c:	defffd04 	addi	sp,sp,-12
  80f370:	dfc00215 	stw	ra,8(sp)
  80f374:	df000115 	stw	fp,4(sp)
  80f378:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f37c:	0009883a 	mov	r4,zero
  80f380:	080fb680 	call	80fb68 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f384:	080fb9c0 	call	80fb9c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f388:	01002074 	movhi	r4,129
  80f38c:	210ebc04 	addi	r4,r4,15088
  80f390:	01402074 	movhi	r5,129
  80f394:	294ebc04 	addi	r5,r5,15088
  80f398:	01802074 	movhi	r6,129
  80f39c:	318ebc04 	addi	r6,r6,15088
  80f3a0:	0812c840 	call	812c84 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f3a4:	08125780 	call	812578 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f3a8:	01002074 	movhi	r4,129
  80f3ac:	21097704 	addi	r4,r4,9692
  80f3b0:	0812ec00 	call	812ec0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f3b4:	d1274517 	ldw	r4,-25324(gp)
  80f3b8:	d1674617 	ldw	r5,-25320(gp)
  80f3bc:	d1a74717 	ldw	r6,-25316(gp)
  80f3c0:	080159c0 	call	80159c <main>
  80f3c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f3c8:	01000044 	movi	r4,1
  80f3cc:	080eb840 	call	80eb84 <close>
  exit (result);
  80f3d0:	e13fff17 	ldw	r4,-4(fp)
  80f3d4:	0812ed40 	call	812ed4 <exit>

0080f3d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f3d8:	defffe04 	addi	sp,sp,-8
  80f3dc:	df000115 	stw	fp,4(sp)
  80f3e0:	df000104 	addi	fp,sp,4
  80f3e4:	e13fff15 	stw	r4,-4(fp)
}
  80f3e8:	e037883a 	mov	sp,fp
  80f3ec:	df000017 	ldw	fp,0(sp)
  80f3f0:	dec00104 	addi	sp,sp,4
  80f3f4:	f800283a 	ret

0080f3f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f3f8:	defffe04 	addi	sp,sp,-8
  80f3fc:	df000115 	stw	fp,4(sp)
  80f400:	df000104 	addi	fp,sp,4
  80f404:	e13fff15 	stw	r4,-4(fp)
}
  80f408:	e037883a 	mov	sp,fp
  80f40c:	df000017 	ldw	fp,0(sp)
  80f410:	dec00104 	addi	sp,sp,4
  80f414:	f800283a 	ret

0080f418 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f418:	defffa04 	addi	sp,sp,-24
  80f41c:	dfc00515 	stw	ra,20(sp)
  80f420:	df000415 	stw	fp,16(sp)
  80f424:	dc000315 	stw	r16,12(sp)
  80f428:	df000304 	addi	fp,sp,12
  80f42c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f430:	e0bffe17 	ldw	r2,-8(fp)
  80f434:	10800217 	ldw	r2,8(r2)
  80f438:	10d00034 	orhi	r3,r2,16384
  80f43c:	e0bffe17 	ldw	r2,-8(fp)
  80f440:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f444:	e03ffd15 	stw	zero,-12(fp)
  80f448:	00002306 	br	80f4d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f44c:	e13ffd17 	ldw	r4,-12(fp)
  80f450:	04002074 	movhi	r16,129
  80f454:	8410e604 	addi	r16,r16,17304
  80f458:	01400304 	movi	r5,12
  80f45c:	0802a640 	call	802a64 <__mulsi3>
  80f460:	1405883a 	add	r2,r2,r16
  80f464:	10c00017 	ldw	r3,0(r2)
  80f468:	e0bffe17 	ldw	r2,-8(fp)
  80f46c:	10800017 	ldw	r2,0(r2)
  80f470:	1880161e 	bne	r3,r2,80f4cc <alt_file_locked+0xb4>
  80f474:	e13ffd17 	ldw	r4,-12(fp)
  80f478:	04002074 	movhi	r16,129
  80f47c:	8410e604 	addi	r16,r16,17304
  80f480:	01400304 	movi	r5,12
  80f484:	0802a640 	call	802a64 <__mulsi3>
  80f488:	1405883a 	add	r2,r2,r16
  80f48c:	10800204 	addi	r2,r2,8
  80f490:	10800017 	ldw	r2,0(r2)
  80f494:	1004403a 	cmpge	r2,r2,zero
  80f498:	10000c1e 	bne	r2,zero,80f4cc <alt_file_locked+0xb4>
  80f49c:	e13ffd17 	ldw	r4,-12(fp)
  80f4a0:	01400304 	movi	r5,12
  80f4a4:	0802a640 	call	802a64 <__mulsi3>
  80f4a8:	1007883a 	mov	r3,r2
  80f4ac:	00802074 	movhi	r2,129
  80f4b0:	1090e604 	addi	r2,r2,17304
  80f4b4:	1887883a 	add	r3,r3,r2
  80f4b8:	e0bffe17 	ldw	r2,-8(fp)
  80f4bc:	18800326 	beq	r3,r2,80f4cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f4c0:	00bffcc4 	movi	r2,-13
  80f4c4:	e0bfff15 	stw	r2,-4(fp)
  80f4c8:	00000a06 	br	80f4f4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f4cc:	e0bffd17 	ldw	r2,-12(fp)
  80f4d0:	10800044 	addi	r2,r2,1
  80f4d4:	e0bffd15 	stw	r2,-12(fp)
  80f4d8:	00802074 	movhi	r2,129
  80f4dc:	1095e204 	addi	r2,r2,22408
  80f4e0:	10800017 	ldw	r2,0(r2)
  80f4e4:	1007883a 	mov	r3,r2
  80f4e8:	e0bffd17 	ldw	r2,-12(fp)
  80f4ec:	18bfd72e 	bgeu	r3,r2,80f44c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f4f0:	e03fff15 	stw	zero,-4(fp)
  80f4f4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f4f8:	e037883a 	mov	sp,fp
  80f4fc:	dfc00217 	ldw	ra,8(sp)
  80f500:	df000117 	ldw	fp,4(sp)
  80f504:	dc000017 	ldw	r16,0(sp)
  80f508:	dec00304 	addi	sp,sp,12
  80f50c:	f800283a 	ret

0080f510 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f510:	defff404 	addi	sp,sp,-48
  80f514:	dfc00b15 	stw	ra,44(sp)
  80f518:	df000a15 	stw	fp,40(sp)
  80f51c:	df000a04 	addi	fp,sp,40
  80f520:	e13ffb15 	stw	r4,-20(fp)
  80f524:	e17ffc15 	stw	r5,-16(fp)
  80f528:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f52c:	00bfffc4 	movi	r2,-1
  80f530:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80f534:	00bffb44 	movi	r2,-19
  80f538:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80f53c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f540:	e13ffb17 	ldw	r4,-20(fp)
  80f544:	01402074 	movhi	r5,129
  80f548:	2955e004 	addi	r5,r5,22400
  80f54c:	08126400 	call	812640 <alt_find_dev>
  80f550:	e0bffa15 	stw	r2,-24(fp)
  80f554:	e0bffa17 	ldw	r2,-24(fp)
  80f558:	1004c03a 	cmpne	r2,r2,zero
  80f55c:	1000051e 	bne	r2,zero,80f574 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f560:	e13ffb17 	ldw	r4,-20(fp)
  80f564:	08126d40 	call	8126d4 <alt_find_file>
  80f568:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80f56c:	00800044 	movi	r2,1
  80f570:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f574:	e0bffa17 	ldw	r2,-24(fp)
  80f578:	1005003a 	cmpeq	r2,r2,zero
  80f57c:	1000311e 	bne	r2,zero,80f644 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f580:	e13ffa17 	ldw	r4,-24(fp)
  80f584:	08127f40 	call	8127f4 <alt_get_fd>
  80f588:	e0bff815 	stw	r2,-32(fp)
  80f58c:	e0bff817 	ldw	r2,-32(fp)
  80f590:	1004403a 	cmpge	r2,r2,zero
  80f594:	1000031e 	bne	r2,zero,80f5a4 <open+0x94>
    {
      status = index;
  80f598:	e0bff817 	ldw	r2,-32(fp)
  80f59c:	e0bff715 	stw	r2,-36(fp)
  80f5a0:	00002a06 	br	80f64c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f5a4:	e13ff817 	ldw	r4,-32(fp)
  80f5a8:	01400304 	movi	r5,12
  80f5ac:	0802a640 	call	802a64 <__mulsi3>
  80f5b0:	1007883a 	mov	r3,r2
  80f5b4:	00802074 	movhi	r2,129
  80f5b8:	1090e604 	addi	r2,r2,17304
  80f5bc:	1885883a 	add	r2,r3,r2
  80f5c0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f5c4:	e0fffc17 	ldw	r3,-16(fp)
  80f5c8:	00900034 	movhi	r2,16384
  80f5cc:	10bfffc4 	addi	r2,r2,-1
  80f5d0:	1886703a 	and	r3,r3,r2
  80f5d4:	e0bff917 	ldw	r2,-28(fp)
  80f5d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f5dc:	e0bff617 	ldw	r2,-40(fp)
  80f5e0:	1004c03a 	cmpne	r2,r2,zero
  80f5e4:	1000061e 	bne	r2,zero,80f600 <open+0xf0>
  80f5e8:	e13ff917 	ldw	r4,-28(fp)
  80f5ec:	080f4180 	call	80f418 <alt_file_locked>
  80f5f0:	e0bff715 	stw	r2,-36(fp)
  80f5f4:	e0bff717 	ldw	r2,-36(fp)
  80f5f8:	1004803a 	cmplt	r2,r2,zero
  80f5fc:	1000131e 	bne	r2,zero,80f64c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f600:	e0bffa17 	ldw	r2,-24(fp)
  80f604:	10800317 	ldw	r2,12(r2)
  80f608:	1005003a 	cmpeq	r2,r2,zero
  80f60c:	1000091e 	bne	r2,zero,80f634 <open+0x124>
  80f610:	e0bffa17 	ldw	r2,-24(fp)
  80f614:	10800317 	ldw	r2,12(r2)
  80f618:	e13ff917 	ldw	r4,-28(fp)
  80f61c:	e17ffb17 	ldw	r5,-20(fp)
  80f620:	e1bffc17 	ldw	r6,-16(fp)
  80f624:	e1fffd17 	ldw	r7,-12(fp)
  80f628:	103ee83a 	callr	r2
  80f62c:	e0bfff15 	stw	r2,-4(fp)
  80f630:	00000106 	br	80f638 <open+0x128>
  80f634:	e03fff15 	stw	zero,-4(fp)
  80f638:	e0bfff17 	ldw	r2,-4(fp)
  80f63c:	e0bff715 	stw	r2,-36(fp)
  80f640:	00000206 	br	80f64c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f644:	00bffb44 	movi	r2,-19
  80f648:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f64c:	e0bff717 	ldw	r2,-36(fp)
  80f650:	1004403a 	cmpge	r2,r2,zero
  80f654:	1000091e 	bne	r2,zero,80f67c <open+0x16c>
  {
    alt_release_fd (index);  
  80f658:	e13ff817 	ldw	r4,-32(fp)
  80f65c:	080f8800 	call	80f880 <alt_release_fd>
    ALT_ERRNO = -status;
  80f660:	080f69c0 	call	80f69c <alt_get_errno>
  80f664:	e0fff717 	ldw	r3,-36(fp)
  80f668:	00c7c83a 	sub	r3,zero,r3
  80f66c:	10c00015 	stw	r3,0(r2)
    return -1;
  80f670:	00bfffc4 	movi	r2,-1
  80f674:	e0bffe15 	stw	r2,-8(fp)
  80f678:	00000206 	br	80f684 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80f67c:	e0bff817 	ldw	r2,-32(fp)
  80f680:	e0bffe15 	stw	r2,-8(fp)
  80f684:	e0bffe17 	ldw	r2,-8(fp)
}
  80f688:	e037883a 	mov	sp,fp
  80f68c:	dfc00117 	ldw	ra,4(sp)
  80f690:	df000017 	ldw	fp,0(sp)
  80f694:	dec00204 	addi	sp,sp,8
  80f698:	f800283a 	ret

0080f69c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f69c:	defffd04 	addi	sp,sp,-12
  80f6a0:	dfc00215 	stw	ra,8(sp)
  80f6a4:	df000115 	stw	fp,4(sp)
  80f6a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f6ac:	00802074 	movhi	r2,129
  80f6b0:	1095e304 	addi	r2,r2,22412
  80f6b4:	10800017 	ldw	r2,0(r2)
  80f6b8:	1005003a 	cmpeq	r2,r2,zero
  80f6bc:	1000061e 	bne	r2,zero,80f6d8 <alt_get_errno+0x3c>
  80f6c0:	00802074 	movhi	r2,129
  80f6c4:	1095e304 	addi	r2,r2,22412
  80f6c8:	10800017 	ldw	r2,0(r2)
  80f6cc:	103ee83a 	callr	r2
  80f6d0:	e0bfff15 	stw	r2,-4(fp)
  80f6d4:	00000306 	br	80f6e4 <alt_get_errno+0x48>
  80f6d8:	00802074 	movhi	r2,129
  80f6dc:	109d1404 	addi	r2,r2,29776
  80f6e0:	e0bfff15 	stw	r2,-4(fp)
  80f6e4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f6e8:	e037883a 	mov	sp,fp
  80f6ec:	dfc00117 	ldw	ra,4(sp)
  80f6f0:	df000017 	ldw	fp,0(sp)
  80f6f4:	dec00204 	addi	sp,sp,8
  80f6f8:	f800283a 	ret

0080f6fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f6fc:	defff704 	addi	sp,sp,-36
  80f700:	dfc00815 	stw	ra,32(sp)
  80f704:	df000715 	stw	fp,28(sp)
  80f708:	df000704 	addi	fp,sp,28
  80f70c:	e13ffb15 	stw	r4,-20(fp)
  80f710:	e17ffc15 	stw	r5,-16(fp)
  80f714:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f718:	e0bffb17 	ldw	r2,-20(fp)
  80f71c:	1004803a 	cmplt	r2,r2,zero
  80f720:	1000091e 	bne	r2,zero,80f748 <read+0x4c>
  80f724:	e13ffb17 	ldw	r4,-20(fp)
  80f728:	01400304 	movi	r5,12
  80f72c:	0802a640 	call	802a64 <__mulsi3>
  80f730:	1007883a 	mov	r3,r2
  80f734:	00802074 	movhi	r2,129
  80f738:	1090e604 	addi	r2,r2,17304
  80f73c:	1887883a 	add	r3,r3,r2
  80f740:	e0ffff15 	stw	r3,-4(fp)
  80f744:	00000106 	br	80f74c <read+0x50>
  80f748:	e03fff15 	stw	zero,-4(fp)
  80f74c:	e0bfff17 	ldw	r2,-4(fp)
  80f750:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80f754:	e0bffa17 	ldw	r2,-24(fp)
  80f758:	1005003a 	cmpeq	r2,r2,zero
  80f75c:	1000241e 	bne	r2,zero,80f7f0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f760:	e0bffa17 	ldw	r2,-24(fp)
  80f764:	10800217 	ldw	r2,8(r2)
  80f768:	108000cc 	andi	r2,r2,3
  80f76c:	10800060 	cmpeqi	r2,r2,1
  80f770:	10001a1e 	bne	r2,zero,80f7dc <read+0xe0>
  80f774:	e0bffa17 	ldw	r2,-24(fp)
  80f778:	10800017 	ldw	r2,0(r2)
  80f77c:	10800517 	ldw	r2,20(r2)
  80f780:	1005003a 	cmpeq	r2,r2,zero
  80f784:	1000151e 	bne	r2,zero,80f7dc <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f788:	e0bffa17 	ldw	r2,-24(fp)
  80f78c:	10800017 	ldw	r2,0(r2)
  80f790:	10800517 	ldw	r2,20(r2)
  80f794:	e17ffc17 	ldw	r5,-16(fp)
  80f798:	e1bffd17 	ldw	r6,-12(fp)
  80f79c:	e13ffa17 	ldw	r4,-24(fp)
  80f7a0:	103ee83a 	callr	r2
  80f7a4:	e0bff915 	stw	r2,-28(fp)
  80f7a8:	e0bff917 	ldw	r2,-28(fp)
  80f7ac:	1004403a 	cmpge	r2,r2,zero
  80f7b0:	1000071e 	bne	r2,zero,80f7d0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80f7b4:	080f8200 	call	80f820 <alt_get_errno>
  80f7b8:	e0fff917 	ldw	r3,-28(fp)
  80f7bc:	00c7c83a 	sub	r3,zero,r3
  80f7c0:	10c00015 	stw	r3,0(r2)
          return -1;
  80f7c4:	00bfffc4 	movi	r2,-1
  80f7c8:	e0bffe15 	stw	r2,-8(fp)
  80f7cc:	00000e06 	br	80f808 <read+0x10c>
        }
        return rval;
  80f7d0:	e0bff917 	ldw	r2,-28(fp)
  80f7d4:	e0bffe15 	stw	r2,-8(fp)
  80f7d8:	00000b06 	br	80f808 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f7dc:	080f8200 	call	80f820 <alt_get_errno>
  80f7e0:	1007883a 	mov	r3,r2
  80f7e4:	00800344 	movi	r2,13
  80f7e8:	18800015 	stw	r2,0(r3)
  80f7ec:	00000406 	br	80f800 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f7f0:	080f8200 	call	80f820 <alt_get_errno>
  80f7f4:	1007883a 	mov	r3,r2
  80f7f8:	00801444 	movi	r2,81
  80f7fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f800:	00bfffc4 	movi	r2,-1
  80f804:	e0bffe15 	stw	r2,-8(fp)
  80f808:	e0bffe17 	ldw	r2,-8(fp)
}
  80f80c:	e037883a 	mov	sp,fp
  80f810:	dfc00117 	ldw	ra,4(sp)
  80f814:	df000017 	ldw	fp,0(sp)
  80f818:	dec00204 	addi	sp,sp,8
  80f81c:	f800283a 	ret

0080f820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f820:	defffd04 	addi	sp,sp,-12
  80f824:	dfc00215 	stw	ra,8(sp)
  80f828:	df000115 	stw	fp,4(sp)
  80f82c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f830:	00802074 	movhi	r2,129
  80f834:	1095e304 	addi	r2,r2,22412
  80f838:	10800017 	ldw	r2,0(r2)
  80f83c:	1005003a 	cmpeq	r2,r2,zero
  80f840:	1000061e 	bne	r2,zero,80f85c <alt_get_errno+0x3c>
  80f844:	00802074 	movhi	r2,129
  80f848:	1095e304 	addi	r2,r2,22412
  80f84c:	10800017 	ldw	r2,0(r2)
  80f850:	103ee83a 	callr	r2
  80f854:	e0bfff15 	stw	r2,-4(fp)
  80f858:	00000306 	br	80f868 <alt_get_errno+0x48>
  80f85c:	00802074 	movhi	r2,129
  80f860:	109d1404 	addi	r2,r2,29776
  80f864:	e0bfff15 	stw	r2,-4(fp)
  80f868:	e0bfff17 	ldw	r2,-4(fp)
}
  80f86c:	e037883a 	mov	sp,fp
  80f870:	dfc00117 	ldw	ra,4(sp)
  80f874:	df000017 	ldw	fp,0(sp)
  80f878:	dec00204 	addi	sp,sp,8
  80f87c:	f800283a 	ret

0080f880 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f880:	defffc04 	addi	sp,sp,-16
  80f884:	dfc00315 	stw	ra,12(sp)
  80f888:	df000215 	stw	fp,8(sp)
  80f88c:	dc000115 	stw	r16,4(sp)
  80f890:	df000104 	addi	fp,sp,4
  80f894:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f898:	e0bfff17 	ldw	r2,-4(fp)
  80f89c:	108000d0 	cmplti	r2,r2,3
  80f8a0:	10000f1e 	bne	r2,zero,80f8e0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f8a4:	e13fff17 	ldw	r4,-4(fp)
  80f8a8:	04002074 	movhi	r16,129
  80f8ac:	8410e604 	addi	r16,r16,17304
  80f8b0:	01400304 	movi	r5,12
  80f8b4:	0802a640 	call	802a64 <__mulsi3>
  80f8b8:	1405883a 	add	r2,r2,r16
  80f8bc:	10800204 	addi	r2,r2,8
  80f8c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80f8c4:	e13fff17 	ldw	r4,-4(fp)
  80f8c8:	04002074 	movhi	r16,129
  80f8cc:	8410e604 	addi	r16,r16,17304
  80f8d0:	01400304 	movi	r5,12
  80f8d4:	0802a640 	call	802a64 <__mulsi3>
  80f8d8:	1405883a 	add	r2,r2,r16
  80f8dc:	10000015 	stw	zero,0(r2)
  }
}
  80f8e0:	e037883a 	mov	sp,fp
  80f8e4:	dfc00217 	ldw	ra,8(sp)
  80f8e8:	df000117 	ldw	fp,4(sp)
  80f8ec:	dc000017 	ldw	r16,0(sp)
  80f8f0:	dec00304 	addi	sp,sp,12
  80f8f4:	f800283a 	ret

0080f8f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f8f8:	defff804 	addi	sp,sp,-32
  80f8fc:	df000715 	stw	fp,28(sp)
  80f900:	df000704 	addi	fp,sp,28
  80f904:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f908:	0005303a 	rdctl	r2,status
  80f90c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f910:	e0fffb17 	ldw	r3,-20(fp)
  80f914:	00bfff84 	movi	r2,-2
  80f918:	1884703a 	and	r2,r3,r2
  80f91c:	1001703a 	wrctl	status,r2
  
  return context;
  80f920:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f924:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f928:	d0a00e17 	ldw	r2,-32712(gp)
  80f92c:	10c000c4 	addi	r3,r2,3
  80f930:	00bfff04 	movi	r2,-4
  80f934:	1884703a 	and	r2,r3,r2
  80f938:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f93c:	d0e00e17 	ldw	r3,-32712(gp)
  80f940:	e0bffe17 	ldw	r2,-8(fp)
  80f944:	1887883a 	add	r3,r3,r2
  80f948:	00804034 	movhi	r2,256
  80f94c:	10800004 	addi	r2,r2,0
  80f950:	10c0072e 	bgeu	r2,r3,80f970 <sbrk+0x78>
  80f954:	e0bffd17 	ldw	r2,-12(fp)
  80f958:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f95c:	e0bffa17 	ldw	r2,-24(fp)
  80f960:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f964:	00bfffc4 	movi	r2,-1
  80f968:	e0bfff15 	stw	r2,-4(fp)
  80f96c:	00000c06 	br	80f9a0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80f970:	d0a00e17 	ldw	r2,-32712(gp)
  80f974:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80f978:	d0e00e17 	ldw	r3,-32712(gp)
  80f97c:	e0bffe17 	ldw	r2,-8(fp)
  80f980:	1885883a 	add	r2,r3,r2
  80f984:	d0a00e15 	stw	r2,-32712(gp)
  80f988:	e0bffd17 	ldw	r2,-12(fp)
  80f98c:	e0bff915 	stw	r2,-28(fp)
  80f990:	e0bff917 	ldw	r2,-28(fp)
  80f994:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f998:	e0bffc17 	ldw	r2,-16(fp)
  80f99c:	e0bfff15 	stw	r2,-4(fp)
  80f9a0:	e0bfff17 	ldw	r2,-4(fp)
} 
  80f9a4:	e037883a 	mov	sp,fp
  80f9a8:	df000017 	ldw	fp,0(sp)
  80f9ac:	dec00104 	addi	sp,sp,4
  80f9b0:	f800283a 	ret

0080f9b4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80f9b4:	defffd04 	addi	sp,sp,-12
  80f9b8:	dfc00215 	stw	ra,8(sp)
  80f9bc:	df000115 	stw	fp,4(sp)
  80f9c0:	df000104 	addi	fp,sp,4
  80f9c4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80f9c8:	e13fff17 	ldw	r4,-4(fp)
  80f9cc:	08122ec0 	call	8122ec <alt_busy_sleep>
}
  80f9d0:	e037883a 	mov	sp,fp
  80f9d4:	dfc00117 	ldw	ra,4(sp)
  80f9d8:	df000017 	ldw	fp,0(sp)
  80f9dc:	dec00204 	addi	sp,sp,8
  80f9e0:	f800283a 	ret

0080f9e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80f9e4:	defff704 	addi	sp,sp,-36
  80f9e8:	dfc00815 	stw	ra,32(sp)
  80f9ec:	df000715 	stw	fp,28(sp)
  80f9f0:	df000704 	addi	fp,sp,28
  80f9f4:	e13ffb15 	stw	r4,-20(fp)
  80f9f8:	e17ffc15 	stw	r5,-16(fp)
  80f9fc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fa00:	e0bffb17 	ldw	r2,-20(fp)
  80fa04:	1004803a 	cmplt	r2,r2,zero
  80fa08:	1000091e 	bne	r2,zero,80fa30 <write+0x4c>
  80fa0c:	e13ffb17 	ldw	r4,-20(fp)
  80fa10:	01400304 	movi	r5,12
  80fa14:	0802a640 	call	802a64 <__mulsi3>
  80fa18:	1007883a 	mov	r3,r2
  80fa1c:	00802074 	movhi	r2,129
  80fa20:	1090e604 	addi	r2,r2,17304
  80fa24:	1887883a 	add	r3,r3,r2
  80fa28:	e0ffff15 	stw	r3,-4(fp)
  80fa2c:	00000106 	br	80fa34 <write+0x50>
  80fa30:	e03fff15 	stw	zero,-4(fp)
  80fa34:	e0bfff17 	ldw	r2,-4(fp)
  80fa38:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80fa3c:	e0bffa17 	ldw	r2,-24(fp)
  80fa40:	1005003a 	cmpeq	r2,r2,zero
  80fa44:	1000241e 	bne	r2,zero,80fad8 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80fa48:	e0bffa17 	ldw	r2,-24(fp)
  80fa4c:	10800217 	ldw	r2,8(r2)
  80fa50:	108000cc 	andi	r2,r2,3
  80fa54:	1005003a 	cmpeq	r2,r2,zero
  80fa58:	10001a1e 	bne	r2,zero,80fac4 <write+0xe0>
  80fa5c:	e0bffa17 	ldw	r2,-24(fp)
  80fa60:	10800017 	ldw	r2,0(r2)
  80fa64:	10800617 	ldw	r2,24(r2)
  80fa68:	1005003a 	cmpeq	r2,r2,zero
  80fa6c:	1000151e 	bne	r2,zero,80fac4 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80fa70:	e0bffa17 	ldw	r2,-24(fp)
  80fa74:	10800017 	ldw	r2,0(r2)
  80fa78:	10800617 	ldw	r2,24(r2)
  80fa7c:	e17ffc17 	ldw	r5,-16(fp)
  80fa80:	e1bffd17 	ldw	r6,-12(fp)
  80fa84:	e13ffa17 	ldw	r4,-24(fp)
  80fa88:	103ee83a 	callr	r2
  80fa8c:	e0bff915 	stw	r2,-28(fp)
  80fa90:	e0bff917 	ldw	r2,-28(fp)
  80fa94:	1004403a 	cmpge	r2,r2,zero
  80fa98:	1000071e 	bne	r2,zero,80fab8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80fa9c:	080fb080 	call	80fb08 <alt_get_errno>
  80faa0:	e0fff917 	ldw	r3,-28(fp)
  80faa4:	00c7c83a 	sub	r3,zero,r3
  80faa8:	10c00015 	stw	r3,0(r2)
        return -1;
  80faac:	00bfffc4 	movi	r2,-1
  80fab0:	e0bffe15 	stw	r2,-8(fp)
  80fab4:	00000e06 	br	80faf0 <write+0x10c>
      }
      return rval;
  80fab8:	e0bff917 	ldw	r2,-28(fp)
  80fabc:	e0bffe15 	stw	r2,-8(fp)
  80fac0:	00000b06 	br	80faf0 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80fac4:	080fb080 	call	80fb08 <alt_get_errno>
  80fac8:	1007883a 	mov	r3,r2
  80facc:	00800344 	movi	r2,13
  80fad0:	18800015 	stw	r2,0(r3)
  80fad4:	00000406 	br	80fae8 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80fad8:	080fb080 	call	80fb08 <alt_get_errno>
  80fadc:	1007883a 	mov	r3,r2
  80fae0:	00801444 	movi	r2,81
  80fae4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fae8:	00bfffc4 	movi	r2,-1
  80faec:	e0bffe15 	stw	r2,-8(fp)
  80faf0:	e0bffe17 	ldw	r2,-8(fp)
}
  80faf4:	e037883a 	mov	sp,fp
  80faf8:	dfc00117 	ldw	ra,4(sp)
  80fafc:	df000017 	ldw	fp,0(sp)
  80fb00:	dec00204 	addi	sp,sp,8
  80fb04:	f800283a 	ret

0080fb08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fb08:	defffd04 	addi	sp,sp,-12
  80fb0c:	dfc00215 	stw	ra,8(sp)
  80fb10:	df000115 	stw	fp,4(sp)
  80fb14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fb18:	00802074 	movhi	r2,129
  80fb1c:	1095e304 	addi	r2,r2,22412
  80fb20:	10800017 	ldw	r2,0(r2)
  80fb24:	1005003a 	cmpeq	r2,r2,zero
  80fb28:	1000061e 	bne	r2,zero,80fb44 <alt_get_errno+0x3c>
  80fb2c:	00802074 	movhi	r2,129
  80fb30:	1095e304 	addi	r2,r2,22412
  80fb34:	10800017 	ldw	r2,0(r2)
  80fb38:	103ee83a 	callr	r2
  80fb3c:	e0bfff15 	stw	r2,-4(fp)
  80fb40:	00000306 	br	80fb50 <alt_get_errno+0x48>
  80fb44:	00802074 	movhi	r2,129
  80fb48:	109d1404 	addi	r2,r2,29776
  80fb4c:	e0bfff15 	stw	r2,-4(fp)
  80fb50:	e0bfff17 	ldw	r2,-4(fp)
}
  80fb54:	e037883a 	mov	sp,fp
  80fb58:	dfc00117 	ldw	ra,4(sp)
  80fb5c:	df000017 	ldw	fp,0(sp)
  80fb60:	dec00204 	addi	sp,sp,8
  80fb64:	f800283a 	ret

0080fb68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80fb68:	defffd04 	addi	sp,sp,-12
  80fb6c:	dfc00215 	stw	ra,8(sp)
  80fb70:	df000115 	stw	fp,4(sp)
  80fb74:	df000104 	addi	fp,sp,4
  80fb78:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_NIOS, cpu_nios);
  80fb7c:	0812ea00 	call	812ea0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80fb80:	00800044 	movi	r2,1
  80fb84:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80fb88:	e037883a 	mov	sp,fp
  80fb8c:	dfc00117 	ldw	ra,4(sp)
  80fb90:	df000017 	ldw	fp,0(sp)
  80fb94:	dec00204 	addi	sp,sp,8
  80fb98:	f800283a 	ret

0080fb9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80fb9c:	defffe04 	addi	sp,sp,-8
  80fba0:	dfc00115 	stw	ra,4(sp)
  80fba4:	df000015 	stw	fp,0(sp)
  80fba8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80fbac:	01060804 	movi	r4,6176
  80fbb0:	000b883a 	mov	r5,zero
  80fbb4:	01800084 	movi	r6,2
  80fbb8:	01c01904 	movi	r7,100
  80fbbc:	08117580 	call	811758 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80fbc0:	01002074 	movhi	r4,129
  80fbc4:	21115004 	addi	r4,r4,17728
  80fbc8:	000b883a 	mov	r5,zero
  80fbcc:	000d883a 	mov	r6,zero
  80fbd0:	080fdac0 	call	80fdac <altera_avalon_jtag_uart_init>
  80fbd4:	01002074 	movhi	r4,129
  80fbd8:	21114604 	addi	r4,r4,17688
  80fbdc:	080fc2c0 	call	80fc2c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  80fbe0:	01002074 	movhi	r4,129
  80fbe4:	21156804 	addi	r4,r4,21920
  80fbe8:	08115540 	call	811554 <altera_avalon_lcd_16207_init>
  80fbec:	01002074 	movhi	r4,129
  80fbf0:	21155e04 	addi	r4,r4,21880
  80fbf4:	080fc2c0 	call	80fc2c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_RS232, uart_RS232);
  80fbf8:	01002074 	movhi	r4,129
  80fbfc:	2115b004 	addi	r4,r4,22208
  80fc00:	000b883a 	mov	r5,zero
  80fc04:	01800044 	movi	r6,1
  80fc08:	08118e00 	call	8118e0 <altera_avalon_uart_init>
  80fc0c:	01002074 	movhi	r4,129
  80fc10:	2115a604 	addi	r4,r4,22168
  80fc14:	080fc2c0 	call	80fc2c <alt_dev_reg>
}
  80fc18:	e037883a 	mov	sp,fp
  80fc1c:	dfc00117 	ldw	ra,4(sp)
  80fc20:	df000017 	ldw	fp,0(sp)
  80fc24:	dec00204 	addi	sp,sp,8
  80fc28:	f800283a 	ret

0080fc2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80fc2c:	defffd04 	addi	sp,sp,-12
  80fc30:	dfc00215 	stw	ra,8(sp)
  80fc34:	df000115 	stw	fp,4(sp)
  80fc38:	df000104 	addi	fp,sp,4
  80fc3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80fc40:	e13fff17 	ldw	r4,-4(fp)
  80fc44:	01402074 	movhi	r5,129
  80fc48:	2955e004 	addi	r5,r5,22400
  80fc4c:	08124640 	call	812464 <alt_dev_llist_insert>
}
  80fc50:	e037883a 	mov	sp,fp
  80fc54:	dfc00117 	ldw	ra,4(sp)
  80fc58:	df000017 	ldw	fp,0(sp)
  80fc5c:	dec00204 	addi	sp,sp,8
  80fc60:	f800283a 	ret

0080fc64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80fc64:	defffa04 	addi	sp,sp,-24
  80fc68:	dfc00515 	stw	ra,20(sp)
  80fc6c:	df000415 	stw	fp,16(sp)
  80fc70:	df000404 	addi	fp,sp,16
  80fc74:	e13ffd15 	stw	r4,-12(fp)
  80fc78:	e17ffe15 	stw	r5,-8(fp)
  80fc7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fc80:	e0bffd17 	ldw	r2,-12(fp)
  80fc84:	10800017 	ldw	r2,0(r2)
  80fc88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80fc8c:	e0bffc17 	ldw	r2,-16(fp)
  80fc90:	11000a04 	addi	r4,r2,40
  80fc94:	e0bffd17 	ldw	r2,-12(fp)
  80fc98:	11c00217 	ldw	r7,8(r2)
  80fc9c:	e17ffe17 	ldw	r5,-8(fp)
  80fca0:	e1bfff17 	ldw	r6,-4(fp)
  80fca4:	08102ac0 	call	8102ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80fca8:	e037883a 	mov	sp,fp
  80fcac:	dfc00117 	ldw	ra,4(sp)
  80fcb0:	df000017 	ldw	fp,0(sp)
  80fcb4:	dec00204 	addi	sp,sp,8
  80fcb8:	f800283a 	ret

0080fcbc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80fcbc:	defffa04 	addi	sp,sp,-24
  80fcc0:	dfc00515 	stw	ra,20(sp)
  80fcc4:	df000415 	stw	fp,16(sp)
  80fcc8:	df000404 	addi	fp,sp,16
  80fccc:	e13ffd15 	stw	r4,-12(fp)
  80fcd0:	e17ffe15 	stw	r5,-8(fp)
  80fcd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fcd8:	e0bffd17 	ldw	r2,-12(fp)
  80fcdc:	10800017 	ldw	r2,0(r2)
  80fce0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80fce4:	e0bffc17 	ldw	r2,-16(fp)
  80fce8:	11000a04 	addi	r4,r2,40
  80fcec:	e0bffd17 	ldw	r2,-12(fp)
  80fcf0:	11c00217 	ldw	r7,8(r2)
  80fcf4:	e17ffe17 	ldw	r5,-8(fp)
  80fcf8:	e1bfff17 	ldw	r6,-4(fp)
  80fcfc:	08104d00 	call	8104d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80fd00:	e037883a 	mov	sp,fp
  80fd04:	dfc00117 	ldw	ra,4(sp)
  80fd08:	df000017 	ldw	fp,0(sp)
  80fd0c:	dec00204 	addi	sp,sp,8
  80fd10:	f800283a 	ret

0080fd14 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80fd14:	defffc04 	addi	sp,sp,-16
  80fd18:	dfc00315 	stw	ra,12(sp)
  80fd1c:	df000215 	stw	fp,8(sp)
  80fd20:	df000204 	addi	fp,sp,8
  80fd24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fd28:	e0bfff17 	ldw	r2,-4(fp)
  80fd2c:	10800017 	ldw	r2,0(r2)
  80fd30:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80fd34:	e0bffe17 	ldw	r2,-8(fp)
  80fd38:	11000a04 	addi	r4,r2,40
  80fd3c:	e0bfff17 	ldw	r2,-4(fp)
  80fd40:	11400217 	ldw	r5,8(r2)
  80fd44:	08101440 	call	810144 <altera_avalon_jtag_uart_close>
}
  80fd48:	e037883a 	mov	sp,fp
  80fd4c:	dfc00117 	ldw	ra,4(sp)
  80fd50:	df000017 	ldw	fp,0(sp)
  80fd54:	dec00204 	addi	sp,sp,8
  80fd58:	f800283a 	ret

0080fd5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80fd5c:	defffa04 	addi	sp,sp,-24
  80fd60:	dfc00515 	stw	ra,20(sp)
  80fd64:	df000415 	stw	fp,16(sp)
  80fd68:	df000404 	addi	fp,sp,16
  80fd6c:	e13ffd15 	stw	r4,-12(fp)
  80fd70:	e17ffe15 	stw	r5,-8(fp)
  80fd74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80fd78:	e0bffd17 	ldw	r2,-12(fp)
  80fd7c:	10800017 	ldw	r2,0(r2)
  80fd80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80fd84:	e0bffc17 	ldw	r2,-16(fp)
  80fd88:	11000a04 	addi	r4,r2,40
  80fd8c:	e17ffe17 	ldw	r5,-8(fp)
  80fd90:	e1bfff17 	ldw	r6,-4(fp)
  80fd94:	08101b80 	call	8101b8 <altera_avalon_jtag_uart_ioctl>
}
  80fd98:	e037883a 	mov	sp,fp
  80fd9c:	dfc00117 	ldw	ra,4(sp)
  80fda0:	df000017 	ldw	fp,0(sp)
  80fda4:	dec00204 	addi	sp,sp,8
  80fda8:	f800283a 	ret

0080fdac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80fdac:	defffa04 	addi	sp,sp,-24
  80fdb0:	dfc00515 	stw	ra,20(sp)
  80fdb4:	df000415 	stw	fp,16(sp)
  80fdb8:	df000404 	addi	fp,sp,16
  80fdbc:	e13ffd15 	stw	r4,-12(fp)
  80fdc0:	e17ffe15 	stw	r5,-8(fp)
  80fdc4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fdc8:	e0fffd17 	ldw	r3,-12(fp)
  80fdcc:	00800044 	movi	r2,1
  80fdd0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80fdd4:	e0bffd17 	ldw	r2,-12(fp)
  80fdd8:	10800017 	ldw	r2,0(r2)
  80fddc:	11000104 	addi	r4,r2,4
  80fde0:	e0bffd17 	ldw	r2,-12(fp)
  80fde4:	10800817 	ldw	r2,32(r2)
  80fde8:	1007883a 	mov	r3,r2
  80fdec:	2005883a 	mov	r2,r4
  80fdf0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80fdf4:	e13ffe17 	ldw	r4,-8(fp)
  80fdf8:	e17fff17 	ldw	r5,-4(fp)
  80fdfc:	d8000015 	stw	zero,0(sp)
  80fe00:	01802074 	movhi	r6,129
  80fe04:	31bf9b04 	addi	r6,r6,-404
  80fe08:	e1fffd17 	ldw	r7,-12(fp)
  80fe0c:	08128e00 	call	8128e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80fe10:	e0bffd17 	ldw	r2,-12(fp)
  80fe14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80fe18:	e0bffd17 	ldw	r2,-12(fp)
  80fe1c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80fe20:	00802074 	movhi	r2,129
  80fe24:	109d1f04 	addi	r2,r2,29820
  80fe28:	10800017 	ldw	r2,0(r2)
  80fe2c:	100b883a 	mov	r5,r2
  80fe30:	01802074 	movhi	r6,129
  80fe34:	31802504 	addi	r6,r6,148
  80fe38:	e1fffd17 	ldw	r7,-12(fp)
  80fe3c:	08121980 	call	812198 <alt_alarm_start>
  80fe40:	1004403a 	cmpge	r2,r2,zero
  80fe44:	1000041e 	bne	r2,zero,80fe58 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80fe48:	e0fffd17 	ldw	r3,-12(fp)
  80fe4c:	00a00034 	movhi	r2,32768
  80fe50:	10bfffc4 	addi	r2,r2,-1
  80fe54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80fe58:	e037883a 	mov	sp,fp
  80fe5c:	dfc00117 	ldw	ra,4(sp)
  80fe60:	df000017 	ldw	fp,0(sp)
  80fe64:	dec00204 	addi	sp,sp,8
  80fe68:	f800283a 	ret

0080fe6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80fe6c:	defff804 	addi	sp,sp,-32
  80fe70:	df000715 	stw	fp,28(sp)
  80fe74:	df000704 	addi	fp,sp,28
  80fe78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80fe7c:	e0bfff17 	ldw	r2,-4(fp)
  80fe80:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80fe84:	e0bffe17 	ldw	r2,-8(fp)
  80fe88:	10800017 	ldw	r2,0(r2)
  80fe8c:	e0bffd15 	stw	r2,-12(fp)
  80fe90:	00000006 	br	80fe94 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fe94:	e0bffd17 	ldw	r2,-12(fp)
  80fe98:	10800104 	addi	r2,r2,4
  80fe9c:	10800037 	ldwio	r2,0(r2)
  80fea0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80fea4:	e0bffc17 	ldw	r2,-16(fp)
  80fea8:	1080c00c 	andi	r2,r2,768
  80feac:	1005003a 	cmpeq	r2,r2,zero
  80feb0:	1000741e 	bne	r2,zero,810084 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80feb4:	e0bffc17 	ldw	r2,-16(fp)
  80feb8:	1080400c 	andi	r2,r2,256
  80febc:	1005003a 	cmpeq	r2,r2,zero
  80fec0:	1000351e 	bne	r2,zero,80ff98 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80fec4:	00800074 	movhi	r2,1
  80fec8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fecc:	e0bffe17 	ldw	r2,-8(fp)
  80fed0:	10800a17 	ldw	r2,40(r2)
  80fed4:	10800044 	addi	r2,r2,1
  80fed8:	1081ffcc 	andi	r2,r2,2047
  80fedc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80fee0:	e0bffe17 	ldw	r2,-8(fp)
  80fee4:	10c00b17 	ldw	r3,44(r2)
  80fee8:	e0bffa17 	ldw	r2,-24(fp)
  80feec:	18801626 	beq	r3,r2,80ff48 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80fef0:	e0bffd17 	ldw	r2,-12(fp)
  80fef4:	10800037 	ldwio	r2,0(r2)
  80fef8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80fefc:	e0bffb17 	ldw	r2,-20(fp)
  80ff00:	10a0000c 	andi	r2,r2,32768
  80ff04:	1005003a 	cmpeq	r2,r2,zero
  80ff08:	10000f1e 	bne	r2,zero,80ff48 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ff0c:	e0bffe17 	ldw	r2,-8(fp)
  80ff10:	10c00a17 	ldw	r3,40(r2)
  80ff14:	e0bffb17 	ldw	r2,-20(fp)
  80ff18:	1009883a 	mov	r4,r2
  80ff1c:	e0bffe17 	ldw	r2,-8(fp)
  80ff20:	1885883a 	add	r2,r3,r2
  80ff24:	10800e04 	addi	r2,r2,56
  80ff28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ff2c:	e0bffe17 	ldw	r2,-8(fp)
  80ff30:	10800a17 	ldw	r2,40(r2)
  80ff34:	10800044 	addi	r2,r2,1
  80ff38:	10c1ffcc 	andi	r3,r2,2047
  80ff3c:	e0bffe17 	ldw	r2,-8(fp)
  80ff40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ff44:	003fe106 	br	80fecc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ff48:	e0bffb17 	ldw	r2,-20(fp)
  80ff4c:	10bfffec 	andhi	r2,r2,65535
  80ff50:	1005003a 	cmpeq	r2,r2,zero
  80ff54:	1000101e 	bne	r2,zero,80ff98 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ff58:	e0bffe17 	ldw	r2,-8(fp)
  80ff5c:	10c00817 	ldw	r3,32(r2)
  80ff60:	00bfff84 	movi	r2,-2
  80ff64:	1886703a 	and	r3,r3,r2
  80ff68:	e0bffe17 	ldw	r2,-8(fp)
  80ff6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ff70:	e0bffd17 	ldw	r2,-12(fp)
  80ff74:	11000104 	addi	r4,r2,4
  80ff78:	e0bffe17 	ldw	r2,-8(fp)
  80ff7c:	10800817 	ldw	r2,32(r2)
  80ff80:	1007883a 	mov	r3,r2
  80ff84:	2005883a 	mov	r2,r4
  80ff88:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ff8c:	e0bffd17 	ldw	r2,-12(fp)
  80ff90:	10800104 	addi	r2,r2,4
  80ff94:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80ff98:	e0bffc17 	ldw	r2,-16(fp)
  80ff9c:	1080800c 	andi	r2,r2,512
  80ffa0:	1005003a 	cmpeq	r2,r2,zero
  80ffa4:	103fbb1e 	bne	r2,zero,80fe94 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ffa8:	e0bffc17 	ldw	r2,-16(fp)
  80ffac:	10bfffec 	andhi	r2,r2,65535
  80ffb0:	1004d43a 	srli	r2,r2,16
  80ffb4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ffb8:	00001506 	br	810010 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ffbc:	e13ffd17 	ldw	r4,-12(fp)
  80ffc0:	e0bffe17 	ldw	r2,-8(fp)
  80ffc4:	10c00d17 	ldw	r3,52(r2)
  80ffc8:	e0bffe17 	ldw	r2,-8(fp)
  80ffcc:	1885883a 	add	r2,r3,r2
  80ffd0:	10820e04 	addi	r2,r2,2104
  80ffd4:	10800003 	ldbu	r2,0(r2)
  80ffd8:	10c03fcc 	andi	r3,r2,255
  80ffdc:	18c0201c 	xori	r3,r3,128
  80ffe0:	18ffe004 	addi	r3,r3,-128
  80ffe4:	2005883a 	mov	r2,r4
  80ffe8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ffec:	e0bffe17 	ldw	r2,-8(fp)
  80fff0:	10800d17 	ldw	r2,52(r2)
  80fff4:	10800044 	addi	r2,r2,1
  80fff8:	10c1ffcc 	andi	r3,r2,2047
  80fffc:	e0bffe17 	ldw	r2,-8(fp)
  810000:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810004:	e0bff917 	ldw	r2,-28(fp)
  810008:	10bfffc4 	addi	r2,r2,-1
  81000c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810010:	e0bff917 	ldw	r2,-28(fp)
  810014:	1005003a 	cmpeq	r2,r2,zero
  810018:	1000051e 	bne	r2,zero,810030 <altera_avalon_jtag_uart_irq+0x1c4>
  81001c:	e0bffe17 	ldw	r2,-8(fp)
  810020:	10c00d17 	ldw	r3,52(r2)
  810024:	e0bffe17 	ldw	r2,-8(fp)
  810028:	10800c17 	ldw	r2,48(r2)
  81002c:	18bfe31e 	bne	r3,r2,80ffbc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  810030:	e0bff917 	ldw	r2,-28(fp)
  810034:	1005003a 	cmpeq	r2,r2,zero
  810038:	103f961e 	bne	r2,zero,80fe94 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81003c:	e0bffe17 	ldw	r2,-8(fp)
  810040:	10c00817 	ldw	r3,32(r2)
  810044:	00bfff44 	movi	r2,-3
  810048:	1886703a 	and	r3,r3,r2
  81004c:	e0bffe17 	ldw	r2,-8(fp)
  810050:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810054:	e0bffe17 	ldw	r2,-8(fp)
  810058:	10800017 	ldw	r2,0(r2)
  81005c:	11000104 	addi	r4,r2,4
  810060:	e0bffe17 	ldw	r2,-8(fp)
  810064:	10800817 	ldw	r2,32(r2)
  810068:	1007883a 	mov	r3,r2
  81006c:	2005883a 	mov	r2,r4
  810070:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810074:	e0bffd17 	ldw	r2,-12(fp)
  810078:	10800104 	addi	r2,r2,4
  81007c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810080:	003f8406 	br	80fe94 <altera_avalon_jtag_uart_irq+0x28>
}
  810084:	e037883a 	mov	sp,fp
  810088:	df000017 	ldw	fp,0(sp)
  81008c:	dec00104 	addi	sp,sp,4
  810090:	f800283a 	ret

00810094 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810094:	defffc04 	addi	sp,sp,-16
  810098:	df000315 	stw	fp,12(sp)
  81009c:	df000304 	addi	fp,sp,12
  8100a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8100a4:	e0bfff17 	ldw	r2,-4(fp)
  8100a8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8100ac:	e0bffe17 	ldw	r2,-8(fp)
  8100b0:	10800017 	ldw	r2,0(r2)
  8100b4:	10800104 	addi	r2,r2,4
  8100b8:	10800037 	ldwio	r2,0(r2)
  8100bc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8100c0:	e0bffd17 	ldw	r2,-12(fp)
  8100c4:	1081000c 	andi	r2,r2,1024
  8100c8:	1005003a 	cmpeq	r2,r2,zero
  8100cc:	10000c1e 	bne	r2,zero,810100 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8100d0:	e0bffe17 	ldw	r2,-8(fp)
  8100d4:	10800017 	ldw	r2,0(r2)
  8100d8:	11000104 	addi	r4,r2,4
  8100dc:	e0bffe17 	ldw	r2,-8(fp)
  8100e0:	10800817 	ldw	r2,32(r2)
  8100e4:	10810014 	ori	r2,r2,1024
  8100e8:	1007883a 	mov	r3,r2
  8100ec:	2005883a 	mov	r2,r4
  8100f0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8100f4:	e0bffe17 	ldw	r2,-8(fp)
  8100f8:	10000915 	stw	zero,36(r2)
  8100fc:	00000a06 	br	810128 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810100:	e0bffe17 	ldw	r2,-8(fp)
  810104:	10c00917 	ldw	r3,36(r2)
  810108:	00a00034 	movhi	r2,32768
  81010c:	10bfff04 	addi	r2,r2,-4
  810110:	10c00536 	bltu	r2,r3,810128 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  810114:	e0bffe17 	ldw	r2,-8(fp)
  810118:	10800917 	ldw	r2,36(r2)
  81011c:	10c00044 	addi	r3,r2,1
  810120:	e0bffe17 	ldw	r2,-8(fp)
  810124:	10c00915 	stw	r3,36(r2)
  810128:	00802074 	movhi	r2,129
  81012c:	109d1f04 	addi	r2,r2,29820
  810130:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810134:	e037883a 	mov	sp,fp
  810138:	df000017 	ldw	fp,0(sp)
  81013c:	dec00104 	addi	sp,sp,4
  810140:	f800283a 	ret

00810144 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810144:	defffc04 	addi	sp,sp,-16
  810148:	df000315 	stw	fp,12(sp)
  81014c:	df000304 	addi	fp,sp,12
  810150:	e13ffd15 	stw	r4,-12(fp)
  810154:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810158:	00000706 	br	810178 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  81015c:	e0bffe17 	ldw	r2,-8(fp)
  810160:	1090000c 	andi	r2,r2,16384
  810164:	1005003a 	cmpeq	r2,r2,zero
  810168:	1000031e 	bne	r2,zero,810178 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  81016c:	00bffd44 	movi	r2,-11
  810170:	e0bfff15 	stw	r2,-4(fp)
  810174:	00000b06 	br	8101a4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810178:	e0bffd17 	ldw	r2,-12(fp)
  81017c:	10c00d17 	ldw	r3,52(r2)
  810180:	e0bffd17 	ldw	r2,-12(fp)
  810184:	10800c17 	ldw	r2,48(r2)
  810188:	18800526 	beq	r3,r2,8101a0 <altera_avalon_jtag_uart_close+0x5c>
  81018c:	e0bffd17 	ldw	r2,-12(fp)
  810190:	10c00917 	ldw	r3,36(r2)
  810194:	e0bffd17 	ldw	r2,-12(fp)
  810198:	10800117 	ldw	r2,4(r2)
  81019c:	18bfef36 	bltu	r3,r2,81015c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8101a0:	e03fff15 	stw	zero,-4(fp)
  8101a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8101a8:	e037883a 	mov	sp,fp
  8101ac:	df000017 	ldw	fp,0(sp)
  8101b0:	dec00104 	addi	sp,sp,4
  8101b4:	f800283a 	ret

008101b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8101b8:	defff804 	addi	sp,sp,-32
  8101bc:	df000715 	stw	fp,28(sp)
  8101c0:	df000704 	addi	fp,sp,28
  8101c4:	e13ffb15 	stw	r4,-20(fp)
  8101c8:	e17ffc15 	stw	r5,-16(fp)
  8101cc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8101d0:	00bff9c4 	movi	r2,-25
  8101d4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8101d8:	e0bffc17 	ldw	r2,-16(fp)
  8101dc:	e0bfff15 	stw	r2,-4(fp)
  8101e0:	e0ffff17 	ldw	r3,-4(fp)
  8101e4:	189a8060 	cmpeqi	r2,r3,27137
  8101e8:	1000041e 	bne	r2,zero,8101fc <altera_avalon_jtag_uart_ioctl+0x44>
  8101ec:	e0ffff17 	ldw	r3,-4(fp)
  8101f0:	189a80a0 	cmpeqi	r2,r3,27138
  8101f4:	10001b1e 	bne	r2,zero,810264 <altera_avalon_jtag_uart_ioctl+0xac>
  8101f8:	00002706 	br	810298 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8101fc:	e0bffb17 	ldw	r2,-20(fp)
  810200:	10c00117 	ldw	r3,4(r2)
  810204:	00a00034 	movhi	r2,32768
  810208:	10bfffc4 	addi	r2,r2,-1
  81020c:	18802226 	beq	r3,r2,810298 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  810210:	e0bffd17 	ldw	r2,-12(fp)
  810214:	10800017 	ldw	r2,0(r2)
  810218:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81021c:	e0bff917 	ldw	r2,-28(fp)
  810220:	10800090 	cmplti	r2,r2,2
  810224:	1000071e 	bne	r2,zero,810244 <altera_avalon_jtag_uart_ioctl+0x8c>
  810228:	e0fff917 	ldw	r3,-28(fp)
  81022c:	00a00034 	movhi	r2,32768
  810230:	10bfffc4 	addi	r2,r2,-1
  810234:	18800326 	beq	r3,r2,810244 <altera_avalon_jtag_uart_ioctl+0x8c>
  810238:	e0bff917 	ldw	r2,-28(fp)
  81023c:	e0bffe15 	stw	r2,-8(fp)
  810240:	00000306 	br	810250 <altera_avalon_jtag_uart_ioctl+0x98>
  810244:	00e00034 	movhi	r3,32768
  810248:	18ffff84 	addi	r3,r3,-2
  81024c:	e0fffe15 	stw	r3,-8(fp)
  810250:	e0bffb17 	ldw	r2,-20(fp)
  810254:	e0fffe17 	ldw	r3,-8(fp)
  810258:	10c00115 	stw	r3,4(r2)
      rc = 0;
  81025c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  810260:	00000d06 	br	810298 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  810264:	e0bffb17 	ldw	r2,-20(fp)
  810268:	10c00117 	ldw	r3,4(r2)
  81026c:	00a00034 	movhi	r2,32768
  810270:	10bfffc4 	addi	r2,r2,-1
  810274:	18800826 	beq	r3,r2,810298 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  810278:	e13ffd17 	ldw	r4,-12(fp)
  81027c:	e0bffb17 	ldw	r2,-20(fp)
  810280:	10c00917 	ldw	r3,36(r2)
  810284:	e0bffb17 	ldw	r2,-20(fp)
  810288:	10800117 	ldw	r2,4(r2)
  81028c:	1885803a 	cmpltu	r2,r3,r2
  810290:	20800015 	stw	r2,0(r4)
      rc = 0;
  810294:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  810298:	e0bffa17 	ldw	r2,-24(fp)
}
  81029c:	e037883a 	mov	sp,fp
  8102a0:	df000017 	ldw	fp,0(sp)
  8102a4:	dec00104 	addi	sp,sp,4
  8102a8:	f800283a 	ret

008102ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8102ac:	defff204 	addi	sp,sp,-56
  8102b0:	dfc00d15 	stw	ra,52(sp)
  8102b4:	df000c15 	stw	fp,48(sp)
  8102b8:	df000c04 	addi	fp,sp,48
  8102bc:	e13ffb15 	stw	r4,-20(fp)
  8102c0:	e17ffc15 	stw	r5,-16(fp)
  8102c4:	e1bffd15 	stw	r6,-12(fp)
  8102c8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8102cc:	e0bffc17 	ldw	r2,-16(fp)
  8102d0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8102d4:	00004806 	br	8103f8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8102d8:	e0bffb17 	ldw	r2,-20(fp)
  8102dc:	10800a17 	ldw	r2,40(r2)
  8102e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8102e4:	e0bffb17 	ldw	r2,-20(fp)
  8102e8:	10800b17 	ldw	r2,44(r2)
  8102ec:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  8102f0:	e0fff717 	ldw	r3,-36(fp)
  8102f4:	e0bff617 	ldw	r2,-40(fp)
  8102f8:	18800536 	bltu	r3,r2,810310 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8102fc:	e0bff717 	ldw	r2,-36(fp)
  810300:	e0fff617 	ldw	r3,-40(fp)
  810304:	10c5c83a 	sub	r2,r2,r3
  810308:	e0bff815 	stw	r2,-32(fp)
  81030c:	00000406 	br	810320 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  810310:	00820004 	movi	r2,2048
  810314:	e0fff617 	ldw	r3,-40(fp)
  810318:	10c5c83a 	sub	r2,r2,r3
  81031c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  810320:	e0bff817 	ldw	r2,-32(fp)
  810324:	1005003a 	cmpeq	r2,r2,zero
  810328:	10001f1e 	bne	r2,zero,8103a8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  81032c:	e0fffd17 	ldw	r3,-12(fp)
  810330:	e0bff817 	ldw	r2,-32(fp)
  810334:	1880022e 	bgeu	r3,r2,810340 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  810338:	e0bffd17 	ldw	r2,-12(fp)
  81033c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810340:	e0bffb17 	ldw	r2,-20(fp)
  810344:	10c00e04 	addi	r3,r2,56
  810348:	e0bff617 	ldw	r2,-40(fp)
  81034c:	1887883a 	add	r3,r3,r2
  810350:	e0bffa17 	ldw	r2,-24(fp)
  810354:	1009883a 	mov	r4,r2
  810358:	180b883a 	mov	r5,r3
  81035c:	e1bff817 	ldw	r6,-32(fp)
  810360:	080b3bc0 	call	80b3bc <memcpy>
      ptr   += n;
  810364:	e0fff817 	ldw	r3,-32(fp)
  810368:	e0bffa17 	ldw	r2,-24(fp)
  81036c:	10c5883a 	add	r2,r2,r3
  810370:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  810374:	e0fffd17 	ldw	r3,-12(fp)
  810378:	e0bff817 	ldw	r2,-32(fp)
  81037c:	1885c83a 	sub	r2,r3,r2
  810380:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810384:	e0fff617 	ldw	r3,-40(fp)
  810388:	e0bff817 	ldw	r2,-32(fp)
  81038c:	1885883a 	add	r2,r3,r2
  810390:	10c1ffcc 	andi	r3,r2,2047
  810394:	e0bffb17 	ldw	r2,-20(fp)
  810398:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  81039c:	e0bffd17 	ldw	r2,-12(fp)
  8103a0:	10800048 	cmpgei	r2,r2,1
  8103a4:	103fcc1e 	bne	r2,zero,8102d8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8103a8:	e0fffa17 	ldw	r3,-24(fp)
  8103ac:	e0bffc17 	ldw	r2,-16(fp)
  8103b0:	1880141e 	bne	r3,r2,810404 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8103b4:	e0bffe17 	ldw	r2,-8(fp)
  8103b8:	1090000c 	andi	r2,r2,16384
  8103bc:	1004c03a 	cmpne	r2,r2,zero
  8103c0:	1000101e 	bne	r2,zero,810404 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8103c4:	e0bffb17 	ldw	r2,-20(fp)
  8103c8:	10c00a17 	ldw	r3,40(r2)
  8103cc:	e0bff717 	ldw	r2,-36(fp)
  8103d0:	1880051e 	bne	r3,r2,8103e8 <altera_avalon_jtag_uart_read+0x13c>
  8103d4:	e0bffb17 	ldw	r2,-20(fp)
  8103d8:	10c00917 	ldw	r3,36(r2)
  8103dc:	e0bffb17 	ldw	r2,-20(fp)
  8103e0:	10800117 	ldw	r2,4(r2)
  8103e4:	18bff736 	bltu	r3,r2,8103c4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8103e8:	e0bffb17 	ldw	r2,-20(fp)
  8103ec:	10c00a17 	ldw	r3,40(r2)
  8103f0:	e0bff717 	ldw	r2,-36(fp)
  8103f4:	18800326 	beq	r3,r2,810404 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8103f8:	e0bffd17 	ldw	r2,-12(fp)
  8103fc:	10800048 	cmpgei	r2,r2,1
  810400:	103fb51e 	bne	r2,zero,8102d8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  810404:	e0fffa17 	ldw	r3,-24(fp)
  810408:	e0bffc17 	ldw	r2,-16(fp)
  81040c:	18801926 	beq	r3,r2,810474 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810410:	0005303a 	rdctl	r2,status
  810414:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810418:	e0fff517 	ldw	r3,-44(fp)
  81041c:	00bfff84 	movi	r2,-2
  810420:	1884703a 	and	r2,r3,r2
  810424:	1001703a 	wrctl	status,r2
  
  return context;
  810428:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81042c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810430:	e0bffb17 	ldw	r2,-20(fp)
  810434:	10800817 	ldw	r2,32(r2)
  810438:	10c00054 	ori	r3,r2,1
  81043c:	e0bffb17 	ldw	r2,-20(fp)
  810440:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810444:	e0bffb17 	ldw	r2,-20(fp)
  810448:	10800017 	ldw	r2,0(r2)
  81044c:	11000104 	addi	r4,r2,4
  810450:	e0bffb17 	ldw	r2,-20(fp)
  810454:	10800817 	ldw	r2,32(r2)
  810458:	1007883a 	mov	r3,r2
  81045c:	2005883a 	mov	r2,r4
  810460:	10c00035 	stwio	r3,0(r2)
  810464:	e0bff917 	ldw	r2,-28(fp)
  810468:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81046c:	e0bff417 	ldw	r2,-48(fp)
  810470:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  810474:	e0fffa17 	ldw	r3,-24(fp)
  810478:	e0bffc17 	ldw	r2,-16(fp)
  81047c:	18800526 	beq	r3,r2,810494 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  810480:	e0fffa17 	ldw	r3,-24(fp)
  810484:	e0bffc17 	ldw	r2,-16(fp)
  810488:	1887c83a 	sub	r3,r3,r2
  81048c:	e0ffff15 	stw	r3,-4(fp)
  810490:	00000906 	br	8104b8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  810494:	e0bffe17 	ldw	r2,-8(fp)
  810498:	1090000c 	andi	r2,r2,16384
  81049c:	1005003a 	cmpeq	r2,r2,zero
  8104a0:	1000031e 	bne	r2,zero,8104b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8104a4:	00bffd44 	movi	r2,-11
  8104a8:	e0bfff15 	stw	r2,-4(fp)
  8104ac:	00000206 	br	8104b8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8104b0:	00bffec4 	movi	r2,-5
  8104b4:	e0bfff15 	stw	r2,-4(fp)
  8104b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8104bc:	e037883a 	mov	sp,fp
  8104c0:	dfc00117 	ldw	ra,4(sp)
  8104c4:	df000017 	ldw	fp,0(sp)
  8104c8:	dec00204 	addi	sp,sp,8
  8104cc:	f800283a 	ret

008104d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8104d0:	defff204 	addi	sp,sp,-56
  8104d4:	dfc00d15 	stw	ra,52(sp)
  8104d8:	df000c15 	stw	fp,48(sp)
  8104dc:	df000c04 	addi	fp,sp,48
  8104e0:	e13ffb15 	stw	r4,-20(fp)
  8104e4:	e17ffc15 	stw	r5,-16(fp)
  8104e8:	e1bffd15 	stw	r6,-12(fp)
  8104ec:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8104f0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8104f4:	e0bffc17 	ldw	r2,-16(fp)
  8104f8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8104fc:	00003a06 	br	8105e8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810500:	e0bffb17 	ldw	r2,-20(fp)
  810504:	10800c17 	ldw	r2,48(r2)
  810508:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  81050c:	e0bffb17 	ldw	r2,-20(fp)
  810510:	10800d17 	ldw	r2,52(r2)
  810514:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  810518:	e0fffa17 	ldw	r3,-24(fp)
  81051c:	e0bff917 	ldw	r2,-28(fp)
  810520:	1880062e 	bgeu	r3,r2,81053c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810524:	e0fff917 	ldw	r3,-28(fp)
  810528:	e0bffa17 	ldw	r2,-24(fp)
  81052c:	1885c83a 	sub	r2,r3,r2
  810530:	10bfffc4 	addi	r2,r2,-1
  810534:	e0bff815 	stw	r2,-32(fp)
  810538:	00000c06 	br	81056c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  81053c:	e0bff917 	ldw	r2,-28(fp)
  810540:	1005003a 	cmpeq	r2,r2,zero
  810544:	1000051e 	bne	r2,zero,81055c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810548:	00820004 	movi	r2,2048
  81054c:	e0fffa17 	ldw	r3,-24(fp)
  810550:	10c5c83a 	sub	r2,r2,r3
  810554:	e0bff815 	stw	r2,-32(fp)
  810558:	00000406 	br	81056c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81055c:	0081ffc4 	movi	r2,2047
  810560:	e0fffa17 	ldw	r3,-24(fp)
  810564:	10c5c83a 	sub	r2,r2,r3
  810568:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81056c:	e0bff817 	ldw	r2,-32(fp)
  810570:	1005003a 	cmpeq	r2,r2,zero
  810574:	10001f1e 	bne	r2,zero,8105f4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  810578:	e0fffd17 	ldw	r3,-12(fp)
  81057c:	e0bff817 	ldw	r2,-32(fp)
  810580:	1880022e 	bgeu	r3,r2,81058c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  810584:	e0bffd17 	ldw	r2,-12(fp)
  810588:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81058c:	e0bffb17 	ldw	r2,-20(fp)
  810590:	10c20e04 	addi	r3,r2,2104
  810594:	e0bffa17 	ldw	r2,-24(fp)
  810598:	1885883a 	add	r2,r3,r2
  81059c:	e0fffc17 	ldw	r3,-16(fp)
  8105a0:	1009883a 	mov	r4,r2
  8105a4:	180b883a 	mov	r5,r3
  8105a8:	e1bff817 	ldw	r6,-32(fp)
  8105ac:	080b3bc0 	call	80b3bc <memcpy>
      ptr   += n;
  8105b0:	e0fff817 	ldw	r3,-32(fp)
  8105b4:	e0bffc17 	ldw	r2,-16(fp)
  8105b8:	10c5883a 	add	r2,r2,r3
  8105bc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8105c0:	e0fffd17 	ldw	r3,-12(fp)
  8105c4:	e0bff817 	ldw	r2,-32(fp)
  8105c8:	1885c83a 	sub	r2,r3,r2
  8105cc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8105d0:	e0fffa17 	ldw	r3,-24(fp)
  8105d4:	e0bff817 	ldw	r2,-32(fp)
  8105d8:	1885883a 	add	r2,r3,r2
  8105dc:	10c1ffcc 	andi	r3,r2,2047
  8105e0:	e0bffb17 	ldw	r2,-20(fp)
  8105e4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8105e8:	e0bffd17 	ldw	r2,-12(fp)
  8105ec:	10800048 	cmpgei	r2,r2,1
  8105f0:	103fc31e 	bne	r2,zero,810500 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8105f4:	0005303a 	rdctl	r2,status
  8105f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8105fc:	e0fff517 	ldw	r3,-44(fp)
  810600:	00bfff84 	movi	r2,-2
  810604:	1884703a 	and	r2,r3,r2
  810608:	1001703a 	wrctl	status,r2
  
  return context;
  81060c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810610:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810614:	e0bffb17 	ldw	r2,-20(fp)
  810618:	10800817 	ldw	r2,32(r2)
  81061c:	10c00094 	ori	r3,r2,2
  810620:	e0bffb17 	ldw	r2,-20(fp)
  810624:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810628:	e0bffb17 	ldw	r2,-20(fp)
  81062c:	10800017 	ldw	r2,0(r2)
  810630:	11000104 	addi	r4,r2,4
  810634:	e0bffb17 	ldw	r2,-20(fp)
  810638:	10800817 	ldw	r2,32(r2)
  81063c:	1007883a 	mov	r3,r2
  810640:	2005883a 	mov	r2,r4
  810644:	10c00035 	stwio	r3,0(r2)
  810648:	e0bff717 	ldw	r2,-36(fp)
  81064c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810650:	e0bff417 	ldw	r2,-48(fp)
  810654:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  810658:	e0bffd17 	ldw	r2,-12(fp)
  81065c:	10800050 	cmplti	r2,r2,1
  810660:	1000111e 	bne	r2,zero,8106a8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  810664:	e0bffe17 	ldw	r2,-8(fp)
  810668:	1090000c 	andi	r2,r2,16384
  81066c:	1004c03a 	cmpne	r2,r2,zero
  810670:	1000101e 	bne	r2,zero,8106b4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  810674:	e0bffb17 	ldw	r2,-20(fp)
  810678:	10c00d17 	ldw	r3,52(r2)
  81067c:	e0bff917 	ldw	r2,-28(fp)
  810680:	1880051e 	bne	r3,r2,810698 <altera_avalon_jtag_uart_write+0x1c8>
  810684:	e0bffb17 	ldw	r2,-20(fp)
  810688:	10c00917 	ldw	r3,36(r2)
  81068c:	e0bffb17 	ldw	r2,-20(fp)
  810690:	10800117 	ldw	r2,4(r2)
  810694:	18bff736 	bltu	r3,r2,810674 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  810698:	e0bffb17 	ldw	r2,-20(fp)
  81069c:	10c00d17 	ldw	r3,52(r2)
  8106a0:	e0bff917 	ldw	r2,-28(fp)
  8106a4:	18800326 	beq	r3,r2,8106b4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  8106a8:	e0bffd17 	ldw	r2,-12(fp)
  8106ac:	10800048 	cmpgei	r2,r2,1
  8106b0:	103fcd1e 	bne	r2,zero,8105e8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8106b4:	e0fffc17 	ldw	r3,-16(fp)
  8106b8:	e0bff617 	ldw	r2,-40(fp)
  8106bc:	18800526 	beq	r3,r2,8106d4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  8106c0:	e0fffc17 	ldw	r3,-16(fp)
  8106c4:	e0bff617 	ldw	r2,-40(fp)
  8106c8:	1887c83a 	sub	r3,r3,r2
  8106cc:	e0ffff15 	stw	r3,-4(fp)
  8106d0:	00000906 	br	8106f8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8106d4:	e0bffe17 	ldw	r2,-8(fp)
  8106d8:	1090000c 	andi	r2,r2,16384
  8106dc:	1005003a 	cmpeq	r2,r2,zero
  8106e0:	1000031e 	bne	r2,zero,8106f0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8106e4:	00bffd44 	movi	r2,-11
  8106e8:	e0bfff15 	stw	r2,-4(fp)
  8106ec:	00000206 	br	8106f8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8106f0:	00bffec4 	movi	r2,-5
  8106f4:	e0bfff15 	stw	r2,-4(fp)
  8106f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8106fc:	e037883a 	mov	sp,fp
  810700:	dfc00117 	ldw	ra,4(sp)
  810704:	df000017 	ldw	fp,0(sp)
  810708:	dec00204 	addi	sp,sp,8
  81070c:	f800283a 	ret

00810710 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810710:	defffa04 	addi	sp,sp,-24
  810714:	dfc00515 	stw	ra,20(sp)
  810718:	df000415 	stw	fp,16(sp)
  81071c:	df000404 	addi	fp,sp,16
  810720:	e13ffe15 	stw	r4,-8(fp)
  810724:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  810728:	e0bffe17 	ldw	r2,-8(fp)
  81072c:	10800017 	ldw	r2,0(r2)
  810730:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810734:	008003f4 	movhi	r2,15
  810738:	10909004 	addi	r2,r2,16960
  81073c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810740:	e0bffe17 	ldw	r2,-8(fp)
  810744:	10800803 	ldbu	r2,32(r2)
  810748:	10803fcc 	andi	r2,r2,255
  81074c:	1080201c 	xori	r2,r2,128
  810750:	10bfe004 	addi	r2,r2,-128
  810754:	1004c03a 	cmpne	r2,r2,zero
  810758:	1000161e 	bne	r2,zero,8107b4 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81075c:	00000a06 	br	810788 <lcd_write_command+0x78>
    if (--i == 0)
  810760:	e0bffc17 	ldw	r2,-16(fp)
  810764:	10bfffc4 	addi	r2,r2,-1
  810768:	e0bffc15 	stw	r2,-16(fp)
  81076c:	e0bffc17 	ldw	r2,-16(fp)
  810770:	1004c03a 	cmpne	r2,r2,zero
  810774:	1000041e 	bne	r2,zero,810788 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  810778:	e0fffe17 	ldw	r3,-8(fp)
  81077c:	00800044 	movi	r2,1
  810780:	18800805 	stb	r2,32(r3)
      return;
  810784:	00000b06 	br	8107b4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810788:	e0bffd17 	ldw	r2,-12(fp)
  81078c:	10800104 	addi	r2,r2,4
  810790:	10800037 	ldwio	r2,0(r2)
  810794:	1080200c 	andi	r2,r2,128
  810798:	1004c03a 	cmpne	r2,r2,zero
  81079c:	103ff01e 	bne	r2,zero,810760 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8107a0:	01001904 	movi	r4,100
  8107a4:	080f9b40 	call	80f9b4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8107a8:	e0bffd17 	ldw	r2,-12(fp)
  8107ac:	e0ffff03 	ldbu	r3,-4(fp)
  8107b0:	10c00035 	stwio	r3,0(r2)
}
  8107b4:	e037883a 	mov	sp,fp
  8107b8:	dfc00117 	ldw	ra,4(sp)
  8107bc:	df000017 	ldw	fp,0(sp)
  8107c0:	dec00204 	addi	sp,sp,8
  8107c4:	f800283a 	ret

008107c8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8107c8:	defffa04 	addi	sp,sp,-24
  8107cc:	dfc00515 	stw	ra,20(sp)
  8107d0:	df000415 	stw	fp,16(sp)
  8107d4:	df000404 	addi	fp,sp,16
  8107d8:	e13ffe15 	stw	r4,-8(fp)
  8107dc:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8107e0:	e0bffe17 	ldw	r2,-8(fp)
  8107e4:	10800017 	ldw	r2,0(r2)
  8107e8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8107ec:	008003f4 	movhi	r2,15
  8107f0:	10909004 	addi	r2,r2,16960
  8107f4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8107f8:	e0bffe17 	ldw	r2,-8(fp)
  8107fc:	10800803 	ldbu	r2,32(r2)
  810800:	10803fcc 	andi	r2,r2,255
  810804:	1080201c 	xori	r2,r2,128
  810808:	10bfe004 	addi	r2,r2,-128
  81080c:	1004c03a 	cmpne	r2,r2,zero
  810810:	10001d1e 	bne	r2,zero,810888 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810814:	00000a06 	br	810840 <lcd_write_data+0x78>
    if (--i == 0)
  810818:	e0bffc17 	ldw	r2,-16(fp)
  81081c:	10bfffc4 	addi	r2,r2,-1
  810820:	e0bffc15 	stw	r2,-16(fp)
  810824:	e0bffc17 	ldw	r2,-16(fp)
  810828:	1004c03a 	cmpne	r2,r2,zero
  81082c:	1000041e 	bne	r2,zero,810840 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  810830:	e0fffe17 	ldw	r3,-8(fp)
  810834:	00800044 	movi	r2,1
  810838:	18800805 	stb	r2,32(r3)
      return;
  81083c:	00001206 	br	810888 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810840:	e0bffd17 	ldw	r2,-12(fp)
  810844:	10800104 	addi	r2,r2,4
  810848:	10800037 	ldwio	r2,0(r2)
  81084c:	1080200c 	andi	r2,r2,128
  810850:	1004c03a 	cmpne	r2,r2,zero
  810854:	103ff01e 	bne	r2,zero,810818 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810858:	01001904 	movi	r4,100
  81085c:	080f9b40 	call	80f9b4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  810860:	e0bffd17 	ldw	r2,-12(fp)
  810864:	10800204 	addi	r2,r2,8
  810868:	e0ffff03 	ldbu	r3,-4(fp)
  81086c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  810870:	e0bffe17 	ldw	r2,-8(fp)
  810874:	108008c3 	ldbu	r2,35(r2)
  810878:	10800044 	addi	r2,r2,1
  81087c:	1007883a 	mov	r3,r2
  810880:	e0bffe17 	ldw	r2,-8(fp)
  810884:	10c008c5 	stb	r3,35(r2)
}
  810888:	e037883a 	mov	sp,fp
  81088c:	dfc00117 	ldw	ra,4(sp)
  810890:	df000017 	ldw	fp,0(sp)
  810894:	dec00204 	addi	sp,sp,8
  810898:	f800283a 	ret

0081089c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  81089c:	defffb04 	addi	sp,sp,-20
  8108a0:	dfc00415 	stw	ra,16(sp)
  8108a4:	df000315 	stw	fp,12(sp)
  8108a8:	dc000215 	stw	r16,8(sp)
  8108ac:	df000204 	addi	fp,sp,8
  8108b0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8108b4:	e13fff17 	ldw	r4,-4(fp)
  8108b8:	01400044 	movi	r5,1
  8108bc:	08107100 	call	810710 <lcd_write_command>

  sp->x = 0;
  8108c0:	e0bfff17 	ldw	r2,-4(fp)
  8108c4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8108c8:	e0bfff17 	ldw	r2,-4(fp)
  8108cc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8108d0:	e0bfff17 	ldw	r2,-4(fp)
  8108d4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8108d8:	e03ffe15 	stw	zero,-8(fp)
  8108dc:	00001c06 	br	810950 <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8108e0:	e13ffe17 	ldw	r4,-8(fp)
  8108e4:	014018c4 	movi	r5,99
  8108e8:	0802a640 	call	802a64 <__mulsi3>
  8108ec:	10c01004 	addi	r3,r2,64
  8108f0:	e0bfff17 	ldw	r2,-4(fp)
  8108f4:	1889883a 	add	r4,r3,r2
  8108f8:	01400804 	movi	r5,32
  8108fc:	01801444 	movi	r6,81
  810900:	08045bc0 	call	8045bc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  810904:	e13ffe17 	ldw	r4,-8(fp)
  810908:	014018c4 	movi	r5,99
  81090c:	0802a640 	call	802a64 <__mulsi3>
  810910:	10c00c04 	addi	r3,r2,48
  810914:	e0bfff17 	ldw	r2,-4(fp)
  810918:	1889883a 	add	r4,r3,r2
  81091c:	01400804 	movi	r5,32
  810920:	01800404 	movi	r6,16
  810924:	08045bc0 	call	8045bc <memset>
    sp->line[y].width = 0;
  810928:	e13ffe17 	ldw	r4,-8(fp)
  81092c:	e43fff17 	ldw	r16,-4(fp)
  810930:	014018c4 	movi	r5,99
  810934:	0802a640 	call	802a64 <__mulsi3>
  810938:	1405883a 	add	r2,r2,r16
  81093c:	10802404 	addi	r2,r2,144
  810940:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810944:	e0bffe17 	ldw	r2,-8(fp)
  810948:	10800044 	addi	r2,r2,1
  81094c:	e0bffe15 	stw	r2,-8(fp)
  810950:	e0bffe17 	ldw	r2,-8(fp)
  810954:	10800090 	cmplti	r2,r2,2
  810958:	103fe11e 	bne	r2,zero,8108e0 <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81095c:	e037883a 	mov	sp,fp
  810960:	dfc00217 	ldw	ra,8(sp)
  810964:	df000117 	ldw	fp,4(sp)
  810968:	dc000017 	ldw	r16,0(sp)
  81096c:	dec00304 	addi	sp,sp,12
  810970:	f800283a 	ret

00810974 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  810974:	defff404 	addi	sp,sp,-48
  810978:	dfc00b15 	stw	ra,44(sp)
  81097c:	df000a15 	stw	fp,40(sp)
  810980:	dc800915 	stw	r18,36(sp)
  810984:	dc400815 	stw	r17,32(sp)
  810988:	dc000715 	stw	r16,28(sp)
  81098c:	df000704 	addi	fp,sp,28
  810990:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  810994:	e0bfff17 	ldw	r2,-4(fp)
  810998:	10800943 	ldbu	r2,37(r2)
  81099c:	10803fcc 	andi	r2,r2,255
  8109a0:	1080201c 	xori	r2,r2,128
  8109a4:	10bfe004 	addi	r2,r2,-128
  8109a8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8109ac:	e03ffe15 	stw	zero,-8(fp)
  8109b0:	00006a06 	br	810b5c <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
  8109b4:	e13ffe17 	ldw	r4,-8(fp)
  8109b8:	e43fff17 	ldw	r16,-4(fp)
  8109bc:	014018c4 	movi	r5,99
  8109c0:	0802a640 	call	802a64 <__mulsi3>
  8109c4:	1405883a 	add	r2,r2,r16
  8109c8:	10802404 	addi	r2,r2,144
  8109cc:	10800043 	ldbu	r2,1(r2)
  8109d0:	10803fcc 	andi	r2,r2,255
  8109d4:	1080201c 	xori	r2,r2,128
  8109d8:	10bfe004 	addi	r2,r2,-128
  8109dc:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8109e0:	e13ffe17 	ldw	r4,-8(fp)
  8109e4:	e43fff17 	ldw	r16,-4(fp)
  8109e8:	014018c4 	movi	r5,99
  8109ec:	0802a640 	call	802a64 <__mulsi3>
  8109f0:	1405883a 	add	r2,r2,r16
  8109f4:	10802404 	addi	r2,r2,144
  8109f8:	10800083 	ldbu	r2,2(r2)
  8109fc:	11003fcc 	andi	r4,r2,255
  810a00:	e17ffc17 	ldw	r5,-16(fp)
  810a04:	0802a640 	call	802a64 <__mulsi3>
  810a08:	1005d23a 	srai	r2,r2,8
  810a0c:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  810a10:	e0fffa17 	ldw	r3,-24(fp)
  810a14:	e0bffb17 	ldw	r2,-20(fp)
  810a18:	18800116 	blt	r3,r2,810a20 <lcd_repaint_screen+0xac>
      offset = 0;
  810a1c:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810a20:	e03ffd15 	stw	zero,-12(fp)
  810a24:	00004706 	br	810b44 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  810a28:	e47ffe17 	ldw	r17,-8(fp)
  810a2c:	e0fffd17 	ldw	r3,-12(fp)
  810a30:	e0bffa17 	ldw	r2,-24(fp)
  810a34:	1889883a 	add	r4,r3,r2
  810a38:	e17ffb17 	ldw	r5,-20(fp)
  810a3c:	08024840 	call	802484 <__modsi3>
  810a40:	1025883a 	mov	r18,r2
  810a44:	e43fff17 	ldw	r16,-4(fp)
  810a48:	8809883a 	mov	r4,r17
  810a4c:	014018c4 	movi	r5,99
  810a50:	0802a640 	call	802a64 <__mulsi3>
  810a54:	1405883a 	add	r2,r2,r16
  810a58:	1485883a 	add	r2,r2,r18
  810a5c:	10801004 	addi	r2,r2,64
  810a60:	10800003 	ldbu	r2,0(r2)
  810a64:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  810a68:	e13ffe17 	ldw	r4,-8(fp)
  810a6c:	e47ffd17 	ldw	r17,-12(fp)
  810a70:	e43fff17 	ldw	r16,-4(fp)
  810a74:	014018c4 	movi	r5,99
  810a78:	0802a640 	call	802a64 <__mulsi3>
  810a7c:	1405883a 	add	r2,r2,r16
  810a80:	1445883a 	add	r2,r2,r17
  810a84:	10800c04 	addi	r2,r2,48
  810a88:	10800003 	ldbu	r2,0(r2)
  810a8c:	10c03fcc 	andi	r3,r2,255
  810a90:	18c0201c 	xori	r3,r3,128
  810a94:	18ffe004 	addi	r3,r3,-128
  810a98:	e0bff947 	ldb	r2,-27(fp)
  810a9c:	18802626 	beq	r3,r2,810b38 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
  810aa0:	e0fffe17 	ldw	r3,-8(fp)
  810aa4:	d0a00f04 	addi	r2,gp,-32708
  810aa8:	1885883a 	add	r2,r3,r2
  810aac:	10800003 	ldbu	r2,0(r2)
  810ab0:	1007883a 	mov	r3,r2
  810ab4:	e0bffd17 	ldw	r2,-12(fp)
  810ab8:	1885883a 	add	r2,r3,r2
  810abc:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  810ac0:	e0fff903 	ldbu	r3,-28(fp)
  810ac4:	e0bfff17 	ldw	r2,-4(fp)
  810ac8:	108008c3 	ldbu	r2,35(r2)
  810acc:	10803fcc 	andi	r2,r2,255
  810ad0:	1080201c 	xori	r2,r2,128
  810ad4:	10bfe004 	addi	r2,r2,-128
  810ad8:	18800926 	beq	r3,r2,810b00 <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  810adc:	e0fff903 	ldbu	r3,-28(fp)
  810ae0:	00bfe004 	movi	r2,-128
  810ae4:	1884b03a 	or	r2,r3,r2
  810ae8:	11403fcc 	andi	r5,r2,255
  810aec:	e13fff17 	ldw	r4,-4(fp)
  810af0:	08107100 	call	810710 <lcd_write_command>
          sp->address = address;
  810af4:	e0fff903 	ldbu	r3,-28(fp)
  810af8:	e0bfff17 	ldw	r2,-4(fp)
  810afc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810b00:	e0bff943 	ldbu	r2,-27(fp)
  810b04:	11403fcc 	andi	r5,r2,255
  810b08:	e13fff17 	ldw	r4,-4(fp)
  810b0c:	08107c80 	call	8107c8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  810b10:	e13ffe17 	ldw	r4,-8(fp)
  810b14:	e47ffd17 	ldw	r17,-12(fp)
  810b18:	e43fff17 	ldw	r16,-4(fp)
  810b1c:	014018c4 	movi	r5,99
  810b20:	0802a640 	call	802a64 <__mulsi3>
  810b24:	1405883a 	add	r2,r2,r16
  810b28:	1445883a 	add	r2,r2,r17
  810b2c:	10c00c04 	addi	r3,r2,48
  810b30:	e0bff943 	ldbu	r2,-27(fp)
  810b34:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810b38:	e0bffd17 	ldw	r2,-12(fp)
  810b3c:	10800044 	addi	r2,r2,1
  810b40:	e0bffd15 	stw	r2,-12(fp)
  810b44:	e0bffd17 	ldw	r2,-12(fp)
  810b48:	10800410 	cmplti	r2,r2,16
  810b4c:	103fb61e 	bne	r2,zero,810a28 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810b50:	e0bffe17 	ldw	r2,-8(fp)
  810b54:	10800044 	addi	r2,r2,1
  810b58:	e0bffe15 	stw	r2,-8(fp)
  810b5c:	e0bffe17 	ldw	r2,-8(fp)
  810b60:	10800090 	cmplti	r2,r2,2
  810b64:	103f931e 	bne	r2,zero,8109b4 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810b68:	e037883a 	mov	sp,fp
  810b6c:	dfc00417 	ldw	ra,16(sp)
  810b70:	df000317 	ldw	fp,12(sp)
  810b74:	dc800217 	ldw	r18,8(sp)
  810b78:	dc400117 	ldw	r17,4(sp)
  810b7c:	dc000017 	ldw	r16,0(sp)
  810b80:	dec00504 	addi	sp,sp,20
  810b84:	f800283a 	ret

00810b88 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  810b88:	defffb04 	addi	sp,sp,-20
  810b8c:	dfc00415 	stw	ra,16(sp)
  810b90:	df000315 	stw	fp,12(sp)
  810b94:	dc000215 	stw	r16,8(sp)
  810b98:	df000204 	addi	fp,sp,8
  810b9c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810ba0:	e03ffe15 	stw	zero,-8(fp)
  810ba4:	00002106 	br	810c2c <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
  810ba8:	e0bffe17 	ldw	r2,-8(fp)
  810bac:	10800048 	cmpgei	r2,r2,1
  810bb0:	1000121e 	bne	r2,zero,810bfc <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  810bb4:	e13ffe17 	ldw	r4,-8(fp)
  810bb8:	014018c4 	movi	r5,99
  810bbc:	0802a640 	call	802a64 <__mulsi3>
  810bc0:	10c01004 	addi	r3,r2,64
  810bc4:	e0bfff17 	ldw	r2,-4(fp)
  810bc8:	18a1883a 	add	r16,r3,r2
  810bcc:	e0bffe17 	ldw	r2,-8(fp)
  810bd0:	11000044 	addi	r4,r2,1
  810bd4:	014018c4 	movi	r5,99
  810bd8:	0802a640 	call	802a64 <__mulsi3>
  810bdc:	10c01004 	addi	r3,r2,64
  810be0:	e0bfff17 	ldw	r2,-4(fp)
  810be4:	1885883a 	add	r2,r3,r2
  810be8:	8009883a 	mov	r4,r16
  810bec:	100b883a 	mov	r5,r2
  810bf0:	01801404 	movi	r6,80
  810bf4:	080b3bc0 	call	80b3bc <memcpy>
  810bf8:	00000906 	br	810c20 <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  810bfc:	e13ffe17 	ldw	r4,-8(fp)
  810c00:	014018c4 	movi	r5,99
  810c04:	0802a640 	call	802a64 <__mulsi3>
  810c08:	10c01004 	addi	r3,r2,64
  810c0c:	e0bfff17 	ldw	r2,-4(fp)
  810c10:	1889883a 	add	r4,r3,r2
  810c14:	01400804 	movi	r5,32
  810c18:	01801404 	movi	r6,80
  810c1c:	08045bc0 	call	8045bc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810c20:	e0bffe17 	ldw	r2,-8(fp)
  810c24:	10800044 	addi	r2,r2,1
  810c28:	e0bffe15 	stw	r2,-8(fp)
  810c2c:	e0bffe17 	ldw	r2,-8(fp)
  810c30:	10800090 	cmplti	r2,r2,2
  810c34:	103fdc1e 	bne	r2,zero,810ba8 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810c38:	e0bfff17 	ldw	r2,-4(fp)
  810c3c:	10800883 	ldbu	r2,34(r2)
  810c40:	10bfffc4 	addi	r2,r2,-1
  810c44:	1007883a 	mov	r3,r2
  810c48:	e0bfff17 	ldw	r2,-4(fp)
  810c4c:	10c00885 	stb	r3,34(r2)
}
  810c50:	e037883a 	mov	sp,fp
  810c54:	dfc00217 	ldw	ra,8(sp)
  810c58:	df000117 	ldw	fp,4(sp)
  810c5c:	dc000017 	ldw	r16,0(sp)
  810c60:	dec00304 	addi	sp,sp,12
  810c64:	f800283a 	ret

00810c68 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810c68:	defff804 	addi	sp,sp,-32
  810c6c:	dfc00715 	stw	ra,28(sp)
  810c70:	df000615 	stw	fp,24(sp)
  810c74:	df000604 	addi	fp,sp,24
  810c78:	e13ffd15 	stw	r4,-12(fp)
  810c7c:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  810c80:	e03ffc15 	stw	zero,-16(fp)
  810c84:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  810c88:	e0bffd17 	ldw	r2,-12(fp)
  810c8c:	10800a03 	ldbu	r2,40(r2)
  810c90:	10803fcc 	andi	r2,r2,255
  810c94:	1080201c 	xori	r2,r2,128
  810c98:	10bfe004 	addi	r2,r2,-128
  810c9c:	108016d8 	cmpnei	r2,r2,91
  810ca0:	10004d1e 	bne	r2,zero,810dd8 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
  810ca4:	e0bffd17 	ldw	r2,-12(fp)
  810ca8:	10800a04 	addi	r2,r2,40
  810cac:	10800044 	addi	r2,r2,1
  810cb0:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  810cb4:	00000f06 	br	810cf4 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  810cb8:	e13ffc17 	ldw	r4,-16(fp)
  810cbc:	01400284 	movi	r5,10
  810cc0:	0802a640 	call	802a64 <__mulsi3>
  810cc4:	1007883a 	mov	r3,r2
  810cc8:	e0bffa17 	ldw	r2,-24(fp)
  810ccc:	10800003 	ldbu	r2,0(r2)
  810cd0:	10803fcc 	andi	r2,r2,255
  810cd4:	1080201c 	xori	r2,r2,128
  810cd8:	10bfe004 	addi	r2,r2,-128
  810cdc:	1885883a 	add	r2,r3,r2
  810ce0:	10bff404 	addi	r2,r2,-48
  810ce4:	e0bffc15 	stw	r2,-16(fp)
  810ce8:	e0bffa17 	ldw	r2,-24(fp)
  810cec:	10800044 	addi	r2,r2,1
  810cf0:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  810cf4:	e0bffa17 	ldw	r2,-24(fp)
  810cf8:	10800003 	ldbu	r2,0(r2)
  810cfc:	10803fcc 	andi	r2,r2,255
  810d00:	1080201c 	xori	r2,r2,128
  810d04:	10bfe004 	addi	r2,r2,-128
  810d08:	1007883a 	mov	r3,r2
  810d0c:	00802074 	movhi	r2,129
  810d10:	1095db04 	addi	r2,r2,22380
  810d14:	10800017 	ldw	r2,0(r2)
  810d18:	1885883a 	add	r2,r3,r2
  810d1c:	10800003 	ldbu	r2,0(r2)
  810d20:	10803fcc 	andi	r2,r2,255
  810d24:	1080010c 	andi	r2,r2,4
  810d28:	1004c03a 	cmpne	r2,r2,zero
  810d2c:	103fe21e 	bne	r2,zero,810cb8 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  810d30:	e0bffa17 	ldw	r2,-24(fp)
  810d34:	10800003 	ldbu	r2,0(r2)
  810d38:	10803fcc 	andi	r2,r2,255
  810d3c:	1080201c 	xori	r2,r2,128
  810d40:	10bfe004 	addi	r2,r2,-128
  810d44:	10800ed8 	cmpnei	r2,r2,59
  810d48:	1000251e 	bne	r2,zero,810de0 <lcd_handle_escape+0x178>
    {
      ptr++;
  810d4c:	e0bffa17 	ldw	r2,-24(fp)
  810d50:	10800044 	addi	r2,r2,1
  810d54:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  810d58:	00000f06 	br	810d98 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  810d5c:	e13ffb17 	ldw	r4,-20(fp)
  810d60:	01400284 	movi	r5,10
  810d64:	0802a640 	call	802a64 <__mulsi3>
  810d68:	1007883a 	mov	r3,r2
  810d6c:	e0bffa17 	ldw	r2,-24(fp)
  810d70:	10800003 	ldbu	r2,0(r2)
  810d74:	10803fcc 	andi	r2,r2,255
  810d78:	1080201c 	xori	r2,r2,128
  810d7c:	10bfe004 	addi	r2,r2,-128
  810d80:	1885883a 	add	r2,r3,r2
  810d84:	10bff404 	addi	r2,r2,-48
  810d88:	e0bffb15 	stw	r2,-20(fp)
  810d8c:	e0bffa17 	ldw	r2,-24(fp)
  810d90:	10800044 	addi	r2,r2,1
  810d94:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  810d98:	e0bffa17 	ldw	r2,-24(fp)
  810d9c:	10800003 	ldbu	r2,0(r2)
  810da0:	10803fcc 	andi	r2,r2,255
  810da4:	1080201c 	xori	r2,r2,128
  810da8:	10bfe004 	addi	r2,r2,-128
  810dac:	1007883a 	mov	r3,r2
  810db0:	00802074 	movhi	r2,129
  810db4:	1095db04 	addi	r2,r2,22380
  810db8:	10800017 	ldw	r2,0(r2)
  810dbc:	1885883a 	add	r2,r3,r2
  810dc0:	10800003 	ldbu	r2,0(r2)
  810dc4:	10803fcc 	andi	r2,r2,255
  810dc8:	1080010c 	andi	r2,r2,4
  810dcc:	1004c03a 	cmpne	r2,r2,zero
  810dd0:	103fe21e 	bne	r2,zero,810d5c <lcd_handle_escape+0xf4>
  810dd4:	00000206 	br	810de0 <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  810dd8:	00bfffc4 	movi	r2,-1
  810ddc:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  810de0:	e0bffe07 	ldb	r2,-8(fp)
  810de4:	e0bfff15 	stw	r2,-4(fp)
  810de8:	e0ffff17 	ldw	r3,-4(fp)
  810dec:	188012a0 	cmpeqi	r2,r3,74
  810df0:	10002f1e 	bne	r2,zero,810eb0 <lcd_handle_escape+0x248>
  810df4:	e0ffff17 	ldw	r3,-4(fp)
  810df8:	188012c8 	cmpgei	r2,r3,75
  810dfc:	1000041e 	bne	r2,zero,810e10 <lcd_handle_escape+0x1a8>
  810e00:	e0ffff17 	ldw	r3,-4(fp)
  810e04:	18801220 	cmpeqi	r2,r3,72
  810e08:	1000081e 	bne	r2,zero,810e2c <lcd_handle_escape+0x1c4>
  810e0c:	00004a06 	br	810f38 <lcd_handle_escape+0x2d0>
  810e10:	e0ffff17 	ldw	r3,-4(fp)
  810e14:	188012e0 	cmpeqi	r2,r3,75
  810e18:	10002b1e 	bne	r2,zero,810ec8 <lcd_handle_escape+0x260>
  810e1c:	e0ffff17 	ldw	r3,-4(fp)
  810e20:	188019a0 	cmpeqi	r2,r3,102
  810e24:	1000011e 	bne	r2,zero,810e2c <lcd_handle_escape+0x1c4>
  810e28:	00004306 	br	810f38 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  810e2c:	e0bffb17 	ldw	r2,-20(fp)
  810e30:	10800050 	cmplti	r2,r2,1
  810e34:	1000051e 	bne	r2,zero,810e4c <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
  810e38:	e0bffb17 	ldw	r2,-20(fp)
  810e3c:	10bfffc4 	addi	r2,r2,-1
  810e40:	1007883a 	mov	r3,r2
  810e44:	e0bffd17 	ldw	r2,-12(fp)
  810e48:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  810e4c:	e0bffc17 	ldw	r2,-16(fp)
  810e50:	10800050 	cmplti	r2,r2,1
  810e54:	1000381e 	bne	r2,zero,810f38 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
  810e58:	e0bffc17 	ldw	r2,-16(fp)
  810e5c:	10bfffc4 	addi	r2,r2,-1
  810e60:	1007883a 	mov	r3,r2
  810e64:	e0bffd17 	ldw	r2,-12(fp)
  810e68:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  810e6c:	e0bffd17 	ldw	r2,-12(fp)
  810e70:	10800883 	ldbu	r2,34(r2)
  810e74:	10803fcc 	andi	r2,r2,255
  810e78:	10800170 	cmpltui	r2,r2,5
  810e7c:	1000061e 	bne	r2,zero,810e98 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
  810e80:	e0fffd17 	ldw	r3,-12(fp)
  810e84:	00800104 	movi	r2,4
  810e88:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  810e8c:	00000206 	br	810e98 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
  810e90:	e13ffd17 	ldw	r4,-12(fp)
  810e94:	0810b880 	call	810b88 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  810e98:	e0bffd17 	ldw	r2,-12(fp)
  810e9c:	10800883 	ldbu	r2,34(r2)
  810ea0:	10803fcc 	andi	r2,r2,255
  810ea4:	108000e8 	cmpgeui	r2,r2,3
  810ea8:	103ff91e 	bne	r2,zero,810e90 <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
  810eac:	00002206 	br	810f38 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  810eb0:	e0bffc17 	ldw	r2,-16(fp)
  810eb4:	10800098 	cmpnei	r2,r2,2
  810eb8:	10001f1e 	bne	r2,zero,810f38 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
  810ebc:	e13ffd17 	ldw	r4,-12(fp)
  810ec0:	081089c0 	call	81089c <lcd_clear_screen>
    break;
  810ec4:	00001c06 	br	810f38 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  810ec8:	e0bffc17 	ldw	r2,-16(fp)
  810ecc:	10800048 	cmpgei	r2,r2,1
  810ed0:	1000191e 	bne	r2,zero,810f38 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810ed4:	e0bffd17 	ldw	r2,-12(fp)
  810ed8:	10800843 	ldbu	r2,33(r2)
  810edc:	10803fcc 	andi	r2,r2,255
  810ee0:	10801428 	cmpgeui	r2,r2,80
  810ee4:	1000141e 	bne	r2,zero,810f38 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  810ee8:	e0bffd17 	ldw	r2,-12(fp)
  810eec:	10800883 	ldbu	r2,34(r2)
  810ef0:	11003fcc 	andi	r4,r2,255
  810ef4:	014018c4 	movi	r5,99
  810ef8:	0802a640 	call	802a64 <__mulsi3>
  810efc:	10c01004 	addi	r3,r2,64
  810f00:	e0bffd17 	ldw	r2,-12(fp)
  810f04:	1887883a 	add	r3,r3,r2
  810f08:	e0bffd17 	ldw	r2,-12(fp)
  810f0c:	10800843 	ldbu	r2,33(r2)
  810f10:	10803fcc 	andi	r2,r2,255
  810f14:	1889883a 	add	r4,r3,r2
  810f18:	e0bffd17 	ldw	r2,-12(fp)
  810f1c:	10800843 	ldbu	r2,33(r2)
  810f20:	10c03fcc 	andi	r3,r2,255
  810f24:	00801404 	movi	r2,80
  810f28:	10c5c83a 	sub	r2,r2,r3
  810f2c:	100d883a 	mov	r6,r2
  810f30:	01400804 	movi	r5,32
  810f34:	08045bc0 	call	8045bc <memset>
    }
    break;
  }
}
  810f38:	e037883a 	mov	sp,fp
  810f3c:	dfc00117 	ldw	ra,4(sp)
  810f40:	df000017 	ldw	fp,0(sp)
  810f44:	dec00204 	addi	sp,sp,8
  810f48:	f800283a 	ret

00810f4c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  810f4c:	defff004 	addi	sp,sp,-64
  810f50:	dfc00f15 	stw	ra,60(sp)
  810f54:	df000e15 	stw	fp,56(sp)
  810f58:	dc800d15 	stw	r18,52(sp)
  810f5c:	dc400c15 	stw	r17,48(sp)
  810f60:	dc000b15 	stw	r16,44(sp)
  810f64:	df000b04 	addi	fp,sp,44
  810f68:	e13ffc15 	stw	r4,-16(fp)
  810f6c:	e17ffd15 	stw	r5,-12(fp)
  810f70:	e1bffe15 	stw	r6,-8(fp)
  810f74:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  810f78:	e0bffe17 	ldw	r2,-8(fp)
  810f7c:	1007883a 	mov	r3,r2
  810f80:	e0bffd17 	ldw	r2,-12(fp)
  810f84:	10c5883a 	add	r2,r2,r3
  810f88:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  810f8c:	e0fffc17 	ldw	r3,-16(fp)
  810f90:	00800044 	movi	r2,1
  810f94:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  810f98:	0000a306 	br	811228 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
  810f9c:	e0bffd17 	ldw	r2,-12(fp)
  810fa0:	10800003 	ldbu	r2,0(r2)
  810fa4:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  810fa8:	e0bffc17 	ldw	r2,-16(fp)
  810fac:	10800903 	ldbu	r2,36(r2)
  810fb0:	10803fcc 	andi	r2,r2,255
  810fb4:	1080201c 	xori	r2,r2,128
  810fb8:	10bfe004 	addi	r2,r2,-128
  810fbc:	1004803a 	cmplt	r2,r2,zero
  810fc0:	10003b1e 	bne	r2,zero,8110b0 <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
  810fc4:	e0bffc17 	ldw	r2,-16(fp)
  810fc8:	10800903 	ldbu	r2,36(r2)
  810fcc:	10803fcc 	andi	r2,r2,255
  810fd0:	1080201c 	xori	r2,r2,128
  810fd4:	10bfe004 	addi	r2,r2,-128
  810fd8:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  810fdc:	e0bff717 	ldw	r2,-36(fp)
  810fe0:	1004c03a 	cmpne	r2,r2,zero
  810fe4:	1000031e 	bne	r2,zero,810ff4 <altera_avalon_lcd_16207_write+0xa8>
  810fe8:	e0bff807 	ldb	r2,-32(fp)
  810fec:	108016d8 	cmpnei	r2,r2,91
  810ff0:	1000111e 	bne	r2,zero,811038 <altera_avalon_lcd_16207_write+0xec>
  810ff4:	e0bff717 	ldw	r2,-36(fp)
  810ff8:	1005003a 	cmpeq	r2,r2,zero
  810ffc:	10001a1e 	bne	r2,zero,811068 <altera_avalon_lcd_16207_write+0x11c>
  811000:	e0bff807 	ldb	r2,-32(fp)
  811004:	1007883a 	mov	r3,r2
  811008:	00802074 	movhi	r2,129
  81100c:	1095db04 	addi	r2,r2,22380
  811010:	10800017 	ldw	r2,0(r2)
  811014:	1885883a 	add	r2,r3,r2
  811018:	10800003 	ldbu	r2,0(r2)
  81101c:	10803fcc 	andi	r2,r2,255
  811020:	1080010c 	andi	r2,r2,4
  811024:	1004c03a 	cmpne	r2,r2,zero
  811028:	10000f1e 	bne	r2,zero,811068 <altera_avalon_lcd_16207_write+0x11c>
  81102c:	e0bff807 	ldb	r2,-32(fp)
  811030:	10800ee0 	cmpeqi	r2,r2,59
  811034:	10000c1e 	bne	r2,zero,811068 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  811038:	e0fff717 	ldw	r3,-36(fp)
  81103c:	e0bffc17 	ldw	r2,-16(fp)
  811040:	1885883a 	add	r2,r3,r2
  811044:	10800a04 	addi	r2,r2,40
  811048:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  81104c:	e17ff807 	ldb	r5,-32(fp)
  811050:	e13ffc17 	ldw	r4,-16(fp)
  811054:	0810c680 	call	810c68 <lcd_handle_escape>

        sp->esccount = -1;
  811058:	e0fffc17 	ldw	r3,-16(fp)
  81105c:	00bfffc4 	movi	r2,-1
  811060:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  811064:	00006d06 	br	81121c <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  811068:	e0bffc17 	ldw	r2,-16(fp)
  81106c:	10800903 	ldbu	r2,36(r2)
  811070:	10803fcc 	andi	r2,r2,255
  811074:	108001e8 	cmpgeui	r2,r2,7
  811078:	1000681e 	bne	r2,zero,81121c <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
  81107c:	e0fff717 	ldw	r3,-36(fp)
  811080:	e0bffc17 	ldw	r2,-16(fp)
  811084:	1885883a 	add	r2,r3,r2
  811088:	10c00a04 	addi	r3,r2,40
  81108c:	e0bff803 	ldbu	r2,-32(fp)
  811090:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  811094:	e0bffc17 	ldw	r2,-16(fp)
  811098:	10800903 	ldbu	r2,36(r2)
  81109c:	10800044 	addi	r2,r2,1
  8110a0:	1007883a 	mov	r3,r2
  8110a4:	e0bffc17 	ldw	r2,-16(fp)
  8110a8:	10c00905 	stb	r3,36(r2)
  8110ac:	00005b06 	br	81121c <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
  8110b0:	e0bff807 	ldb	r2,-32(fp)
  8110b4:	108006d8 	cmpnei	r2,r2,27
  8110b8:	1000031e 	bne	r2,zero,8110c8 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
  8110bc:	e0bffc17 	ldw	r2,-16(fp)
  8110c0:	10000905 	stb	zero,36(r2)
  8110c4:	00005506 	br	81121c <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
  8110c8:	e0bff807 	ldb	r2,-32(fp)
  8110cc:	10800358 	cmpnei	r2,r2,13
  8110d0:	1000031e 	bne	r2,zero,8110e0 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
  8110d4:	e0bffc17 	ldw	r2,-16(fp)
  8110d8:	10000845 	stb	zero,33(r2)
  8110dc:	00004f06 	br	81121c <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
  8110e0:	e0bff807 	ldb	r2,-32(fp)
  8110e4:	10800298 	cmpnei	r2,r2,10
  8110e8:	1000101e 	bne	r2,zero,81112c <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
  8110ec:	e0bffc17 	ldw	r2,-16(fp)
  8110f0:	10000845 	stb	zero,33(r2)
      sp->y++;
  8110f4:	e0bffc17 	ldw	r2,-16(fp)
  8110f8:	10800883 	ldbu	r2,34(r2)
  8110fc:	10800044 	addi	r2,r2,1
  811100:	1007883a 	mov	r3,r2
  811104:	e0bffc17 	ldw	r2,-16(fp)
  811108:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  81110c:	e0bffc17 	ldw	r2,-16(fp)
  811110:	10800883 	ldbu	r2,34(r2)
  811114:	10803fcc 	andi	r2,r2,255
  811118:	108000f0 	cmpltui	r2,r2,3
  81111c:	10003f1e 	bne	r2,zero,81121c <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
  811120:	e13ffc17 	ldw	r4,-16(fp)
  811124:	0810b880 	call	810b88 <lcd_scroll_up>
  811128:	00003c06 	br	81121c <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
  81112c:	e0bff807 	ldb	r2,-32(fp)
  811130:	10800218 	cmpnei	r2,r2,8
  811134:	10000c1e 	bne	r2,zero,811168 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
  811138:	e0bffc17 	ldw	r2,-16(fp)
  81113c:	10800843 	ldbu	r2,33(r2)
  811140:	10803fcc 	andi	r2,r2,255
  811144:	1005003a 	cmpeq	r2,r2,zero
  811148:	1000341e 	bne	r2,zero,81121c <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
  81114c:	e0bffc17 	ldw	r2,-16(fp)
  811150:	10800843 	ldbu	r2,33(r2)
  811154:	10bfffc4 	addi	r2,r2,-1
  811158:	1007883a 	mov	r3,r2
  81115c:	e0bffc17 	ldw	r2,-16(fp)
  811160:	10c00845 	stb	r3,33(r2)
  811164:	00002d06 	br	81121c <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
  811168:	e0bff807 	ldb	r2,-32(fp)
  81116c:	1007883a 	mov	r3,r2
  811170:	00802074 	movhi	r2,129
  811174:	1095db04 	addi	r2,r2,22380
  811178:	10800017 	ldw	r2,0(r2)
  81117c:	1885883a 	add	r2,r3,r2
  811180:	10800003 	ldbu	r2,0(r2)
  811184:	10803fcc 	andi	r2,r2,255
  811188:	1080201c 	xori	r2,r2,128
  81118c:	10bfe004 	addi	r2,r2,-128
  811190:	108025cc 	andi	r2,r2,151
  811194:	1005003a 	cmpeq	r2,r2,zero
  811198:	1000201e 	bne	r2,zero,81121c <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  81119c:	e0bffc17 	ldw	r2,-16(fp)
  8111a0:	10800883 	ldbu	r2,34(r2)
  8111a4:	10803fcc 	andi	r2,r2,255
  8111a8:	108000b0 	cmpltui	r2,r2,2
  8111ac:	1000021e 	bne	r2,zero,8111b8 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
  8111b0:	e13ffc17 	ldw	r4,-16(fp)
  8111b4:	0810b880 	call	810b88 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8111b8:	e0bffc17 	ldw	r2,-16(fp)
  8111bc:	10800843 	ldbu	r2,33(r2)
  8111c0:	10803fcc 	andi	r2,r2,255
  8111c4:	10801428 	cmpgeui	r2,r2,80
  8111c8:	10000e1e 	bne	r2,zero,811204 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
  8111cc:	e0bffc17 	ldw	r2,-16(fp)
  8111d0:	10800883 	ldbu	r2,34(r2)
  8111d4:	11003fcc 	andi	r4,r2,255
  8111d8:	e0bffc17 	ldw	r2,-16(fp)
  8111dc:	10800843 	ldbu	r2,33(r2)
  8111e0:	14403fcc 	andi	r17,r2,255
  8111e4:	e43ffc17 	ldw	r16,-16(fp)
  8111e8:	014018c4 	movi	r5,99
  8111ec:	0802a640 	call	802a64 <__mulsi3>
  8111f0:	1405883a 	add	r2,r2,r16
  8111f4:	1445883a 	add	r2,r2,r17
  8111f8:	10c01004 	addi	r3,r2,64
  8111fc:	e0bff803 	ldbu	r2,-32(fp)
  811200:	18800005 	stb	r2,0(r3)

      sp->x++;
  811204:	e0bffc17 	ldw	r2,-16(fp)
  811208:	10800843 	ldbu	r2,33(r2)
  81120c:	10800044 	addi	r2,r2,1
  811210:	1007883a 	mov	r3,r2
  811214:	e0bffc17 	ldw	r2,-16(fp)
  811218:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  81121c:	e0bffd17 	ldw	r2,-12(fp)
  811220:	10800044 	addi	r2,r2,1
  811224:	e0bffd15 	stw	r2,-12(fp)
  811228:	e0fffd17 	ldw	r3,-12(fp)
  81122c:	e0bffb17 	ldw	r2,-20(fp)
  811230:	18bf5a36 	bltu	r3,r2,810f9c <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  811234:	00800404 	movi	r2,16
  811238:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81123c:	e03ffa15 	stw	zero,-24(fp)
  811240:	00003906 	br	811328 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811244:	00801404 	movi	r2,80
  811248:	e0bff615 	stw	r2,-40(fp)
  81124c:	00001206 	br	811298 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
  811250:	e13ffa17 	ldw	r4,-24(fp)
  811254:	e0bff617 	ldw	r2,-40(fp)
  811258:	147fffc4 	addi	r17,r2,-1
  81125c:	e43ffc17 	ldw	r16,-16(fp)
  811260:	014018c4 	movi	r5,99
  811264:	0802a640 	call	802a64 <__mulsi3>
  811268:	1405883a 	add	r2,r2,r16
  81126c:	1445883a 	add	r2,r2,r17
  811270:	10801004 	addi	r2,r2,64
  811274:	10800003 	ldbu	r2,0(r2)
  811278:	10803fcc 	andi	r2,r2,255
  81127c:	1080201c 	xori	r2,r2,128
  811280:	10bfe004 	addi	r2,r2,-128
  811284:	10800818 	cmpnei	r2,r2,32
  811288:	1000061e 	bne	r2,zero,8112a4 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81128c:	e0bff617 	ldw	r2,-40(fp)
  811290:	10bfffc4 	addi	r2,r2,-1
  811294:	e0bff615 	stw	r2,-40(fp)
  811298:	e0bff617 	ldw	r2,-40(fp)
  81129c:	10800048 	cmpgei	r2,r2,1
  8112a0:	103feb1e 	bne	r2,zero,811250 <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  8112a4:	e0bff617 	ldw	r2,-40(fp)
  8112a8:	10800448 	cmpgei	r2,r2,17
  8112ac:	1000031e 	bne	r2,zero,8112bc <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
  8112b0:	00800404 	movi	r2,16
  8112b4:	e0bff615 	stw	r2,-40(fp)
  8112b8:	00000306 	br	8112c8 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
  8112bc:	e0bff617 	ldw	r2,-40(fp)
  8112c0:	10800044 	addi	r2,r2,1
  8112c4:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  8112c8:	e13ffa17 	ldw	r4,-24(fp)
  8112cc:	e0bff617 	ldw	r2,-40(fp)
  8112d0:	1023883a 	mov	r17,r2
  8112d4:	e43ffc17 	ldw	r16,-16(fp)
  8112d8:	014018c4 	movi	r5,99
  8112dc:	0802a640 	call	802a64 <__mulsi3>
  8112e0:	1405883a 	add	r2,r2,r16
  8112e4:	10802404 	addi	r2,r2,144
  8112e8:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
  8112ec:	e0fff917 	ldw	r3,-28(fp)
  8112f0:	e0bff617 	ldw	r2,-40(fp)
  8112f4:	1880020e 	bge	r3,r2,811300 <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
  8112f8:	e0bff617 	ldw	r2,-40(fp)
  8112fc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  811300:	e13ffa17 	ldw	r4,-24(fp)
  811304:	e43ffc17 	ldw	r16,-16(fp)
  811308:	014018c4 	movi	r5,99
  81130c:	0802a640 	call	802a64 <__mulsi3>
  811310:	1405883a 	add	r2,r2,r16
  811314:	10802404 	addi	r2,r2,144
  811318:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81131c:	e0bffa17 	ldw	r2,-24(fp)
  811320:	10800044 	addi	r2,r2,1
  811324:	e0bffa15 	stw	r2,-24(fp)
  811328:	e0bffa17 	ldw	r2,-24(fp)
  81132c:	10800090 	cmplti	r2,r2,2
  811330:	103fc41e 	bne	r2,zero,811244 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  811334:	e0bff917 	ldw	r2,-28(fp)
  811338:	10800448 	cmpgei	r2,r2,17
  81133c:	1000031e 	bne	r2,zero,81134c <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
  811340:	e0bffc17 	ldw	r2,-16(fp)
  811344:	10000985 	stb	zero,38(r2)
  811348:	00003106 	br	811410 <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
  81134c:	e0bff917 	ldw	r2,-28(fp)
  811350:	1085883a 	add	r2,r2,r2
  811354:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  811358:	e0bff917 	ldw	r2,-28(fp)
  81135c:	1007883a 	mov	r3,r2
  811360:	e0bffc17 	ldw	r2,-16(fp)
  811364:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811368:	e03ffa15 	stw	zero,-24(fp)
  81136c:	00002506 	br	811404 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  811370:	e13ffa17 	ldw	r4,-24(fp)
  811374:	e43ffc17 	ldw	r16,-16(fp)
  811378:	014018c4 	movi	r5,99
  81137c:	0802a640 	call	802a64 <__mulsi3>
  811380:	1405883a 	add	r2,r2,r16
  811384:	10802404 	addi	r2,r2,144
  811388:	10800043 	ldbu	r2,1(r2)
  81138c:	10803fcc 	andi	r2,r2,255
  811390:	1080201c 	xori	r2,r2,128
  811394:	10bfe004 	addi	r2,r2,-128
  811398:	10800450 	cmplti	r2,r2,17
  81139c:	1000161e 	bne	r2,zero,8113f8 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8113a0:	e4bffa17 	ldw	r18,-24(fp)
  8113a4:	e13ffa17 	ldw	r4,-24(fp)
  8113a8:	e43ffc17 	ldw	r16,-16(fp)
  8113ac:	014018c4 	movi	r5,99
  8113b0:	0802a640 	call	802a64 <__mulsi3>
  8113b4:	1405883a 	add	r2,r2,r16
  8113b8:	10802404 	addi	r2,r2,144
  8113bc:	10800043 	ldbu	r2,1(r2)
  8113c0:	10803fcc 	andi	r2,r2,255
  8113c4:	1080201c 	xori	r2,r2,128
  8113c8:	10bfe004 	addi	r2,r2,-128
  8113cc:	1008923a 	slli	r4,r2,8
  8113d0:	e17ff917 	ldw	r5,-28(fp)
  8113d4:	08024240 	call	802424 <__divsi3>
  8113d8:	1023883a 	mov	r17,r2
  8113dc:	e43ffc17 	ldw	r16,-16(fp)
  8113e0:	9009883a 	mov	r4,r18
  8113e4:	014018c4 	movi	r5,99
  8113e8:	0802a640 	call	802a64 <__mulsi3>
  8113ec:	1405883a 	add	r2,r2,r16
  8113f0:	10802404 	addi	r2,r2,144
  8113f4:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8113f8:	e0bffa17 	ldw	r2,-24(fp)
  8113fc:	10800044 	addi	r2,r2,1
  811400:	e0bffa15 	stw	r2,-24(fp)
  811404:	e0bffa17 	ldw	r2,-24(fp)
  811408:	10800090 	cmplti	r2,r2,2
  81140c:	103fd81e 	bne	r2,zero,811370 <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  811410:	e0bffc17 	ldw	r2,-16(fp)
  811414:	10800943 	ldbu	r2,37(r2)
  811418:	10803fcc 	andi	r2,r2,255
  81141c:	1080201c 	xori	r2,r2,128
  811420:	10bfe004 	addi	r2,r2,-128
  811424:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  811428:	e13ffc17 	ldw	r4,-16(fp)
  81142c:	08109740 	call	810974 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  811430:	e0bffc17 	ldw	r2,-16(fp)
  811434:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  811438:	e0bffc17 	ldw	r2,-16(fp)
  81143c:	10800943 	ldbu	r2,37(r2)
  811440:	10c03fcc 	andi	r3,r2,255
  811444:	18c0201c 	xori	r3,r3,128
  811448:	18ffe004 	addi	r3,r3,-128
  81144c:	e0bff517 	ldw	r2,-44(fp)
  811450:	18800426 	beq	r3,r2,811464 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  811454:	e0fffc17 	ldw	r3,-16(fp)
  811458:	00800044 	movi	r2,1
  81145c:	188009c5 	stb	r2,39(r3)
  }
  811460:	003feb06 	br	811410 <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  811464:	e0bffe17 	ldw	r2,-8(fp)
}
  811468:	e037883a 	mov	sp,fp
  81146c:	dfc00417 	ldw	ra,16(sp)
  811470:	df000317 	ldw	fp,12(sp)
  811474:	dc800217 	ldw	r18,8(sp)
  811478:	dc400117 	ldw	r17,4(sp)
  81147c:	dc000017 	ldw	r16,0(sp)
  811480:	dec00504 	addi	sp,sp,20
  811484:	f800283a 	ret

00811488 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  811488:	defffc04 	addi	sp,sp,-16
  81148c:	dfc00315 	stw	ra,12(sp)
  811490:	df000215 	stw	fp,8(sp)
  811494:	df000204 	addi	fp,sp,8
  811498:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  81149c:	e0bfff17 	ldw	r2,-4(fp)
  8114a0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8114a4:	e0bffe17 	ldw	r2,-8(fp)
  8114a8:	10800943 	ldbu	r2,37(r2)
  8114ac:	10803fcc 	andi	r2,r2,255
  8114b0:	1080201c 	xori	r2,r2,128
  8114b4:	10bfe004 	addi	r2,r2,-128
  8114b8:	10c00044 	addi	r3,r2,1
  8114bc:	e0bffe17 	ldw	r2,-8(fp)
  8114c0:	10800983 	ldbu	r2,38(r2)
  8114c4:	10803fcc 	andi	r2,r2,255
  8114c8:	1080201c 	xori	r2,r2,128
  8114cc:	10bfe004 	addi	r2,r2,-128
  8114d0:	18800316 	blt	r3,r2,8114e0 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  8114d4:	e0bffe17 	ldw	r2,-8(fp)
  8114d8:	10000945 	stb	zero,37(r2)
  8114dc:	00000606 	br	8114f8 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8114e0:	e0bffe17 	ldw	r2,-8(fp)
  8114e4:	10800943 	ldbu	r2,37(r2)
  8114e8:	10800044 	addi	r2,r2,1
  8114ec:	1007883a 	mov	r3,r2
  8114f0:	e0bffe17 	ldw	r2,-8(fp)
  8114f4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8114f8:	e0bffe17 	ldw	r2,-8(fp)
  8114fc:	10800983 	ldbu	r2,38(r2)
  811500:	10803fcc 	andi	r2,r2,255
  811504:	1080201c 	xori	r2,r2,128
  811508:	10bfe004 	addi	r2,r2,-128
  81150c:	10800050 	cmplti	r2,r2,1
  811510:	1000091e 	bne	r2,zero,811538 <alt_lcd_16207_timeout+0xb0>
  811514:	e0bffe17 	ldw	r2,-8(fp)
  811518:	108009c3 	ldbu	r2,39(r2)
  81151c:	10803fcc 	andi	r2,r2,255
  811520:	1080201c 	xori	r2,r2,128
  811524:	10bfe004 	addi	r2,r2,-128
  811528:	1004c03a 	cmpne	r2,r2,zero
  81152c:	1000021e 	bne	r2,zero,811538 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  811530:	e13ffe17 	ldw	r4,-8(fp)
  811534:	08109740 	call	810974 <lcd_repaint_screen>

  return sp->period;
  811538:	e0bffe17 	ldw	r2,-8(fp)
  81153c:	10800717 	ldw	r2,28(r2)
}
  811540:	e037883a 	mov	sp,fp
  811544:	dfc00117 	ldw	ra,4(sp)
  811548:	df000017 	ldw	fp,0(sp)
  81154c:	dec00204 	addi	sp,sp,8
  811550:	f800283a 	ret

00811554 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  811554:	defffc04 	addi	sp,sp,-16
  811558:	dfc00315 	stw	ra,12(sp)
  81155c:	df000215 	stw	fp,8(sp)
  811560:	df000204 	addi	fp,sp,8
  811564:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  811568:	e0bfff17 	ldw	r2,-4(fp)
  81156c:	10800017 	ldw	r2,0(r2)
  811570:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  811574:	e0bfff17 	ldw	r2,-4(fp)
  811578:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  81157c:	010ea604 	movi	r4,15000
  811580:	080f9b40 	call	80f9b4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811584:	e0bffe17 	ldw	r2,-8(fp)
  811588:	1007883a 	mov	r3,r2
  81158c:	00800c04 	movi	r2,48
  811590:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  811594:	01040104 	movi	r4,4100
  811598:	080f9b40 	call	80f9b4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81159c:	e0bffe17 	ldw	r2,-8(fp)
  8115a0:	1007883a 	mov	r3,r2
  8115a4:	00800c04 	movi	r2,48
  8115a8:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8115ac:	0100fa04 	movi	r4,1000
  8115b0:	080f9b40 	call	80f9b4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8115b4:	e0bffe17 	ldw	r2,-8(fp)
  8115b8:	1007883a 	mov	r3,r2
  8115bc:	00800c04 	movi	r2,48
  8115c0:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8115c4:	e13fff17 	ldw	r4,-4(fp)
  8115c8:	01400e04 	movi	r5,56
  8115cc:	08107100 	call	810710 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8115d0:	e13fff17 	ldw	r4,-4(fp)
  8115d4:	01400204 	movi	r5,8
  8115d8:	08107100 	call	810710 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8115dc:	e13fff17 	ldw	r4,-4(fp)
  8115e0:	081089c0 	call	81089c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8115e4:	e13fff17 	ldw	r4,-4(fp)
  8115e8:	01400184 	movi	r5,6
  8115ec:	08107100 	call	810710 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8115f0:	e13fff17 	ldw	r4,-4(fp)
  8115f4:	01400304 	movi	r5,12
  8115f8:	08107100 	call	810710 <lcd_write_command>

  sp->esccount = -1;
  8115fc:	e0ffff17 	ldw	r3,-4(fp)
  811600:	00bfffc4 	movi	r2,-1
  811604:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  811608:	e0bfff17 	ldw	r2,-4(fp)
  81160c:	11000a04 	addi	r4,r2,40
  811610:	000b883a 	mov	r5,zero
  811614:	01800204 	movi	r6,8
  811618:	08045bc0 	call	8045bc <memset>

  sp->scrollpos = 0;
  81161c:	e0bfff17 	ldw	r2,-4(fp)
  811620:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  811624:	e0bfff17 	ldw	r2,-4(fp)
  811628:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81162c:	e0bfff17 	ldw	r2,-4(fp)
  811630:	100009c5 	stb	zero,39(r2)
  811634:	00802074 	movhi	r2,129
  811638:	109d1f04 	addi	r2,r2,29820
  81163c:	10800017 	ldw	r2,0(r2)
  811640:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  811644:	01400284 	movi	r5,10
  811648:	08024e40 	call	8024e4 <__udivsi3>
  81164c:	1007883a 	mov	r3,r2
  811650:	e0bfff17 	ldw	r2,-4(fp)
  811654:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  811658:	e0bfff17 	ldw	r2,-4(fp)
  81165c:	11000104 	addi	r4,r2,4
  811660:	e0bfff17 	ldw	r2,-4(fp)
  811664:	10800717 	ldw	r2,28(r2)
  811668:	100b883a 	mov	r5,r2
  81166c:	01802074 	movhi	r6,129
  811670:	31852204 	addi	r6,r6,5256
  811674:	e1ffff17 	ldw	r7,-4(fp)
  811678:	08121980 	call	812198 <alt_alarm_start>
}
  81167c:	e037883a 	mov	sp,fp
  811680:	dfc00117 	ldw	ra,4(sp)
  811684:	df000017 	ldw	fp,0(sp)
  811688:	dec00204 	addi	sp,sp,8
  81168c:	f800283a 	ret

00811690 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811690:	defffa04 	addi	sp,sp,-24
  811694:	dfc00515 	stw	ra,20(sp)
  811698:	df000415 	stw	fp,16(sp)
  81169c:	df000404 	addi	fp,sp,16
  8116a0:	e13ffd15 	stw	r4,-12(fp)
  8116a4:	e17ffe15 	stw	r5,-8(fp)
  8116a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8116ac:	e0bffd17 	ldw	r2,-12(fp)
  8116b0:	10800017 	ldw	r2,0(r2)
  8116b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8116b8:	e0bffc17 	ldw	r2,-16(fp)
  8116bc:	11000a04 	addi	r4,r2,40
  8116c0:	e0bffd17 	ldw	r2,-12(fp)
  8116c4:	11c00217 	ldw	r7,8(r2)
  8116c8:	e17ffe17 	ldw	r5,-8(fp)
  8116cc:	e1bfff17 	ldw	r6,-4(fp)
  8116d0:	0810f4c0 	call	810f4c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8116d4:	e037883a 	mov	sp,fp
  8116d8:	dfc00117 	ldw	ra,4(sp)
  8116dc:	df000017 	ldw	fp,0(sp)
  8116e0:	dec00204 	addi	sp,sp,8
  8116e4:	f800283a 	ret

008116e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8116e8:	defffa04 	addi	sp,sp,-24
  8116ec:	dfc00515 	stw	ra,20(sp)
  8116f0:	df000415 	stw	fp,16(sp)
  8116f4:	df000404 	addi	fp,sp,16
  8116f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8116fc:	e0bfff17 	ldw	r2,-4(fp)
  811700:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811704:	e0bfff17 	ldw	r2,-4(fp)
  811708:	10800104 	addi	r2,r2,4
  81170c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811710:	0005303a 	rdctl	r2,status
  811714:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811718:	e0fffd17 	ldw	r3,-12(fp)
  81171c:	00bfff84 	movi	r2,-2
  811720:	1884703a 	and	r2,r3,r2
  811724:	1001703a 	wrctl	status,r2
  
  return context;
  811728:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81172c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  811730:	0812d940 	call	812d94 <alt_tick>
  811734:	e0bffe17 	ldw	r2,-8(fp)
  811738:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81173c:	e0bffc17 	ldw	r2,-16(fp)
  811740:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  811744:	e037883a 	mov	sp,fp
  811748:	dfc00117 	ldw	ra,4(sp)
  81174c:	df000017 	ldw	fp,0(sp)
  811750:	dec00204 	addi	sp,sp,8
  811754:	f800283a 	ret

00811758 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  811758:	defff804 	addi	sp,sp,-32
  81175c:	dfc00715 	stw	ra,28(sp)
  811760:	df000615 	stw	fp,24(sp)
  811764:	df000604 	addi	fp,sp,24
  811768:	e13ffc15 	stw	r4,-16(fp)
  81176c:	e17ffd15 	stw	r5,-12(fp)
  811770:	e1bffe15 	stw	r6,-8(fp)
  811774:	e1ffff15 	stw	r7,-4(fp)
  811778:	e0bfff17 	ldw	r2,-4(fp)
  81177c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  811780:	00802074 	movhi	r2,129
  811784:	109d1f04 	addi	r2,r2,29820
  811788:	10800017 	ldw	r2,0(r2)
  81178c:	1004c03a 	cmpne	r2,r2,zero
  811790:	1000041e 	bne	r2,zero,8117a4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  811794:	00c02074 	movhi	r3,129
  811798:	18dd1f04 	addi	r3,r3,29820
  81179c:	e0bffb17 	ldw	r2,-20(fp)
  8117a0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8117a4:	e0bffc17 	ldw	r2,-16(fp)
  8117a8:	10800104 	addi	r2,r2,4
  8117ac:	1007883a 	mov	r3,r2
  8117b0:	008001c4 	movi	r2,7
  8117b4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8117b8:	d8000015 	stw	zero,0(sp)
  8117bc:	e13ffd17 	ldw	r4,-12(fp)
  8117c0:	e17ffe17 	ldw	r5,-8(fp)
  8117c4:	01802074 	movhi	r6,129
  8117c8:	3185ba04 	addi	r6,r6,5864
  8117cc:	e1fffc17 	ldw	r7,-16(fp)
  8117d0:	08128e00 	call	8128e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8117d4:	e037883a 	mov	sp,fp
  8117d8:	dfc00117 	ldw	ra,4(sp)
  8117dc:	df000017 	ldw	fp,0(sp)
  8117e0:	dec00204 	addi	sp,sp,8
  8117e4:	f800283a 	ret

008117e8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8117e8:	defffa04 	addi	sp,sp,-24
  8117ec:	dfc00515 	stw	ra,20(sp)
  8117f0:	df000415 	stw	fp,16(sp)
  8117f4:	df000404 	addi	fp,sp,16
  8117f8:	e13ffd15 	stw	r4,-12(fp)
  8117fc:	e17ffe15 	stw	r5,-8(fp)
  811800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811804:	e0bffd17 	ldw	r2,-12(fp)
  811808:	10800017 	ldw	r2,0(r2)
  81180c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  811810:	e0bffc17 	ldw	r2,-16(fp)
  811814:	11000a04 	addi	r4,r2,40
  811818:	e0bffd17 	ldw	r2,-12(fp)
  81181c:	11c00217 	ldw	r7,8(r2)
  811820:	e17ffe17 	ldw	r5,-8(fp)
  811824:	e1bfff17 	ldw	r6,-4(fp)
  811828:	0811ce00 	call	811ce0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81182c:	e037883a 	mov	sp,fp
  811830:	dfc00117 	ldw	ra,4(sp)
  811834:	df000017 	ldw	fp,0(sp)
  811838:	dec00204 	addi	sp,sp,8
  81183c:	f800283a 	ret

00811840 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811840:	defffa04 	addi	sp,sp,-24
  811844:	dfc00515 	stw	ra,20(sp)
  811848:	df000415 	stw	fp,16(sp)
  81184c:	df000404 	addi	fp,sp,16
  811850:	e13ffd15 	stw	r4,-12(fp)
  811854:	e17ffe15 	stw	r5,-8(fp)
  811858:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81185c:	e0bffd17 	ldw	r2,-12(fp)
  811860:	10800017 	ldw	r2,0(r2)
  811864:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  811868:	e0bffc17 	ldw	r2,-16(fp)
  81186c:	11000a04 	addi	r4,r2,40
  811870:	e0bffd17 	ldw	r2,-12(fp)
  811874:	11c00217 	ldw	r7,8(r2)
  811878:	e17ffe17 	ldw	r5,-8(fp)
  81187c:	e1bfff17 	ldw	r6,-4(fp)
  811880:	0811f700 	call	811f70 <altera_avalon_uart_write>
      fd->fd_flags);
}
  811884:	e037883a 	mov	sp,fp
  811888:	dfc00117 	ldw	ra,4(sp)
  81188c:	df000017 	ldw	fp,0(sp)
  811890:	dec00204 	addi	sp,sp,8
  811894:	f800283a 	ret

00811898 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  811898:	defffc04 	addi	sp,sp,-16
  81189c:	dfc00315 	stw	ra,12(sp)
  8118a0:	df000215 	stw	fp,8(sp)
  8118a4:	df000204 	addi	fp,sp,8
  8118a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8118ac:	e0bfff17 	ldw	r2,-4(fp)
  8118b0:	10800017 	ldw	r2,0(r2)
  8118b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8118b8:	e0bffe17 	ldw	r2,-8(fp)
  8118bc:	11000a04 	addi	r4,r2,40
  8118c0:	e0bfff17 	ldw	r2,-4(fp)
  8118c4:	11400217 	ldw	r5,8(r2)
  8118c8:	0811c800 	call	811c80 <altera_avalon_uart_close>
}
  8118cc:	e037883a 	mov	sp,fp
  8118d0:	dfc00117 	ldw	ra,4(sp)
  8118d4:	df000017 	ldw	fp,0(sp)
  8118d8:	dec00204 	addi	sp,sp,8
  8118dc:	f800283a 	ret

008118e0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8118e0:	defff704 	addi	sp,sp,-36
  8118e4:	dfc00815 	stw	ra,32(sp)
  8118e8:	df000715 	stw	fp,28(sp)
  8118ec:	df000704 	addi	fp,sp,28
  8118f0:	e13ffc15 	stw	r4,-16(fp)
  8118f4:	e17ffd15 	stw	r5,-12(fp)
  8118f8:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  8118fc:	e0bffc17 	ldw	r2,-16(fp)
  811900:	10800017 	ldw	r2,0(r2)
  811904:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  811908:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81190c:	1004c03a 	cmpne	r2,r2,zero
  811910:	1000061e 	bne	r2,zero,81192c <altera_avalon_uart_init+0x4c>
  811914:	0005883a 	mov	r2,zero
  811918:	1004c03a 	cmpne	r2,r2,zero
  81191c:	1000031e 	bne	r2,zero,81192c <altera_avalon_uart_init+0x4c>
  811920:	0005883a 	mov	r2,zero
  811924:	1005003a 	cmpeq	r2,r2,zero
  811928:	1000031e 	bne	r2,zero,811938 <altera_avalon_uart_init+0x58>
  81192c:	00800044 	movi	r2,1
  811930:	e0bfff15 	stw	r2,-4(fp)
  811934:	00000106 	br	81193c <altera_avalon_uart_init+0x5c>
  811938:	e03fff15 	stw	zero,-4(fp)
  81193c:	e0bfff17 	ldw	r2,-4(fp)
  811940:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  811944:	e0bffa17 	ldw	r2,-24(fp)
  811948:	1004c03a 	cmpne	r2,r2,zero
  81194c:	1000111e 	bne	r2,zero,811994 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  811950:	e0fffc17 	ldw	r3,-16(fp)
  811954:	00832004 	movi	r2,3200
  811958:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81195c:	e0bffb17 	ldw	r2,-20(fp)
  811960:	11000304 	addi	r4,r2,12
  811964:	e0bffc17 	ldw	r2,-16(fp)
  811968:	10800117 	ldw	r2,4(r2)
  81196c:	1007883a 	mov	r3,r2
  811970:	2005883a 	mov	r2,r4
  811974:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  811978:	d8000015 	stw	zero,0(sp)
  81197c:	e13ffd17 	ldw	r4,-12(fp)
  811980:	e17ffe17 	ldw	r5,-8(fp)
  811984:	01802074 	movhi	r6,129
  811988:	31866a04 	addi	r6,r6,6568
  81198c:	e1fffc17 	ldw	r7,-16(fp)
  811990:	08128e00 	call	8128e0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  811994:	e037883a 	mov	sp,fp
  811998:	dfc00117 	ldw	ra,4(sp)
  81199c:	df000017 	ldw	fp,0(sp)
  8119a0:	dec00204 	addi	sp,sp,8
  8119a4:	f800283a 	ret

008119a8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8119a8:	defffa04 	addi	sp,sp,-24
  8119ac:	dfc00515 	stw	ra,20(sp)
  8119b0:	df000415 	stw	fp,16(sp)
  8119b4:	df000404 	addi	fp,sp,16
  8119b8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8119bc:	e0bfff17 	ldw	r2,-4(fp)
  8119c0:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  8119c4:	e0bffd17 	ldw	r2,-12(fp)
  8119c8:	10800017 	ldw	r2,0(r2)
  8119cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8119d0:	e0bffc17 	ldw	r2,-16(fp)
  8119d4:	10800204 	addi	r2,r2,8
  8119d8:	10800037 	ldwio	r2,0(r2)
  8119dc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8119e0:	e0bffc17 	ldw	r2,-16(fp)
  8119e4:	10800204 	addi	r2,r2,8
  8119e8:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8119ec:	e0bffc17 	ldw	r2,-16(fp)
  8119f0:	10800204 	addi	r2,r2,8
  8119f4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8119f8:	e0bffe17 	ldw	r2,-8(fp)
  8119fc:	1080200c 	andi	r2,r2,128
  811a00:	1005003a 	cmpeq	r2,r2,zero
  811a04:	1000031e 	bne	r2,zero,811a14 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  811a08:	e13ffd17 	ldw	r4,-12(fp)
  811a0c:	e17ffe17 	ldw	r5,-8(fp)
  811a10:	0811a440 	call	811a44 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  811a14:	e0bffe17 	ldw	r2,-8(fp)
  811a18:	1081100c 	andi	r2,r2,1088
  811a1c:	1005003a 	cmpeq	r2,r2,zero
  811a20:	1000031e 	bne	r2,zero,811a30 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  811a24:	e13ffd17 	ldw	r4,-12(fp)
  811a28:	e17ffe17 	ldw	r5,-8(fp)
  811a2c:	0811b240 	call	811b24 <altera_avalon_uart_txirq>
  }
  

}
  811a30:	e037883a 	mov	sp,fp
  811a34:	dfc00117 	ldw	ra,4(sp)
  811a38:	df000017 	ldw	fp,0(sp)
  811a3c:	dec00204 	addi	sp,sp,8
  811a40:	f800283a 	ret

00811a44 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811a44:	defffc04 	addi	sp,sp,-16
  811a48:	df000315 	stw	fp,12(sp)
  811a4c:	df000304 	addi	fp,sp,12
  811a50:	e13ffe15 	stw	r4,-8(fp)
  811a54:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  811a58:	e0bfff17 	ldw	r2,-4(fp)
  811a5c:	108000cc 	andi	r2,r2,3
  811a60:	1004c03a 	cmpne	r2,r2,zero
  811a64:	10002b1e 	bne	r2,zero,811b14 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  811a68:	e0bffe17 	ldw	r2,-8(fp)
  811a6c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811a70:	e0bffe17 	ldw	r2,-8(fp)
  811a74:	10800317 	ldw	r2,12(r2)
  811a78:	10800044 	addi	r2,r2,1
  811a7c:	10800fcc 	andi	r2,r2,63
  811a80:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  811a84:	e0bffe17 	ldw	r2,-8(fp)
  811a88:	11000317 	ldw	r4,12(r2)
  811a8c:	e0bffe17 	ldw	r2,-8(fp)
  811a90:	10800017 	ldw	r2,0(r2)
  811a94:	10800037 	ldwio	r2,0(r2)
  811a98:	1007883a 	mov	r3,r2
  811a9c:	e0bffe17 	ldw	r2,-8(fp)
  811aa0:	2085883a 	add	r2,r4,r2
  811aa4:	10800704 	addi	r2,r2,28
  811aa8:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  811aac:	e0fffe17 	ldw	r3,-8(fp)
  811ab0:	e0bffd17 	ldw	r2,-12(fp)
  811ab4:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811ab8:	e0bffe17 	ldw	r2,-8(fp)
  811abc:	10800317 	ldw	r2,12(r2)
  811ac0:	10800044 	addi	r2,r2,1
  811ac4:	10800fcc 	andi	r2,r2,63
  811ac8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  811acc:	e0bffe17 	ldw	r2,-8(fp)
  811ad0:	10c00217 	ldw	r3,8(r2)
  811ad4:	e0bffd17 	ldw	r2,-12(fp)
  811ad8:	18800e1e 	bne	r3,r2,811b14 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811adc:	e0bffe17 	ldw	r2,-8(fp)
  811ae0:	10c00117 	ldw	r3,4(r2)
  811ae4:	00bfdfc4 	movi	r2,-129
  811ae8:	1886703a 	and	r3,r3,r2
  811aec:	e0bffe17 	ldw	r2,-8(fp)
  811af0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  811af4:	e0bffe17 	ldw	r2,-8(fp)
  811af8:	10800017 	ldw	r2,0(r2)
  811afc:	11000304 	addi	r4,r2,12
  811b00:	e0bffe17 	ldw	r2,-8(fp)
  811b04:	10800117 	ldw	r2,4(r2)
  811b08:	1007883a 	mov	r3,r2
  811b0c:	2005883a 	mov	r2,r4
  811b10:	10c00035 	stwio	r3,0(r2)
  }   
}
  811b14:	e037883a 	mov	sp,fp
  811b18:	df000017 	ldw	fp,0(sp)
  811b1c:	dec00104 	addi	sp,sp,4
  811b20:	f800283a 	ret

00811b24 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811b24:	defffd04 	addi	sp,sp,-12
  811b28:	df000215 	stw	fp,8(sp)
  811b2c:	df000204 	addi	fp,sp,8
  811b30:	e13ffe15 	stw	r4,-8(fp)
  811b34:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811b38:	e0bffe17 	ldw	r2,-8(fp)
  811b3c:	10c00417 	ldw	r3,16(r2)
  811b40:	e0bffe17 	ldw	r2,-8(fp)
  811b44:	10800517 	ldw	r2,20(r2)
  811b48:	18803626 	beq	r3,r2,811c24 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811b4c:	e0bffe17 	ldw	r2,-8(fp)
  811b50:	10800617 	ldw	r2,24(r2)
  811b54:	1080008c 	andi	r2,r2,2
  811b58:	1005003a 	cmpeq	r2,r2,zero
  811b5c:	1000041e 	bne	r2,zero,811b70 <altera_avalon_uart_txirq+0x4c>
  811b60:	e0bfff17 	ldw	r2,-4(fp)
  811b64:	1082000c 	andi	r2,r2,2048
  811b68:	1005003a 	cmpeq	r2,r2,zero
  811b6c:	10001e1e 	bne	r2,zero,811be8 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811b70:	e0bffe17 	ldw	r2,-8(fp)
  811b74:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811b78:	e0bffe17 	ldw	r2,-8(fp)
  811b7c:	10800017 	ldw	r2,0(r2)
  811b80:	11000104 	addi	r4,r2,4
  811b84:	e0bffe17 	ldw	r2,-8(fp)
  811b88:	10c00417 	ldw	r3,16(r2)
  811b8c:	e0bffe17 	ldw	r2,-8(fp)
  811b90:	1885883a 	add	r2,r3,r2
  811b94:	10801704 	addi	r2,r2,92
  811b98:	10800003 	ldbu	r2,0(r2)
  811b9c:	10c03fcc 	andi	r3,r2,255
  811ba0:	2005883a 	mov	r2,r4
  811ba4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  811ba8:	e0bffe17 	ldw	r2,-8(fp)
  811bac:	10800417 	ldw	r2,16(r2)
  811bb0:	10c00044 	addi	r3,r2,1
  811bb4:	e0bffe17 	ldw	r2,-8(fp)
  811bb8:	10c00415 	stw	r3,16(r2)
  811bbc:	e0bffe17 	ldw	r2,-8(fp)
  811bc0:	10800417 	ldw	r2,16(r2)
  811bc4:	10c00fcc 	andi	r3,r2,63
  811bc8:	e0bffe17 	ldw	r2,-8(fp)
  811bcc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811bd0:	e0bffe17 	ldw	r2,-8(fp)
  811bd4:	10800117 	ldw	r2,4(r2)
  811bd8:	10c01014 	ori	r3,r2,64
  811bdc:	e0bffe17 	ldw	r2,-8(fp)
  811be0:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811be4:	00000f06 	br	811c24 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  811be8:	e0bffe17 	ldw	r2,-8(fp)
  811bec:	10800017 	ldw	r2,0(r2)
  811bf0:	10800204 	addi	r2,r2,8
  811bf4:	10800037 	ldwio	r2,0(r2)
  811bf8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811bfc:	e0bfff17 	ldw	r2,-4(fp)
  811c00:	1082000c 	andi	r2,r2,2048
  811c04:	1004c03a 	cmpne	r2,r2,zero
  811c08:	1000061e 	bne	r2,zero,811c24 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811c0c:	e0bffe17 	ldw	r2,-8(fp)
  811c10:	10c00117 	ldw	r3,4(r2)
  811c14:	00bfefc4 	movi	r2,-65
  811c18:	1886703a 	and	r3,r3,r2
  811c1c:	e0bffe17 	ldw	r2,-8(fp)
  811c20:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  811c24:	e0bffe17 	ldw	r2,-8(fp)
  811c28:	10c00417 	ldw	r3,16(r2)
  811c2c:	e0bffe17 	ldw	r2,-8(fp)
  811c30:	10800517 	ldw	r2,20(r2)
  811c34:	1880061e 	bne	r3,r2,811c50 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811c38:	e0bffe17 	ldw	r2,-8(fp)
  811c3c:	10c00117 	ldw	r3,4(r2)
  811c40:	00beefc4 	movi	r2,-1089
  811c44:	1886703a 	and	r3,r3,r2
  811c48:	e0bffe17 	ldw	r2,-8(fp)
  811c4c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811c50:	e0bffe17 	ldw	r2,-8(fp)
  811c54:	10800017 	ldw	r2,0(r2)
  811c58:	11000304 	addi	r4,r2,12
  811c5c:	e0bffe17 	ldw	r2,-8(fp)
  811c60:	10800117 	ldw	r2,4(r2)
  811c64:	1007883a 	mov	r3,r2
  811c68:	2005883a 	mov	r2,r4
  811c6c:	10c00035 	stwio	r3,0(r2)
}
  811c70:	e037883a 	mov	sp,fp
  811c74:	df000017 	ldw	fp,0(sp)
  811c78:	dec00104 	addi	sp,sp,4
  811c7c:	f800283a 	ret

00811c80 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811c80:	defffc04 	addi	sp,sp,-16
  811c84:	df000315 	stw	fp,12(sp)
  811c88:	df000304 	addi	fp,sp,12
  811c8c:	e13ffd15 	stw	r4,-12(fp)
  811c90:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811c94:	00000706 	br	811cb4 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811c98:	e0bffe17 	ldw	r2,-8(fp)
  811c9c:	1090000c 	andi	r2,r2,16384
  811ca0:	1005003a 	cmpeq	r2,r2,zero
  811ca4:	1000031e 	bne	r2,zero,811cb4 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  811ca8:	00bffd44 	movi	r2,-11
  811cac:	e0bfff15 	stw	r2,-4(fp)
  811cb0:	00000606 	br	811ccc <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811cb4:	e0bffd17 	ldw	r2,-12(fp)
  811cb8:	10c00417 	ldw	r3,16(r2)
  811cbc:	e0bffd17 	ldw	r2,-12(fp)
  811cc0:	10800517 	ldw	r2,20(r2)
  811cc4:	18bff41e 	bne	r3,r2,811c98 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811cc8:	e03fff15 	stw	zero,-4(fp)
  811ccc:	e0bfff17 	ldw	r2,-4(fp)
}
  811cd0:	e037883a 	mov	sp,fp
  811cd4:	df000017 	ldw	fp,0(sp)
  811cd8:	dec00104 	addi	sp,sp,4
  811cdc:	f800283a 	ret

00811ce0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811ce0:	defff004 	addi	sp,sp,-64
  811ce4:	dfc00f15 	stw	ra,60(sp)
  811ce8:	df000e15 	stw	fp,56(sp)
  811cec:	df000e04 	addi	fp,sp,56
  811cf0:	e13ffb15 	stw	r4,-20(fp)
  811cf4:	e17ffc15 	stw	r5,-16(fp)
  811cf8:	e1bffd15 	stw	r6,-12(fp)
  811cfc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  811d00:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  811d04:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  811d08:	e0bffe17 	ldw	r2,-8(fp)
  811d0c:	1090000c 	andi	r2,r2,16384
  811d10:	1005003a 	cmpeq	r2,r2,zero
  811d14:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  811d18:	e0bffb17 	ldw	r2,-20(fp)
  811d1c:	10800217 	ldw	r2,8(r2)
  811d20:	10800044 	addi	r2,r2,1
  811d24:	10800fcc 	andi	r2,r2,63
  811d28:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811d2c:	00001906 	br	811d94 <altera_avalon_uart_read+0xb4>
    {
      count++;
  811d30:	e0bff617 	ldw	r2,-40(fp)
  811d34:	10800044 	addi	r2,r2,1
  811d38:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811d3c:	e0bffb17 	ldw	r2,-20(fp)
  811d40:	10c00217 	ldw	r3,8(r2)
  811d44:	e0bffb17 	ldw	r2,-20(fp)
  811d48:	1885883a 	add	r2,r3,r2
  811d4c:	10800704 	addi	r2,r2,28
  811d50:	10800003 	ldbu	r2,0(r2)
  811d54:	1007883a 	mov	r3,r2
  811d58:	e0bffc17 	ldw	r2,-16(fp)
  811d5c:	10c00005 	stb	r3,0(r2)
  811d60:	e0bffc17 	ldw	r2,-16(fp)
  811d64:	10800044 	addi	r2,r2,1
  811d68:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  811d6c:	e0bffb17 	ldw	r2,-20(fp)
  811d70:	10800217 	ldw	r2,8(r2)
  811d74:	10c00044 	addi	r3,r2,1
  811d78:	e0bffb17 	ldw	r2,-20(fp)
  811d7c:	10c00215 	stw	r3,8(r2)
  811d80:	e0bffb17 	ldw	r2,-20(fp)
  811d84:	10800217 	ldw	r2,8(r2)
  811d88:	10c00fcc 	andi	r3,r2,63
  811d8c:	e0bffb17 	ldw	r2,-20(fp)
  811d90:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811d94:	e0fff617 	ldw	r3,-40(fp)
  811d98:	e0bffd17 	ldw	r2,-12(fp)
  811d9c:	1880050e 	bge	r3,r2,811db4 <altera_avalon_uart_read+0xd4>
  811da0:	e0bffb17 	ldw	r2,-20(fp)
  811da4:	10c00217 	ldw	r3,8(r2)
  811da8:	e0bffb17 	ldw	r2,-20(fp)
  811dac:	10800317 	ldw	r2,12(r2)
  811db0:	18bfdf1e 	bne	r3,r2,811d30 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811db4:	e0bff617 	ldw	r2,-40(fp)
  811db8:	1004c03a 	cmpne	r2,r2,zero
  811dbc:	1000271e 	bne	r2,zero,811e5c <altera_avalon_uart_read+0x17c>
  811dc0:	e0bffb17 	ldw	r2,-20(fp)
  811dc4:	10c00217 	ldw	r3,8(r2)
  811dc8:	e0bffb17 	ldw	r2,-20(fp)
  811dcc:	10800317 	ldw	r2,12(r2)
  811dd0:	1880221e 	bne	r3,r2,811e5c <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  811dd4:	e0bff917 	ldw	r2,-28(fp)
  811dd8:	1004c03a 	cmpne	r2,r2,zero
  811ddc:	1000061e 	bne	r2,zero,811df8 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  811de0:	0811f100 	call	811f10 <alt_get_errno>
  811de4:	00c002c4 	movi	r3,11
  811de8:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  811dec:	00800044 	movi	r2,1
  811df0:	e0bff705 	stb	r2,-36(fp)
        break;
  811df4:	00001f06 	br	811e74 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811df8:	0005303a 	rdctl	r2,status
  811dfc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e00:	e0fff517 	ldw	r3,-44(fp)
  811e04:	00bfff84 	movi	r2,-2
  811e08:	1884703a 	and	r2,r3,r2
  811e0c:	1001703a 	wrctl	status,r2
  
  return context;
  811e10:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  811e14:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811e18:	e0bffb17 	ldw	r2,-20(fp)
  811e1c:	10800117 	ldw	r2,4(r2)
  811e20:	10c02014 	ori	r3,r2,128
  811e24:	e0bffb17 	ldw	r2,-20(fp)
  811e28:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811e2c:	e0bffb17 	ldw	r2,-20(fp)
  811e30:	10800017 	ldw	r2,0(r2)
  811e34:	11000304 	addi	r4,r2,12
  811e38:	e0bffb17 	ldw	r2,-20(fp)
  811e3c:	10800117 	ldw	r2,4(r2)
  811e40:	1007883a 	mov	r3,r2
  811e44:	2005883a 	mov	r2,r4
  811e48:	10c00035 	stwio	r3,0(r2)
  811e4c:	e0bffa17 	ldw	r2,-24(fp)
  811e50:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811e54:	e0bff417 	ldw	r2,-48(fp)
  811e58:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  811e5c:	e0bff617 	ldw	r2,-40(fp)
  811e60:	1004c03a 	cmpne	r2,r2,zero
  811e64:	1000031e 	bne	r2,zero,811e74 <altera_avalon_uart_read+0x194>
  811e68:	e0bffd17 	ldw	r2,-12(fp)
  811e6c:	1004c03a 	cmpne	r2,r2,zero
  811e70:	103fc81e 	bne	r2,zero,811d94 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e74:	0005303a 	rdctl	r2,status
  811e78:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e7c:	e0fff317 	ldw	r3,-52(fp)
  811e80:	00bfff84 	movi	r2,-2
  811e84:	1884703a 	and	r2,r3,r2
  811e88:	1001703a 	wrctl	status,r2
  
  return context;
  811e8c:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  811e90:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811e94:	e0bffb17 	ldw	r2,-20(fp)
  811e98:	10800117 	ldw	r2,4(r2)
  811e9c:	10c02014 	ori	r3,r2,128
  811ea0:	e0bffb17 	ldw	r2,-20(fp)
  811ea4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811ea8:	e0bffb17 	ldw	r2,-20(fp)
  811eac:	10800017 	ldw	r2,0(r2)
  811eb0:	11000304 	addi	r4,r2,12
  811eb4:	e0bffb17 	ldw	r2,-20(fp)
  811eb8:	10800117 	ldw	r2,4(r2)
  811ebc:	1007883a 	mov	r3,r2
  811ec0:	2005883a 	mov	r2,r4
  811ec4:	10c00035 	stwio	r3,0(r2)
  811ec8:	e0bffa17 	ldw	r2,-24(fp)
  811ecc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ed0:	e0bff217 	ldw	r2,-56(fp)
  811ed4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  811ed8:	e0bff703 	ldbu	r2,-36(fp)
  811edc:	1005003a 	cmpeq	r2,r2,zero
  811ee0:	1000031e 	bne	r2,zero,811ef0 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  811ee4:	00bffd04 	movi	r2,-12
  811ee8:	e0bfff15 	stw	r2,-4(fp)
  811eec:	00000206 	br	811ef8 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  811ef0:	e0bff617 	ldw	r2,-40(fp)
  811ef4:	e0bfff15 	stw	r2,-4(fp)
  811ef8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  811efc:	e037883a 	mov	sp,fp
  811f00:	dfc00117 	ldw	ra,4(sp)
  811f04:	df000017 	ldw	fp,0(sp)
  811f08:	dec00204 	addi	sp,sp,8
  811f0c:	f800283a 	ret

00811f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811f10:	defffd04 	addi	sp,sp,-12
  811f14:	dfc00215 	stw	ra,8(sp)
  811f18:	df000115 	stw	fp,4(sp)
  811f1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811f20:	00802074 	movhi	r2,129
  811f24:	1095e304 	addi	r2,r2,22412
  811f28:	10800017 	ldw	r2,0(r2)
  811f2c:	1005003a 	cmpeq	r2,r2,zero
  811f30:	1000061e 	bne	r2,zero,811f4c <alt_get_errno+0x3c>
  811f34:	00802074 	movhi	r2,129
  811f38:	1095e304 	addi	r2,r2,22412
  811f3c:	10800017 	ldw	r2,0(r2)
  811f40:	103ee83a 	callr	r2
  811f44:	e0bfff15 	stw	r2,-4(fp)
  811f48:	00000306 	br	811f58 <alt_get_errno+0x48>
  811f4c:	00802074 	movhi	r2,129
  811f50:	109d1404 	addi	r2,r2,29776
  811f54:	e0bfff15 	stw	r2,-4(fp)
  811f58:	e0bfff17 	ldw	r2,-4(fp)
}
  811f5c:	e037883a 	mov	sp,fp
  811f60:	dfc00117 	ldw	ra,4(sp)
  811f64:	df000017 	ldw	fp,0(sp)
  811f68:	dec00204 	addi	sp,sp,8
  811f6c:	f800283a 	ret

00811f70 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  811f70:	defff204 	addi	sp,sp,-56
  811f74:	dfc00d15 	stw	ra,52(sp)
  811f78:	df000c15 	stw	fp,48(sp)
  811f7c:	df000c04 	addi	fp,sp,48
  811f80:	e13ffc15 	stw	r4,-16(fp)
  811f84:	e17ffd15 	stw	r5,-12(fp)
  811f88:	e1bffe15 	stw	r6,-8(fp)
  811f8c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  811f90:	e0bffe17 	ldw	r2,-8(fp)
  811f94:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  811f98:	e0bfff17 	ldw	r2,-4(fp)
  811f9c:	1090000c 	andi	r2,r2,16384
  811fa0:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811fa4:	00004006 	br	8120a8 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811fa8:	e0bffc17 	ldw	r2,-16(fp)
  811fac:	10800517 	ldw	r2,20(r2)
  811fb0:	10800044 	addi	r2,r2,1
  811fb4:	10800fcc 	andi	r2,r2,63
  811fb8:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  811fbc:	e0bffc17 	ldw	r2,-16(fp)
  811fc0:	10c00417 	ldw	r3,16(r2)
  811fc4:	e0bff917 	ldw	r2,-28(fp)
  811fc8:	1880251e 	bne	r3,r2,812060 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  811fcc:	e0bffa17 	ldw	r2,-24(fp)
  811fd0:	1005003a 	cmpeq	r2,r2,zero
  811fd4:	1000051e 	bne	r2,zero,811fec <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  811fd8:	08121380 	call	812138 <alt_get_errno>
  811fdc:	1007883a 	mov	r3,r2
  811fe0:	008002c4 	movi	r2,11
  811fe4:	18800015 	stw	r2,0(r3)
        break;
  811fe8:	00003206 	br	8120b4 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811fec:	0005303a 	rdctl	r2,status
  811ff0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ff4:	e0fff717 	ldw	r3,-36(fp)
  811ff8:	00bfff84 	movi	r2,-2
  811ffc:	1884703a 	and	r2,r3,r2
  812000:	1001703a 	wrctl	status,r2
  
  return context;
  812004:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  812008:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81200c:	e0bffc17 	ldw	r2,-16(fp)
  812010:	10800117 	ldw	r2,4(r2)
  812014:	10c11014 	ori	r3,r2,1088
  812018:	e0bffc17 	ldw	r2,-16(fp)
  81201c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812020:	e0bffc17 	ldw	r2,-16(fp)
  812024:	10800017 	ldw	r2,0(r2)
  812028:	11000304 	addi	r4,r2,12
  81202c:	e0bffc17 	ldw	r2,-16(fp)
  812030:	10800117 	ldw	r2,4(r2)
  812034:	1007883a 	mov	r3,r2
  812038:	2005883a 	mov	r2,r4
  81203c:	10c00035 	stwio	r3,0(r2)
  812040:	e0bffb17 	ldw	r2,-20(fp)
  812044:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812048:	e0bff617 	ldw	r2,-40(fp)
  81204c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  812050:	e0bffc17 	ldw	r2,-16(fp)
  812054:	10c00417 	ldw	r3,16(r2)
  812058:	e0bff917 	ldw	r2,-28(fp)
  81205c:	18bffc26 	beq	r3,r2,812050 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  812060:	e0bff817 	ldw	r2,-32(fp)
  812064:	10bfffc4 	addi	r2,r2,-1
  812068:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  81206c:	e0bffc17 	ldw	r2,-16(fp)
  812070:	10c00517 	ldw	r3,20(r2)
  812074:	e0bffd17 	ldw	r2,-12(fp)
  812078:	10800003 	ldbu	r2,0(r2)
  81207c:	1009883a 	mov	r4,r2
  812080:	e0bffc17 	ldw	r2,-16(fp)
  812084:	1885883a 	add	r2,r3,r2
  812088:	10801704 	addi	r2,r2,92
  81208c:	11000005 	stb	r4,0(r2)
  812090:	e0bffd17 	ldw	r2,-12(fp)
  812094:	10800044 	addi	r2,r2,1
  812098:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  81209c:	e0fffc17 	ldw	r3,-16(fp)
  8120a0:	e0bff917 	ldw	r2,-28(fp)
  8120a4:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8120a8:	e0bff817 	ldw	r2,-32(fp)
  8120ac:	1004c03a 	cmpne	r2,r2,zero
  8120b0:	103fbd1e 	bne	r2,zero,811fa8 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120b4:	0005303a 	rdctl	r2,status
  8120b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120bc:	e0fff517 	ldw	r3,-44(fp)
  8120c0:	00bfff84 	movi	r2,-2
  8120c4:	1884703a 	and	r2,r3,r2
  8120c8:	1001703a 	wrctl	status,r2
  
  return context;
  8120cc:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8120d0:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8120d4:	e0bffc17 	ldw	r2,-16(fp)
  8120d8:	10800117 	ldw	r2,4(r2)
  8120dc:	10c11014 	ori	r3,r2,1088
  8120e0:	e0bffc17 	ldw	r2,-16(fp)
  8120e4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8120e8:	e0bffc17 	ldw	r2,-16(fp)
  8120ec:	10800017 	ldw	r2,0(r2)
  8120f0:	11000304 	addi	r4,r2,12
  8120f4:	e0bffc17 	ldw	r2,-16(fp)
  8120f8:	10800117 	ldw	r2,4(r2)
  8120fc:	1007883a 	mov	r3,r2
  812100:	2005883a 	mov	r2,r4
  812104:	10c00035 	stwio	r3,0(r2)
  812108:	e0bffb17 	ldw	r2,-20(fp)
  81210c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812110:	e0bff417 	ldw	r2,-48(fp)
  812114:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  812118:	e0fffe17 	ldw	r3,-8(fp)
  81211c:	e0bff817 	ldw	r2,-32(fp)
  812120:	1885c83a 	sub	r2,r3,r2
}
  812124:	e037883a 	mov	sp,fp
  812128:	dfc00117 	ldw	ra,4(sp)
  81212c:	df000017 	ldw	fp,0(sp)
  812130:	dec00204 	addi	sp,sp,8
  812134:	f800283a 	ret

00812138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812138:	defffd04 	addi	sp,sp,-12
  81213c:	dfc00215 	stw	ra,8(sp)
  812140:	df000115 	stw	fp,4(sp)
  812144:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812148:	00802074 	movhi	r2,129
  81214c:	1095e304 	addi	r2,r2,22412
  812150:	10800017 	ldw	r2,0(r2)
  812154:	1005003a 	cmpeq	r2,r2,zero
  812158:	1000061e 	bne	r2,zero,812174 <alt_get_errno+0x3c>
  81215c:	00802074 	movhi	r2,129
  812160:	1095e304 	addi	r2,r2,22412
  812164:	10800017 	ldw	r2,0(r2)
  812168:	103ee83a 	callr	r2
  81216c:	e0bfff15 	stw	r2,-4(fp)
  812170:	00000306 	br	812180 <alt_get_errno+0x48>
  812174:	00802074 	movhi	r2,129
  812178:	109d1404 	addi	r2,r2,29776
  81217c:	e0bfff15 	stw	r2,-4(fp)
  812180:	e0bfff17 	ldw	r2,-4(fp)
}
  812184:	e037883a 	mov	sp,fp
  812188:	dfc00117 	ldw	ra,4(sp)
  81218c:	df000017 	ldw	fp,0(sp)
  812190:	dec00204 	addi	sp,sp,8
  812194:	f800283a 	ret

00812198 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812198:	defff404 	addi	sp,sp,-48
  81219c:	df000b15 	stw	fp,44(sp)
  8121a0:	df000b04 	addi	fp,sp,44
  8121a4:	e13ffb15 	stw	r4,-20(fp)
  8121a8:	e17ffc15 	stw	r5,-16(fp)
  8121ac:	e1bffd15 	stw	r6,-12(fp)
  8121b0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8121b4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8121b8:	00802074 	movhi	r2,129
  8121bc:	109d1f04 	addi	r2,r2,29820
  8121c0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8121c4:	1005003a 	cmpeq	r2,r2,zero
  8121c8:	1000411e 	bne	r2,zero,8122d0 <alt_alarm_start+0x138>
  {
    if (alarm)
  8121cc:	e0bffb17 	ldw	r2,-20(fp)
  8121d0:	1005003a 	cmpeq	r2,r2,zero
  8121d4:	10003b1e 	bne	r2,zero,8122c4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8121d8:	e0fffb17 	ldw	r3,-20(fp)
  8121dc:	e0bffd17 	ldw	r2,-12(fp)
  8121e0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8121e4:	e0fffb17 	ldw	r3,-20(fp)
  8121e8:	e0bffe17 	ldw	r2,-8(fp)
  8121ec:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8121f0:	0005303a 	rdctl	r2,status
  8121f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8121f8:	e0fff817 	ldw	r3,-32(fp)
  8121fc:	00bfff84 	movi	r2,-2
  812200:	1884703a 	and	r2,r3,r2
  812204:	1001703a 	wrctl	status,r2
  
  return context;
  812208:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81220c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812210:	00802074 	movhi	r2,129
  812214:	109d2004 	addi	r2,r2,29824
  812218:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81221c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  812220:	e0fffc17 	ldw	r3,-16(fp)
  812224:	e0bff917 	ldw	r2,-28(fp)
  812228:	1885883a 	add	r2,r3,r2
  81222c:	10c00044 	addi	r3,r2,1
  812230:	e0bffb17 	ldw	r2,-20(fp)
  812234:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812238:	e0bffb17 	ldw	r2,-20(fp)
  81223c:	10c00217 	ldw	r3,8(r2)
  812240:	e0bff917 	ldw	r2,-28(fp)
  812244:	1880042e 	bgeu	r3,r2,812258 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  812248:	e0fffb17 	ldw	r3,-20(fp)
  81224c:	00800044 	movi	r2,1
  812250:	18800405 	stb	r2,16(r3)
  812254:	00000206 	br	812260 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  812258:	e0bffb17 	ldw	r2,-20(fp)
  81225c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  812260:	e0fffb17 	ldw	r3,-20(fp)
  812264:	00802074 	movhi	r2,129
  812268:	1095e704 	addi	r2,r2,22428
  81226c:	e0bff615 	stw	r2,-40(fp)
  812270:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812274:	e0fff717 	ldw	r3,-36(fp)
  812278:	e0bff617 	ldw	r2,-40(fp)
  81227c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  812280:	e0bff617 	ldw	r2,-40(fp)
  812284:	10c00017 	ldw	r3,0(r2)
  812288:	e0bff717 	ldw	r2,-36(fp)
  81228c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812290:	e0bff617 	ldw	r2,-40(fp)
  812294:	10c00017 	ldw	r3,0(r2)
  812298:	e0bff717 	ldw	r2,-36(fp)
  81229c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8122a0:	e0fff617 	ldw	r3,-40(fp)
  8122a4:	e0bff717 	ldw	r2,-36(fp)
  8122a8:	18800015 	stw	r2,0(r3)
  8122ac:	e0bffa17 	ldw	r2,-24(fp)
  8122b0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8122b4:	e0bff517 	ldw	r2,-44(fp)
  8122b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8122bc:	e03fff15 	stw	zero,-4(fp)
  8122c0:	00000506 	br	8122d8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8122c4:	00bffa84 	movi	r2,-22
  8122c8:	e0bfff15 	stw	r2,-4(fp)
  8122cc:	00000206 	br	8122d8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8122d0:	00bfde84 	movi	r2,-134
  8122d4:	e0bfff15 	stw	r2,-4(fp)
  8122d8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8122dc:	e037883a 	mov	sp,fp
  8122e0:	df000017 	ldw	fp,0(sp)
  8122e4:	dec00104 	addi	sp,sp,4
  8122e8:	f800283a 	ret

008122ec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8122ec:	defffa04 	addi	sp,sp,-24
  8122f0:	dfc00515 	stw	ra,20(sp)
  8122f4:	df000415 	stw	fp,16(sp)
  8122f8:	df000404 	addi	fp,sp,16
  8122fc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  812300:	00800244 	movi	r2,9
  812304:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  812308:	e13ffc17 	ldw	r4,-16(fp)
  81230c:	014003f4 	movhi	r5,15
  812310:	29509004 	addi	r5,r5,16960
  812314:	0802a640 	call	802a64 <__mulsi3>
  812318:	100b883a 	mov	r5,r2
  81231c:	0100bef4 	movhi	r4,763
  812320:	213c2004 	addi	r4,r4,-3968
  812324:	08024e40 	call	8024e4 <__udivsi3>
  812328:	100b883a 	mov	r5,r2
  81232c:	01200034 	movhi	r4,32768
  812330:	213fffc4 	addi	r4,r4,-1
  812334:	08024e40 	call	8024e4 <__udivsi3>
  812338:	100b883a 	mov	r5,r2
  81233c:	e13fff17 	ldw	r4,-4(fp)
  812340:	08024e40 	call	8024e4 <__udivsi3>
  812344:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  812348:	e0bffd17 	ldw	r2,-12(fp)
  81234c:	1005003a 	cmpeq	r2,r2,zero
  812350:	10002a1e 	bne	r2,zero,8123fc <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  812354:	e03ffe15 	stw	zero,-8(fp)
  812358:	00001706 	br	8123b8 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81235c:	00a00034 	movhi	r2,32768
  812360:	10bfffc4 	addi	r2,r2,-1
  812364:	10bfffc4 	addi	r2,r2,-1
  812368:	103ffe1e 	bne	r2,zero,812364 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81236c:	e13ffc17 	ldw	r4,-16(fp)
  812370:	014003f4 	movhi	r5,15
  812374:	29509004 	addi	r5,r5,16960
  812378:	0802a640 	call	802a64 <__mulsi3>
  81237c:	100b883a 	mov	r5,r2
  812380:	0100bef4 	movhi	r4,763
  812384:	213c2004 	addi	r4,r4,-3968
  812388:	08024e40 	call	8024e4 <__udivsi3>
  81238c:	100b883a 	mov	r5,r2
  812390:	01200034 	movhi	r4,32768
  812394:	213fffc4 	addi	r4,r4,-1
  812398:	08024e40 	call	8024e4 <__udivsi3>
  81239c:	1007883a 	mov	r3,r2
  8123a0:	e0bfff17 	ldw	r2,-4(fp)
  8123a4:	10c5c83a 	sub	r2,r2,r3
  8123a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8123ac:	e0bffe17 	ldw	r2,-8(fp)
  8123b0:	10800044 	addi	r2,r2,1
  8123b4:	e0bffe15 	stw	r2,-8(fp)
  8123b8:	e0fffe17 	ldw	r3,-8(fp)
  8123bc:	e0bffd17 	ldw	r2,-12(fp)
  8123c0:	18bfe616 	blt	r3,r2,81235c <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8123c4:	e13ffc17 	ldw	r4,-16(fp)
  8123c8:	014003f4 	movhi	r5,15
  8123cc:	29509004 	addi	r5,r5,16960
  8123d0:	0802a640 	call	802a64 <__mulsi3>
  8123d4:	100b883a 	mov	r5,r2
  8123d8:	0100bef4 	movhi	r4,763
  8123dc:	213c2004 	addi	r4,r4,-3968
  8123e0:	08024e40 	call	8024e4 <__udivsi3>
  8123e4:	1009883a 	mov	r4,r2
  8123e8:	e17fff17 	ldw	r5,-4(fp)
  8123ec:	0802a640 	call	802a64 <__mulsi3>
  8123f0:	10bfffc4 	addi	r2,r2,-1
  8123f4:	103ffe1e 	bne	r2,zero,8123f0 <alt_busy_sleep+0x104>
  8123f8:	00000d06 	br	812430 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8123fc:	e13ffc17 	ldw	r4,-16(fp)
  812400:	014003f4 	movhi	r5,15
  812404:	29509004 	addi	r5,r5,16960
  812408:	0802a640 	call	802a64 <__mulsi3>
  81240c:	100b883a 	mov	r5,r2
  812410:	0100bef4 	movhi	r4,763
  812414:	213c2004 	addi	r4,r4,-3968
  812418:	08024e40 	call	8024e4 <__udivsi3>
  81241c:	1009883a 	mov	r4,r2
  812420:	e17fff17 	ldw	r5,-4(fp)
  812424:	0802a640 	call	802a64 <__mulsi3>
  812428:	10bfffc4 	addi	r2,r2,-1
  81242c:	00bffe16 	blt	zero,r2,812428 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  812430:	0005883a 	mov	r2,zero
}
  812434:	e037883a 	mov	sp,fp
  812438:	dfc00117 	ldw	ra,4(sp)
  81243c:	df000017 	ldw	fp,0(sp)
  812440:	dec00204 	addi	sp,sp,8
  812444:	f800283a 	ret

00812448 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812448:	deffff04 	addi	sp,sp,-4
  81244c:	df000015 	stw	fp,0(sp)
  812450:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812454:	e037883a 	mov	sp,fp
  812458:	df000017 	ldw	fp,0(sp)
  81245c:	dec00104 	addi	sp,sp,4
  812460:	f800283a 	ret

00812464 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812464:	defff904 	addi	sp,sp,-28
  812468:	dfc00615 	stw	ra,24(sp)
  81246c:	df000515 	stw	fp,20(sp)
  812470:	df000504 	addi	fp,sp,20
  812474:	e13ffd15 	stw	r4,-12(fp)
  812478:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81247c:	e0bffd17 	ldw	r2,-12(fp)
  812480:	1005003a 	cmpeq	r2,r2,zero
  812484:	1000041e 	bne	r2,zero,812498 <alt_dev_llist_insert+0x34>
  812488:	e0bffd17 	ldw	r2,-12(fp)
  81248c:	10800217 	ldw	r2,8(r2)
  812490:	1004c03a 	cmpne	r2,r2,zero
  812494:	1000071e 	bne	r2,zero,8124b4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  812498:	08125180 	call	812518 <alt_get_errno>
  81249c:	1007883a 	mov	r3,r2
  8124a0:	00800584 	movi	r2,22
  8124a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8124a8:	00bffa84 	movi	r2,-22
  8124ac:	e0bfff15 	stw	r2,-4(fp)
  8124b0:	00001306 	br	812500 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8124b4:	e0fffd17 	ldw	r3,-12(fp)
  8124b8:	e0bffe17 	ldw	r2,-8(fp)
  8124bc:	e0bffb15 	stw	r2,-20(fp)
  8124c0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8124c4:	e0fffc17 	ldw	r3,-16(fp)
  8124c8:	e0bffb17 	ldw	r2,-20(fp)
  8124cc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8124d0:	e0bffb17 	ldw	r2,-20(fp)
  8124d4:	10c00017 	ldw	r3,0(r2)
  8124d8:	e0bffc17 	ldw	r2,-16(fp)
  8124dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8124e0:	e0bffb17 	ldw	r2,-20(fp)
  8124e4:	10c00017 	ldw	r3,0(r2)
  8124e8:	e0bffc17 	ldw	r2,-16(fp)
  8124ec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8124f0:	e0fffb17 	ldw	r3,-20(fp)
  8124f4:	e0bffc17 	ldw	r2,-16(fp)
  8124f8:	18800015 	stw	r2,0(r3)

  return 0;  
  8124fc:	e03fff15 	stw	zero,-4(fp)
  812500:	e0bfff17 	ldw	r2,-4(fp)
}
  812504:	e037883a 	mov	sp,fp
  812508:	dfc00117 	ldw	ra,4(sp)
  81250c:	df000017 	ldw	fp,0(sp)
  812510:	dec00204 	addi	sp,sp,8
  812514:	f800283a 	ret

00812518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812518:	defffd04 	addi	sp,sp,-12
  81251c:	dfc00215 	stw	ra,8(sp)
  812520:	df000115 	stw	fp,4(sp)
  812524:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812528:	00802074 	movhi	r2,129
  81252c:	1095e304 	addi	r2,r2,22412
  812530:	10800017 	ldw	r2,0(r2)
  812534:	1005003a 	cmpeq	r2,r2,zero
  812538:	1000061e 	bne	r2,zero,812554 <alt_get_errno+0x3c>
  81253c:	00802074 	movhi	r2,129
  812540:	1095e304 	addi	r2,r2,22412
  812544:	10800017 	ldw	r2,0(r2)
  812548:	103ee83a 	callr	r2
  81254c:	e0bfff15 	stw	r2,-4(fp)
  812550:	00000306 	br	812560 <alt_get_errno+0x48>
  812554:	00802074 	movhi	r2,129
  812558:	109d1404 	addi	r2,r2,29776
  81255c:	e0bfff15 	stw	r2,-4(fp)
  812560:	e0bfff17 	ldw	r2,-4(fp)
}
  812564:	e037883a 	mov	sp,fp
  812568:	dfc00117 	ldw	ra,4(sp)
  81256c:	df000017 	ldw	fp,0(sp)
  812570:	dec00204 	addi	sp,sp,8
  812574:	f800283a 	ret

00812578 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812578:	defffd04 	addi	sp,sp,-12
  81257c:	dfc00215 	stw	ra,8(sp)
  812580:	df000115 	stw	fp,4(sp)
  812584:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812588:	00bfff04 	movi	r2,-4
  81258c:	00c02074 	movhi	r3,129
  812590:	18ccb304 	addi	r3,r3,13004
  812594:	1885883a 	add	r2,r3,r2
  812598:	e0bfff15 	stw	r2,-4(fp)
  81259c:	00000606 	br	8125b8 <_do_ctors+0x40>
        (*ctor) (); 
  8125a0:	e0bfff17 	ldw	r2,-4(fp)
  8125a4:	10800017 	ldw	r2,0(r2)
  8125a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8125ac:	e0bfff17 	ldw	r2,-4(fp)
  8125b0:	10bfff04 	addi	r2,r2,-4
  8125b4:	e0bfff15 	stw	r2,-4(fp)
  8125b8:	e0ffff17 	ldw	r3,-4(fp)
  8125bc:	00802074 	movhi	r2,129
  8125c0:	108cb204 	addi	r2,r2,13000
  8125c4:	18bff62e 	bgeu	r3,r2,8125a0 <_do_ctors+0x28>
        (*ctor) (); 
}
  8125c8:	e037883a 	mov	sp,fp
  8125cc:	dfc00117 	ldw	ra,4(sp)
  8125d0:	df000017 	ldw	fp,0(sp)
  8125d4:	dec00204 	addi	sp,sp,8
  8125d8:	f800283a 	ret

008125dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8125dc:	defffd04 	addi	sp,sp,-12
  8125e0:	dfc00215 	stw	ra,8(sp)
  8125e4:	df000115 	stw	fp,4(sp)
  8125e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8125ec:	00bfff04 	movi	r2,-4
  8125f0:	00c02074 	movhi	r3,129
  8125f4:	18ccb304 	addi	r3,r3,13004
  8125f8:	1885883a 	add	r2,r3,r2
  8125fc:	e0bfff15 	stw	r2,-4(fp)
  812600:	00000606 	br	81261c <_do_dtors+0x40>
        (*dtor) (); 
  812604:	e0bfff17 	ldw	r2,-4(fp)
  812608:	10800017 	ldw	r2,0(r2)
  81260c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812610:	e0bfff17 	ldw	r2,-4(fp)
  812614:	10bfff04 	addi	r2,r2,-4
  812618:	e0bfff15 	stw	r2,-4(fp)
  81261c:	e0ffff17 	ldw	r3,-4(fp)
  812620:	00802074 	movhi	r2,129
  812624:	108cb304 	addi	r2,r2,13004
  812628:	18bff62e 	bgeu	r3,r2,812604 <_do_dtors+0x28>
        (*dtor) (); 
}
  81262c:	e037883a 	mov	sp,fp
  812630:	dfc00117 	ldw	ra,4(sp)
  812634:	df000017 	ldw	fp,0(sp)
  812638:	dec00204 	addi	sp,sp,8
  81263c:	f800283a 	ret

00812640 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812640:	defff904 	addi	sp,sp,-28
  812644:	dfc00615 	stw	ra,24(sp)
  812648:	df000515 	stw	fp,20(sp)
  81264c:	df000504 	addi	fp,sp,20
  812650:	e13ffd15 	stw	r4,-12(fp)
  812654:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812658:	e0bffe17 	ldw	r2,-8(fp)
  81265c:	10800017 	ldw	r2,0(r2)
  812660:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812664:	e13ffd17 	ldw	r4,-12(fp)
  812668:	0804c8c0 	call	804c8c <strlen>
  81266c:	10800044 	addi	r2,r2,1
  812670:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812674:	00000d06 	br	8126ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812678:	e0bffc17 	ldw	r2,-16(fp)
  81267c:	11000217 	ldw	r4,8(r2)
  812680:	e1bffb17 	ldw	r6,-20(fp)
  812684:	e17ffd17 	ldw	r5,-12(fp)
  812688:	0812f0c0 	call	812f0c <memcmp>
  81268c:	1004c03a 	cmpne	r2,r2,zero
  812690:	1000031e 	bne	r2,zero,8126a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812694:	e0bffc17 	ldw	r2,-16(fp)
  812698:	e0bfff15 	stw	r2,-4(fp)
  81269c:	00000706 	br	8126bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8126a0:	e0bffc17 	ldw	r2,-16(fp)
  8126a4:	10800017 	ldw	r2,0(r2)
  8126a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8126ac:	e0fffe17 	ldw	r3,-8(fp)
  8126b0:	e0bffc17 	ldw	r2,-16(fp)
  8126b4:	10fff01e 	bne	r2,r3,812678 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8126b8:	e03fff15 	stw	zero,-4(fp)
  8126bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8126c0:	e037883a 	mov	sp,fp
  8126c4:	dfc00117 	ldw	ra,4(sp)
  8126c8:	df000017 	ldw	fp,0(sp)
  8126cc:	dec00204 	addi	sp,sp,8
  8126d0:	f800283a 	ret

008126d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8126d4:	defffa04 	addi	sp,sp,-24
  8126d8:	dfc00515 	stw	ra,20(sp)
  8126dc:	df000415 	stw	fp,16(sp)
  8126e0:	df000404 	addi	fp,sp,16
  8126e4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8126e8:	00802074 	movhi	r2,129
  8126ec:	1095de04 	addi	r2,r2,22392
  8126f0:	10800017 	ldw	r2,0(r2)
  8126f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8126f8:	00003306 	br	8127c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8126fc:	e0bffd17 	ldw	r2,-12(fp)
  812700:	11000217 	ldw	r4,8(r2)
  812704:	0804c8c0 	call	804c8c <strlen>
  812708:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81270c:	e0bffd17 	ldw	r2,-12(fp)
  812710:	10c00217 	ldw	r3,8(r2)
  812714:	e0bffc17 	ldw	r2,-16(fp)
  812718:	1885883a 	add	r2,r3,r2
  81271c:	10bfffc4 	addi	r2,r2,-1
  812720:	10800003 	ldbu	r2,0(r2)
  812724:	10803fcc 	andi	r2,r2,255
  812728:	1080201c 	xori	r2,r2,128
  81272c:	10bfe004 	addi	r2,r2,-128
  812730:	10800bd8 	cmpnei	r2,r2,47
  812734:	1000031e 	bne	r2,zero,812744 <alt_find_file+0x70>
    {
      len -= 1;
  812738:	e0bffc17 	ldw	r2,-16(fp)
  81273c:	10bfffc4 	addi	r2,r2,-1
  812740:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812744:	e0bffc17 	ldw	r2,-16(fp)
  812748:	1007883a 	mov	r3,r2
  81274c:	e0bffe17 	ldw	r2,-8(fp)
  812750:	1885883a 	add	r2,r3,r2
  812754:	10800003 	ldbu	r2,0(r2)
  812758:	10803fcc 	andi	r2,r2,255
  81275c:	1080201c 	xori	r2,r2,128
  812760:	10bfe004 	addi	r2,r2,-128
  812764:	10800be0 	cmpeqi	r2,r2,47
  812768:	10000a1e 	bne	r2,zero,812794 <alt_find_file+0xc0>
  81276c:	e0bffc17 	ldw	r2,-16(fp)
  812770:	1007883a 	mov	r3,r2
  812774:	e0bffe17 	ldw	r2,-8(fp)
  812778:	1885883a 	add	r2,r3,r2
  81277c:	10800003 	ldbu	r2,0(r2)
  812780:	10803fcc 	andi	r2,r2,255
  812784:	1080201c 	xori	r2,r2,128
  812788:	10bfe004 	addi	r2,r2,-128
  81278c:	1004c03a 	cmpne	r2,r2,zero
  812790:	10000a1e 	bne	r2,zero,8127bc <alt_find_file+0xe8>
  812794:	e0bffd17 	ldw	r2,-12(fp)
  812798:	11000217 	ldw	r4,8(r2)
  81279c:	e1bffc17 	ldw	r6,-16(fp)
  8127a0:	e17ffe17 	ldw	r5,-8(fp)
  8127a4:	0812f0c0 	call	812f0c <memcmp>
  8127a8:	1004c03a 	cmpne	r2,r2,zero
  8127ac:	1000031e 	bne	r2,zero,8127bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8127b0:	e0bffd17 	ldw	r2,-12(fp)
  8127b4:	e0bfff15 	stw	r2,-4(fp)
  8127b8:	00000806 	br	8127dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8127bc:	e0bffd17 	ldw	r2,-12(fp)
  8127c0:	10800017 	ldw	r2,0(r2)
  8127c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8127c8:	00c02074 	movhi	r3,129
  8127cc:	18d5de04 	addi	r3,r3,22392
  8127d0:	e0bffd17 	ldw	r2,-12(fp)
  8127d4:	10ffc91e 	bne	r2,r3,8126fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8127d8:	e03fff15 	stw	zero,-4(fp)
  8127dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8127e0:	e037883a 	mov	sp,fp
  8127e4:	dfc00117 	ldw	ra,4(sp)
  8127e8:	df000017 	ldw	fp,0(sp)
  8127ec:	dec00204 	addi	sp,sp,8
  8127f0:	f800283a 	ret

008127f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8127f4:	defffa04 	addi	sp,sp,-24
  8127f8:	dfc00515 	stw	ra,20(sp)
  8127fc:	df000415 	stw	fp,16(sp)
  812800:	dc000315 	stw	r16,12(sp)
  812804:	df000304 	addi	fp,sp,12
  812808:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81280c:	00bffa04 	movi	r2,-24
  812810:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812814:	e03ffe15 	stw	zero,-8(fp)
  812818:	00002006 	br	81289c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  81281c:	e13ffe17 	ldw	r4,-8(fp)
  812820:	04002074 	movhi	r16,129
  812824:	8410e604 	addi	r16,r16,17304
  812828:	01400304 	movi	r5,12
  81282c:	0802a640 	call	802a64 <__mulsi3>
  812830:	1405883a 	add	r2,r2,r16
  812834:	10800017 	ldw	r2,0(r2)
  812838:	1004c03a 	cmpne	r2,r2,zero
  81283c:	1000141e 	bne	r2,zero,812890 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  812840:	e13ffe17 	ldw	r4,-8(fp)
  812844:	04002074 	movhi	r16,129
  812848:	8410e604 	addi	r16,r16,17304
  81284c:	01400304 	movi	r5,12
  812850:	0802a640 	call	802a64 <__mulsi3>
  812854:	1407883a 	add	r3,r2,r16
  812858:	e0bfff17 	ldw	r2,-4(fp)
  81285c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  812860:	00802074 	movhi	r2,129
  812864:	1095e204 	addi	r2,r2,22408
  812868:	10c00017 	ldw	r3,0(r2)
  81286c:	e0bffe17 	ldw	r2,-8(fp)
  812870:	1880040e 	bge	r3,r2,812884 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  812874:	00c02074 	movhi	r3,129
  812878:	18d5e204 	addi	r3,r3,22408
  81287c:	e0bffe17 	ldw	r2,-8(fp)
  812880:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  812884:	e0bffe17 	ldw	r2,-8(fp)
  812888:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  81288c:	00000606 	br	8128a8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812890:	e0bffe17 	ldw	r2,-8(fp)
  812894:	10800044 	addi	r2,r2,1
  812898:	e0bffe15 	stw	r2,-8(fp)
  81289c:	e0bffe17 	ldw	r2,-8(fp)
  8128a0:	10800810 	cmplti	r2,r2,32
  8128a4:	103fdd1e 	bne	r2,zero,81281c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8128a8:	e0bffd17 	ldw	r2,-12(fp)
}
  8128ac:	e037883a 	mov	sp,fp
  8128b0:	dfc00217 	ldw	ra,8(sp)
  8128b4:	df000117 	ldw	fp,4(sp)
  8128b8:	dc000017 	ldw	r16,0(sp)
  8128bc:	dec00304 	addi	sp,sp,12
  8128c0:	f800283a 	ret

008128c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8128c4:	deffff04 	addi	sp,sp,-4
  8128c8:	df000015 	stw	fp,0(sp)
  8128cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  8128d0:	e037883a 	mov	sp,fp
  8128d4:	df000017 	ldw	fp,0(sp)
  8128d8:	dec00104 	addi	sp,sp,4
  8128dc:	f800283a 	ret

008128e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8128e0:	defff904 	addi	sp,sp,-28
  8128e4:	dfc00615 	stw	ra,24(sp)
  8128e8:	df000515 	stw	fp,20(sp)
  8128ec:	df000504 	addi	fp,sp,20
  8128f0:	e13ffc15 	stw	r4,-16(fp)
  8128f4:	e17ffd15 	stw	r5,-12(fp)
  8128f8:	e1bffe15 	stw	r6,-8(fp)
  8128fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812900:	e0800217 	ldw	r2,8(fp)
  812904:	d8800015 	stw	r2,0(sp)
  812908:	e13ffc17 	ldw	r4,-16(fp)
  81290c:	e17ffd17 	ldw	r5,-12(fp)
  812910:	e1bffe17 	ldw	r6,-8(fp)
  812914:	e1ffff17 	ldw	r7,-4(fp)
  812918:	0812ab40 	call	812ab4 <alt_iic_isr_register>
}  
  81291c:	e037883a 	mov	sp,fp
  812920:	dfc00117 	ldw	ra,4(sp)
  812924:	df000017 	ldw	fp,0(sp)
  812928:	dec00204 	addi	sp,sp,8
  81292c:	f800283a 	ret

00812930 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812930:	defff904 	addi	sp,sp,-28
  812934:	df000615 	stw	fp,24(sp)
  812938:	df000604 	addi	fp,sp,24
  81293c:	e13ffe15 	stw	r4,-8(fp)
  812940:	e17fff15 	stw	r5,-4(fp)
  812944:	e0bfff17 	ldw	r2,-4(fp)
  812948:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81294c:	0005303a 	rdctl	r2,status
  812950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812954:	e0fffb17 	ldw	r3,-20(fp)
  812958:	00bfff84 	movi	r2,-2
  81295c:	1884703a 	and	r2,r3,r2
  812960:	1001703a 	wrctl	status,r2
  
  return context;
  812964:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812968:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  81296c:	e0fffc17 	ldw	r3,-16(fp)
  812970:	00800044 	movi	r2,1
  812974:	10c4983a 	sll	r2,r2,r3
  812978:	1007883a 	mov	r3,r2
  81297c:	00802074 	movhi	r2,129
  812980:	109d1b04 	addi	r2,r2,29804
  812984:	10800017 	ldw	r2,0(r2)
  812988:	1886b03a 	or	r3,r3,r2
  81298c:	00802074 	movhi	r2,129
  812990:	109d1b04 	addi	r2,r2,29804
  812994:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812998:	00802074 	movhi	r2,129
  81299c:	109d1b04 	addi	r2,r2,29804
  8129a0:	10800017 	ldw	r2,0(r2)
  8129a4:	100170fa 	wrctl	ienable,r2
  8129a8:	e0bffd17 	ldw	r2,-12(fp)
  8129ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8129b0:	e0bffa17 	ldw	r2,-24(fp)
  8129b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8129b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8129bc:	e037883a 	mov	sp,fp
  8129c0:	df000017 	ldw	fp,0(sp)
  8129c4:	dec00104 	addi	sp,sp,4
  8129c8:	f800283a 	ret

008129cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8129cc:	defff904 	addi	sp,sp,-28
  8129d0:	df000615 	stw	fp,24(sp)
  8129d4:	df000604 	addi	fp,sp,24
  8129d8:	e13ffe15 	stw	r4,-8(fp)
  8129dc:	e17fff15 	stw	r5,-4(fp)
  8129e0:	e0bfff17 	ldw	r2,-4(fp)
  8129e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8129e8:	0005303a 	rdctl	r2,status
  8129ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8129f0:	e0fffb17 	ldw	r3,-20(fp)
  8129f4:	00bfff84 	movi	r2,-2
  8129f8:	1884703a 	and	r2,r3,r2
  8129fc:	1001703a 	wrctl	status,r2
  
  return context;
  812a00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812a04:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  812a08:	e0fffc17 	ldw	r3,-16(fp)
  812a0c:	00800044 	movi	r2,1
  812a10:	10c4983a 	sll	r2,r2,r3
  812a14:	0084303a 	nor	r2,zero,r2
  812a18:	1007883a 	mov	r3,r2
  812a1c:	00802074 	movhi	r2,129
  812a20:	109d1b04 	addi	r2,r2,29804
  812a24:	10800017 	ldw	r2,0(r2)
  812a28:	1886703a 	and	r3,r3,r2
  812a2c:	00802074 	movhi	r2,129
  812a30:	109d1b04 	addi	r2,r2,29804
  812a34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812a38:	00802074 	movhi	r2,129
  812a3c:	109d1b04 	addi	r2,r2,29804
  812a40:	10800017 	ldw	r2,0(r2)
  812a44:	100170fa 	wrctl	ienable,r2
  812a48:	e0bffd17 	ldw	r2,-12(fp)
  812a4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a50:	e0bffa17 	ldw	r2,-24(fp)
  812a54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812a58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  812a5c:	e037883a 	mov	sp,fp
  812a60:	df000017 	ldw	fp,0(sp)
  812a64:	dec00104 	addi	sp,sp,4
  812a68:	f800283a 	ret

00812a6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  812a6c:	defffc04 	addi	sp,sp,-16
  812a70:	df000315 	stw	fp,12(sp)
  812a74:	df000304 	addi	fp,sp,12
  812a78:	e13ffe15 	stw	r4,-8(fp)
  812a7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  812a80:	000530fa 	rdctl	r2,ienable
  812a84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  812a88:	e0ffff17 	ldw	r3,-4(fp)
  812a8c:	00800044 	movi	r2,1
  812a90:	10c4983a 	sll	r2,r2,r3
  812a94:	1007883a 	mov	r3,r2
  812a98:	e0bffd17 	ldw	r2,-12(fp)
  812a9c:	1884703a 	and	r2,r3,r2
  812aa0:	1004c03a 	cmpne	r2,r2,zero
}
  812aa4:	e037883a 	mov	sp,fp
  812aa8:	df000017 	ldw	fp,0(sp)
  812aac:	dec00104 	addi	sp,sp,4
  812ab0:	f800283a 	ret

00812ab4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812ab4:	defff404 	addi	sp,sp,-48
  812ab8:	dfc00b15 	stw	ra,44(sp)
  812abc:	df000a15 	stw	fp,40(sp)
  812ac0:	df000a04 	addi	fp,sp,40
  812ac4:	e13ffb15 	stw	r4,-20(fp)
  812ac8:	e17ffc15 	stw	r5,-16(fp)
  812acc:	e1bffd15 	stw	r6,-12(fp)
  812ad0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  812ad4:	00bffa84 	movi	r2,-22
  812ad8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812adc:	e0bffc17 	ldw	r2,-16(fp)
  812ae0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812ae4:	e0bff917 	ldw	r2,-28(fp)
  812ae8:	10800808 	cmpgei	r2,r2,32
  812aec:	1000291e 	bne	r2,zero,812b94 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812af0:	0005303a 	rdctl	r2,status
  812af4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812af8:	e0fff717 	ldw	r3,-36(fp)
  812afc:	00bfff84 	movi	r2,-2
  812b00:	1884703a 	and	r2,r3,r2
  812b04:	1001703a 	wrctl	status,r2
  
  return context;
  812b08:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812b0c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  812b10:	e0bff917 	ldw	r2,-28(fp)
  812b14:	00c020b4 	movhi	r3,130
  812b18:	18e19904 	addi	r3,r3,-31132
  812b1c:	100490fa 	slli	r2,r2,3
  812b20:	10c7883a 	add	r3,r2,r3
  812b24:	e0bffd17 	ldw	r2,-12(fp)
  812b28:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  812b2c:	e0bff917 	ldw	r2,-28(fp)
  812b30:	00c020b4 	movhi	r3,130
  812b34:	18e19904 	addi	r3,r3,-31132
  812b38:	100490fa 	slli	r2,r2,3
  812b3c:	10c5883a 	add	r2,r2,r3
  812b40:	10c00104 	addi	r3,r2,4
  812b44:	e0bffe17 	ldw	r2,-8(fp)
  812b48:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812b4c:	e0bffd17 	ldw	r2,-12(fp)
  812b50:	1005003a 	cmpeq	r2,r2,zero
  812b54:	1000051e 	bne	r2,zero,812b6c <alt_iic_isr_register+0xb8>
  812b58:	e17ff917 	ldw	r5,-28(fp)
  812b5c:	e13ffb17 	ldw	r4,-20(fp)
  812b60:	08129300 	call	812930 <alt_ic_irq_enable>
  812b64:	e0bfff15 	stw	r2,-4(fp)
  812b68:	00000406 	br	812b7c <alt_iic_isr_register+0xc8>
  812b6c:	e17ff917 	ldw	r5,-28(fp)
  812b70:	e13ffb17 	ldw	r4,-20(fp)
  812b74:	08129cc0 	call	8129cc <alt_ic_irq_disable>
  812b78:	e0bfff15 	stw	r2,-4(fp)
  812b7c:	e0bfff17 	ldw	r2,-4(fp)
  812b80:	e0bffa15 	stw	r2,-24(fp)
  812b84:	e0bff817 	ldw	r2,-32(fp)
  812b88:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812b8c:	e0bff617 	ldw	r2,-40(fp)
  812b90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  812b94:	e0bffa17 	ldw	r2,-24(fp)
}
  812b98:	e037883a 	mov	sp,fp
  812b9c:	dfc00117 	ldw	ra,4(sp)
  812ba0:	df000017 	ldw	fp,0(sp)
  812ba4:	dec00204 	addi	sp,sp,8
  812ba8:	f800283a 	ret

00812bac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  812bac:	defff804 	addi	sp,sp,-32
  812bb0:	dfc00715 	stw	ra,28(sp)
  812bb4:	df000615 	stw	fp,24(sp)
  812bb8:	dc000515 	stw	r16,20(sp)
  812bbc:	df000504 	addi	fp,sp,20
  812bc0:	e13ffc15 	stw	r4,-16(fp)
  812bc4:	e17ffd15 	stw	r5,-12(fp)
  812bc8:	e1bffe15 	stw	r6,-8(fp)
  812bcc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  812bd0:	e13ffd17 	ldw	r4,-12(fp)
  812bd4:	e17ffe17 	ldw	r5,-8(fp)
  812bd8:	e1bfff17 	ldw	r6,-4(fp)
  812bdc:	080f5100 	call	80f510 <open>
  812be0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812be4:	e0bffb17 	ldw	r2,-20(fp)
  812be8:	1004803a 	cmplt	r2,r2,zero
  812bec:	10001f1e 	bne	r2,zero,812c6c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  812bf0:	e13ffb17 	ldw	r4,-20(fp)
  812bf4:	04002074 	movhi	r16,129
  812bf8:	8410e604 	addi	r16,r16,17304
  812bfc:	01400304 	movi	r5,12
  812c00:	0802a640 	call	802a64 <__mulsi3>
  812c04:	1405883a 	add	r2,r2,r16
  812c08:	10c00017 	ldw	r3,0(r2)
  812c0c:	e0bffc17 	ldw	r2,-16(fp)
  812c10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812c14:	e13ffb17 	ldw	r4,-20(fp)
  812c18:	04002074 	movhi	r16,129
  812c1c:	8410e604 	addi	r16,r16,17304
  812c20:	01400304 	movi	r5,12
  812c24:	0802a640 	call	802a64 <__mulsi3>
  812c28:	1405883a 	add	r2,r2,r16
  812c2c:	10800104 	addi	r2,r2,4
  812c30:	10c00017 	ldw	r3,0(r2)
  812c34:	e0bffc17 	ldw	r2,-16(fp)
  812c38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812c3c:	e13ffb17 	ldw	r4,-20(fp)
  812c40:	04002074 	movhi	r16,129
  812c44:	8410e604 	addi	r16,r16,17304
  812c48:	01400304 	movi	r5,12
  812c4c:	0802a640 	call	802a64 <__mulsi3>
  812c50:	1405883a 	add	r2,r2,r16
  812c54:	10800204 	addi	r2,r2,8
  812c58:	10c00017 	ldw	r3,0(r2)
  812c5c:	e0bffc17 	ldw	r2,-16(fp)
  812c60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812c64:	e13ffb17 	ldw	r4,-20(fp)
  812c68:	080f8800 	call	80f880 <alt_release_fd>
  }
} 
  812c6c:	e037883a 	mov	sp,fp
  812c70:	dfc00217 	ldw	ra,8(sp)
  812c74:	df000117 	ldw	fp,4(sp)
  812c78:	dc000017 	ldw	r16,0(sp)
  812c7c:	dec00304 	addi	sp,sp,12
  812c80:	f800283a 	ret

00812c84 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812c84:	defffb04 	addi	sp,sp,-20
  812c88:	dfc00415 	stw	ra,16(sp)
  812c8c:	df000315 	stw	fp,12(sp)
  812c90:	df000304 	addi	fp,sp,12
  812c94:	e13ffd15 	stw	r4,-12(fp)
  812c98:	e17ffe15 	stw	r5,-8(fp)
  812c9c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  812ca0:	01002074 	movhi	r4,129
  812ca4:	2110e904 	addi	r4,r4,17316
  812ca8:	e17ffd17 	ldw	r5,-12(fp)
  812cac:	01800044 	movi	r6,1
  812cb0:	01c07fc4 	movi	r7,511
  812cb4:	0812bac0 	call	812bac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  812cb8:	01002074 	movhi	r4,129
  812cbc:	2110e604 	addi	r4,r4,17304
  812cc0:	e17ffe17 	ldw	r5,-8(fp)
  812cc4:	000d883a 	mov	r6,zero
  812cc8:	01c07fc4 	movi	r7,511
  812ccc:	0812bac0 	call	812bac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  812cd0:	01002074 	movhi	r4,129
  812cd4:	2110ec04 	addi	r4,r4,17328
  812cd8:	e17fff17 	ldw	r5,-4(fp)
  812cdc:	01800044 	movi	r6,1
  812ce0:	01c07fc4 	movi	r7,511
  812ce4:	0812bac0 	call	812bac <alt_open_fd>
}  
  812ce8:	e037883a 	mov	sp,fp
  812cec:	dfc00117 	ldw	ra,4(sp)
  812cf0:	df000017 	ldw	fp,0(sp)
  812cf4:	dec00204 	addi	sp,sp,8
  812cf8:	f800283a 	ret

00812cfc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  812cfc:	defffa04 	addi	sp,sp,-24
  812d00:	df000515 	stw	fp,20(sp)
  812d04:	df000504 	addi	fp,sp,20
  812d08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d0c:	0005303a 	rdctl	r2,status
  812d10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d14:	e0fffd17 	ldw	r3,-12(fp)
  812d18:	00bfff84 	movi	r2,-2
  812d1c:	1884703a 	and	r2,r3,r2
  812d20:	1001703a 	wrctl	status,r2
  
  return context;
  812d24:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  812d28:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  812d2c:	e0bfff17 	ldw	r2,-4(fp)
  812d30:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  812d34:	e0bffc17 	ldw	r2,-16(fp)
  812d38:	10c00017 	ldw	r3,0(r2)
  812d3c:	e0bffc17 	ldw	r2,-16(fp)
  812d40:	10800117 	ldw	r2,4(r2)
  812d44:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  812d48:	e0bffc17 	ldw	r2,-16(fp)
  812d4c:	10c00117 	ldw	r3,4(r2)
  812d50:	e0bffc17 	ldw	r2,-16(fp)
  812d54:	10800017 	ldw	r2,0(r2)
  812d58:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  812d5c:	e0fffc17 	ldw	r3,-16(fp)
  812d60:	e0bffc17 	ldw	r2,-16(fp)
  812d64:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  812d68:	e0fffc17 	ldw	r3,-16(fp)
  812d6c:	e0bffc17 	ldw	r2,-16(fp)
  812d70:	18800015 	stw	r2,0(r3)
  812d74:	e0bffe17 	ldw	r2,-8(fp)
  812d78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d7c:	e0bffb17 	ldw	r2,-20(fp)
  812d80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  812d84:	e037883a 	mov	sp,fp
  812d88:	df000017 	ldw	fp,0(sp)
  812d8c:	dec00104 	addi	sp,sp,4
  812d90:	f800283a 	ret

00812d94 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  812d94:	defffb04 	addi	sp,sp,-20
  812d98:	dfc00415 	stw	ra,16(sp)
  812d9c:	df000315 	stw	fp,12(sp)
  812da0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  812da4:	d0a01017 	ldw	r2,-32704(gp)
  812da8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  812dac:	d0a74917 	ldw	r2,-25308(gp)
  812db0:	10800044 	addi	r2,r2,1
  812db4:	d0a74915 	stw	r2,-25308(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  812db8:	00003106 	br	812e80 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  812dbc:	e0bffe17 	ldw	r2,-8(fp)
  812dc0:	10800017 	ldw	r2,0(r2)
  812dc4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  812dc8:	e0bffe17 	ldw	r2,-8(fp)
  812dcc:	10800403 	ldbu	r2,16(r2)
  812dd0:	10803fcc 	andi	r2,r2,255
  812dd4:	1005003a 	cmpeq	r2,r2,zero
  812dd8:	1000051e 	bne	r2,zero,812df0 <alt_tick+0x5c>
  812ddc:	d0a74917 	ldw	r2,-25308(gp)
  812de0:	1004c03a 	cmpne	r2,r2,zero
  812de4:	1000021e 	bne	r2,zero,812df0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  812de8:	e0bffe17 	ldw	r2,-8(fp)
  812dec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  812df0:	e0bffe17 	ldw	r2,-8(fp)
  812df4:	10c00217 	ldw	r3,8(r2)
  812df8:	d0a74917 	ldw	r2,-25308(gp)
  812dfc:	10c01e36 	bltu	r2,r3,812e78 <alt_tick+0xe4>
  812e00:	e0bffe17 	ldw	r2,-8(fp)
  812e04:	10800403 	ldbu	r2,16(r2)
  812e08:	10803fcc 	andi	r2,r2,255
  812e0c:	1004c03a 	cmpne	r2,r2,zero
  812e10:	1000191e 	bne	r2,zero,812e78 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  812e14:	e0bffe17 	ldw	r2,-8(fp)
  812e18:	10c00317 	ldw	r3,12(r2)
  812e1c:	e0bffe17 	ldw	r2,-8(fp)
  812e20:	11000517 	ldw	r4,20(r2)
  812e24:	183ee83a 	callr	r3
  812e28:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  812e2c:	e0bffd17 	ldw	r2,-12(fp)
  812e30:	1004c03a 	cmpne	r2,r2,zero
  812e34:	1000031e 	bne	r2,zero,812e44 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  812e38:	e13ffe17 	ldw	r4,-8(fp)
  812e3c:	0812cfc0 	call	812cfc <alt_alarm_stop>
  812e40:	00000d06 	br	812e78 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  812e44:	e0bffe17 	ldw	r2,-8(fp)
  812e48:	10c00217 	ldw	r3,8(r2)
  812e4c:	e0bffd17 	ldw	r2,-12(fp)
  812e50:	1887883a 	add	r3,r3,r2
  812e54:	e0bffe17 	ldw	r2,-8(fp)
  812e58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  812e5c:	e0bffe17 	ldw	r2,-8(fp)
  812e60:	10c00217 	ldw	r3,8(r2)
  812e64:	d0a74917 	ldw	r2,-25308(gp)
  812e68:	1880032e 	bgeu	r3,r2,812e78 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  812e6c:	e0fffe17 	ldw	r3,-8(fp)
  812e70:	00800044 	movi	r2,1
  812e74:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  812e78:	e0bfff17 	ldw	r2,-4(fp)
  812e7c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  812e80:	d0e01004 	addi	r3,gp,-32704
  812e84:	e0bffe17 	ldw	r2,-8(fp)
  812e88:	10ffcc1e 	bne	r2,r3,812dbc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  812e8c:	e037883a 	mov	sp,fp
  812e90:	dfc00117 	ldw	ra,4(sp)
  812e94:	df000017 	ldw	fp,0(sp)
  812e98:	dec00204 	addi	sp,sp,8
  812e9c:	f800283a 	ret

00812ea0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  812ea0:	deffff04 	addi	sp,sp,-4
  812ea4:	df000015 	stw	fp,0(sp)
  812ea8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812eac:	000170fa 	wrctl	ienable,zero
}
  812eb0:	e037883a 	mov	sp,fp
  812eb4:	df000017 	ldw	fp,0(sp)
  812eb8:	dec00104 	addi	sp,sp,4
  812ebc:	f800283a 	ret

00812ec0 <atexit>:
  812ec0:	200b883a 	mov	r5,r4
  812ec4:	000d883a 	mov	r6,zero
  812ec8:	0009883a 	mov	r4,zero
  812ecc:	000f883a 	mov	r7,zero
  812ed0:	0812f801 	jmpi	812f80 <__register_exitproc>

00812ed4 <exit>:
  812ed4:	defffe04 	addi	sp,sp,-8
  812ed8:	000b883a 	mov	r5,zero
  812edc:	dc000015 	stw	r16,0(sp)
  812ee0:	dfc00115 	stw	ra,4(sp)
  812ee4:	2021883a 	mov	r16,r4
  812ee8:	08130b80 	call	8130b8 <__call_exitprocs>
  812eec:	00802074 	movhi	r2,129
  812ef0:	1095d804 	addi	r2,r2,22368
  812ef4:	11000017 	ldw	r4,0(r2)
  812ef8:	20800f17 	ldw	r2,60(r4)
  812efc:	10000126 	beq	r2,zero,812f04 <exit+0x30>
  812f00:	103ee83a 	callr	r2
  812f04:	8009883a 	mov	r4,r16
  812f08:	08132a80 	call	8132a8 <_exit>

00812f0c <memcmp>:
  812f0c:	00c000c4 	movi	r3,3
  812f10:	1980032e 	bgeu	r3,r6,812f20 <memcmp+0x14>
  812f14:	2144b03a 	or	r2,r4,r5
  812f18:	10c4703a 	and	r2,r2,r3
  812f1c:	10000f26 	beq	r2,zero,812f5c <memcmp+0x50>
  812f20:	31ffffc4 	addi	r7,r6,-1
  812f24:	3000061e 	bne	r6,zero,812f40 <memcmp+0x34>
  812f28:	00000a06 	br	812f54 <memcmp+0x48>
  812f2c:	39ffffc4 	addi	r7,r7,-1
  812f30:	00bfffc4 	movi	r2,-1
  812f34:	21000044 	addi	r4,r4,1
  812f38:	29400044 	addi	r5,r5,1
  812f3c:	38800526 	beq	r7,r2,812f54 <memcmp+0x48>
  812f40:	20c00003 	ldbu	r3,0(r4)
  812f44:	28800003 	ldbu	r2,0(r5)
  812f48:	18bff826 	beq	r3,r2,812f2c <memcmp+0x20>
  812f4c:	1885c83a 	sub	r2,r3,r2
  812f50:	f800283a 	ret
  812f54:	0005883a 	mov	r2,zero
  812f58:	f800283a 	ret
  812f5c:	180f883a 	mov	r7,r3
  812f60:	20c00017 	ldw	r3,0(r4)
  812f64:	28800017 	ldw	r2,0(r5)
  812f68:	18bfed1e 	bne	r3,r2,812f20 <memcmp+0x14>
  812f6c:	31bfff04 	addi	r6,r6,-4
  812f70:	21000104 	addi	r4,r4,4
  812f74:	29400104 	addi	r5,r5,4
  812f78:	39bff936 	bltu	r7,r6,812f60 <memcmp+0x54>
  812f7c:	003fe806 	br	812f20 <memcmp+0x14>

00812f80 <__register_exitproc>:
  812f80:	defffa04 	addi	sp,sp,-24
  812f84:	00802074 	movhi	r2,129
  812f88:	1095d804 	addi	r2,r2,22368
  812f8c:	dc000015 	stw	r16,0(sp)
  812f90:	14000017 	ldw	r16,0(r2)
  812f94:	dd000415 	stw	r20,16(sp)
  812f98:	2829883a 	mov	r20,r5
  812f9c:	81405217 	ldw	r5,328(r16)
  812fa0:	dcc00315 	stw	r19,12(sp)
  812fa4:	dc800215 	stw	r18,8(sp)
  812fa8:	dc400115 	stw	r17,4(sp)
  812fac:	dfc00515 	stw	ra,20(sp)
  812fb0:	2023883a 	mov	r17,r4
  812fb4:	3027883a 	mov	r19,r6
  812fb8:	3825883a 	mov	r18,r7
  812fbc:	28002526 	beq	r5,zero,813054 <__register_exitproc+0xd4>
  812fc0:	29000117 	ldw	r4,4(r5)
  812fc4:	008007c4 	movi	r2,31
  812fc8:	11002716 	blt	r2,r4,813068 <__register_exitproc+0xe8>
  812fcc:	8800101e 	bne	r17,zero,813010 <__register_exitproc+0x90>
  812fd0:	2105883a 	add	r2,r4,r4
  812fd4:	1085883a 	add	r2,r2,r2
  812fd8:	20c00044 	addi	r3,r4,1
  812fdc:	1145883a 	add	r2,r2,r5
  812fe0:	0009883a 	mov	r4,zero
  812fe4:	15000215 	stw	r20,8(r2)
  812fe8:	28c00115 	stw	r3,4(r5)
  812fec:	2005883a 	mov	r2,r4
  812ff0:	dfc00517 	ldw	ra,20(sp)
  812ff4:	dd000417 	ldw	r20,16(sp)
  812ff8:	dcc00317 	ldw	r19,12(sp)
  812ffc:	dc800217 	ldw	r18,8(sp)
  813000:	dc400117 	ldw	r17,4(sp)
  813004:	dc000017 	ldw	r16,0(sp)
  813008:	dec00604 	addi	sp,sp,24
  81300c:	f800283a 	ret
  813010:	29802204 	addi	r6,r5,136
  813014:	00800044 	movi	r2,1
  813018:	110e983a 	sll	r7,r2,r4
  81301c:	30c04017 	ldw	r3,256(r6)
  813020:	2105883a 	add	r2,r4,r4
  813024:	1085883a 	add	r2,r2,r2
  813028:	1185883a 	add	r2,r2,r6
  81302c:	19c6b03a 	or	r3,r3,r7
  813030:	14802015 	stw	r18,128(r2)
  813034:	14c00015 	stw	r19,0(r2)
  813038:	00800084 	movi	r2,2
  81303c:	30c04015 	stw	r3,256(r6)
  813040:	88bfe31e 	bne	r17,r2,812fd0 <__register_exitproc+0x50>
  813044:	30804117 	ldw	r2,260(r6)
  813048:	11c4b03a 	or	r2,r2,r7
  81304c:	30804115 	stw	r2,260(r6)
  813050:	003fdf06 	br	812fd0 <__register_exitproc+0x50>
  813054:	008020b4 	movhi	r2,130
  813058:	10a1d904 	addi	r2,r2,-30876
  81305c:	100b883a 	mov	r5,r2
  813060:	80805215 	stw	r2,328(r16)
  813064:	003fd606 	br	812fc0 <__register_exitproc+0x40>
  813068:	00800034 	movhi	r2,0
  81306c:	10800004 	addi	r2,r2,0
  813070:	1000021e 	bne	r2,zero,81307c <__register_exitproc+0xfc>
  813074:	013fffc4 	movi	r4,-1
  813078:	003fdc06 	br	812fec <__register_exitproc+0x6c>
  81307c:	01006404 	movi	r4,400
  813080:	103ee83a 	callr	r2
  813084:	1007883a 	mov	r3,r2
  813088:	103ffa26 	beq	r2,zero,813074 <__register_exitproc+0xf4>
  81308c:	80805217 	ldw	r2,328(r16)
  813090:	180b883a 	mov	r5,r3
  813094:	18000115 	stw	zero,4(r3)
  813098:	18800015 	stw	r2,0(r3)
  81309c:	80c05215 	stw	r3,328(r16)
  8130a0:	18006215 	stw	zero,392(r3)
  8130a4:	18006315 	stw	zero,396(r3)
  8130a8:	0009883a 	mov	r4,zero
  8130ac:	883fc826 	beq	r17,zero,812fd0 <__register_exitproc+0x50>
  8130b0:	003fd706 	br	813010 <__register_exitproc+0x90>

008130b4 <register_fini>:
  8130b4:	f800283a 	ret

008130b8 <__call_exitprocs>:
  8130b8:	00802074 	movhi	r2,129
  8130bc:	1095d804 	addi	r2,r2,22368
  8130c0:	10800017 	ldw	r2,0(r2)
  8130c4:	defff304 	addi	sp,sp,-52
  8130c8:	df000b15 	stw	fp,44(sp)
  8130cc:	d8800115 	stw	r2,4(sp)
  8130d0:	00800034 	movhi	r2,0
  8130d4:	10800004 	addi	r2,r2,0
  8130d8:	1005003a 	cmpeq	r2,r2,zero
  8130dc:	d8800215 	stw	r2,8(sp)
  8130e0:	d8800117 	ldw	r2,4(sp)
  8130e4:	dd400815 	stw	r21,32(sp)
  8130e8:	dd000715 	stw	r20,28(sp)
  8130ec:	10805204 	addi	r2,r2,328
  8130f0:	dfc00c15 	stw	ra,48(sp)
  8130f4:	ddc00a15 	stw	r23,40(sp)
  8130f8:	dd800915 	stw	r22,36(sp)
  8130fc:	dcc00615 	stw	r19,24(sp)
  813100:	dc800515 	stw	r18,20(sp)
  813104:	dc400415 	stw	r17,16(sp)
  813108:	dc000315 	stw	r16,12(sp)
  81310c:	282b883a 	mov	r21,r5
  813110:	2039883a 	mov	fp,r4
  813114:	d8800015 	stw	r2,0(sp)
  813118:	2829003a 	cmpeq	r20,r5,zero
  81311c:	d8800117 	ldw	r2,4(sp)
  813120:	14405217 	ldw	r17,328(r2)
  813124:	88001026 	beq	r17,zero,813168 <__call_exitprocs+0xb0>
  813128:	ddc00017 	ldw	r23,0(sp)
  81312c:	88800117 	ldw	r2,4(r17)
  813130:	8c802204 	addi	r18,r17,136
  813134:	143fffc4 	addi	r16,r2,-1
  813138:	80000916 	blt	r16,zero,813160 <__call_exitprocs+0xa8>
  81313c:	05bfffc4 	movi	r22,-1
  813140:	a000151e 	bne	r20,zero,813198 <__call_exitprocs+0xe0>
  813144:	8409883a 	add	r4,r16,r16
  813148:	2105883a 	add	r2,r4,r4
  81314c:	1485883a 	add	r2,r2,r18
  813150:	10c02017 	ldw	r3,128(r2)
  813154:	a8c01126 	beq	r21,r3,81319c <__call_exitprocs+0xe4>
  813158:	843fffc4 	addi	r16,r16,-1
  81315c:	85bff81e 	bne	r16,r22,813140 <__call_exitprocs+0x88>
  813160:	d8800217 	ldw	r2,8(sp)
  813164:	10003126 	beq	r2,zero,81322c <__call_exitprocs+0x174>
  813168:	dfc00c17 	ldw	ra,48(sp)
  81316c:	df000b17 	ldw	fp,44(sp)
  813170:	ddc00a17 	ldw	r23,40(sp)
  813174:	dd800917 	ldw	r22,36(sp)
  813178:	dd400817 	ldw	r21,32(sp)
  81317c:	dd000717 	ldw	r20,28(sp)
  813180:	dcc00617 	ldw	r19,24(sp)
  813184:	dc800517 	ldw	r18,20(sp)
  813188:	dc400417 	ldw	r17,16(sp)
  81318c:	dc000317 	ldw	r16,12(sp)
  813190:	dec00d04 	addi	sp,sp,52
  813194:	f800283a 	ret
  813198:	8409883a 	add	r4,r16,r16
  81319c:	88c00117 	ldw	r3,4(r17)
  8131a0:	2105883a 	add	r2,r4,r4
  8131a4:	1445883a 	add	r2,r2,r17
  8131a8:	18ffffc4 	addi	r3,r3,-1
  8131ac:	11800217 	ldw	r6,8(r2)
  8131b0:	1c001526 	beq	r3,r16,813208 <__call_exitprocs+0x150>
  8131b4:	10000215 	stw	zero,8(r2)
  8131b8:	303fe726 	beq	r6,zero,813158 <__call_exitprocs+0xa0>
  8131bc:	00c00044 	movi	r3,1
  8131c0:	1c06983a 	sll	r3,r3,r16
  8131c4:	90804017 	ldw	r2,256(r18)
  8131c8:	8cc00117 	ldw	r19,4(r17)
  8131cc:	1884703a 	and	r2,r3,r2
  8131d0:	10001426 	beq	r2,zero,813224 <__call_exitprocs+0x16c>
  8131d4:	90804117 	ldw	r2,260(r18)
  8131d8:	1884703a 	and	r2,r3,r2
  8131dc:	10000c1e 	bne	r2,zero,813210 <__call_exitprocs+0x158>
  8131e0:	2105883a 	add	r2,r4,r4
  8131e4:	1485883a 	add	r2,r2,r18
  8131e8:	11400017 	ldw	r5,0(r2)
  8131ec:	e009883a 	mov	r4,fp
  8131f0:	303ee83a 	callr	r6
  8131f4:	88800117 	ldw	r2,4(r17)
  8131f8:	98bfc81e 	bne	r19,r2,81311c <__call_exitprocs+0x64>
  8131fc:	b8800017 	ldw	r2,0(r23)
  813200:	147fd526 	beq	r2,r17,813158 <__call_exitprocs+0xa0>
  813204:	003fc506 	br	81311c <__call_exitprocs+0x64>
  813208:	8c000115 	stw	r16,4(r17)
  81320c:	003fea06 	br	8131b8 <__call_exitprocs+0x100>
  813210:	2105883a 	add	r2,r4,r4
  813214:	1485883a 	add	r2,r2,r18
  813218:	11000017 	ldw	r4,0(r2)
  81321c:	303ee83a 	callr	r6
  813220:	003ff406 	br	8131f4 <__call_exitprocs+0x13c>
  813224:	303ee83a 	callr	r6
  813228:	003ff206 	br	8131f4 <__call_exitprocs+0x13c>
  81322c:	88800117 	ldw	r2,4(r17)
  813230:	1000081e 	bne	r2,zero,813254 <__call_exitprocs+0x19c>
  813234:	89000017 	ldw	r4,0(r17)
  813238:	20000726 	beq	r4,zero,813258 <__call_exitprocs+0x1a0>
  81323c:	b9000015 	stw	r4,0(r23)
  813240:	8809883a 	mov	r4,r17
  813244:	00000000 	call	0 <__reset-0x800000>
  813248:	bc400017 	ldw	r17,0(r23)
  81324c:	883fb71e 	bne	r17,zero,81312c <__call_exitprocs+0x74>
  813250:	003fc506 	br	813168 <__call_exitprocs+0xb0>
  813254:	89000017 	ldw	r4,0(r17)
  813258:	882f883a 	mov	r23,r17
  81325c:	2023883a 	mov	r17,r4
  813260:	883fb21e 	bne	r17,zero,81312c <__call_exitprocs+0x74>
  813264:	003fc006 	br	813168 <__call_exitprocs+0xb0>

00813268 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  813268:	defffd04 	addi	sp,sp,-12
  81326c:	df000215 	stw	fp,8(sp)
  813270:	df000204 	addi	fp,sp,8
  813274:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  813278:	e0bfff17 	ldw	r2,-4(fp)
  81327c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  813280:	e0bffe17 	ldw	r2,-8(fp)
  813284:	1005003a 	cmpeq	r2,r2,zero
  813288:	1000021e 	bne	r2,zero,813294 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81328c:	002af070 	cmpltui	zero,zero,43969
  813290:	00000106 	br	813298 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  813294:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  813298:	e037883a 	mov	sp,fp
  81329c:	df000017 	ldw	fp,0(sp)
  8132a0:	dec00104 	addi	sp,sp,4
  8132a4:	f800283a 	ret

008132a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8132a8:	defffd04 	addi	sp,sp,-12
  8132ac:	dfc00215 	stw	ra,8(sp)
  8132b0:	df000115 	stw	fp,4(sp)
  8132b4:	df000104 	addi	fp,sp,4
  8132b8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8132bc:	e13fff17 	ldw	r4,-4(fp)
  8132c0:	08132680 	call	813268 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8132c4:	003fff06 	br	8132c4 <_exit+0x1c>
  8132c8:	008130b4 	movhi	r2,1218
